{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/next7-7/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/alipay.jpg","path":"images/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/favicon-21x24.png","path":"images/favicon-21x24.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/favicon-28x32.png","path":"images/favicon-28x32.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/linkcard.png","path":"images/linkcard.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":1,"renderable":1},{"_id":"themes/next7-7/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next7-7/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next7-7/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next7-7/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next7-7/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next7-7/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next7-7/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/Î¢ÐÅÍ¼Æ¬_2.jpg","path":"images/Î¢ÐÅÍ¼Æ¬_2.jpg","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190520/VMerror.png","path":"images/20190520/VMerror.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190520/VMnet1.png","path":"images/20190520/VMnet1.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190520/VMnet2.png","path":"images/20190520/VMnet2.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190521/01.jpg","path":"images/20190521/01.jpg","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190521/02.jpg","path":"images/20190521/02.jpg","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190521/03.jpg","path":"images/20190521/03.jpg","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190521/04.jpg","path":"images/20190521/04.jpg","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190521/05.jpg","path":"images/20190521/05.jpg","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190521/06.jpg","path":"images/20190521/06.jpg","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190521/09.jpg","path":"images/20190521/09.jpg","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190521/10.jpg","path":"images/20190521/10.jpg","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190521/11.jpg","path":"images/20190521/11.jpg","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190609/VectorTest.png","path":"images/20190609/VectorTest.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190621/DeleteMathTypeRegedit.PNG","path":"images/20190621/DeleteMathTypeRegedit.PNG","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190621/InstallMathType.PNG","path":"images/20190621/InstallMathType.PNG","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190711/iniTest.PNG","path":"images/20190711/iniTest.PNG","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190711/iniTestTree.PNG","path":"images/20190711/iniTestTree.PNG","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190716QT/01.png","path":"images/20190716QT/01.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190716QT/02.png","path":"images/20190716QT/02.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190716QT/03.png","path":"images/20190716QT/03.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190716QT/04.png","path":"images/20190716QT/04.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190716QT/05.png","path":"images/20190716QT/05.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190716QT/07.png","path":"images/20190716QT/07.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190716QT/08.png","path":"images/20190716QT/08.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190716QT/09.png","path":"images/20190716QT/09.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190716QT/11.png","path":"images/20190716QT/11.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190716QT/12.png","path":"images/20190716QT/12.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190716QT/13.png","path":"images/20190716QT/13.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190716QT/14.png","path":"images/20190716QT/14.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190716QT/15.png","path":"images/20190716QT/15.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190716QT/17.png","path":"images/20190716QT/17.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190731VMware/01.png","path":"images/20190731VMware/01.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190731VMware/02.png","path":"images/20190731VMware/02.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190731VMware/03.png","path":"images/20190731VMware/03.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190731VMware/04.png","path":"images/20190731VMware/04.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190731VMware/05.png","path":"images/20190731VMware/05.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190521/08.jpg","path":"images/20190521/08.jpg","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190521/07.jpg","path":"images/20190521/07.jpg","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190731VMware/26.png","path":"images/20190731VMware/26.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190731shrmm/01.png","path":"images/20190731shrmm/01.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190731shrmm/02.png","path":"images/20190731shrmm/02.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190731shrmm/03.png","path":"images/20190731shrmm/03.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190731shrmm/04.png","path":"images/20190731shrmm/04.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190731shrmm/05.png","path":"images/20190731shrmm/05.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190731shrmm/06.png","path":"images/20190731shrmm/06.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190731shrmm/07.png","path":"images/20190731shrmm/07.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190805OpenCV/01.png","path":"images/20190805OpenCV/01.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190831/01.png","path":"images/20190831/01.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190831/02.png","path":"images/20190831/02.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190831/03.png","path":"images/20190831/03.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20191013/02.eps","path":"images/20191013/02.eps","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20191013/02.gif","path":"images/20191013/02.gif","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20191013/03.gif","path":"images/20191013/03.gif","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20191013/04.gif","path":"images/20191013/04.gif","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20191013/05.jpg","path":"images/20191013/05.jpg","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20191013/06.jpg","path":"images/20191013/06.jpg","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20191013/07.jpg","path":"images/20191013/07.jpg","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20191013/08.jpg","path":"images/20191013/08.jpg","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20191013/09.jpg","path":"images/20191013/09.jpg","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20191013/10.jpg","path":"images/20191013/10.jpg","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20191013/11.jpg","path":"images/20191013/11.jpg","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20191013/12.gif","path":"images/20191013/12.gif","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20191013/13.gif","path":"images/20191013/13.gif","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20191013/14.gif","path":"images/20191013/14.gif","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20191013/15.gif","path":"images/20191013/15.gif","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20191013/16.jpg","path":"images/20191013/16.jpg","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20191023/01.gif","path":"images/20191023/01.gif","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20191023/01.wmf","path":"images/20191023/01.wmf","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20191023/02.gif","path":"images/20191023/02.gif","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20191023/02.wmf","path":"images/20191023/02.wmf","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20191023/03.gif","path":"images/20191023/03.gif","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20191023/03.png","path":"images/20191023/03.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20191023/03.wmf","path":"images/20191023/03.wmf","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20191023/04.gif","path":"images/20191023/04.gif","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20191023/04.wmf","path":"images/20191023/04.wmf","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20191023/05.gif","path":"images/20191023/05.gif","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20191023/05.png","path":"images/20191023/05.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20191023/05.wmf","path":"images/20191023/05.wmf","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20191023/CrossProduct.png","path":"images/20191023/CrossProduct.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/background.jpg","path":"images/background.jpg","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/background2.jpg","path":"images/background2.jpg","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/background6.jpg","path":"images/background6.jpg","modified":1,"renderable":1},{"_id":"themes/next7-7/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next7-7/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next7-7/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next7-7/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next7-7/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190520/VMTools.png","path":"images/20190520/VMTools.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190520/VMToolsPackage.png","path":"images/20190520/VMToolsPackage.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190520/VMUSB.png","path":"images/20190520/VMUSB.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190716QT/06.png","path":"images/20190716QT/06.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190716QT/10.png","path":"images/20190716QT/10.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190716QT/16.png","path":"images/20190716QT/16.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190730boost/01.png","path":"images/20190730boost/01.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190730boost/02.png","path":"images/20190730boost/02.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190730boost/03.png","path":"images/20190730boost/03.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190731VMware/25.png","path":"images/20190731VMware/25.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20191023/00.png","path":"images/20191023/00.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/background4.jpg","path":"images/background4.jpg","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/background5.jpg","path":"images/background5.jpg","modified":1,"renderable":1},{"_id":"themes/next7-7/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/background10.jpg","path":"images/background10.jpg","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/background3.jpg","path":"images/background3.jpg","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/background9.jpg","path":"images/background9.jpg","modified":1,"renderable":1},{"_id":"themes/next7-7/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next7-7/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next7-7/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190731VMware/07.png","path":"images/20190731VMware/07.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/background7.jpg","path":"images/background7.jpg","modified":1,"renderable":1},{"_id":"themes/next7-7/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20191023/00.gif","path":"images/20191023/00.gif","modified":1,"renderable":1},{"_id":"themes/next7-7/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next7-7/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/001.jpg","path":"images/001.jpg","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/background8.jpg","path":"images/background8.jpg","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190731VMware/11.png","path":"images/20190731VMware/11.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20191023/CrossProduct.jpg","path":"images/20191023/CrossProduct.jpg","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20191013/01.jpg","path":"images/20191013/01.jpg","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190731VMware/19.png","path":"images/20190731VMware/19.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190731VMware/21.png","path":"images/20190731VMware/21.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190731VMware/23.png","path":"images/20190731VMware/23.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190731VMware/24.png","path":"images/20190731VMware/24.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190731VMware/10.png","path":"images/20190731VMware/10.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190731VMware/16.png","path":"images/20190731VMware/16.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190731VMware/22.png","path":"images/20190731VMware/22.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190731VMware/18.png","path":"images/20190731VMware/18.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190731VMware/20.png","path":"images/20190731VMware/20.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190731VMware/09.png","path":"images/20190731VMware/09.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190731VMware/17.png","path":"images/20190731VMware/17.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190731VMware/13.png","path":"images/20190731VMware/13.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190731VMware/15.png","path":"images/20190731VMware/15.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190731VMware/12.png","path":"images/20190731VMware/12.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190731VMware/14.png","path":"images/20190731VMware/14.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190731VMware/08.png","path":"images/20190731VMware/08.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/background12.png","path":"images/background12.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/background11.png","path":"images/background11.png","modified":1,"renderable":1},{"_id":"themes/next7-7/source/images/20190521/GitHub±àÐ´²©¿ÍÊÓÆµ½Ì³Ì.wmv","path":"images/20190521/GitHub±àÐ´²©¿ÍÊÓÆµ½Ì³Ì.wmv","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"8b77ead2cea7be4b130a6900d7ae23eb74ca19ed","modified":1572239988467},{"_id":"source/googled6c99a7a9936e6ed.html","hash":"37b8e9008136d4db9244c5f5db6ef419f4a8e860","modified":1572271186647},{"_id":"themes/next7-7/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1577859010000},{"_id":"themes/next7-7/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1577859010000},{"_id":"themes/next7-7/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1577859010000},{"_id":"themes/next7-7/.gitignore","hash":"7b68ca7a46104cf9aa84ec0541a4856ab1836eca","modified":1577859010000},{"_id":"themes/next7-7/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1577859010000},{"_id":"themes/next7-7/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1577859010000},{"_id":"themes/next7-7/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1577859010000},{"_id":"themes/next7-7/README.md","hash":"dc026053a4d9fb97a58dbc3e9060e480f6852b23","modified":1577859010000},{"_id":"themes/next7-7/_config.yml","hash":"cb0de78d31574be5a1e352b994b5fd780d54deeb","modified":1580390211208},{"_id":"themes/next7-7/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1577859010000},{"_id":"themes/next7-7/gulpfile.js","hash":"72e6d5a6e32d5f95d82e4c4d0c963d39555bb760","modified":1577859010000},{"_id":"themes/next7-7/package.json","hash":"19dda7fab09594faba989669e29de88c4289877f","modified":1577859010000},{"_id":"source/_posts/2019-04-28-±êÌâ²åÈëÁ´½Ó.md","hash":"468c064e93bc5361cc723921ba48b3a259ac6bbc","modified":1580306272752},{"_id":"source/_posts/2019-04-28-´úÂë¿é.md","hash":"0976ae4f3447b44f3ad1cc3df7241f38bfa719e4","modified":1580306272752},{"_id":"source/_posts/2019-04-28-¸öÈËÍøÕ¾µÄ´´½¨¼°NexTÄ£°åµÄÊ¹ÓÃ.md","hash":"531854579acb2abd261eac963eca7b911bff10dc","modified":1580306272752},{"_id":"source/_posts/2019-04-28-ÌâÍ·²åÈëÕÕÆ¬.md","hash":"5d90d3f92fcca3af02d559c9ce5b619c38385de5","modified":1580306272756},{"_id":"source/_posts/2019-04-28-Ö÷Ò³ÏÔÊ¾²¿·ÖÄÚÈÝ.md","hash":"a2ad5f992db23b3ca63b2bea1bbf82dd1b370fe2","modified":1580306272756},{"_id":"source/_posts/2019-05-11-MATLABº¯Êý¡ª¡ª¡ªnewrb.md","hash":"e760cb48ce7e3ef75df182367fa7e412e06f05e0","modified":1580306272756},{"_id":"source/_posts/2019-05-11-Ô¶³Ì²Ö¿âÓë±¾µØ²Ö¿âµÄÍ¬²½.md","hash":"9b0edd2b2cbc9a0bdd2b0e494dfd121c6718e8ee","modified":1580306272756},{"_id":"source/_posts/2019-05-13-±Ê¼Ç±¾µçÄÔÑ¡ÐÍ.md","hash":"8c8cfde32ff5fec1da54f4408be0735562f1691c","modified":1580306272756},{"_id":"source/_posts/2019-05-20-VMwareµÄÁªÍø¡¢ÍâÉè¡¢¸´ÖÆÕ³ÌùÎÊÌâ.md","hash":"1477a57c6b838c36e4a65c5a9abf3bdd09a3d132","modified":1580306272760},{"_id":"source/_posts/2019-05-21-GitHubÐ´²©¿ÍµÄ½Ì³Ì.md","hash":"d8467775e1f8576f536c5701fc037f77767bbfff","modified":1580306272760},{"_id":"source/_posts/2019-05-21-Linux±à³Ì»·¾³µÄÅäÖÃ.md","hash":"c8e53ee860ef624f06823ebd45a27732b6ad417c","modified":1580306272760},{"_id":"source/_posts/2019-06-09-C++ÖÐVectorµÄÓÃ·¨.md","hash":"0bf8d2a147106288f8b8fe902d56d61c1476bcfe","modified":1580306272760},{"_id":"source/_posts/2019-06-14-Linux»·¾³ÏÂEmacsµÄÅäÖÃ.md","hash":"56bce19d25d0ea4915feed94ab7252a7f6b5da52","modified":1580306272760},{"_id":"source/_posts/2019-06-21-Win10ÏÂÍêÃÀ°²×°MathTypeµÄ·½·¨.md","hash":"48be3eb2e965c11a7f9fd18830afa421b11dd46a","modified":1580306272764},{"_id":"source/_posts/2019-06-24-Win10ÏÂ°²×°LinuxË«ÏµÍ³µÄ·½·¨.md","hash":"89def35e22672ce55571f8191f2a79fc4fd4c3b9","modified":1580306272764},{"_id":"source/_posts/2019-07-11-C++ÖÐÅäÖÃÎÄ¼þµÄ¶ÁÈ¡.md","hash":"68c2f6b2ec117c3256a46c9f72944801153d0f5d","modified":1580306272764},{"_id":"source/_posts/2019-07-16-LinuxÏÂQT5»·¾³µÄÅäÖÃ.md","hash":"593c8f7f294f70289fb3092848ccd6b238a7cf6d","modified":1580306272768},{"_id":"source/_posts/2019-07-30-LinuxÏÂboost¿âµÄ°²×°.md","hash":"ff1ecc9ab6172b2609f3473ee9373f153eeada84","modified":1580306272768},{"_id":"source/_posts/2019-07-31-LinuxÏÂ¹²ÏíÄÚ´æµÄÊ¹ÓÃ·½·¨.md","hash":"e1eaff6e3d11187357f5cf3c518241b83e48ee1b","modified":1580306272768},{"_id":"source/_posts/2019-07-31-VMwareµÄÏÂUbuntuµÄÀ©ÈÝÎÊÌâ.md","hash":"c9a62aee8a3917e018be1b7f8b37a263ca9b5110","modified":1580306272772},{"_id":"source/_posts/2019-08-03-ROSÓÐÓÃÖ¸Áî¼¯.md","hash":"b48877011d514f917d2da72da33ac3037daa1345","modified":1580306272772},{"_id":"source/_posts/2019-08-05-LinuxÏÂOpenCV¿âµÄ°²×°.md","hash":"78145203d54d0df928ae166805a12270b591cbf1","modified":1580306272772},{"_id":"source/_posts/2019-08-23-2019ÊÀ½ç»úÆ÷ÈË´ó»á²Î¹Û×Ü½á.md","hash":"f6bce66bb9607dc79ac3578d2034ed60767f497d","modified":1580306272772},{"_id":"source/_posts/2019-08-31-C++ÖÐ×÷ÓÃÓò·ûºÅµÄÊ¹ÓÃ.md","hash":"96b11d7eb55ad9d0d56fc70408c90378db5c217c","modified":1580306272772},{"_id":"source/_posts/2019-09-09-Gazebo8µÄ°²×°.md","hash":"5627d87acdc0cc4f60082c25bc6adae1f44e7487","modified":1580306272776},{"_id":"source/_posts/2019-10-13-×ø±êÐý×ª.md","hash":"ee71bda271744ad6e8e3f877d219b39ab48de768","modified":1580306272776},{"_id":"source/_posts/2019-10-23-³£ÓÃµÄÊýÑ§»ù´¡ÖªÊ¶¼¯½õ.md","hash":"91c703b996e6f532a6d1e5fbcd413bb55f5e5786","modified":1580306272776},{"_id":"source/about/index.md","hash":"3e65d61d5eae67a7f03ec3e7a14aa18042e77529","modified":1580308474680},{"_id":"source/categories/index.md","hash":"227c9f8190463b71d07bf56c04679b4ec19b732a","modified":1571978833891},{"_id":"source/tags/index.md","hash":"10364e0260094e5cda9b5ac6175d7b316ea6b314","modified":1580308794190},{"_id":"source/top/index.md","hash":"9ad5901e1eb23d728b9d0a7a50789fafff3119ad","modified":1572322623451},{"_id":"themes/next7-7/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1577859010000},{"_id":"themes/next7-7/.github/CONTRIBUTING.md","hash":"5ef63f34bd3b6bd4d7304d48ce5e0e3e2bead385","modified":1577859010000},{"_id":"themes/next7-7/.github/PULL_REQUEST_TEMPLATE.md","hash":"715dcf9b0429a4a4c7107d6d1d00a34e4cf9aa99","modified":1577859010000},{"_id":"themes/next7-7/.github/config.yml","hash":"e4f4b9afe59bc508c4f7634895b33d7d460a7cb1","modified":1577859010000},{"_id":"themes/next7-7/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1577859010000},{"_id":"themes/next7-7/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1577859010000},{"_id":"themes/next7-7/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1577859010000},{"_id":"themes/next7-7/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1577859010000},{"_id":"themes/next7-7/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1577859010000},{"_id":"themes/next7-7/.github/stale.yml","hash":"941209526c2f7d916c76163c9e1ac1af9d956679","modified":1577859010000},{"_id":"themes/next7-7/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1577859010000},{"_id":"themes/next7-7/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1577859010000},{"_id":"themes/next7-7/docs/ALGOLIA-SEARCH.md","hash":"5b4c013e0598b3211ebd899265936cfdaf7c139f","modified":1577859010000},{"_id":"themes/next7-7/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1577859010000},{"_id":"themes/next7-7/docs/DATA-FILES.md","hash":"40a8089076005e0d26ef7c0db58a2b5b464cda6c","modified":1577859010000},{"_id":"themes/next7-7/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1577859010000},{"_id":"themes/next7-7/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"08cda41b4bcf687facfda19ab39718ec7a05ae54","modified":1577859010000},{"_id":"themes/next7-7/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1577859010000},{"_id":"themes/next7-7/docs/MATH.md","hash":"f520b336f16665e164d6edf075bdcc6aa17b31bc","modified":1577859010000},{"_id":"themes/next7-7/docs/UPDATE-FROM-5.1.X.md","hash":"682937d48bf5d243842a76190921322e26c75247","modified":1577859010000},{"_id":"themes/next7-7/languages/de.yml","hash":"285b294b1dd2ce49b0694beb4fd75ed05dc20ccb","modified":1577859010000},{"_id":"themes/next7-7/languages/default.yml","hash":"89eb0cff04435307e4eccb0d72a653499627d02d","modified":1577859010000},{"_id":"themes/next7-7/languages/en.yml","hash":"89eb0cff04435307e4eccb0d72a653499627d02d","modified":1577859010000},{"_id":"themes/next7-7/languages/es.yml","hash":"3bd0977225a9b9dc3cdc856161b3a77e5993ac4a","modified":1577859010000},{"_id":"themes/next7-7/languages/fa.yml","hash":"35468531ad0236df5b188f28bd1b4bb0c0537faf","modified":1577859010000},{"_id":"themes/next7-7/languages/fr.yml","hash":"5fe560d14824c71ea90b2a76d0c17b2332b9d08a","modified":1577859010000},{"_id":"themes/next7-7/languages/hu.yml","hash":"dd9e4cd2873ed9a9ae7cb89962eeff911de396b4","modified":1577859010000},{"_id":"themes/next7-7/languages/id.yml","hash":"80c3db4c2dbbea0703f6c8f1191218f692899507","modified":1577859010000},{"_id":"themes/next7-7/languages/it.yml","hash":"68ac5a0aa361210f51915e101c842ed1c9464889","modified":1577859010000},{"_id":"themes/next7-7/languages/ja.yml","hash":"e61529ddf80426a5362ed07642216027615bd740","modified":1577859010000},{"_id":"themes/next7-7/languages/ko.yml","hash":"14a162509dc71bb364335c20281d3bccbd2a51f3","modified":1577859010000},{"_id":"themes/next7-7/languages/nl.yml","hash":"4d9b09aff03648cbbbfeb0c51a2d1214320b5ec6","modified":1577859010000},{"_id":"themes/next7-7/languages/pt-BR.yml","hash":"024dcdeb30c93e57cd1ba4cd707f8988dcad2468","modified":1577859010000},{"_id":"themes/next7-7/languages/pt.yml","hash":"88fb58e537a949c013a2adcdaebcbe09543c0bd2","modified":1577859010000},{"_id":"themes/next7-7/languages/ru.yml","hash":"f7d5efd6289845f2375bbee8fe883813de745767","modified":1577859010000},{"_id":"themes/next7-7/languages/tr.yml","hash":"e08d8d6ee9507a7c7d4450bc1c76b435470a3739","modified":1577859010000},{"_id":"themes/next7-7/languages/uk.yml","hash":"e58393cf726401bf50a772392e23507d9e11049e","modified":1577859010000},{"_id":"themes/next7-7/languages/vi.yml","hash":"0c0890ccffcb5cca0893de63ebad66e3ce740707","modified":1577859010000},{"_id":"themes/next7-7/languages/zh-CN.yml","hash":"b585ae4c4e3f8eef3903139a4dd64661a7351f22","modified":1572228971218},{"_id":"themes/next7-7/languages/zh-HK.yml","hash":"6d83daf9df1811e3ae6cde5ad778c888d8027b13","modified":1577859010000},{"_id":"themes/next7-7/languages/zh-TW.yml","hash":"5e395cb492a0b6284f8d2ffdd93f7380db31486f","modified":1577859010000},{"_id":"themes/next7-7/layout/_layout.swig","hash":"29ee038b0d5ffdb45327598733ea968588367769","modified":1577859010000},{"_id":"themes/next7-7/layout/archive.swig","hash":"26526c09a4334099e2141456697696fcd1f9783f","modified":1577859010000},{"_id":"themes/next7-7/layout/category.swig","hash":"c55debb2588e4746b02d31ec249bf0a84fdea260","modified":1577859010000},{"_id":"themes/next7-7/layout/index.swig","hash":"3bc6fb1e9707d74b96e1346d3f03fe6584f764f4","modified":1577859010000},{"_id":"themes/next7-7/layout/page.swig","hash":"e61d64c055b6497a04affc143f47fdd0a6dc495b","modified":1577859010000},{"_id":"themes/next7-7/layout/post.swig","hash":"382d9f9a9b35e1f369585f7f9f9b5dd6fa58d2f0","modified":1577859010000},{"_id":"themes/next7-7/layout/tag.swig","hash":"7ff6e34d557a3da1c6a29ecd97842bf73ff213dc","modified":1577859010000},{"_id":"themes/next7-7/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1577859010000},{"_id":"themes/next7-7/.github/ISSUE_TEMPLATE/bug-report.md","hash":"8ae029084b9ac482adf0fae2a0979dd388476513","modified":1577859010000},{"_id":"themes/next7-7/.github/ISSUE_TEMPLATE/feature-request.md","hash":"7a9526f749205c882d672a4f51e6a3033c80ca6e","modified":1577859010000},{"_id":"themes/next7-7/.github/ISSUE_TEMPLATE/other.md","hash":"89667adbb85c25716dba607cd7a38191acf60736","modified":1577859010000},{"_id":"themes/next7-7/.github/ISSUE_TEMPLATE/question.md","hash":"789a3cceb8f37a4b63b1fb2452a03332a3c365ed","modified":1577859010000},{"_id":"themes/next7-7/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1577859010000},{"_id":"themes/next7-7/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1577859010000},{"_id":"themes/next7-7/docs/ru/README.md","hash":"41b1bef32fb991410ebf559b4c45022549f95215","modified":1577859010000},{"_id":"themes/next7-7/docs/ru/UPDATE-FROM-5.1.X.md","hash":"fe3f5cda1975114884d84bef384a562920d70335","modified":1577859010000},{"_id":"themes/next7-7/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"4245fe9472647226692fcbdd5a52d6e6dcd251bc","modified":1577859010000},{"_id":"themes/next7-7/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1577859010000},{"_id":"themes/next7-7/docs/zh-CN/CONTRIBUTING.md","hash":"17d7203e85a8ce9760c42a853dee0f26a8f7ee4e","modified":1577859010000},{"_id":"themes/next7-7/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1577859010000},{"_id":"themes/next7-7/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1577859010000},{"_id":"themes/next7-7/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"0b0b9ec6ec4a89e701a3b91f8d7d95752d3e241b","modified":1577859010000},{"_id":"themes/next7-7/docs/zh-CN/MATH.md","hash":"f0ffb74de522749c9f2fda46970a61bdafbfbc24","modified":1577859010000},{"_id":"themes/next7-7/docs/zh-CN/README.md","hash":"b6a3611d40863c12804c5846994786119ce3b79f","modified":1577859010000},{"_id":"themes/next7-7/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"7f37327bbcae7ed7d04d187fd5e9bc6bbf14926a","modified":1577859010000},{"_id":"themes/next7-7/layout/_macro/passage-end-tag.swig","hash":"f756e687f07e7ef01d7acb28413a8dc772f40bc7","modified":1572333165067},{"_id":"themes/next7-7/layout/_macro/post-collapse.swig","hash":"815676d904f92748ddf4f529bed2baf066997bc6","modified":1577859010000},{"_id":"themes/next7-7/layout/_macro/post.swig","hash":"024ff83172e64c3b2c0323f8693fe869e6851bf7","modified":1580311046358},{"_id":"themes/next7-7/layout/_macro/sidebar.swig","hash":"e2c9db54cc9e154e882008fde6588b065fadc9a7","modified":1577859010000},{"_id":"themes/next7-7/layout/_partials/comments.swig","hash":"0c4914a5fd08f15beec71940218c814ad9a89f3f","modified":1577859010000},{"_id":"themes/next7-7/layout/_partials/footer.swig","hash":"1ee6335c12773dc43f8b92136770cb10d460c25c","modified":1577859010000},{"_id":"themes/next7-7/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1577859010000},{"_id":"themes/next7-7/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1577859010000},{"_id":"themes/next7-7/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1577859010000},{"_id":"themes/next7-7/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1577859010000},{"_id":"themes/next7-7/layout/_scripts/pjax.swig","hash":"9675acc599ffa546f05a60375c1637b0327be4fd","modified":1577859010000},{"_id":"themes/next7-7/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1577859010000},{"_id":"themes/next7-7/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1577859010000},{"_id":"themes/next7-7/layout/_third-party/baidu-push.swig","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1577859010000},{"_id":"themes/next7-7/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1577859010000},{"_id":"themes/next7-7/layout/_third-party/quicklink.swig","hash":"dd6bd817cb69b5ad5e9746498146314b54054ff8","modified":1577859010000},{"_id":"themes/next7-7/layout/_third-party/rating.swig","hash":"da6a9d14ed10203e378c6e2c00a7b5e7afabca58","modified":1577859010000},{"_id":"themes/next7-7/scripts/events/index.js","hash":"9047d8ae2670e43429b16a7919a08a0a0a81afe0","modified":1577859010000},{"_id":"themes/next7-7/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1577859010000},{"_id":"themes/next7-7/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1577859010000},{"_id":"themes/next7-7/scripts/filters/locals.js","hash":"5bbfdc1c373542159660b7a68ed0b57ca18ad10b","modified":1577859010000},{"_id":"themes/next7-7/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1577859010000},{"_id":"themes/next7-7/scripts/filters/post.js","hash":"5e5035372b3d94a65309334c93303c858e072012","modified":1577859010000},{"_id":"themes/next7-7/scripts/helpers/engine.js","hash":"cb211b6b50913454b1737782e9e2af96cfa40448","modified":1577859010000},{"_id":"themes/next7-7/scripts/helpers/font.js","hash":"32268fb4c59c5b37c1eb1c9582ab630e09e5cc7d","modified":1577859010000},{"_id":"themes/next7-7/scripts/helpers/next-url.js","hash":"58347687b02f7ab5e64bef07525c8efa97c9e8fb","modified":1577859010000},{"_id":"themes/next7-7/scripts/tags/button.js","hash":"1d1d25f7e579d92fa563778dd0f163e8eda190da","modified":1577859010000},{"_id":"themes/next7-7/scripts/tags/caniuse.js","hash":"20e392b8583ba6ae5037449c2c7e191d3927641b","modified":1577859010000},{"_id":"themes/next7-7/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1577859010000},{"_id":"themes/next7-7/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1577859010000},{"_id":"themes/next7-7/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1577859010000},{"_id":"themes/next7-7/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1577859010000},{"_id":"themes/next7-7/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1577859010000},{"_id":"themes/next7-7/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1577859010000},{"_id":"themes/next7-7/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1577859010000},{"_id":"themes/next7-7/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1577859010000},{"_id":"themes/next7-7/source/css/main.styl","hash":"b8354cd3934683aea22d7a78cfdbaaf749ba3646","modified":1580311167645},{"_id":"themes/next7-7/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1571923999000},{"_id":"themes/next7-7/source/images/alipay.jpg","hash":"f7a7c5cc681e517af211433c8effff51656c53ef","modified":1557488219697},{"_id":"themes/next7-7/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1571923999000},{"_id":"themes/next7-7/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1571923999000},{"_id":"themes/next7-7/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1571923999000},{"_id":"themes/next7-7/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1571923999000},{"_id":"themes/next7-7/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1571923999000},{"_id":"themes/next7-7/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1571923999000},{"_id":"themes/next7-7/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1571923999000},{"_id":"themes/next7-7/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1571923999000},{"_id":"themes/next7-7/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1571923999000},{"_id":"themes/next7-7/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1571923999000},{"_id":"themes/next7-7/source/images/favicon-21x24.png","hash":"ec0cb1fe0ce7b78f928f2d7e79426993307efd74","modified":1571986625817},{"_id":"themes/next7-7/source/images/favicon-28x32.png","hash":"e09acff698e6e13a72596542ae5e3f0d1fb4df0d","modified":1571986622731},{"_id":"themes/next7-7/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1571923999000},{"_id":"themes/next7-7/source/images/linkcard.png","hash":"5f68dae7f9f969f119ab953ae4b25c2b1c24e676","modified":1572235312026},{"_id":"themes/next7-7/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1571923999000},{"_id":"themes/next7-7/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1571923999000},{"_id":"themes/next7-7/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1571923999000},{"_id":"themes/next7-7/source/images/wechatpay.jpg","hash":"a38deb25b0c945a788bff202044e23160adfde95","modified":1557488219714},{"_id":"themes/next7-7/source/js/algolia-search.js","hash":"813afcc30feee11d59f297f2d5a96f98fbbd4743","modified":1577859010000},{"_id":"themes/next7-7/source/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1577859010000},{"_id":"themes/next7-7/source/js/local-search.js","hash":"9f3d3ddff86e7b2828772aba915a5ebfd7d9f55f","modified":1577859010000},{"_id":"themes/next7-7/source/js/motion.js","hash":"09f8be6bcc6920546bb06e3f8c0181ec62c70b90","modified":1577859010000},{"_id":"themes/next7-7/source/js/next-boot.js","hash":"f7045763e277e685c271bd4b4c37e531d699ac63","modified":1577859010000},{"_id":"themes/next7-7/source/js/utils.js","hash":"41fa3f7cc18e028263b6fa524a3a95fc93b1b81e","modified":1577859010000},{"_id":"themes/next7-7/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1577859010000},{"_id":"themes/next7-7/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1577859010000},{"_id":"themes/next7-7/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1577859010000},{"_id":"themes/next7-7/source/images/avatar.jpg","hash":"0136a30976a8f83d167a66fee37d36e37ac6f9f8","modified":1557488219703},{"_id":"themes/next7-7/source/images/Î¢ÐÅÍ¼Æ¬_2.jpg","hash":"210f1e2195b185f729208707b2a38f20d39c5bce","modified":1572058145404},{"_id":"themes/next7-7/layout/_partials/head/head-unique.swig","hash":"1638483d2d2dad1da4c841a6fb9f6ee96b850187","modified":1577859010000},{"_id":"themes/next7-7/layout/_partials/head/head.swig","hash":"0172055d118d1d7f4c8379c8495c1ee1aa50c7d9","modified":1577859010000},{"_id":"themes/next7-7/layout/_partials/header/brand.swig","hash":"7487ca8f0e4b16351ea0d6b35dc52b0d32176d57","modified":1577859010000},{"_id":"themes/next7-7/layout/_partials/header/index.swig","hash":"30528a8da30994b1ef9355a72b09b2cd85a7c0e9","modified":1577859010000},{"_id":"themes/next7-7/layout/_partials/header/menu-item.swig","hash":"e6076865dba066c5f0008e22217efb850d5af69c","modified":1577859010000},{"_id":"themes/next7-7/layout/_partials/header/menu.swig","hash":"bbf0c8e42491fac70f4f8165224f1d7d92a040d7","modified":1577859010000},{"_id":"themes/next7-7/layout/_partials/header/sub-menu.swig","hash":"54ba9508a901c295a02c8e34e9cece7c7dcad518","modified":1577859010000},{"_id":"themes/next7-7/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1577859010000},{"_id":"themes/next7-7/layout/_partials/page/page-header.swig","hash":"a56e4f6ad95c106f361d354f828d1ef4810b1d76","modified":1577859010000},{"_id":"themes/next7-7/layout/_partials/post/post-copyright.swig","hash":"94d54b0c65d504f772af1e62424952e092b6c21d","modified":1577859010000},{"_id":"themes/next7-7/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1577859010000},{"_id":"themes/next7-7/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1577859010000},{"_id":"themes/next7-7/layout/_partials/post/post-reward.swig","hash":"78cb2077f50bc3b81130a516ffc04bc1fcea5834","modified":1577859010000},{"_id":"themes/next7-7/layout/_partials/search/algolia-search.swig","hash":"7fa01334a0ba84500e920bb9202baa08067d2ee1","modified":1577859010000},{"_id":"themes/next7-7/layout/_partials/search/index.swig","hash":"d6fa9e4432b87004c5678dfe2d4b2c1f4a702b93","modified":1577859010000},{"_id":"themes/next7-7/layout/_partials/search/localsearch.swig","hash":"733d6874aa4f50d1071e670a554508a5a0094eb3","modified":1577859010000},{"_id":"themes/next7-7/layout/_partials/sidebar/site-overview.swig","hash":"716b78cd90addc4216413719554721cb362b0c18","modified":1577859010000},{"_id":"themes/next7-7/layout/_scripts/pages/schedule.swig","hash":"a2bb0bec243685e670b60a3d54142950adc03af0","modified":1577859010000},{"_id":"themes/next7-7/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1577859010000},{"_id":"themes/next7-7/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1577859010000},{"_id":"themes/next7-7/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1577859010000},{"_id":"themes/next7-7/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1577859010000},{"_id":"themes/next7-7/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1577859010000},{"_id":"themes/next7-7/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1577859010000},{"_id":"themes/next7-7/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1577859010000},{"_id":"themes/next7-7/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1577859010000},{"_id":"themes/next7-7/layout/_third-party/chat/chatra.swig","hash":"fdcf006e1ba2e53eab65e901b6c63159538307ef","modified":1577859010000},{"_id":"themes/next7-7/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1577859010000},{"_id":"themes/next7-7/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1577859010000},{"_id":"themes/next7-7/layout/_third-party/comments/disqus.swig","hash":"1ef172bc041d6f6b6c8c642ea64496a188d79029","modified":1577859010000},{"_id":"themes/next7-7/layout/_third-party/comments/disqusjs.swig","hash":"d3dc3e051e6816cdd576d00cc70b18b8a4c6a495","modified":1577859010000},{"_id":"themes/next7-7/layout/_third-party/comments/gitalk.swig","hash":"ed236103bccbcf608f7d5d5b33b9f995d2f1a7de","modified":1577859010000},{"_id":"themes/next7-7/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1577859010000},{"_id":"themes/next7-7/layout/_third-party/comments/valine.swig","hash":"4d6f9e09ca4056ff6a5d4923e202126a75242183","modified":1577859010000},{"_id":"themes/next7-7/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1577859010000},{"_id":"themes/next7-7/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1577859010000},{"_id":"themes/next7-7/layout/_third-party/math/mathjax.swig","hash":"fb27a38f9a4b8fcba4f637b03904f7a83cc73416","modified":1577859010000},{"_id":"themes/next7-7/layout/_third-party/search/algolia-search.swig","hash":"e456d7a2aaabe55447f78cd952b30d70a6c1e742","modified":1577859010000},{"_id":"themes/next7-7/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1577859010000},{"_id":"themes/next7-7/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1577859010000},{"_id":"themes/next7-7/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d7258d02bcf0dac6c0fd8377c0909ddecb09d1d4","modified":1577859010000},{"_id":"themes/next7-7/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1577859010000},{"_id":"themes/next7-7/layout/_third-party/statistics/firestore.swig","hash":"0ea0bac09b0747bc16fde852164c0eaab2efe02c","modified":1577859010000},{"_id":"themes/next7-7/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1577859010000},{"_id":"themes/next7-7/layout/_third-party/statistics/lean-analytics.swig","hash":"801e1d2f59f7d2db4096c4788b8469b4165f4965","modified":1577859010000},{"_id":"themes/next7-7/layout/_third-party/tags/mermaid.swig","hash":"4958fa997ff6df2b2ce05341f40cc3a81b0f91bb","modified":1577859010000},{"_id":"themes/next7-7/layout/_third-party/tags/pdf.swig","hash":"7fa72dc60c078842979861622839b109683e05a3","modified":1577859010000},{"_id":"themes/next7-7/scripts/events/lib/config.js","hash":"b205d72a56b1827681f0a260c266e0c02065fd08","modified":1577859010000},{"_id":"themes/next7-7/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1577859010000},{"_id":"themes/next7-7/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1577859010000},{"_id":"themes/next7-7/scripts/filters/comment/changyan.js","hash":"1f20213af8da3127701e6bb9da995e5c91be2051","modified":1577859010000},{"_id":"themes/next7-7/scripts/filters/comment/common.js","hash":"0803d4f4d3d02c24417c163ad0b27b60fda79250","modified":1577859010000},{"_id":"themes/next7-7/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1577859010000},{"_id":"themes/next7-7/scripts/filters/comment/disqus.js","hash":"5ba0480c2dbb0626501c90c920be85ce2308103c","modified":1577859010000},{"_id":"themes/next7-7/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1577859010000},{"_id":"themes/next7-7/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1577859010000},{"_id":"themes/next7-7/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1577859010000},{"_id":"themes/next7-7/scripts/filters/comment/valine.js","hash":"e24c4dd78f6e4adee0e7c15eb8bca12eb92452e4","modified":1577859010000},{"_id":"themes/next7-7/source/css/_mixins/Gemini.styl","hash":"2315dd8a7a2c7aabd29efa6193df08e805cb15fc","modified":1577859010000},{"_id":"themes/next7-7/source/css/_mixins/Pisces.styl","hash":"644c1f0b02be9bf59955ebdf496136b3fa4b660b","modified":1577859010000},{"_id":"themes/next7-7/source/css/_mixins/base.styl","hash":"0a25f3df1b5c39794365efde387647da81da884a","modified":1577859010000},{"_id":"themes/next7-7/source/css/_variables/Gemini.styl","hash":"52550138127ae9ebbe049bcdacd94d767c003855","modified":1577859010000},{"_id":"themes/next7-7/source/css/_variables/Mist.styl","hash":"b9d7058db61df7bbd2b58779efe45621a06ffc18","modified":1577859010000},{"_id":"themes/next7-7/source/css/_variables/Muse.styl","hash":"c261d685c5ed0df34718d94bb2ba977c0ed443e6","modified":1577859010000},{"_id":"themes/next7-7/source/css/_variables/Pisces.styl","hash":"50bc57e66331c0f15a4527010b4ca3316ac92403","modified":1577859010000},{"_id":"themes/next7-7/source/css/_variables/base.styl","hash":"d4e817e2b238ace5d7ac568ce0c5380196a6d039","modified":1577859010000},{"_id":"themes/next7-7/source/images/20190520/VMerror.png","hash":"1a0a4e988f46b35676ea64c04a29ea7155078ecb","modified":1567240445532},{"_id":"themes/next7-7/source/images/20190520/VMnet1.png","hash":"a33c87402d849d5b348c2ac599c12d5a7ac6cc80","modified":1558419205205},{"_id":"themes/next7-7/source/images/20190520/VMnet2.png","hash":"1ebafb7082c61c48266d1c38cdf2bbe3f0669df3","modified":1558418911882},{"_id":"themes/next7-7/source/images/20190521/01.jpg","hash":"4bc256b0c21b2e5de06d13c6f231fa07c409cbe3","modified":1559529472073},{"_id":"themes/next7-7/source/images/20190521/02.jpg","hash":"178d33f3bf38bf699098ef143c16f1351b33044a","modified":1559529496146},{"_id":"themes/next7-7/source/images/20190521/03.jpg","hash":"1de3b63406e9b588afe34be66e85e523234deaa0","modified":1559529530272},{"_id":"themes/next7-7/source/images/20190521/04.jpg","hash":"46d48972807ab89211e283dc5fe645807365e326","modified":1559529559989},{"_id":"themes/next7-7/source/images/20190521/05.jpg","hash":"d57fd91bc552bbc95af8ddbba942210a2438fa35","modified":1559529627374},{"_id":"themes/next7-7/source/images/20190521/06.jpg","hash":"32def39c9ee120d05c282d2f3d53f8e93faab09f","modified":1559529696204},{"_id":"themes/next7-7/source/images/20190521/09.jpg","hash":"a5829d0a802db12c6c5d5c91f597c1f93c7c3b9f","modified":1559529833831},{"_id":"themes/next7-7/source/images/20190521/10.jpg","hash":"f475294760131ff461649ba5f7731ac4544673c4","modified":1559529879976},{"_id":"themes/next7-7/source/images/20190521/11.jpg","hash":"025f2d7ab347d83b48910464168aaf72b10817a9","modified":1559529911062},{"_id":"themes/next7-7/source/images/20190609/VectorTest.png","hash":"48eccf8e38524c25ee3f3026ab47cc0f6f20b318","modified":1560079340009},{"_id":"themes/next7-7/source/images/20190621/DeleteMathTypeRegedit.PNG","hash":"4b23b17bc5cef1a0926cba03379fcdcc80103347","modified":1562420907123},{"_id":"themes/next7-7/source/images/20190621/InstallMathType.PNG","hash":"d53e54f2b80cc2a81fdc69e8c1356cf7d4513bfd","modified":1562412896677},{"_id":"themes/next7-7/source/images/20190711/iniTest.PNG","hash":"765d40e5549c4b1dfc74d8de742b7902f5ca1513","modified":1567240445532},{"_id":"themes/next7-7/source/images/20190711/iniTestTree.PNG","hash":"0247c41ad0a9ffd59f850cd71d84c55e1837c7c0","modified":1567240445532},{"_id":"themes/next7-7/source/images/20190716QT/01.png","hash":"1fc0dc9a45e4c7687bb66d73f0b157679ab9bbee","modified":1567240445448},{"_id":"themes/next7-7/source/images/20190716QT/02.png","hash":"a05ebfbd0072d5f33427af0e665843d8b52f9142","modified":1567240445448},{"_id":"themes/next7-7/source/images/20190716QT/03.png","hash":"a4302c09e4a6446e0af7f71eee60813362b56c51","modified":1567240445449},{"_id":"themes/next7-7/source/images/20190716QT/04.png","hash":"cd46a1052a141b3d93cc4323c37934b49e3a1922","modified":1567240445449},{"_id":"themes/next7-7/source/images/20190716QT/05.png","hash":"994c3c59dad7d7b3131a5bfe30bbd74c7ed80fbe","modified":1567240445450},{"_id":"themes/next7-7/source/images/20190716QT/07.png","hash":"92914fb18b74cf126f6e7b30e10cb79243cc9852","modified":1567240445451},{"_id":"themes/next7-7/source/images/20190716QT/08.png","hash":"757fa3cfe1b052537dba90d9c955b477de11a370","modified":1567240445452},{"_id":"themes/next7-7/source/images/20190716QT/09.png","hash":"7f865c453d484e236cf591b7f33cd6d40a716632","modified":1567240445452},{"_id":"themes/next7-7/source/images/20190716QT/11.png","hash":"596f76ea9c23d51c8833d82b4089dc1b97a7eb01","modified":1567240445454},{"_id":"themes/next7-7/source/images/20190716QT/12.png","hash":"a56726f3cb3653e108939d228022d868b4ed6401","modified":1567240445454},{"_id":"themes/next7-7/source/images/20190716QT/13.png","hash":"9b393355a52f6761cb82cd446ed858addcce9fdb","modified":1567240445455},{"_id":"themes/next7-7/source/images/20190716QT/14.png","hash":"6a02089e4fe7a5134c9c72018514a6e3207b1f57","modified":1567240445455},{"_id":"themes/next7-7/source/images/20190716QT/15.png","hash":"fc3ae28c6b4c31f0dba4b731f596f41605e7b89a","modified":1567240445456},{"_id":"themes/next7-7/source/images/20190716QT/17.png","hash":"d22146edd208b5dcc8ddfec8bc95c4c377337383","modified":1567240445457},{"_id":"themes/next7-7/source/images/20190731VMware/01.png","hash":"b12549170b832996933f6b9a4f94ebe382d6cb9b","modified":1567240445460},{"_id":"themes/next7-7/source/images/20190731VMware/02.png","hash":"6474f51de5b63d1ce0432c746a6e665e1f99d06f","modified":1567240445461},{"_id":"themes/next7-7/source/images/20190731VMware/03.png","hash":"483256cbaf39afe044fc6082641d56dae1502509","modified":1567240445461},{"_id":"themes/next7-7/source/images/20190731VMware/04.png","hash":"ffb577bed6f43514e97d50da5364078cf14c4f97","modified":1567240445462},{"_id":"themes/next7-7/source/images/20190731VMware/05.png","hash":"d336f24a8c0618bf726f246a42c51d7554bc7513","modified":1567240445462},{"_id":"themes/next7-7/source/images/20190521/08.jpg","hash":"fa0600f7fd43636bfb29d19ea6e5ec82b6e21b56","modified":1559529782846},{"_id":"themes/next7-7/source/images/20190521/07.jpg","hash":"abe57324647ee09747b3d657dd0f584c117d0c0e","modified":1559529721389},{"_id":"themes/next7-7/source/images/20190731VMware/26.png","hash":"f2482c75d828e5b66ca80d4128f74689cada68c3","modified":1567240445525},{"_id":"themes/next7-7/source/images/20190731shrmm/01.png","hash":"4d2e30ffef170e3ec8bfc703c1bd2b2fac809c66","modified":1567240445525},{"_id":"themes/next7-7/source/images/20190731shrmm/02.png","hash":"1c957881699031d827ee8a9fb7f7e894e1a7e0ff","modified":1567240445526},{"_id":"themes/next7-7/source/images/20190731shrmm/03.png","hash":"bf219f47d543a5b824161ae81050549f36349ade","modified":1567240445526},{"_id":"themes/next7-7/source/images/20190731shrmm/04.png","hash":"71c56fc6d00af2cd85b9ae10489818cbd466e203","modified":1567240445527},{"_id":"themes/next7-7/source/images/20190731shrmm/05.png","hash":"2e4319896273b7ff4ae9897adb501ddeb8b49800","modified":1567240445527},{"_id":"themes/next7-7/source/images/20190731shrmm/06.png","hash":"8a36f0d60b684245e62ed96e8d8975a938392249","modified":1567240445529},{"_id":"themes/next7-7/source/images/20190731shrmm/07.png","hash":"8066f8fa2fc15826a52071c4fa32e813e0d9d5de","modified":1567240445529},{"_id":"themes/next7-7/source/images/20190805OpenCV/01.png","hash":"5624ae266869ac36eee7011daf38f86007cb96fe","modified":1567240445530},{"_id":"themes/next7-7/source/images/20190831/01.png","hash":"7ca7da75ea3a2aadae2d5e95ed07cee20eecc12d","modified":1567242939275},{"_id":"themes/next7-7/source/images/20190831/02.png","hash":"05bb9730ef574755c281f27a11737ba4e45da69e","modified":1567319934487},{"_id":"themes/next7-7/source/images/20190831/03.png","hash":"7f4df38f67665ecbd5b23d6dacc094741df0cfc5","modified":1567320546233},{"_id":"themes/next7-7/source/images/20191013/02.eps","hash":"8446748868bf2a9e191e83ff1a2b713fb8bee60e","modified":1571065076854},{"_id":"themes/next7-7/source/images/20191013/02.gif","hash":"16f7873b21952f65e59cd3ec9aac731e5cd0dcc3","modified":1571065076855},{"_id":"themes/next7-7/source/images/20191013/03.gif","hash":"7487caa0bf67e9fc71f1ce64289d8463cbad9729","modified":1571065162849},{"_id":"themes/next7-7/source/images/20191013/04.gif","hash":"307f9bf6fbb21b52f3de20fe1241fe2daee54a42","modified":1571065076855},{"_id":"themes/next7-7/source/images/20191013/05.jpg","hash":"c0224bd7132213adb6f59cc6754f8c5d83f604ed","modified":1571121948367},{"_id":"themes/next7-7/source/images/20191013/06.jpg","hash":"4a4ad618b90caa27458ca9dcb2294d2968ed1c06","modified":1571121960144},{"_id":"themes/next7-7/source/images/20191013/07.jpg","hash":"3adff1596a3ab1aae6441111f20956859641e51c","modified":1571121967719},{"_id":"themes/next7-7/source/images/20191013/08.jpg","hash":"527a33c8b9bf16658e4af55a9ef2803ccba071c5","modified":1571121972769},{"_id":"themes/next7-7/source/images/20191013/09.jpg","hash":"fbca9eb67297eb4146e2a5d8dcce6444dc1f7fdd","modified":1571121977857},{"_id":"themes/next7-7/source/images/20191013/10.jpg","hash":"55cb396b3bd67665f65a38139d14c5fa207471ba","modified":1571121984138},{"_id":"themes/next7-7/source/images/20191013/11.jpg","hash":"3eeb31188f58900c2231814981c5b3f9553e790b","modified":1571121988941},{"_id":"themes/next7-7/source/images/20191013/12.gif","hash":"96b86302d5c45b93579072df6d52f01758e229f4","modified":1571123099633},{"_id":"themes/next7-7/source/images/20191013/13.gif","hash":"aaeb76291d62b89ed680fc3d7be992a0f39d377a","modified":1571123646157},{"_id":"themes/next7-7/source/images/20191013/14.gif","hash":"83a51e6f806498f336e94e685b4d6327de1db10a","modified":1571124068302},{"_id":"themes/next7-7/source/images/20191013/15.gif","hash":"75b5c2d2bccb7b2b7599a4b7f9e818d2e0b81023","modified":1571658065558},{"_id":"themes/next7-7/source/images/20191013/16.jpg","hash":"e5997e62f2725ac3ea4288d23394cc2a67b7810e","modified":1571744900217},{"_id":"themes/next7-7/source/images/20191023/01.gif","hash":"b91ee779f3df6cbf174a3e096fc29ed9f6594ed7","modified":1571838281700},{"_id":"themes/next7-7/source/images/20191023/01.wmf","hash":"6871a08ea20a3c1fe57009dfc666e74d430fd9f0","modified":1571838274254},{"_id":"themes/next7-7/source/images/20191023/02.gif","hash":"cb6d91dab9f5a366c99a97d7e238dc32005751fa","modified":1571841055386},{"_id":"themes/next7-7/source/images/20191023/02.wmf","hash":"7b03d58af729ee7277c394687b765565d26342d9","modified":1571841047638},{"_id":"themes/next7-7/source/images/20191023/03.gif","hash":"a76d12e0b002435a8036a03f4852e06125a211b7","modified":1571840240664},{"_id":"themes/next7-7/source/images/20191023/03.png","hash":"34a3002a128fbec915b8f9c04b61848fe1d20415","modified":1572175590200},{"_id":"themes/next7-7/source/images/20191023/03.wmf","hash":"43d88f17fc6854a8ff36cfd524ea0e8ea70ebbd6","modified":1571840249662},{"_id":"themes/next7-7/source/images/20191023/04.gif","hash":"4b74d568b9a65686a3b3f8588618908237eb592d","modified":1571839921620},{"_id":"themes/next7-7/source/images/20191023/04.wmf","hash":"d6e1c7c7cc4687b11d66cf75319dfafa35196fcf","modified":1571839912954},{"_id":"themes/next7-7/source/images/20191023/05.gif","hash":"6810aa4080073012b6a89ff05c19a62464553a4b","modified":1571840297517},{"_id":"themes/next7-7/source/images/20191023/05.png","hash":"9c868c8f09e6db2c8177b023dc67c6294fa236a0","modified":1572176788689},{"_id":"themes/next7-7/source/images/20191023/05.wmf","hash":"549302eef7f0c5bcf298d7ca59d82af96f90356c","modified":1571840260326},{"_id":"themes/next7-7/source/images/20191023/CrossProduct.png","hash":"b1df3e820c8c878aa72bab15998c6d787373aea0","modified":1572177123193},{"_id":"themes/next7-7/source/images/background.jpg","hash":"0e5a70f2c6b6d54b58e0bcd4d43528f1616184d9","modified":1572228240131},{"_id":"themes/next7-7/source/images/background2.jpg","hash":"c73abb94e796c57920841bc60b779966bf90c1b7","modified":1572228252526},{"_id":"themes/next7-7/source/images/background6.jpg","hash":"3ef678044c12a8007a6489e51b33e618e67fdc7c","modified":1572229265243},{"_id":"themes/next7-7/source/js/schemes/muse.js","hash":"792f4522a3b0b96584a041a4aca20fcded410079","modified":1577859010000},{"_id":"themes/next7-7/source/js/schemes/pisces.js","hash":"52d139e6f3bc212c8c9b71bc9e57e931920434a6","modified":1577859010000},{"_id":"themes/next7-7/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1577859010000},{"_id":"themes/next7-7/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1577859010000},{"_id":"themes/next7-7/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1577859010000},{"_id":"themes/next7-7/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1577859010000},{"_id":"themes/next7-7/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1577859010000},{"_id":"themes/next7-7/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1577859010000},{"_id":"themes/next7-7/source/images/20190520/VMTools.png","hash":"cc2cfce85f41b90b6df969a9fef9be4fba55dbcc","modified":1567240445530},{"_id":"themes/next7-7/source/images/20190520/VMToolsPackage.png","hash":"e37fc61a0bd1ad5e1a756dcdb60aa1a602583478","modified":1567240445531},{"_id":"themes/next7-7/source/images/20190520/VMUSB.png","hash":"d9d61b2a3bf54477696bfeb3c0276ef0eec71581","modified":1558419317780},{"_id":"themes/next7-7/source/images/20190716QT/06.png","hash":"18149a10c0ae44c4a36115c50304e0e9864a13f2","modified":1567240445451},{"_id":"themes/next7-7/source/images/20190716QT/10.png","hash":"b24afa4e1e60f7cfbc243a24ad7fe68814c9a6f3","modified":1567240445453},{"_id":"themes/next7-7/source/images/20190716QT/16.png","hash":"3c1b4d3a0d79a2cc8ad86be179998319aa3a38a6","modified":1567240445457},{"_id":"themes/next7-7/source/images/20190730boost/01.png","hash":"c94a41cf122d857968fc89c6438ebe2c5805c889","modified":1567240445458},{"_id":"themes/next7-7/source/images/20190730boost/02.png","hash":"2b3f54400275ba7c21b26cb5c1f911eff1f9cd0a","modified":1567240445459},{"_id":"themes/next7-7/source/images/20190730boost/03.png","hash":"cd59df566c32570bff96d7799f7af021f2e83046","modified":1567240445460},{"_id":"themes/next7-7/source/images/20190731VMware/25.png","hash":"2b3c215d64cd3389818c7a5db391cb4b177cbf5e","modified":1567240445524},{"_id":"themes/next7-7/source/images/20191023/00.png","hash":"6e3be76792f7cdbf0f1a70e9b1e14f3419c29732","modified":1572228793982},{"_id":"themes/next7-7/source/images/background4.jpg","hash":"09828d4a67ecd9188ec978e37f4d138ef02d7491","modified":1572229277741},{"_id":"themes/next7-7/source/images/background5.jpg","hash":"f33b3bbfab87ea4f690ca5410d06da2f950b916b","modified":1572229243779},{"_id":"themes/next7-7/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/components/back-to-top-sidebar.styl","hash":"80d359661d08b80ad561b97f8508766b3e1f6d01","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/components/back-to-top.styl","hash":"47ee915d7b0a97e74140a25fbfc01c04d6781534","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/components/components.styl","hash":"112f5e8f1fe5cec4419e87acfbdef0e615ed23f3","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/components/rainbow.styl","hash":"41c7cd1b63d49476ed5fbdd26ab9411d8f44bd05","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/components/reading-progress.styl","hash":"170c4598cbbe49cd1527f94158d97d2320a6b906","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/outline/mobile.styl","hash":"990bd301ce2de0a6b936781c58318f3945d81bc2","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/outline/outline.styl","hash":"44fe82eadbdbb2f66adda37ac83ebd0f85876bfc","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/scaffolding/base.styl","hash":"4f7879a50d4608c46cc2061c725a2564597a45bd","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/scaffolding/buttons.styl","hash":"d8ba44b8e1a0332c5c1079ff65fc83d2918a5865","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/scaffolding/comments.styl","hash":"3faa8a7cdb05ef3f3b02920d381773dfd54270a5","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/scaffolding/tables.styl","hash":"2b52b0eb4c66e06762cf115450da0ca1dd435e75","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1577859010000},{"_id":"themes/next7-7/source/css/_schemes/Gemini/index.styl","hash":"1693ec6b53758ac15d2c7798c789d6ae8af913ea","modified":1577859010000},{"_id":"themes/next7-7/source/css/_schemes/Mist/_header.styl","hash":"4fb385d8533877678440c8faa08b68fa793cb1a2","modified":1577859010000},{"_id":"themes/next7-7/source/css/_schemes/Mist/_layout.styl","hash":"24a086a6904bbf5355a354403c9b0e6069f7eb01","modified":1577859010000},{"_id":"themes/next7-7/source/css/_schemes/Mist/_menu.styl","hash":"48743ac61af37a4de2026667e15a65de5e8cf542","modified":1577859010000},{"_id":"themes/next7-7/source/css/_schemes/Mist/_posts-expand.styl","hash":"e321bd62f5e04d1fdc101a470ec13604e99816a5","modified":1577859010000},{"_id":"themes/next7-7/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1577859010000},{"_id":"themes/next7-7/source/css/_schemes/Muse/_header.styl","hash":"3646e915b0a55f3b66e41d802b082aba88a76e06","modified":1577859010000},{"_id":"themes/next7-7/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1577859010000},{"_id":"themes/next7-7/source/css/_schemes/Muse/_menu.styl","hash":"c6905c694c6fbbf372b53456a0d219701010a110","modified":1577859010000},{"_id":"themes/next7-7/source/css/_schemes/Muse/_sidebar.styl","hash":"eeab294e14abbae231107e1a327e907b25323136","modified":1577859010000},{"_id":"themes/next7-7/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1577859010000},{"_id":"themes/next7-7/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1577859010000},{"_id":"themes/next7-7/source/css/_schemes/Pisces/_header.styl","hash":"f1f81bca31e82ccbd375f0cb9fb8dbb3beac810d","modified":1577859010000},{"_id":"themes/next7-7/source/css/_schemes/Pisces/_layout.styl","hash":"f5abb2ea7746586738fb4e82107fceed041708ee","modified":1577859010000},{"_id":"themes/next7-7/source/css/_schemes/Pisces/_menu.styl","hash":"71a3d7f2242706f7a6b79933a67ef3664cca3a24","modified":1577859010000},{"_id":"themes/next7-7/source/css/_schemes/Pisces/_sidebar.styl","hash":"d7587df06b30042091316d8b1cc58ba361211492","modified":1577859010000},{"_id":"themes/next7-7/source/css/_schemes/Pisces/_sub-menu.styl","hash":"0424a1fcffa1ae82fe70935972a894aca885bf9a","modified":1577859010000},{"_id":"themes/next7-7/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1577859010000},{"_id":"themes/next7-7/source/images/background10.jpg","hash":"e60e0de79184553c78ab1c5b9f12fd0ae395748c","modified":1572270790085},{"_id":"themes/next7-7/source/images/background3.jpg","hash":"9e7ef4e32a2b453e804332ce9af63ed2cae375da","modified":1572185345394},{"_id":"themes/next7-7/source/images/background9.jpg","hash":"bc36ec850324ffaaea9ba0c0ba147c0af15a21fb","modified":1572239733777},{"_id":"themes/next7-7/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1577859010000},{"_id":"themes/next7-7/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1577859010000},{"_id":"themes/next7-7/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1577859010000},{"_id":"themes/next7-7/source/images/20190731VMware/07.png","hash":"9de565eba997ebf220eeb38c903707e8d68e1335","modified":1567240445464},{"_id":"themes/next7-7/source/images/background7.jpg","hash":"ed049b2f1128a77a6d73ece4abf487f38a91a7f9","modified":1572229197643},{"_id":"themes/next7-7/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/components/pages/schedule.styl","hash":"6336c2b129db802221b1fd75e5fbe8aab85c0a1f","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/components/pages/tag-cloud.styl","hash":"7ddb7453bf9b85b01bff136e9d10a7f06baac9e8","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/components/post/post-collapse.styl","hash":"98227b4de364b48b11e21efcf4f1beb2ed3ab329","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/components/post/post-copyright.styl","hash":"4b84f35e7040f9adb5cc540c366d7f9eb4c48bcc","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/components/post/post-eof.styl","hash":"e3ade812b5541eca5b863ad3ff234ea95925bf31","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/components/post/post-expand.styl","hash":"5d5c022aa3b2f89c2f2a178212338bb64804dd75","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/components/post/post-header.styl","hash":"bcba503e956e4b737b062faa66341bd880f16c10","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/components/post/post-nav.styl","hash":"9df5ba77e6cf36129bddc270407215c23c60ff38","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/components/post/post-reward.styl","hash":"eca4d80dd0df1c3b1bc06bd39e6a4bd6c56198df","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/components/post/post.styl","hash":"284249dcfa3b49c5d76210bbb0f74f65fc2f12ea","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/components/third-party/math.styl","hash":"ef66c0a08e4243a25e41408d70ca66682b8dcea1","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/components/third-party/search.styl","hash":"2d9d68a431a334626d463bb1bdfbcd2ea8242e94","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/outline/footer/footer.styl","hash":"f5821481440a0624c8aec5fc85f093de1527095f","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/outline/header/bookmark.styl","hash":"e02b1097a72a7d2ddc45ea8d53aa6d77c25ac407","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/outline/header/github-banner.styl","hash":"0672ea2acf28dcc2cfc5244da36d3387d71a17cb","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/outline/header/header.styl","hash":"4b237e2344f35e9d1f6dbc3842d5e432d478ebfd","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/outline/header/menu.styl","hash":"d5d85d3646d184e0340924addcfd2523fb289d00","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/outline/header/site-meta.styl","hash":"a7ed54e2f52185a7b6bb9a8201f6c3aa74b0cb00","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/outline/header/site-nav.styl","hash":"c27b3056d5e22d3c66d8a152a23634314d5c4a60","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"9b3ff4aa24069eab0e9771437013f45e450d4217","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"95339b71ac90553fb1634c536c9749055e0c788a","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"a237c290e8934d1a8cbbf22b3f30503d9663021d","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"1db4ce981fe9fcb9ee4279395c29553efbb43947","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"e2ad7ccf1865a45548e3f31c70fac2c65d6ef534","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/outline/sidebar/sidebar.styl","hash":"c83d750238d6ac13b65869a909465fe621c464c3","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/outline/sidebar/site-state.styl","hash":"9a18b186b08ec220d1b17cf83812bcdd06077814","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"b492a45422773ab2af06ee345d527ba4c6bbc608","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/scaffolding/highlight/highlight.styl","hash":"b4923515ca8e44aa62e839ce948f759cfd1f896f","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"7213e3d0ad7c95717ecd4e701d6ee9248ef2bf9f","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/scaffolding/tags/label.styl","hash":"5bf28a03ef021c27cfd713971caca5a0b9466fd1","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/scaffolding/tags/note.styl","hash":"1a14c1b92d8a4dd8aabb5949333ac0ac79094c6c","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/scaffolding/tags/pdf.styl","hash":"2dc2a5b7becb11de1d4bdab6b5195588ae878cfc","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/scaffolding/tags/tabs.styl","hash":"d2f0f2171722533bba308f944a2ec727b083582c","modified":1577859010000},{"_id":"themes/next7-7/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1577859010000},{"_id":"themes/next7-7/source/images/20191023/00.gif","hash":"769a1b89fab87bf125a4e23bbb6262a684772a75","modified":1572182891283},{"_id":"themes/next7-7/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1577859010000},{"_id":"themes/next7-7/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1577859010000},{"_id":"themes/next7-7/source/images/001.jpg","hash":"3c5f8eb613d2eff94a50665b3a9ae65afa3e3b8c","modified":1572229226464},{"_id":"themes/next7-7/source/images/background8.jpg","hash":"3c5f8eb613d2eff94a50665b3a9ae65afa3e3b8c","modified":1572229226464},{"_id":"themes/next7-7/source/images/20190731VMware/11.png","hash":"eb7d89a8ed4361b9ece6406dff88c90d0166fe94","modified":1567240445477},{"_id":"themes/next7-7/source/images/20191023/CrossProduct.jpg","hash":"f6fbb778af9ea59be27f4a644d741682a461afae","modified":1571839504542},{"_id":"themes/next7-7/source/images/20191013/01.jpg","hash":"e94fbc5aa03f18698f871803aaaec382a2930767","modified":1570967289564},{"_id":"themes/next7-7/source/images/20190731VMware/19.png","hash":"c12f3535ddc071acc3c3854f9cb2a9c7d6cc1701","modified":1567240445505},{"_id":"themes/next7-7/source/images/20190731VMware/21.png","hash":"bd97075c3ca1ec7634c6947b85ea3526c2ac41d4","modified":1567240445511},{"_id":"themes/next7-7/source/images/20190731VMware/23.png","hash":"e6ec3b2a8b391173ca4f66d23f61531394246645","modified":1567240445518},{"_id":"themes/next7-7/source/images/20190731VMware/24.png","hash":"55d22ab4aad4b8231286d9d07f3869fa37a5d906","modified":1567240445523},{"_id":"themes/next7-7/source/images/20190731VMware/10.png","hash":"041410a81bb1cb4dfb35ff137ad6957525b5209e","modified":1567240445475},{"_id":"themes/next7-7/source/images/20190731VMware/16.png","hash":"5340b00f15fe87989f107e651be938daa4152c72","modified":1567240445496},{"_id":"themes/next7-7/source/images/20190731VMware/22.png","hash":"93d10c56ef333057a61b0a4e6e8979b3b6fc4f8a","modified":1567240445516},{"_id":"themes/next7-7/source/images/20190731VMware/18.png","hash":"9afbd5139d720684f75d53ed852dd5daedc8401f","modified":1567240445502},{"_id":"themes/next7-7/source/images/20190731VMware/20.png","hash":"5726ba62aef3147c57bacba3343483796ff945f7","modified":1567240445509},{"_id":"themes/next7-7/source/images/20190731VMware/09.png","hash":"3f75ba71bde0a262535411a1f18f3d2f7e1173b5","modified":1567240445471},{"_id":"themes/next7-7/source/images/20190731VMware/17.png","hash":"b12d7efcc513f0128e961e4631cc0671d9601749","modified":1567240445499},{"_id":"themes/next7-7/source/images/20190731VMware/13.png","hash":"b343340da173cc73cb413f09224863873dfdef3f","modified":1567240445484},{"_id":"themes/next7-7/source/images/20190731VMware/15.png","hash":"4b81a97592b2fb930912920c037910faca73d353","modified":1567240445492},{"_id":"themes/next7-7/source/images/20190731VMware/12.png","hash":"40e748e64394348a4e8bc6f253ed2e00f702a799","modified":1567240445480},{"_id":"themes/next7-7/source/images/20190731VMware/14.png","hash":"95c4844322a544f517401a2f1b8955e50108bf1e","modified":1567240445488},{"_id":"themes/next7-7/source/images/20190731VMware/08.png","hash":"5ad0c21173539d5e11be2fa8ac5166d9f56ce410","modified":1567240445468},{"_id":"themes/next7-7/source/images/background12.png","hash":"2f9ece665fef54f640fb361571b51a3d06cd8743","modified":1572270841720},{"_id":"themes/next7-7/source/images/background11.png","hash":"ac0f5722ed4dbb0a28d471104f64205e0fa75470","modified":1572270817212},{"_id":"themes/next7-7/source/images/20190521/GitHub±àÐ´²©¿ÍÊÓÆµ½Ì³Ì.wmv","hash":"c3add28a449e47f6e137a55413b139e5687fbdbc","modified":1558421215283},{"_id":"public/baidu_urls.txt","hash":"17ba500fddc12af77c0ed77858db4c6d288da59e","modified":1580392214691},{"_id":"public/atom.xml","hash":"0fe467d7ae056f7eb5f422717c9964a29c28ee2a","modified":1580392214691},{"_id":"public/search.xml","hash":"683b5122c2c296203150916451dc23fc85d10c90","modified":1580392214691},{"_id":"public/sitemap.xml","hash":"a9dd03a47fb3129a78a3a4c38b47e70126c0aebd","modified":1580392214691},{"_id":"public/books/index.html","hash":"5cce267f66c4fa71fce9560f5ab3c5fa960efca2","modified":1580392214691},{"_id":"public/movies/index.html","hash":"2072dfa6271c154a4e19c5dc888a13de7b5373bb","modified":1580392214691},{"_id":"public/googled6c99a7a9936e6ed.html","hash":"285d226eff7f9e450bb06b5f2d6ad415ede28363","modified":1580392214691},{"_id":"public/categories/工科生的基本功/基本数学知识/index.html","hash":"e848179d9a6e4ee8e816ef59751c06550016c418","modified":1580392214691},{"_id":"public/tags/Cola/index.html","hash":"26c391b3a1a67438271e9738d4938c1477812861","modified":1580392214691},{"_id":"public/tags/茶余裨谈/index.html","hash":"2208c82e8b30663d27e17c3ef49b10d3e5104bd4","modified":1580392214691},{"_id":"public/tags/QT/index.html","hash":"21b81cbbef5c8cb89e8f3b4c2dcfe37c4527a12d","modified":1580392214691},{"_id":"public/tags/OpenCV/index.html","hash":"eca8243be1e42212376ffa914fa56a7cb4a10e0c","modified":1580392214691},{"_id":"public/about/index.html","hash":"7f58f2258d11272be11f1353f2a20471442ff49d","modified":1580392214691},{"_id":"public/categories/index.html","hash":"101b578b7bb31134c8b5929628b88c499e8ad5a7","modified":1580392214691},{"_id":"public/tags/index.html","hash":"2cd36ba2bc6506bc49c3acbea7c35e0b1c7945c7","modified":1580392214691},{"_id":"public/top/index.html","hash":"f691ea4cfae7f301461c091936e00eadafa6cd81","modified":1580392214691},{"_id":"public/archives/8586.html","hash":"e03184243425878a86eed829f8f0b9ee8e4d5b87","modified":1580392214691},{"_id":"public/archives/5096.html","hash":"ec853c0c5cca5c18729f11a705f1ff0f603da64b","modified":1580392214691},{"_id":"public/archives/35676.html","hash":"d12c0e8dbaa63cb00133da2ec3119385acc26fd4","modified":1580392214691},{"_id":"public/archives/30969.html","hash":"fc38f180c816808dd6806fcaff661625fa598593","modified":1580392214691},{"_id":"public/archives/16667.html","hash":"2cca188d31e9f19847dfe7a8f9d244557553ae37","modified":1580392214691},{"_id":"public/archives/56535.html","hash":"1588a91c0b76c721ee722c14adb4b5a53b6430d3","modified":1580392214691},{"_id":"public/archives/25595.html","hash":"daf1a3c52afe5f3ca9fed7a61b807fbe02bf2fc3","modified":1580392214691},{"_id":"public/archives/48591.html","hash":"19a3fa4e7ad0b882a465951e8d723ec89da8b29b","modified":1580392214691},{"_id":"public/archives/10600.html","hash":"8c804d30527a3ebef08597e9e6c3899563222aba","modified":1580392214691},{"_id":"public/archives/45371.html","hash":"4475ae0ba16a40191b6904f922dbcde57d5d1976","modified":1580392214691},{"_id":"public/archives/22984.html","hash":"874e5312b557ddf36f737ce0923b579670fe7275","modified":1580392214691},{"_id":"public/archives/24574.html","hash":"6bc01ba55ee209a25c4ccfc052963b6d6f3ee5b7","modified":1580392214691},{"_id":"public/archives/56794.html","hash":"b8d101b1bcd8ac9541c6be1c7791b5f893994f6d","modified":1580392214691},{"_id":"public/archives/22360.html","hash":"1d9d7ef4e5c639703f73868720393c1fe25f80d5","modified":1580392214691},{"_id":"public/archives/20916.html","hash":"8f17b46c37a21453a79172aea9aacb32f40c439d","modified":1580392214691},{"_id":"public/archives/20080.html","hash":"102935eea8edfe346c34a7c825977ed0b7060db5","modified":1580392214691},{"_id":"public/archives/4685.html","hash":"34158107844d931432820d33f1453171959d3dd4","modified":1580392214691},{"_id":"public/archives/45747.html","hash":"7f3ac11c7e026e821874b9cf2b9d5ed644b2e7e8","modified":1580392214691},{"_id":"public/archives/50695.html","hash":"d8fe1466931b02700f636533e5f22fb56db71f79","modified":1580392214691},{"_id":"public/archives/36616.html","hash":"24b16679080c0f2cf62226f656626d323eded113","modified":1580392214691},{"_id":"public/archives/58743.html","hash":"edd9adfcc535a79ae0940b7915b3f49fb695b8c6","modified":1580392214691},{"_id":"public/archives/48200.html","hash":"bf65281b03673220ec6026308985aa0e56449db4","modified":1580392214691},{"_id":"public/archives/37327.html","hash":"e09cb7d8143d22db6ec7537d77249a66591a4008","modified":1580392214691},{"_id":"public/archives/5651.html","hash":"1f2c07fcb817d5e7f9dd2660fbaad270686bfa7f","modified":1580392214691},{"_id":"public/archives/62583.html","hash":"4a5b55acdd39463aee24f69ecc4efd2d89950acb","modified":1580392214691},{"_id":"public/archives/23603.html","hash":"aa8db0e38eabe913c30715afea93db2f36e162c9","modified":1580392214691},{"_id":"public/archives/7130.html","hash":"d7e033615ab900bda77f65e65fd83687f5363612","modified":1580392214691},{"_id":"public/archives/index.html","hash":"90e23f4be59c845b5a99805bfa95a8c466ca76b7","modified":1580392214691},{"_id":"public/archives/page/2/index.html","hash":"89b90c51000839343e1eb2c9c4a46f6563af0352","modified":1580392214691},{"_id":"public/archives/page/3/index.html","hash":"98f6aab70f2948a24d6a699f8d038b03d136ed57","modified":1580392214691},{"_id":"public/archives/2019/index.html","hash":"cc05f25d521bfb46de3d57d39e7ebfbea7483f1f","modified":1580392214691},{"_id":"public/archives/2019/page/2/index.html","hash":"157a609ce51372ce420ed02eb1277a3d029c440d","modified":1580392214691},{"_id":"public/archives/2019/page/3/index.html","hash":"2f2f60912741c151c554fe94d701e0313202f4d9","modified":1580392214691},{"_id":"public/archives/2019/04/index.html","hash":"792bfdb43b946c71d061d5a0a0d998acc9b3f86c","modified":1580392214691},{"_id":"public/archives/2019/05/index.html","hash":"4ab21f18479623b979febb4816cb05836bd237d3","modified":1580392214691},{"_id":"public/archives/2019/06/index.html","hash":"d2c1f21e27b827bb0cf74078f820a6e416f49a40","modified":1580392214691},{"_id":"public/archives/2019/07/index.html","hash":"2bc676a3d8b40c8162651232d5ae0a681cff53e4","modified":1580392214691},{"_id":"public/archives/2019/08/index.html","hash":"7de55e07dad7d30d01b2d32ba977c63ba710f33f","modified":1580392214691},{"_id":"public/archives/2019/09/index.html","hash":"bf066212ea3e6e77dfee14af4e830febb9879d1b","modified":1580392214691},{"_id":"public/archives/2019/10/index.html","hash":"c48a86b94dc07226d8d9178c3dbe86059e7e68ec","modified":1580392214691},{"_id":"public/categories/工科生的基本功/index.html","hash":"25107cc8ef92ff13218e6182a2269d516c9588a5","modified":1580392214691},{"_id":"public/categories/工科生的基本功/page/2/index.html","hash":"bbcaf23ca5e51186d834c3fe0adc5b875e55f431","modified":1580392214691},{"_id":"public/categories/工科生的基本功/page/3/index.html","hash":"f207318a8b0d85e8a7fe6c63a2a3b31a6925b9e3","modified":1580392214691},{"_id":"public/categories/工科生的基本功/GitHub/index.html","hash":"830db82e13a00aedcf0dc8e55265757e97ebc8bb","modified":1580392214691},{"_id":"public/categories/工科生的基本功/快乐码农/index.html","hash":"97cf0795eb4f81a6635da573d959b7fbdad89ace","modified":1580392214691},{"_id":"public/categories/茶余裨谈/index.html","hash":"ca1e3cacbfa2e7cde946ae8798b8eda30342fdef","modified":1580392214691},{"_id":"public/categories/工科生的基本功/软件技术/index.html","hash":"017d1fa4bea781ba5de512d11f70119a46d5f36f","modified":1580392214691},{"_id":"public/categories/机器人控制/index.html","hash":"74763e72d1c5e60152d2667ed18a8b5bcfe63efe","modified":1580392214691},{"_id":"public/index.html","hash":"93962abbf92a2000ff1bdcae0b20efe3bf012202","modified":1580392214691},{"_id":"public/page/2/index.html","hash":"6f1e3562e87fab6d314bd7d1a0f2da1b16bfad18","modified":1580392214691},{"_id":"public/page/3/index.html","hash":"4df0f952f9af950802b4b9b23d56b6edbc599cb8","modified":1580392214691},{"_id":"public/tags/GitHub/index.html","hash":"716639d68586d91b290fe2dbcff5a1f01f3c7411","modified":1580392214691},{"_id":"public/tags/Library/index.html","hash":"38d20a3d0f121f1c6d6757b13557986fdf9d3ee4","modified":1580392214691},{"_id":"public/tags/Library/page/2/index.html","hash":"581d3ada9536c3e45235d85e834caeefacfb2a0d","modified":1580392214691},{"_id":"public/tags/Library/page/3/index.html","hash":"35c937964ebfaf6a5419e046c31c65fd45370d37","modified":1580392214691},{"_id":"public/tags/MATLAB/index.html","hash":"ef8d62b708e95d434cadf26c86ef3b0d1316396a","modified":1580392214691},{"_id":"public/tags/VMware/index.html","hash":"c1bf1fa5c03af92aeba8499120707e5ad816c5c2","modified":1580392214691},{"_id":"public/tags/Linux/index.html","hash":"7c547a72917c3bfda1a13d6b85921492d39f42ef","modified":1580392214691},{"_id":"public/tags/C/index.html","hash":"d88fce83e4ed4faf446bc8ea136047b2a79547c6","modified":1580392214691},{"_id":"public/tags/Windows/index.html","hash":"d42be658ee75238a5da9b47bf26e2922927744d2","modified":1580392214691},{"_id":"public/tags/机器人/index.html","hash":"ffbf22a115cecaeceaa58a6de7ab36d1c8381065","modified":1580392214691},{"_id":"public/tags/ROS/index.html","hash":"f0d11936fd73990728d2939a26bcdf870168da50","modified":1580392214691},{"_id":"public/tags/数学基础/index.html","hash":"8bd81499a077da3a5eac08d01ebb0eb67243d7b2","modified":1580392214691},{"_id":"public/CNAME","hash":"8b77ead2cea7be4b130a6900d7ae23eb74ca19ed","modified":1580392214691},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1580392214691},{"_id":"public/images/alipay.jpg","hash":"f7a7c5cc681e517af211433c8effff51656c53ef","modified":1580392214691},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1580392214691},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1580392214691},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1580392214691},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1580392214691},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1580392214691},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1580392214691},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1580392214691},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1580392214691},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1580392214691},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1580392214691},{"_id":"public/images/favicon-21x24.png","hash":"ec0cb1fe0ce7b78f928f2d7e79426993307efd74","modified":1580392214691},{"_id":"public/images/favicon-28x32.png","hash":"e09acff698e6e13a72596542ae5e3f0d1fb4df0d","modified":1580392214691},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1580392214691},{"_id":"public/images/linkcard.png","hash":"5f68dae7f9f969f119ab953ae4b25c2b1c24e676","modified":1580392214691},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1580392214691},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1580392214691},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1580392214691},{"_id":"public/images/wechatpay.jpg","hash":"a38deb25b0c945a788bff202044e23160adfde95","modified":1580392214691},{"_id":"public/images/20190520/VMerror.png","hash":"1a0a4e988f46b35676ea64c04a29ea7155078ecb","modified":1580392214691},{"_id":"public/images/20190520/VMnet1.png","hash":"a33c87402d849d5b348c2ac599c12d5a7ac6cc80","modified":1580392214691},{"_id":"public/images/20190520/VMnet2.png","hash":"1ebafb7082c61c48266d1c38cdf2bbe3f0669df3","modified":1580392214691},{"_id":"public/images/20190521/01.jpg","hash":"4bc256b0c21b2e5de06d13c6f231fa07c409cbe3","modified":1580392214691},{"_id":"public/images/20190521/02.jpg","hash":"178d33f3bf38bf699098ef143c16f1351b33044a","modified":1580392214691},{"_id":"public/images/20190521/03.jpg","hash":"1de3b63406e9b588afe34be66e85e523234deaa0","modified":1580392214691},{"_id":"public/images/20190521/04.jpg","hash":"46d48972807ab89211e283dc5fe645807365e326","modified":1580392214691},{"_id":"public/images/20190521/05.jpg","hash":"d57fd91bc552bbc95af8ddbba942210a2438fa35","modified":1580392214691},{"_id":"public/images/20190521/06.jpg","hash":"32def39c9ee120d05c282d2f3d53f8e93faab09f","modified":1580392214691},{"_id":"public/images/20190521/09.jpg","hash":"a5829d0a802db12c6c5d5c91f597c1f93c7c3b9f","modified":1580392214691},{"_id":"public/images/20190521/10.jpg","hash":"f475294760131ff461649ba5f7731ac4544673c4","modified":1580392214691},{"_id":"public/images/20190521/11.jpg","hash":"025f2d7ab347d83b48910464168aaf72b10817a9","modified":1580392214691},{"_id":"public/images/20190609/VectorTest.png","hash":"48eccf8e38524c25ee3f3026ab47cc0f6f20b318","modified":1580392214691},{"_id":"public/images/20190621/DeleteMathTypeRegedit.PNG","hash":"4b23b17bc5cef1a0926cba03379fcdcc80103347","modified":1580392214691},{"_id":"public/images/20190621/InstallMathType.PNG","hash":"d53e54f2b80cc2a81fdc69e8c1356cf7d4513bfd","modified":1580392214691},{"_id":"public/images/20190711/iniTest.PNG","hash":"765d40e5549c4b1dfc74d8de742b7902f5ca1513","modified":1580392214691},{"_id":"public/images/20190711/iniTestTree.PNG","hash":"0247c41ad0a9ffd59f850cd71d84c55e1837c7c0","modified":1580392214691},{"_id":"public/images/20190716QT/01.png","hash":"1fc0dc9a45e4c7687bb66d73f0b157679ab9bbee","modified":1580392214691},{"_id":"public/images/20190716QT/02.png","hash":"a05ebfbd0072d5f33427af0e665843d8b52f9142","modified":1580392214691},{"_id":"public/images/20190716QT/03.png","hash":"a4302c09e4a6446e0af7f71eee60813362b56c51","modified":1580392214691},{"_id":"public/images/20190716QT/04.png","hash":"cd46a1052a141b3d93cc4323c37934b49e3a1922","modified":1580392214691},{"_id":"public/images/20190716QT/05.png","hash":"994c3c59dad7d7b3131a5bfe30bbd74c7ed80fbe","modified":1580392214691},{"_id":"public/images/20190716QT/07.png","hash":"92914fb18b74cf126f6e7b30e10cb79243cc9852","modified":1580392214691},{"_id":"public/images/20190716QT/08.png","hash":"757fa3cfe1b052537dba90d9c955b477de11a370","modified":1580392214691},{"_id":"public/images/20190716QT/09.png","hash":"7f865c453d484e236cf591b7f33cd6d40a716632","modified":1580392214691},{"_id":"public/images/20190716QT/11.png","hash":"596f76ea9c23d51c8833d82b4089dc1b97a7eb01","modified":1580392214691},{"_id":"public/images/20190716QT/12.png","hash":"a56726f3cb3653e108939d228022d868b4ed6401","modified":1580392214691},{"_id":"public/images/20190716QT/13.png","hash":"9b393355a52f6761cb82cd446ed858addcce9fdb","modified":1580392214691},{"_id":"public/images/20190716QT/14.png","hash":"6a02089e4fe7a5134c9c72018514a6e3207b1f57","modified":1580392214691},{"_id":"public/images/20190716QT/15.png","hash":"fc3ae28c6b4c31f0dba4b731f596f41605e7b89a","modified":1580392214691},{"_id":"public/images/20190716QT/17.png","hash":"d22146edd208b5dcc8ddfec8bc95c4c377337383","modified":1580392214691},{"_id":"public/images/20190731VMware/01.png","hash":"b12549170b832996933f6b9a4f94ebe382d6cb9b","modified":1580392214691},{"_id":"public/images/20190731VMware/02.png","hash":"6474f51de5b63d1ce0432c746a6e665e1f99d06f","modified":1580392214691},{"_id":"public/images/20190731VMware/03.png","hash":"483256cbaf39afe044fc6082641d56dae1502509","modified":1580392214691},{"_id":"public/images/20190731VMware/04.png","hash":"ffb577bed6f43514e97d50da5364078cf14c4f97","modified":1580392214691},{"_id":"public/images/20190731VMware/05.png","hash":"d336f24a8c0618bf726f246a42c51d7554bc7513","modified":1580392214691},{"_id":"public/images/20190521/08.jpg","hash":"fa0600f7fd43636bfb29d19ea6e5ec82b6e21b56","modified":1580392214691},{"_id":"public/images/20190521/07.jpg","hash":"abe57324647ee09747b3d657dd0f584c117d0c0e","modified":1580392214691},{"_id":"public/images/20190731VMware/26.png","hash":"f2482c75d828e5b66ca80d4128f74689cada68c3","modified":1580392214691},{"_id":"public/images/20190731shrmm/01.png","hash":"4d2e30ffef170e3ec8bfc703c1bd2b2fac809c66","modified":1580392214691},{"_id":"public/images/20190731shrmm/02.png","hash":"1c957881699031d827ee8a9fb7f7e894e1a7e0ff","modified":1580392214691},{"_id":"public/images/20190731shrmm/03.png","hash":"bf219f47d543a5b824161ae81050549f36349ade","modified":1580392214691},{"_id":"public/images/20190731shrmm/04.png","hash":"71c56fc6d00af2cd85b9ae10489818cbd466e203","modified":1580392214691},{"_id":"public/images/20190731shrmm/05.png","hash":"2e4319896273b7ff4ae9897adb501ddeb8b49800","modified":1580392214691},{"_id":"public/images/20190731shrmm/07.png","hash":"8066f8fa2fc15826a52071c4fa32e813e0d9d5de","modified":1580392214691},{"_id":"public/images/20190731shrmm/06.png","hash":"8a36f0d60b684245e62ed96e8d8975a938392249","modified":1580392214691},{"_id":"public/images/20190805OpenCV/01.png","hash":"5624ae266869ac36eee7011daf38f86007cb96fe","modified":1580392214691},{"_id":"public/images/20190831/01.png","hash":"7ca7da75ea3a2aadae2d5e95ed07cee20eecc12d","modified":1580392214691},{"_id":"public/images/20190831/02.png","hash":"05bb9730ef574755c281f27a11737ba4e45da69e","modified":1580392214691},{"_id":"public/images/20190831/03.png","hash":"7f4df38f67665ecbd5b23d6dacc094741df0cfc5","modified":1580392214691},{"_id":"public/images/20191013/02.eps","hash":"8446748868bf2a9e191e83ff1a2b713fb8bee60e","modified":1580392214691},{"_id":"public/images/20191013/02.gif","hash":"16f7873b21952f65e59cd3ec9aac731e5cd0dcc3","modified":1580392214691},{"_id":"public/images/20191013/03.gif","hash":"7487caa0bf67e9fc71f1ce64289d8463cbad9729","modified":1580392214691},{"_id":"public/images/20191013/04.gif","hash":"307f9bf6fbb21b52f3de20fe1241fe2daee54a42","modified":1580392214691},{"_id":"public/images/20191013/05.jpg","hash":"c0224bd7132213adb6f59cc6754f8c5d83f604ed","modified":1580392214691},{"_id":"public/images/20191013/06.jpg","hash":"4a4ad618b90caa27458ca9dcb2294d2968ed1c06","modified":1580392214691},{"_id":"public/images/20191013/07.jpg","hash":"3adff1596a3ab1aae6441111f20956859641e51c","modified":1580392214691},{"_id":"public/images/20191013/08.jpg","hash":"527a33c8b9bf16658e4af55a9ef2803ccba071c5","modified":1580392214691},{"_id":"public/images/20191013/09.jpg","hash":"fbca9eb67297eb4146e2a5d8dcce6444dc1f7fdd","modified":1580392214691},{"_id":"public/images/20191013/10.jpg","hash":"55cb396b3bd67665f65a38139d14c5fa207471ba","modified":1580392214691},{"_id":"public/images/20191013/11.jpg","hash":"3eeb31188f58900c2231814981c5b3f9553e790b","modified":1580392214691},{"_id":"public/images/20191013/12.gif","hash":"96b86302d5c45b93579072df6d52f01758e229f4","modified":1580392214691},{"_id":"public/images/20191013/13.gif","hash":"aaeb76291d62b89ed680fc3d7be992a0f39d377a","modified":1580392214691},{"_id":"public/images/20191013/14.gif","hash":"83a51e6f806498f336e94e685b4d6327de1db10a","modified":1580392214691},{"_id":"public/images/20191013/15.gif","hash":"75b5c2d2bccb7b2b7599a4b7f9e818d2e0b81023","modified":1580392214691},{"_id":"public/images/20191013/16.jpg","hash":"e5997e62f2725ac3ea4288d23394cc2a67b7810e","modified":1580392214691},{"_id":"public/images/20191023/01.gif","hash":"b91ee779f3df6cbf174a3e096fc29ed9f6594ed7","modified":1580392214691},{"_id":"public/images/20191023/01.wmf","hash":"6871a08ea20a3c1fe57009dfc666e74d430fd9f0","modified":1580392214691},{"_id":"public/images/20191023/02.gif","hash":"cb6d91dab9f5a366c99a97d7e238dc32005751fa","modified":1580392214691},{"_id":"public/images/20191023/02.wmf","hash":"7b03d58af729ee7277c394687b765565d26342d9","modified":1580392214691},{"_id":"public/images/20191023/03.gif","hash":"a76d12e0b002435a8036a03f4852e06125a211b7","modified":1580392214691},{"_id":"public/images/20191023/03.png","hash":"34a3002a128fbec915b8f9c04b61848fe1d20415","modified":1580392214691},{"_id":"public/images/20191023/03.wmf","hash":"43d88f17fc6854a8ff36cfd524ea0e8ea70ebbd6","modified":1580392214691},{"_id":"public/images/20191023/04.gif","hash":"4b74d568b9a65686a3b3f8588618908237eb592d","modified":1580392214691},{"_id":"public/images/20191023/04.wmf","hash":"d6e1c7c7cc4687b11d66cf75319dfafa35196fcf","modified":1580392214691},{"_id":"public/images/20191023/05.gif","hash":"6810aa4080073012b6a89ff05c19a62464553a4b","modified":1580392214691},{"_id":"public/images/20191023/05.png","hash":"9c868c8f09e6db2c8177b023dc67c6294fa236a0","modified":1580392214691},{"_id":"public/images/20191023/05.wmf","hash":"549302eef7f0c5bcf298d7ca59d82af96f90356c","modified":1580392214691},{"_id":"public/images/20191023/CrossProduct.png","hash":"b1df3e820c8c878aa72bab15998c6d787373aea0","modified":1580392214691},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1580392214691},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1580392214691},{"_id":"public/css/blog-encrypt.css","hash":"22e25b0d16ea053d25eb971e038c817a4c9cb584","modified":1580392214691},{"_id":"public/lib/blog-encrypt.js","hash":"96509f92b7037e8f750e4684cd440a3af98d9fec","modified":1580392214691},{"_id":"public/images/avatar.jpg","hash":"0136a30976a8f83d167a66fee37d36e37ac6f9f8","modified":1580392214691},{"_id":"public/images/Î¢ÐÅÍ¼Æ¬_2.jpg","hash":"210f1e2195b185f729208707b2a38f20d39c5bce","modified":1580392214691},{"_id":"public/images/20190520/VMTools.png","hash":"cc2cfce85f41b90b6df969a9fef9be4fba55dbcc","modified":1580392214691},{"_id":"public/images/20190520/VMToolsPackage.png","hash":"e37fc61a0bd1ad5e1a756dcdb60aa1a602583478","modified":1580392214691},{"_id":"public/images/20190520/VMUSB.png","hash":"d9d61b2a3bf54477696bfeb3c0276ef0eec71581","modified":1580392214691},{"_id":"public/images/20190716QT/06.png","hash":"18149a10c0ae44c4a36115c50304e0e9864a13f2","modified":1580392214691},{"_id":"public/images/20190716QT/10.png","hash":"b24afa4e1e60f7cfbc243a24ad7fe68814c9a6f3","modified":1580392214691},{"_id":"public/images/20190716QT/16.png","hash":"3c1b4d3a0d79a2cc8ad86be179998319aa3a38a6","modified":1580392214691},{"_id":"public/images/20190730boost/01.png","hash":"c94a41cf122d857968fc89c6438ebe2c5805c889","modified":1580392214691},{"_id":"public/images/20190730boost/02.png","hash":"2b3f54400275ba7c21b26cb5c1f911eff1f9cd0a","modified":1580392214691},{"_id":"public/images/20190730boost/03.png","hash":"cd59df566c32570bff96d7799f7af021f2e83046","modified":1580392214691},{"_id":"public/images/20190731VMware/25.png","hash":"2b3c215d64cd3389818c7a5db391cb4b177cbf5e","modified":1580392214691},{"_id":"public/images/20191023/00.png","hash":"6e3be76792f7cdbf0f1a70e9b1e14f3419c29732","modified":1580392214691},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1580392214691},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1580392214691},{"_id":"public/js/algolia-search.js","hash":"813afcc30feee11d59f297f2d5a96f98fbbd4743","modified":1580392214691},{"_id":"public/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1580392214691},{"_id":"public/js/local-search.js","hash":"9f3d3ddff86e7b2828772aba915a5ebfd7d9f55f","modified":1580392214691},{"_id":"public/js/motion.js","hash":"09f8be6bcc6920546bb06e3f8c0181ec62c70b90","modified":1580392214691},{"_id":"public/js/next-boot.js","hash":"f7045763e277e685c271bd4b4c37e531d699ac63","modified":1580392214691},{"_id":"public/js/utils.js","hash":"41fa3f7cc18e028263b6fa524a3a95fc93b1b81e","modified":1580392214691},{"_id":"public/js/schemes/muse.js","hash":"792f4522a3b0b96584a041a4aca20fcded410079","modified":1580392214691},{"_id":"public/js/schemes/pisces.js","hash":"52d139e6f3bc212c8c9b71bc9e57e931920434a6","modified":1580392214691},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1580392214691},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1580392214691},{"_id":"public/css/main.css","hash":"ef9ef4f7aaa782b5cf9f05985ff2d0547429f13a","modified":1580392214691},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1580392214691},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1580392214691},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1580392214691},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1580392214691},{"_id":"public/images/background.jpg","hash":"0e5a70f2c6b6d54b58e0bcd4d43528f1616184d9","modified":1580392214691},{"_id":"public/images/background2.jpg","hash":"c73abb94e796c57920841bc60b779966bf90c1b7","modified":1580392214691},{"_id":"public/images/background6.jpg","hash":"3ef678044c12a8007a6489e51b33e618e67fdc7c","modified":1580392214691},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1580392214691},{"_id":"public/images/background4.jpg","hash":"09828d4a67ecd9188ec978e37f4d138ef02d7491","modified":1580392214691},{"_id":"public/images/background5.jpg","hash":"f33b3bbfab87ea4f690ca5410d06da2f950b916b","modified":1580392214691},{"_id":"public/images/background10.jpg","hash":"e60e0de79184553c78ab1c5b9f12fd0ae395748c","modified":1580392214691},{"_id":"public/images/background3.jpg","hash":"9e7ef4e32a2b453e804332ce9af63ed2cae375da","modified":1580392214691},{"_id":"public/images/background9.jpg","hash":"bc36ec850324ffaaea9ba0c0ba147c0af15a21fb","modified":1580392214691},{"_id":"public/images/20190731VMware/07.png","hash":"9de565eba997ebf220eeb38c903707e8d68e1335","modified":1580392214691},{"_id":"public/images/background7.jpg","hash":"ed049b2f1128a77a6d73ece4abf487f38a91a7f9","modified":1580392214691},{"_id":"public/images/20191023/00.gif","hash":"769a1b89fab87bf125a4e23bbb6262a684772a75","modified":1580392214691},{"_id":"public/images/20190731VMware/11.png","hash":"eb7d89a8ed4361b9ece6406dff88c90d0166fe94","modified":1580392214691},{"_id":"public/images/20191013/01.jpg","hash":"e94fbc5aa03f18698f871803aaaec382a2930767","modified":1580392214691},{"_id":"public/images/001.jpg","hash":"3c5f8eb613d2eff94a50665b3a9ae65afa3e3b8c","modified":1580392214691},{"_id":"public/images/background8.jpg","hash":"3c5f8eb613d2eff94a50665b3a9ae65afa3e3b8c","modified":1580392214691},{"_id":"public/images/20190731VMware/23.png","hash":"e6ec3b2a8b391173ca4f66d23f61531394246645","modified":1580392214691},{"_id":"public/images/20190731VMware/10.png","hash":"041410a81bb1cb4dfb35ff137ad6957525b5209e","modified":1580392214691},{"_id":"public/images/20191023/CrossProduct.jpg","hash":"f6fbb778af9ea59be27f4a644d741682a461afae","modified":1580392214691},{"_id":"public/images/20190731VMware/21.png","hash":"bd97075c3ca1ec7634c6947b85ea3526c2ac41d4","modified":1580392214691},{"_id":"public/images/20190731VMware/24.png","hash":"55d22ab4aad4b8231286d9d07f3869fa37a5d906","modified":1580392214691},{"_id":"public/images/20190731VMware/19.png","hash":"c12f3535ddc071acc3c3854f9cb2a9c7d6cc1701","modified":1580392214691},{"_id":"public/images/20190731VMware/22.png","hash":"93d10c56ef333057a61b0a4e6e8979b3b6fc4f8a","modified":1580392214691},{"_id":"public/images/20190731VMware/18.png","hash":"9afbd5139d720684f75d53ed852dd5daedc8401f","modified":1580392214691},{"_id":"public/images/20190731VMware/13.png","hash":"b343340da173cc73cb413f09224863873dfdef3f","modified":1580392214691},{"_id":"public/images/20190731VMware/12.png","hash":"40e748e64394348a4e8bc6f253ed2e00f702a799","modified":1580392214691},{"_id":"public/images/20190731VMware/20.png","hash":"5726ba62aef3147c57bacba3343483796ff945f7","modified":1580392214691},{"_id":"public/images/20190731VMware/16.png","hash":"5340b00f15fe87989f107e651be938daa4152c72","modified":1580392214691},{"_id":"public/images/20190731VMware/15.png","hash":"4b81a97592b2fb930912920c037910faca73d353","modified":1580392214691},{"_id":"public/images/20190731VMware/09.png","hash":"3f75ba71bde0a262535411a1f18f3d2f7e1173b5","modified":1580392214691},{"_id":"public/images/20190731VMware/17.png","hash":"b12d7efcc513f0128e961e4631cc0671d9601749","modified":1580392214691},{"_id":"public/images/20190731VMware/14.png","hash":"95c4844322a544f517401a2f1b8955e50108bf1e","modified":1580392214691},{"_id":"public/images/20190731VMware/08.png","hash":"5ad0c21173539d5e11be2fa8ac5166d9f56ce410","modified":1580392214691},{"_id":"public/images/background12.png","hash":"2f9ece665fef54f640fb361571b51a3d06cd8743","modified":1580392214691},{"_id":"public/images/background11.png","hash":"ac0f5722ed4dbb0a28d471104f64205e0fa75470","modified":1580392214691},{"_id":"public/images/20190521/GitHub±àÐ´²©¿ÍÊÓÆµ½Ì³Ì.wmv","hash":"c3add28a449e47f6e137a55413b139e5687fbdbc","modified":1580392214691}],"Category":[{"name":"工科生的基本功","_id":"ck60spy8n0005da55bcp23fc6"},{"name":"GitHub","parent":"ck60spy8n0005da55bcp23fc6","_id":"ck60spy96000oda55e1ev5rbq"},{"name":"快乐码农","parent":"ck60spy8n0005da55bcp23fc6","_id":"ck60spy9k0014da55008b8zaf"},{"name":"茶余裨谈","_id":"ck60spy9w001rda55gosm3at7"},{"name":"软件技术","parent":"ck60spy8n0005da55bcp23fc6","_id":"ck60spya40025da55ak8zfycg"},{"name":"机器人控制","_id":"ck60spyar0039da556wzo6vye"},{"name":"基本数学知识","parent":"ck60spy8n0005da55bcp23fc6","_id":"ck60spyaz003qda551r5n8yrr"}],"Data":[],"Page":[{"_content":"google-site-verification: googled6c99a7a9936e6ed.html","source":"googled6c99a7a9936e6ed.html","raw":"google-site-verification: googled6c99a7a9936e6ed.html","date":"2020-01-29T13:27:17.877Z","updated":"2019-10-28T13:59:46.647Z","path":"googled6c99a7a9936e6ed.html","title":"","comments":1,"layout":"page","_id":"ck60spy360000da554g2l3917","content":"google-site-verification: googled6c99a7a9936e6ed.html","site":{"data":{}},"excerpt":"","more":"google-site-verification: googled6c99a7a9936e6ed.html","length":52},{"title":"关于我们","type":"about","date":"2019-10-24T22:39:34.000Z","_content":"\n# 我们是谁？\n\n  “你好，我要两杯可乐。”\n\n\n  “你好，这里是图书馆。”\n\n\n  这是我们的相遇，也是故事的开始。Cola是一名来自ZJU的博士生，Library是一名来自HIT的博士生，“Cola In Library”是由我们共同创办的网站，旨在介绍我们学习过程中遇到的一些知识，以及我们对生活的一些思考。\n\n\n# 联系我们\n\n如发现网页有错误，欢迎批评指正。\n\n邮箱：colainlibrary@163.com\n","source":"about/index.md","raw":"---\ntitle: 关于我们\ntype: \"about\"\ndate: 2019-10-24 22:39:34\n---\n\n# 我们是谁？\n\n  “你好，我要两杯可乐。”\n\n\n  “你好，这里是图书馆。”\n\n\n  这是我们的相遇，也是故事的开始。Cola是一名来自ZJU的博士生，Library是一名来自HIT的博士生，“Cola In Library”是由我们共同创办的网站，旨在介绍我们学习过程中遇到的一些知识，以及我们对生活的一些思考。\n\n\n# 联系我们\n\n如发现网页有错误，欢迎批评指正。\n\n邮箱：colainlibrary@163.com\n","updated":"2020-01-29T14:34:34.680Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck60spy8f0002da554qmzfa52","content":"<h1 id=\"我们是谁？\"><a href=\"#我们是谁？\" class=\"headerlink\" title=\"我们是谁？\"></a>我们是谁？</h1><p>  “你好，我要两杯可乐。”</p>\n<p>  “你好，这里是图书馆。”</p>\n<p>  这是我们的相遇，也是故事的开始。Cola是一名来自ZJU的博士生，Library是一名来自HIT的博士生，“Cola In Library”是由我们共同创办的网站，旨在介绍我们学习过程中遇到的一些知识，以及我们对生活的一些思考。</p>\n<h1 id=\"联系我们\"><a href=\"#联系我们\" class=\"headerlink\" title=\"联系我们\"></a>联系我们</h1><p>如发现网页有错误，欢迎批评指正。</p>\n<p>邮箱：<span class=\"exturl\" data-url=\"bWFpbHRvOmNvbGFpbmxpYnJhcnlAMTYzLmNvbQ==\" title=\"mailto:colainlibrary@163.com\">colainlibrary@163.com<i class=\"fa fa-external-link\"></i></span></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"我们是谁？\"><a href=\"#我们是谁？\" class=\"headerlink\" title=\"我们是谁？\"></a>我们是谁？</h1><p>  “你好，我要两杯可乐。”</p>\n<p>  “你好，这里是图书馆。”</p>\n<p>  这是我们的相遇，也是故事的开始。Cola是一名来自ZJU的博士生，Library是一名来自HIT的博士生，“Cola In Library”是由我们共同创办的网站，旨在介绍我们学习过程中遇到的一些知识，以及我们对生活的一些思考。</p>\n<h1 id=\"联系我们\"><a href=\"#联系我们\" class=\"headerlink\" title=\"联系我们\"></a>联系我们</h1><p>如发现网页有错误，欢迎批评指正。</p>\n<p>邮箱：<a href=\"mailto:colainlibrary@163.com\">colainlibrary@163.com</a></p>\n","length":185},{"title":"文章分类","date":"2018-10-15T00:03:57.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 文章分类\ndate: 2018-10-15 00:03:57\ntype: \"categories\"\ncomments: false\n---","updated":"2019-10-25T04:47:13.891Z","path":"categories/index.html","layout":"page","_id":"ck60spy8l0004da555g080tdh","content":"","site":{"data":{}},"excerpt":"","more":"","length":0},{"title":"标签","date":"2020-01-29T22:39:05.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2020-01-29 22:39:05\ntype: \"tags\"\ncomments: false\n---\n","updated":"2020-01-29T14:39:54.190Z","path":"tags/index.html","layout":"page","_id":"ck60spy8r0008da559inlbs7w","content":"","site":{"data":{}},"excerpt":"","more":"","length":0},{"title":"最热阅读","date":"2019-10-27T22:38:19.000Z","comments":0,"_content":"\n<div id=\"top\"></div>\n\n<script src=\"//cdn1.lncld.net/static/js/3.0.4/av-min.js\"></script>\n<script>AV.initialize(\"owryKYMxVRpqksq7EoJmoJHy-gzGzoHsz\", \"W7BaIi1FbwpgIDuNXyGAfUsl\");</script>\n<script type=\"text/javascript\">\n    var time=0\n    var title=\"\"\n    var url=\"\"\n    var query = new AV.Query('Counter');\n    query.notEqualTo('id',0);\n    query.descending('time');\n    query.limit(1000);\n    query.find().then(function (todo) {\n        for (var i=0;i<1000;i++){\n            var result=todo[i].attributes;\n            time=result.time;\n            title=result.title;\n            url=result.url;\n            var content=\"<a href='\"+\"https://colainlibrary.github.io\"+url+\"'>\"+title+\"</a>\"+\"<br />\"+\"<font color='#555'>\"+\"热度：\"+time+\"°C\"+\"</font>\"+\"<br /><br />\";\n            document.getElementById(\"top\").innerHTML+=content\n        }\n    }, function (error) {\n        console.log(\"error\");\n    });\n</script>\n\n<style>.post-description { display: none; }</style>","source":"top/index.md","raw":"---\ntitle: 最热阅读\ndate: 2019-10-27 22:38:19\ncomments: false\n---\n\n<div id=\"top\"></div>\n\n<script src=\"//cdn1.lncld.net/static/js/3.0.4/av-min.js\"></script>\n<script>AV.initialize(\"owryKYMxVRpqksq7EoJmoJHy-gzGzoHsz\", \"W7BaIi1FbwpgIDuNXyGAfUsl\");</script>\n<script type=\"text/javascript\">\n    var time=0\n    var title=\"\"\n    var url=\"\"\n    var query = new AV.Query('Counter');\n    query.notEqualTo('id',0);\n    query.descending('time');\n    query.limit(1000);\n    query.find().then(function (todo) {\n        for (var i=0;i<1000;i++){\n            var result=todo[i].attributes;\n            time=result.time;\n            title=result.title;\n            url=result.url;\n            var content=\"<a href='\"+\"https://colainlibrary.github.io\"+url+\"'>\"+title+\"</a>\"+\"<br />\"+\"<font color='#555'>\"+\"热度：\"+time+\"°C\"+\"</font>\"+\"<br /><br />\";\n            document.getElementById(\"top\").innerHTML+=content\n        }\n    }, function (error) {\n        console.log(\"error\");\n    });\n</script>\n\n<style>.post-description { display: none; }</style>","updated":"2019-10-29T04:17:03.451Z","path":"top/index.html","layout":"page","_id":"ck60spy8u000ada55gyes8e5r","content":"<div id=\"top\"></div>\n\n<script src=\"//cdn1.lncld.net/static/js/3.0.4/av-min.js\"></script>\n<script>AV.initialize(\"owryKYMxVRpqksq7EoJmoJHy-gzGzoHsz\", \"W7BaIi1FbwpgIDuNXyGAfUsl\");</script>\n<script type=\"text/javascript\">\n    var time=0\n    var title=\"\"\n    var url=\"\"\n    var query = new AV.Query('Counter');\n    query.notEqualTo('id',0);\n    query.descending('time');\n    query.limit(1000);\n    query.find().then(function (todo) {\n        for (var i=0;i<1000;i++){\n            var result=todo[i].attributes;\n            time=result.time;\n            title=result.title;\n            url=result.url;\n            var content=\"<a href='\"+\"https://colainlibrary.github.io\"+url+\"'>\"+title+\"</a>\"+\"<br />\"+\"<font color='#555'>\"+\"热度：\"+time+\"°C\"+\"</font>\"+\"<br /><br />\";\n            document.getElementById(\"top\").innerHTML+=content\n        }\n    }, function (error) {\n        console.log(\"error\");\n    });\n</script>\n\n<style>.post-description { display: none; }</style>","site":{"data":{}},"excerpt":"","more":"<div id=\"top\"></div>\n\n<script src=\"//cdn1.lncld.net/static/js/3.0.4/av-min.js\"></script>\n<script>AV.initialize(\"owryKYMxVRpqksq7EoJmoJHy-gzGzoHsz\", \"W7BaIi1FbwpgIDuNXyGAfUsl\");</script>\n<script type=\"text/javascript\">\n    var time=0\n    var title=\"\"\n    var url=\"\"\n    var query = new AV.Query('Counter');\n    query.notEqualTo('id',0);\n    query.descending('time');\n    query.limit(1000);\n    query.find().then(function (todo) {\n        for (var i=0;i<1000;i++){\n            var result=todo[i].attributes;\n            time=result.time;\n            title=result.title;\n            url=result.url;\n            var content=\"<a href='\"+\"https://colainlibrary.github.io\"+url+\"'>\"+title+\"</a>\"+\"<br />\"+\"<font color='#555'>\"+\"热度：\"+time+\"°C\"+\"</font>\"+\"<br /><br />\";\n            document.getElementById(\"top\").innerHTML+=content\n        }\n    }, function (error) {\n        console.log(\"error\");\n    });\n</script>\n\n<style>.post-description { display: none; }</style>","length":252}],"Post":[{"title":"标题插入超链接","link":"http://www.google.com/","abbrlink":37327,"date":"2019-04-28T15:30:04.000Z","_content":"\nThis is a link post. Clicking on the link should open [Google](http://www.google.com/) in a new tab or window.\n","source":"_posts/2019-04-28-±êÌâ²åÈëÁ´½Ó.md","raw":"---\ntitle: 标题插入超链接\nlink: 'http://www.google.com/'\ncategories:\n  - 工科生的基本功\n  - GitHub\ntags:\n  - GitHub\nabbrlink: 37327\ndate: 2019-04-28 15:30:04\n---\n\nThis is a link post. Clicking on the link should open [Google](http://www.google.com/) in a new tab or window.\n","slug":"2019-04-28-±êÌâ²åÈëÁ´½Ó","published":1,"updated":"2020-01-29T13:57:52.752Z","comments":1,"layout":"post","photos":[],"_id":"ck60spy890001da551fuf28p7","content":"<p>This is a link post. Clicking on the link should open <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5nb29nbGUuY29tLw==\" title=\"http://www.google.com/\">Google<i class=\"fa fa-external-link\"></i></span> in a new tab or window.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>This is a link post. Clicking on the link should open <a href=\"http://www.google.com/\" target=\"_blank\" rel=\"noopener\">Google</a> in a new tab or window.</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Jan 29 2020 21:57:52 GMT+0800 (China Standard Time)","title":"标题插入超链接","path":"archives/37327.html","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2019-04-28T15:30:04.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2019-04-28T15:30:04.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"工科生的基本功 > GitHub","tags":["GitHub"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":67},{"title":"代码块的编写","abbrlink":23603,"date":"2019-04-28T15:14:39.000Z","_content":"\nThis post is used for testing tag plugins. See [docs](http://zespia.tw/hexo/docs/tag-plugins.html) for more info.\n\n## Block Quote\n\n### Normal blockquote\n\n> Praesent diam elit, interdum ut pulvinar placerat, imperdiet at magna.\n\n## Code Block\n\n### Inline code block\n\nThis is a inline code block: `python`, `print 'helloworld'`.\n\n### Normal code block\n\n```\nalert('Hello World!');\n```\n\n    print \"Hello world\"\n\n### Highlight code block\n\n```python\nprint \"Hello world\"\n```\n\n### Gist\n\n{% gist 996818 %}\n\n","source":"_posts/2019-04-28-´úÂë¿é.md","raw":"---\ntitle: 代码块的编写\ncategories:\n  - 工科生的基本功\n  - GitHub\ntags:\n  - GitHub\nabbrlink: 23603\ndate: 2019-04-28 15:14:39\n---\n\nThis post is used for testing tag plugins. See [docs](http://zespia.tw/hexo/docs/tag-plugins.html) for more info.\n\n## Block Quote\n\n### Normal blockquote\n\n> Praesent diam elit, interdum ut pulvinar placerat, imperdiet at magna.\n\n## Code Block\n\n### Inline code block\n\nThis is a inline code block: `python`, `print 'helloworld'`.\n\n### Normal code block\n\n```\nalert('Hello World!');\n```\n\n    print \"Hello world\"\n\n### Highlight code block\n\n```python\nprint \"Hello world\"\n```\n\n### Gist\n\n{% gist 996818 %}\n\n","slug":"2019-04-28-´úÂë¿é","published":1,"updated":"2020-01-29T13:57:52.752Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck60spy8i0003da55h2be66ea","content":"<p>This post is used for testing tag plugins. See <span class=\"exturl\" data-url=\"aHR0cDovL3plc3BpYS50dy9oZXhvL2RvY3MvdGFnLXBsdWdpbnMuaHRtbA==\" title=\"http://zespia.tw/hexo/docs/tag-plugins.html\">docs<i class=\"fa fa-external-link\"></i></span> for more info.</p>\n<h2 id=\"Block-Quote\"><a href=\"#Block-Quote\" class=\"headerlink\" title=\"Block Quote\"></a>Block Quote</h2><h3 id=\"Normal-blockquote\"><a href=\"#Normal-blockquote\" class=\"headerlink\" title=\"Normal blockquote\"></a>Normal blockquote</h3><blockquote>\n<p>Praesent diam elit, interdum ut pulvinar placerat, imperdiet at magna.</p>\n</blockquote>\n<h2 id=\"Code-Block\"><a href=\"#Code-Block\" class=\"headerlink\" title=\"Code Block\"></a>Code Block</h2><h3 id=\"Inline-code-block\"><a href=\"#Inline-code-block\" class=\"headerlink\" title=\"Inline code block\"></a>Inline code block</h3><p>This is a inline code block: <code>python</code>, <code>print &#39;helloworld&#39;</code>.</p>\n<h3 id=\"Normal-code-block\"><a href=\"#Normal-code-block\" class=\"headerlink\" title=\"Normal code block\"></a>Normal code block</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(&#39;Hello World!&#39;);</span><br></pre></td></tr></table></figure>\n\n<pre><code>print &quot;Hello world&quot;</code></pre><h3 id=\"Highlight-code-block\"><a href=\"#Highlight-code-block\" class=\"headerlink\" title=\"Highlight code block\"></a>Highlight code block</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"Hello world\"</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Gist\"><a href=\"#Gist\" class=\"headerlink\" title=\"Gist\"></a>Gist</h3><script src=\"//gist.github.com/996818.js\"></script>\n\n","site":{"data":{}},"excerpt":"","more":"<p>This post is used for testing tag plugins. See <a href=\"http://zespia.tw/hexo/docs/tag-plugins.html\" target=\"_blank\" rel=\"noopener\">docs</a> for more info.</p>\n<h2 id=\"Block-Quote\"><a href=\"#Block-Quote\" class=\"headerlink\" title=\"Block Quote\"></a>Block Quote</h2><h3 id=\"Normal-blockquote\"><a href=\"#Normal-blockquote\" class=\"headerlink\" title=\"Normal blockquote\"></a>Normal blockquote</h3><blockquote>\n<p>Praesent diam elit, interdum ut pulvinar placerat, imperdiet at magna.</p>\n</blockquote>\n<h2 id=\"Code-Block\"><a href=\"#Code-Block\" class=\"headerlink\" title=\"Code Block\"></a>Code Block</h2><h3 id=\"Inline-code-block\"><a href=\"#Inline-code-block\" class=\"headerlink\" title=\"Inline code block\"></a>Inline code block</h3><p>This is a inline code block: <code>python</code>, <code>print &#39;helloworld&#39;</code>.</p>\n<h3 id=\"Normal-code-block\"><a href=\"#Normal-code-block\" class=\"headerlink\" title=\"Normal code block\"></a>Normal code block</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(&#39;Hello World!&#39;);</span><br></pre></td></tr></table></figure>\n\n<pre><code>print &quot;Hello world&quot;</code></pre><h3 id=\"Highlight-code-block\"><a href=\"#Highlight-code-block\" class=\"headerlink\" title=\"Highlight code block\"></a>Highlight code block</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"Hello world\"</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Gist\"><a href=\"#Gist\" class=\"headerlink\" title=\"Gist\"></a>Gist</h3><script src=\"//gist.github.com/996818.js\"></script>\n\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Jan 29 2020 21:57:52 GMT+0800 (China Standard Time)","title":"代码块的编写","path":"archives/23603.html","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2019-04-28T15:14:39.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2019-04-28T15:14:39.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"工科生的基本功 > GitHub","tags":["GitHub"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":333},{"title":"个人网站的创建及NexT模板的使用","description":"Our First Blog.","abbrlink":7130,"date":"2019-04-28T12:35:23.000Z","_content":"\n> 这是由Cola & Library打造的第一篇技术博客，旨在说明个人网站的建立过程及模板的使用方法。\n\n<!-- more -->\n\n## 前期准备\n\n如果你能看到这篇博客，那么你最起码应该掌握：\n\n1. 了解GitHub为何物？\n2. 使用GitHub建立个人网站的优势在哪？\n3. 有一个属于自己的GitHub账户。\n\n使用GitHub建立个人网站，主要有两种途经：一种是本地创建；另一种是直接在浏览器上进行操作。\n\n第一种方法的麻烦之处在于，需要配置各种环境，包括ruby、jekyll或hexos、bundle等。这对于一无所知的小白，或者是不习惯使用命令行编程的新手来说无疑是一个很高的门槛。\n虽然网上已经有各种各样的教程，但是由于大家所使用版本、操作系统的不同，出现的问题各不一样，对新手村的学徒来说这无疑会耗费大量的时间和精力，而且经过搜索亦不一定\n能保证找到解决方案，会对初学者造成一种浓浓的挫败感。\n\n相比而言，第二种方案对于新手则要简洁明了，不用考虑过多的环境配置，采用一个模板，直接在网站上进行修改，这个方案的门槛在于需要寻找一个自己喜欢的模板，并且学会如何修\n改（当然这是在第一种方案中经过环境配置后也需要面对的困难）。\n\n### 从本地创建\n\n这里给出Library同学在学习本地创建时，看到的比较有用的一些网站，具体的过程不再详述。\n\n\n\n* [手把手教你在Github上建立自己的个人博客网站](https://blog.csdn.net/u012168038/article/details/77715439)\n（该网站简要介绍了简历个人网站所需要的内容，并给出了HelloGitHub示例）\n* [在windows下安装jekyll](https://www.jianshu.com/p/88e3474cef72)\n* [搭建一个免费的，无限流量的Blog----github Pages和Jekyll入门](http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html)\n* [GitHub Pages 建立个人网站详细教程](https://zhuanlan.zhihu.com/p/58229299)\n\n### 从浏览器创建\n\n上节中给出的示例均需在本地建立仓库，再上传，环境配置流程繁琐，操作过程不友好，好吧...其实就是Library同学最终有一步“bundle exec jekyll server”不知为何总是过不了，\n因此偷懒放弃了。However，明明有简单的，为啥要避简就繁呢？\n\n[低成本打造个人独立博客](https://www.tortorse.com/archives/978)清晰地介绍了从网页直接建立个人网站的方法，本网站亦是参照此方法建立的。本网站使用的模板为\n[jekyll-theme-next](https://github.com/Simpleyyt/jekyll-theme-next)，模板的使用方法见[开始使用NexT](http://theme-next.simpleyyt.com/getting-started.html)。\n\n## 模板的使用方法\n\n按照上一节的步骤，相信已经在自己的仓库中建立好了NexT模板，接下来主要谈谈如何使用该模板，包括模板格式的修改、写博客时的一些格式问题。毕竟，满屏的英文看着还是有点头大\n（口享！Cola现在已经去看复联4了！）\n\n### 文件的修改\n\n使用GitHub建立的个人网站，一个很重要的配置文件是`_config.yml`，从浏览器的仓库名中打开该文件，点右上角的铅笔符号，即可进入编辑，将开始的title、author、description进行修改，即可得到属于自己的个人网站。对于博文的书写，只要打开`_posts`文件夹，点击`Create New File`，然后将新的文件命名为`xxxx-xx-xx-文件名.md`，即可对文件进行编辑，最后在页面最下方点击`Commit Changes`，即可完成博文发布。稍等片刻，就会看到自己的博文被更新在了网页上。\n\n在[NexT主题配置](http://theme-next.simpleyyt.com/theme-settings.html)中给出了如何添加标签、添加分类、设置字体等其他操作。对于标签、分类的添加，其实只需要在`xx.md`\n文件开始的两条`---`中直接修改即可，该分类或标签如果没有将自动新建。\n\n### 文章的格式\n\n在前面的部分，已经给出了一级标题、二级标题、段落、超链接、数字/非数字表示小部分的格式示例。接下来介绍一些其他常用的格式。\n\n#### 文字的格式\n\n- 文字超链接： [test link]() \n- 加粗加黑： **Strong text** \n- 下划线：<u>Underline text</u> non elit nisl\n- 文中横线： ~~Deleted text~~ tristique\n- 字下加灰色背景框：`Sed erat diam`\n- 文字上标：我是<sup>上标</sup>。\n- 文字下标：你是<sub>下标</sub>。\n- 文字斜体：他是<cite>斜体</cite>。\n- 专有名词：<acronym title=\"National Basketball Association\">NBA</acronym>\n- 下划双虚线：<abbr title=\"Avenue\">AVE</abbr>\n- juzhong： <blockquote class=\"blockquote-center\">blah blah blah</blockquote>\n- 特殊格式的文本：\n\n> 另起一行的特殊格式。\n\n\n#### 换行定义\n<dl><dt>定义1</dt><dd>换行定义.</dd></dl>\n\n#### 图的插入\n\n![avatar]( /images/avatar.jpg)\n\n#### 表的插入\n\n| Table Header 1 | Table Header 2 | Table Header 3 |\n| --- | --- | --- |\n| Division 1 | Division 2 | Division 3 |\n| Division 1 | Division 2 | Division 3 |\n| Division 1 | Division 2 | Division 3 |\n\n#### 程序语言的插入，以Clone Jacman theme为例:\n\n```sh\ngit clone https://github.com/Simpleyyt/jekyll-theme-next.git\ncd jekyll-theme-next\n```\n\n#### 小表情emoji的插入，以及网站链接的插入\n\n测试用小表情，如： :smile: .\n\n更多小表情请见 :wink: : <https://www.webpagefx.com/tools/emoji-cheat-sheet/>.\n\n使用知乎的链接类型：\n\n<a href=\"https://bestzuo.cn\" class=\"LinkCard\">Sanarous的个人博客</a>\n\n:bowtie::smile::laughing::blush::smiley::relaxed::smirk:\n:heart_eyes::kissing_heart::kissing_closed_eyes::flushed::relieved::satisfied::grin:\n\n#### 公式的插入\n\n从以下网站可以获得更多公式相关的内容：\n[http://docs.mathjax.org/en/latest/](http://docs.mathjax.org/en/latest/)\n\n另起一行写公式\n\n$$a^2 + b^2 = c^2$$\n\n如何实现的呢？用 **double $** 符号，如下\n\n$$a^2 + b^2 = c^2$$\n\n行中公式$ sin(x^2) $可以使用```$...$``` 得到。\n\n下角标、非斜体文本的实现：\n\n$$ \\mathbf{X}\\_{n,p} = \\mathbf{A}\\_{n,k} \\mathbf{B}\\_{k,p} $$\n\n效果如下：\n\n\\\\[ \\mathbf{X}\\_{n,p} = \\mathbf{A}\\_{n,k} \\mathbf{B}\\_{k,p} \\\\]\n\n公式的插入有点类似于Latex，可以考虑从MathType直接转化为Latex公式。\n\n#### 高亮文本\n* 正常文本\n\n```\nalert('Hello World!');\n```\n* 高亮后的文本\n\n```javascript\nalert( 'Hello, world!' );\n```\n\n```ruby\ndef foo\n  puts 'foo'\nend\n```\n\n\n* C++的高亮形式\n\n```c++\n#include <iostream>\n\nusing namespace std;\n\nvoid foo(int arg1, int arg2)\n{\n\n}\n\nint main()\n{\n  string str;\n  foo(1, 2);\n  cout << \"Hello World\" << endl;\n  return 0;\n}\n```\n","source":"_posts/2019-04-28-¸öÈËÍøÕ¾µÄ´´½¨¼°NexTÄ£°åµÄÊ¹ÓÃ.md","raw":"---\ntitle: 个人网站的创建及NexT模板的使用\ndescription: Our First Blog.\ncategories:\n  - 工科生的基本功\n  - GitHub\ntags:\n  - GitHub\n  - Cola\n  - Library\nabbrlink: 7130\ndate: 2019-04-28 12:35:23\n---\n\n> 这是由Cola & Library打造的第一篇技术博客，旨在说明个人网站的建立过程及模板的使用方法。\n\n<!-- more -->\n\n## 前期准备\n\n如果你能看到这篇博客，那么你最起码应该掌握：\n\n1. 了解GitHub为何物？\n2. 使用GitHub建立个人网站的优势在哪？\n3. 有一个属于自己的GitHub账户。\n\n使用GitHub建立个人网站，主要有两种途经：一种是本地创建；另一种是直接在浏览器上进行操作。\n\n第一种方法的麻烦之处在于，需要配置各种环境，包括ruby、jekyll或hexos、bundle等。这对于一无所知的小白，或者是不习惯使用命令行编程的新手来说无疑是一个很高的门槛。\n虽然网上已经有各种各样的教程，但是由于大家所使用版本、操作系统的不同，出现的问题各不一样，对新手村的学徒来说这无疑会耗费大量的时间和精力，而且经过搜索亦不一定\n能保证找到解决方案，会对初学者造成一种浓浓的挫败感。\n\n相比而言，第二种方案对于新手则要简洁明了，不用考虑过多的环境配置，采用一个模板，直接在网站上进行修改，这个方案的门槛在于需要寻找一个自己喜欢的模板，并且学会如何修\n改（当然这是在第一种方案中经过环境配置后也需要面对的困难）。\n\n### 从本地创建\n\n这里给出Library同学在学习本地创建时，看到的比较有用的一些网站，具体的过程不再详述。\n\n\n\n* [手把手教你在Github上建立自己的个人博客网站](https://blog.csdn.net/u012168038/article/details/77715439)\n（该网站简要介绍了简历个人网站所需要的内容，并给出了HelloGitHub示例）\n* [在windows下安装jekyll](https://www.jianshu.com/p/88e3474cef72)\n* [搭建一个免费的，无限流量的Blog----github Pages和Jekyll入门](http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html)\n* [GitHub Pages 建立个人网站详细教程](https://zhuanlan.zhihu.com/p/58229299)\n\n### 从浏览器创建\n\n上节中给出的示例均需在本地建立仓库，再上传，环境配置流程繁琐，操作过程不友好，好吧...其实就是Library同学最终有一步“bundle exec jekyll server”不知为何总是过不了，\n因此偷懒放弃了。However，明明有简单的，为啥要避简就繁呢？\n\n[低成本打造个人独立博客](https://www.tortorse.com/archives/978)清晰地介绍了从网页直接建立个人网站的方法，本网站亦是参照此方法建立的。本网站使用的模板为\n[jekyll-theme-next](https://github.com/Simpleyyt/jekyll-theme-next)，模板的使用方法见[开始使用NexT](http://theme-next.simpleyyt.com/getting-started.html)。\n\n## 模板的使用方法\n\n按照上一节的步骤，相信已经在自己的仓库中建立好了NexT模板，接下来主要谈谈如何使用该模板，包括模板格式的修改、写博客时的一些格式问题。毕竟，满屏的英文看着还是有点头大\n（口享！Cola现在已经去看复联4了！）\n\n### 文件的修改\n\n使用GitHub建立的个人网站，一个很重要的配置文件是`_config.yml`，从浏览器的仓库名中打开该文件，点右上角的铅笔符号，即可进入编辑，将开始的title、author、description进行修改，即可得到属于自己的个人网站。对于博文的书写，只要打开`_posts`文件夹，点击`Create New File`，然后将新的文件命名为`xxxx-xx-xx-文件名.md`，即可对文件进行编辑，最后在页面最下方点击`Commit Changes`，即可完成博文发布。稍等片刻，就会看到自己的博文被更新在了网页上。\n\n在[NexT主题配置](http://theme-next.simpleyyt.com/theme-settings.html)中给出了如何添加标签、添加分类、设置字体等其他操作。对于标签、分类的添加，其实只需要在`xx.md`\n文件开始的两条`---`中直接修改即可，该分类或标签如果没有将自动新建。\n\n### 文章的格式\n\n在前面的部分，已经给出了一级标题、二级标题、段落、超链接、数字/非数字表示小部分的格式示例。接下来介绍一些其他常用的格式。\n\n#### 文字的格式\n\n- 文字超链接： [test link]() \n- 加粗加黑： **Strong text** \n- 下划线：<u>Underline text</u> non elit nisl\n- 文中横线： ~~Deleted text~~ tristique\n- 字下加灰色背景框：`Sed erat diam`\n- 文字上标：我是<sup>上标</sup>。\n- 文字下标：你是<sub>下标</sub>。\n- 文字斜体：他是<cite>斜体</cite>。\n- 专有名词：<acronym title=\"National Basketball Association\">NBA</acronym>\n- 下划双虚线：<abbr title=\"Avenue\">AVE</abbr>\n- juzhong： <blockquote class=\"blockquote-center\">blah blah blah</blockquote>\n- 特殊格式的文本：\n\n> 另起一行的特殊格式。\n\n\n#### 换行定义\n<dl><dt>定义1</dt><dd>换行定义.</dd></dl>\n\n#### 图的插入\n\n![avatar]( /images/avatar.jpg)\n\n#### 表的插入\n\n| Table Header 1 | Table Header 2 | Table Header 3 |\n| --- | --- | --- |\n| Division 1 | Division 2 | Division 3 |\n| Division 1 | Division 2 | Division 3 |\n| Division 1 | Division 2 | Division 3 |\n\n#### 程序语言的插入，以Clone Jacman theme为例:\n\n```sh\ngit clone https://github.com/Simpleyyt/jekyll-theme-next.git\ncd jekyll-theme-next\n```\n\n#### 小表情emoji的插入，以及网站链接的插入\n\n测试用小表情，如： :smile: .\n\n更多小表情请见 :wink: : <https://www.webpagefx.com/tools/emoji-cheat-sheet/>.\n\n使用知乎的链接类型：\n\n<a href=\"https://bestzuo.cn\" class=\"LinkCard\">Sanarous的个人博客</a>\n\n:bowtie::smile::laughing::blush::smiley::relaxed::smirk:\n:heart_eyes::kissing_heart::kissing_closed_eyes::flushed::relieved::satisfied::grin:\n\n#### 公式的插入\n\n从以下网站可以获得更多公式相关的内容：\n[http://docs.mathjax.org/en/latest/](http://docs.mathjax.org/en/latest/)\n\n另起一行写公式\n\n$$a^2 + b^2 = c^2$$\n\n如何实现的呢？用 **double $** 符号，如下\n\n$$a^2 + b^2 = c^2$$\n\n行中公式$ sin(x^2) $可以使用```$...$``` 得到。\n\n下角标、非斜体文本的实现：\n\n$$ \\mathbf{X}\\_{n,p} = \\mathbf{A}\\_{n,k} \\mathbf{B}\\_{k,p} $$\n\n效果如下：\n\n\\\\[ \\mathbf{X}\\_{n,p} = \\mathbf{A}\\_{n,k} \\mathbf{B}\\_{k,p} \\\\]\n\n公式的插入有点类似于Latex，可以考虑从MathType直接转化为Latex公式。\n\n#### 高亮文本\n* 正常文本\n\n```\nalert('Hello World!');\n```\n* 高亮后的文本\n\n```javascript\nalert( 'Hello, world!' );\n```\n\n```ruby\ndef foo\n  puts 'foo'\nend\n```\n\n\n* C++的高亮形式\n\n```c++\n#include <iostream>\n\nusing namespace std;\n\nvoid foo(int arg1, int arg2)\n{\n\n}\n\nint main()\n{\n  string str;\n  foo(1, 2);\n  cout << \"Hello World\" << endl;\n  return 0;\n}\n```\n","slug":"2019-04-28-¸öÈËÍøÕ¾µÄ´´½¨¼°NexTÄ£°åµÄÊ¹ÓÃ","published":1,"updated":"2020-01-29T13:57:52.752Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck60spy8q0007da55eggpfjil","content":"<blockquote>\n<p>这是由Cola &amp; Library打造的第一篇技术博客，旨在说明个人网站的建立过程及模板的使用方法。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h2><p>如果你能看到这篇博客，那么你最起码应该掌握：</p>\n<ol>\n<li>了解GitHub为何物？</li>\n<li>使用GitHub建立个人网站的优势在哪？</li>\n<li>有一个属于自己的GitHub账户。</li>\n</ol>\n<p>使用GitHub建立个人网站，主要有两种途经：一种是本地创建；另一种是直接在浏览器上进行操作。</p>\n<p>第一种方法的麻烦之处在于，需要配置各种环境，包括ruby、jekyll或hexos、bundle等。这对于一无所知的小白，或者是不习惯使用命令行编程的新手来说无疑是一个很高的门槛。<br>虽然网上已经有各种各样的教程，但是由于大家所使用版本、操作系统的不同，出现的问题各不一样，对新手村的学徒来说这无疑会耗费大量的时间和精力，而且经过搜索亦不一定<br>能保证找到解决方案，会对初学者造成一种浓浓的挫败感。</p>\n<p>相比而言，第二种方案对于新手则要简洁明了，不用考虑过多的环境配置，采用一个模板，直接在网站上进行修改，这个方案的门槛在于需要寻找一个自己喜欢的模板，并且学会如何修<br>改（当然这是在第一种方案中经过环境配置后也需要面对的困难）。</p>\n<h3 id=\"从本地创建\"><a href=\"#从本地创建\" class=\"headerlink\" title=\"从本地创建\"></a>从本地创建</h3><p>这里给出Library同学在学习本地创建时，看到的比较有用的一些网站，具体的过程不再详述。</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTIxNjgwMzgvYXJ0aWNsZS9kZXRhaWxzLzc3NzE1NDM5\" title=\"https://blog.csdn.net/u012168038/article/details/77715439\">手把手教你在Github上建立自己的个人博客网站<i class=\"fa fa-external-link\"></i></span><br>（该网站简要介绍了简历个人网站所需要的内容，并给出了HelloGitHub示例）</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC84OGUzNDc0Y2VmNzI=\" title=\"https://www.jianshu.com/p/88e3474cef72\">在windows下安装jekyll<i class=\"fa fa-external-link\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTIvMDgvYmxvZ2dpbmdfd2l0aF9qZWt5bGwuaHRtbA==\" title=\"http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html\">搭建一个免费的，无限流量的Blog—-github Pages和Jekyll入门<i class=\"fa fa-external-link\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81ODIyOTI5OQ==\" title=\"https://zhuanlan.zhihu.com/p/58229299\">GitHub Pages 建立个人网站详细教程<i class=\"fa fa-external-link\"></i></span></li>\n</ul>\n<h3 id=\"从浏览器创建\"><a href=\"#从浏览器创建\" class=\"headerlink\" title=\"从浏览器创建\"></a>从浏览器创建</h3><p>上节中给出的示例均需在本地建立仓库，再上传，环境配置流程繁琐，操作过程不友好，好吧…其实就是Library同学最终有一步“bundle exec jekyll server”不知为何总是过不了，<br>因此偷懒放弃了。However，明明有简单的，为啥要避简就繁呢？</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudG9ydG9yc2UuY29tL2FyY2hpdmVzLzk3OA==\" title=\"https://www.tortorse.com/archives/978\">低成本打造个人独立博客<i class=\"fa fa-external-link\"></i></span>清晰地介绍了从网页直接建立个人网站的方法，本网站亦是参照此方法建立的。本网站使用的模板为<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1NpbXBsZXl5dC9qZWt5bGwtdGhlbWUtbmV4dA==\" title=\"https://github.com/Simpleyyt/jekyll-theme-next\">jekyll-theme-next<i class=\"fa fa-external-link\"></i></span>，模板的使用方法见<span class=\"exturl\" data-url=\"aHR0cDovL3RoZW1lLW5leHQuc2ltcGxleXl0LmNvbS9nZXR0aW5nLXN0YXJ0ZWQuaHRtbA==\" title=\"http://theme-next.simpleyyt.com/getting-started.html\">开始使用NexT<i class=\"fa fa-external-link\"></i></span>。</p>\n<h2 id=\"模板的使用方法\"><a href=\"#模板的使用方法\" class=\"headerlink\" title=\"模板的使用方法\"></a>模板的使用方法</h2><p>按照上一节的步骤，相信已经在自己的仓库中建立好了NexT模板，接下来主要谈谈如何使用该模板，包括模板格式的修改、写博客时的一些格式问题。毕竟，满屏的英文看着还是有点头大<br>（口享！Cola现在已经去看复联4了！）</p>\n<h3 id=\"文件的修改\"><a href=\"#文件的修改\" class=\"headerlink\" title=\"文件的修改\"></a>文件的修改</h3><p>使用GitHub建立的个人网站，一个很重要的配置文件是<code>_config.yml</code>，从浏览器的仓库名中打开该文件，点右上角的铅笔符号，即可进入编辑，将开始的title、author、description进行修改，即可得到属于自己的个人网站。对于博文的书写，只要打开<code>_posts</code>文件夹，点击<code>Create New File</code>，然后将新的文件命名为<code>xxxx-xx-xx-文件名.md</code>，即可对文件进行编辑，最后在页面最下方点击<code>Commit Changes</code>，即可完成博文发布。稍等片刻，就会看到自己的博文被更新在了网页上。</p>\n<p>在<span class=\"exturl\" data-url=\"aHR0cDovL3RoZW1lLW5leHQuc2ltcGxleXl0LmNvbS90aGVtZS1zZXR0aW5ncy5odG1s\" title=\"http://theme-next.simpleyyt.com/theme-settings.html\">NexT主题配置<i class=\"fa fa-external-link\"></i></span>中给出了如何添加标签、添加分类、设置字体等其他操作。对于标签、分类的添加，其实只需要在<code>xx.md</code><br>文件开始的两条<code>---</code>中直接修改即可，该分类或标签如果没有将自动新建。</p>\n<h3 id=\"文章的格式\"><a href=\"#文章的格式\" class=\"headerlink\" title=\"文章的格式\"></a>文章的格式</h3><p>在前面的部分，已经给出了一级标题、二级标题、段落、超链接、数字/非数字表示小部分的格式示例。接下来介绍一些其他常用的格式。</p>\n<h4 id=\"文字的格式\"><a href=\"#文字的格式\" class=\"headerlink\" title=\"文字的格式\"></a>文字的格式</h4><ul>\n<li>文字超链接： <a href=\"\">test link</a> </li>\n<li>加粗加黑： <strong>Strong text</strong> </li>\n<li>下划线：<u>Underline text</u> non elit nisl</li>\n<li>文中横线： <del>Deleted text</del> tristique</li>\n<li>字下加灰色背景框：<code>Sed erat diam</code></li>\n<li>文字上标：我是<sup>上标</sup>。</li>\n<li>文字下标：你是<sub>下标</sub>。</li>\n<li>文字斜体：他是<cite>斜体</cite>。</li>\n<li>专有名词：<acronym title=\"National Basketball Association\">NBA</acronym></li>\n<li>下划双虚线：<abbr title=\"Avenue\">AVE</abbr></li>\n<li>juzhong： <blockquote class=\"blockquote-center\">blah blah blah</blockquote></li>\n<li>特殊格式的文本：</li>\n</ul>\n<blockquote>\n<p>另起一行的特殊格式。</p>\n</blockquote>\n<h4 id=\"换行定义\"><a href=\"#换行定义\" class=\"headerlink\" title=\"换行定义\"></a>换行定义</h4><dl><dt>定义1</dt><dd>换行定义.</dd></dl>\n\n<h4 id=\"图的插入\"><a href=\"#图的插入\" class=\"headerlink\" title=\"图的插入\"></a>图的插入</h4><p><img src=\"/images/avatar.jpg\" alt=\"avatar\"></p>\n<h4 id=\"表的插入\"><a href=\"#表的插入\" class=\"headerlink\" title=\"表的插入\"></a>表的插入</h4><table>\n<thead>\n<tr>\n<th>Table Header 1</th>\n<th>Table Header 2</th>\n<th>Table Header 3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Division 1</td>\n<td>Division 2</td>\n<td>Division 3</td>\n</tr>\n<tr>\n<td>Division 1</td>\n<td>Division 2</td>\n<td>Division 3</td>\n</tr>\n<tr>\n<td>Division 1</td>\n<td>Division 2</td>\n<td>Division 3</td>\n</tr>\n</tbody></table>\n<h4 id=\"程序语言的插入，以Clone-Jacman-theme为例\"><a href=\"#程序语言的插入，以Clone-Jacman-theme为例\" class=\"headerlink\" title=\"程序语言的插入，以Clone Jacman theme为例:\"></a>程序语言的插入，以Clone Jacman theme为例:</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/Simpleyyt/jekyll-theme-next.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> jekyll-theme-next</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"小表情emoji的插入，以及网站链接的插入\"><a href=\"#小表情emoji的插入，以及网站链接的插入\" class=\"headerlink\" title=\"小表情emoji的插入，以及网站链接的插入\"></a>小表情emoji的插入，以及网站链接的插入</h4><p>测试用小表情，如： :smile: .</p>\n<p>更多小表情请见 :wink: : <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2VicGFnZWZ4LmNvbS90b29scy9lbW9qaS1jaGVhdC1zaGVldC8=\" title=\"https://www.webpagefx.com/tools/emoji-cheat-sheet/\">https://www.webpagefx.com/tools/emoji-cheat-sheet/<i class=\"fa fa-external-link\"></i></span>.</p>\n<p>使用知乎的链接类型：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iZXN0enVvLmNu\" title=\"https://bestzuo.cn\">Sanarous的个人博客<i class=\"fa fa-external-link\"></i></span></p>\n<p>:bowtie::smile::laughing::blush::smiley::relaxed::smirk:<br>:heart_eyes::kissing_heart::kissing_closed_eyes::flushed::relieved::satisfied::grin:</p>\n<h4 id=\"公式的插入\"><a href=\"#公式的插入\" class=\"headerlink\" title=\"公式的插入\"></a>公式的插入</h4><p>从以下网站可以获得更多公式相关的内容：<br><span class=\"exturl\" data-url=\"aHR0cDovL2RvY3MubWF0aGpheC5vcmcvZW4vbGF0ZXN0Lw==\" title=\"http://docs.mathjax.org/en/latest/\">http://docs.mathjax.org/en/latest/<i class=\"fa fa-external-link\"></i></span></p>\n<p>另起一行写公式</p>\n<p>$$a^2 + b^2 = c^2$$</p>\n<p>如何实现的呢？用 <strong>double $</strong> 符号，如下</p>\n<p>$$a^2 + b^2 = c^2$$</p>\n<p>行中公式$ sin(x^2) $可以使用<code>$...$</code> 得到。</p>\n<p>下角标、非斜体文本的实现：</p>\n<p>$$ \\mathbf{X}_{n,p} = \\mathbf{A}_{n,k} \\mathbf{B}_{k,p} $$</p>\n<p>效果如下：</p>\n<p>\\[ \\mathbf{X}_{n,p} = \\mathbf{A}_{n,k} \\mathbf{B}_{k,p} \\]</p>\n<p>公式的插入有点类似于Latex，可以考虑从MathType直接转化为Latex公式。</p>\n<h4 id=\"高亮文本\"><a href=\"#高亮文本\" class=\"headerlink\" title=\"高亮文本\"></a>高亮文本</h4><ul>\n<li>正常文本</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(&#39;Hello World!&#39;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>高亮后的文本</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert( <span class=\"string\">'Hello, world!'</span> );</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span></span></span><br><span class=\"line\">  puts <span class=\"string\">'foo'</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>C++的高亮形式</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">(<span class=\"keyword\">int</span> arg1, <span class=\"keyword\">int</span> arg2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">string</span> str;</span><br><span class=\"line\">  foo(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Hello World\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>这是由Cola &amp; Library打造的第一篇技术博客，旨在说明个人网站的建立过程及模板的使用方法。</p>\n</blockquote>","more":"<h2 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h2><p>如果你能看到这篇博客，那么你最起码应该掌握：</p>\n<ol>\n<li>了解GitHub为何物？</li>\n<li>使用GitHub建立个人网站的优势在哪？</li>\n<li>有一个属于自己的GitHub账户。</li>\n</ol>\n<p>使用GitHub建立个人网站，主要有两种途经：一种是本地创建；另一种是直接在浏览器上进行操作。</p>\n<p>第一种方法的麻烦之处在于，需要配置各种环境，包括ruby、jekyll或hexos、bundle等。这对于一无所知的小白，或者是不习惯使用命令行编程的新手来说无疑是一个很高的门槛。<br>虽然网上已经有各种各样的教程，但是由于大家所使用版本、操作系统的不同，出现的问题各不一样，对新手村的学徒来说这无疑会耗费大量的时间和精力，而且经过搜索亦不一定<br>能保证找到解决方案，会对初学者造成一种浓浓的挫败感。</p>\n<p>相比而言，第二种方案对于新手则要简洁明了，不用考虑过多的环境配置，采用一个模板，直接在网站上进行修改，这个方案的门槛在于需要寻找一个自己喜欢的模板，并且学会如何修<br>改（当然这是在第一种方案中经过环境配置后也需要面对的困难）。</p>\n<h3 id=\"从本地创建\"><a href=\"#从本地创建\" class=\"headerlink\" title=\"从本地创建\"></a>从本地创建</h3><p>这里给出Library同学在学习本地创建时，看到的比较有用的一些网站，具体的过程不再详述。</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/u012168038/article/details/77715439\" target=\"_blank\" rel=\"noopener\">手把手教你在Github上建立自己的个人博客网站</a><br>（该网站简要介绍了简历个人网站所需要的内容，并给出了HelloGitHub示例）</li>\n<li><a href=\"https://www.jianshu.com/p/88e3474cef72\" target=\"_blank\" rel=\"noopener\">在windows下安装jekyll</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html\" target=\"_blank\" rel=\"noopener\">搭建一个免费的，无限流量的Blog—-github Pages和Jekyll入门</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/58229299\" target=\"_blank\" rel=\"noopener\">GitHub Pages 建立个人网站详细教程</a></li>\n</ul>\n<h3 id=\"从浏览器创建\"><a href=\"#从浏览器创建\" class=\"headerlink\" title=\"从浏览器创建\"></a>从浏览器创建</h3><p>上节中给出的示例均需在本地建立仓库，再上传，环境配置流程繁琐，操作过程不友好，好吧…其实就是Library同学最终有一步“bundle exec jekyll server”不知为何总是过不了，<br>因此偷懒放弃了。However，明明有简单的，为啥要避简就繁呢？</p>\n<p><a href=\"https://www.tortorse.com/archives/978\" target=\"_blank\" rel=\"noopener\">低成本打造个人独立博客</a>清晰地介绍了从网页直接建立个人网站的方法，本网站亦是参照此方法建立的。本网站使用的模板为<br><a href=\"https://github.com/Simpleyyt/jekyll-theme-next\" target=\"_blank\" rel=\"noopener\">jekyll-theme-next</a>，模板的使用方法见<a href=\"http://theme-next.simpleyyt.com/getting-started.html\" target=\"_blank\" rel=\"noopener\">开始使用NexT</a>。</p>\n<h2 id=\"模板的使用方法\"><a href=\"#模板的使用方法\" class=\"headerlink\" title=\"模板的使用方法\"></a>模板的使用方法</h2><p>按照上一节的步骤，相信已经在自己的仓库中建立好了NexT模板，接下来主要谈谈如何使用该模板，包括模板格式的修改、写博客时的一些格式问题。毕竟，满屏的英文看着还是有点头大<br>（口享！Cola现在已经去看复联4了！）</p>\n<h3 id=\"文件的修改\"><a href=\"#文件的修改\" class=\"headerlink\" title=\"文件的修改\"></a>文件的修改</h3><p>使用GitHub建立的个人网站，一个很重要的配置文件是<code>_config.yml</code>，从浏览器的仓库名中打开该文件，点右上角的铅笔符号，即可进入编辑，将开始的title、author、description进行修改，即可得到属于自己的个人网站。对于博文的书写，只要打开<code>_posts</code>文件夹，点击<code>Create New File</code>，然后将新的文件命名为<code>xxxx-xx-xx-文件名.md</code>，即可对文件进行编辑，最后在页面最下方点击<code>Commit Changes</code>，即可完成博文发布。稍等片刻，就会看到自己的博文被更新在了网页上。</p>\n<p>在<a href=\"http://theme-next.simpleyyt.com/theme-settings.html\" target=\"_blank\" rel=\"noopener\">NexT主题配置</a>中给出了如何添加标签、添加分类、设置字体等其他操作。对于标签、分类的添加，其实只需要在<code>xx.md</code><br>文件开始的两条<code>---</code>中直接修改即可，该分类或标签如果没有将自动新建。</p>\n<h3 id=\"文章的格式\"><a href=\"#文章的格式\" class=\"headerlink\" title=\"文章的格式\"></a>文章的格式</h3><p>在前面的部分，已经给出了一级标题、二级标题、段落、超链接、数字/非数字表示小部分的格式示例。接下来介绍一些其他常用的格式。</p>\n<h4 id=\"文字的格式\"><a href=\"#文字的格式\" class=\"headerlink\" title=\"文字的格式\"></a>文字的格式</h4><ul>\n<li>文字超链接： <a href=\"\">test link</a> </li>\n<li>加粗加黑： <strong>Strong text</strong> </li>\n<li>下划线：<u>Underline text</u> non elit nisl</li>\n<li>文中横线： <del>Deleted text</del> tristique</li>\n<li>字下加灰色背景框：<code>Sed erat diam</code></li>\n<li>文字上标：我是<sup>上标</sup>。</li>\n<li>文字下标：你是<sub>下标</sub>。</li>\n<li>文字斜体：他是<cite>斜体</cite>。</li>\n<li>专有名词：<acronym title=\"National Basketball Association\">NBA</acronym></li>\n<li>下划双虚线：<abbr title=\"Avenue\">AVE</abbr></li>\n<li>juzhong： <blockquote class=\"blockquote-center\">blah blah blah</blockquote></li>\n<li>特殊格式的文本：</li>\n</ul>\n<blockquote>\n<p>另起一行的特殊格式。</p>\n</blockquote>\n<h4 id=\"换行定义\"><a href=\"#换行定义\" class=\"headerlink\" title=\"换行定义\"></a>换行定义</h4><dl><dt>定义1</dt><dd>换行定义.</dd></dl>\n\n<h4 id=\"图的插入\"><a href=\"#图的插入\" class=\"headerlink\" title=\"图的插入\"></a>图的插入</h4><p><img src=\"/images/avatar.jpg\" alt=\"avatar\"></p>\n<h4 id=\"表的插入\"><a href=\"#表的插入\" class=\"headerlink\" title=\"表的插入\"></a>表的插入</h4><table>\n<thead>\n<tr>\n<th>Table Header 1</th>\n<th>Table Header 2</th>\n<th>Table Header 3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Division 1</td>\n<td>Division 2</td>\n<td>Division 3</td>\n</tr>\n<tr>\n<td>Division 1</td>\n<td>Division 2</td>\n<td>Division 3</td>\n</tr>\n<tr>\n<td>Division 1</td>\n<td>Division 2</td>\n<td>Division 3</td>\n</tr>\n</tbody></table>\n<h4 id=\"程序语言的插入，以Clone-Jacman-theme为例\"><a href=\"#程序语言的插入，以Clone-Jacman-theme为例\" class=\"headerlink\" title=\"程序语言的插入，以Clone Jacman theme为例:\"></a>程序语言的插入，以Clone Jacman theme为例:</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/Simpleyyt/jekyll-theme-next.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> jekyll-theme-next</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"小表情emoji的插入，以及网站链接的插入\"><a href=\"#小表情emoji的插入，以及网站链接的插入\" class=\"headerlink\" title=\"小表情emoji的插入，以及网站链接的插入\"></a>小表情emoji的插入，以及网站链接的插入</h4><p>测试用小表情，如： :smile: .</p>\n<p>更多小表情请见 :wink: : <a href=\"https://www.webpagefx.com/tools/emoji-cheat-sheet/\" target=\"_blank\" rel=\"noopener\">https://www.webpagefx.com/tools/emoji-cheat-sheet/</a>.</p>\n<p>使用知乎的链接类型：</p>\n<p><a href=\"https://bestzuo.cn\" target=\"_blank\" rel=\"noopener\" class=\"LinkCard\">Sanarous的个人博客</a></p>\n<p>:bowtie::smile::laughing::blush::smiley::relaxed::smirk:<br>:heart_eyes::kissing_heart::kissing_closed_eyes::flushed::relieved::satisfied::grin:</p>\n<h4 id=\"公式的插入\"><a href=\"#公式的插入\" class=\"headerlink\" title=\"公式的插入\"></a>公式的插入</h4><p>从以下网站可以获得更多公式相关的内容：<br><a href=\"http://docs.mathjax.org/en/latest/\" target=\"_blank\" rel=\"noopener\">http://docs.mathjax.org/en/latest/</a></p>\n<p>另起一行写公式</p>\n<p>$$a^2 + b^2 = c^2$$</p>\n<p>如何实现的呢？用 <strong>double $</strong> 符号，如下</p>\n<p>$$a^2 + b^2 = c^2$$</p>\n<p>行中公式$ sin(x^2) $可以使用<code>$...$</code> 得到。</p>\n<p>下角标、非斜体文本的实现：</p>\n<p>$$ \\mathbf{X}_{n,p} = \\mathbf{A}_{n,k} \\mathbf{B}_{k,p} $$</p>\n<p>效果如下：</p>\n<p>\\[ \\mathbf{X}_{n,p} = \\mathbf{A}_{n,k} \\mathbf{B}_{k,p} \\]</p>\n<p>公式的插入有点类似于Latex，可以考虑从MathType直接转化为Latex公式。</p>\n<h4 id=\"高亮文本\"><a href=\"#高亮文本\" class=\"headerlink\" title=\"高亮文本\"></a>高亮文本</h4><ul>\n<li>正常文本</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(&#39;Hello World!&#39;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>高亮后的文本</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert( <span class=\"string\">'Hello, world!'</span> );</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span></span></span><br><span class=\"line\">  puts <span class=\"string\">'foo'</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>C++的高亮形式</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">(<span class=\"keyword\">int</span> arg1, <span class=\"keyword\">int</span> arg2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">string</span> str;</span><br><span class=\"line\">  foo(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Hello World\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":"/images/avatar.jpg","popularPost_tmp_gaData":{"updated":"Wed Jan 29 2020 21:57:52 GMT+0800 (China Standard Time)","title":"个人网站的创建及NexT模板的使用","path":"archives/7130.html","eyeCatchImage":"/images/avatar.jpg","excerpt":"Our First Blog.","date":{"_isAMomentObject":true,"_i":"2019-04-28T12:35:23.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2019-04-28T12:35:23.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"工科生的基本功 > GitHub","tags":["GitHub","Cola","Library"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":2707},{"type":"photo","title":"题头插入照片","description":"Gallery Post Test. 测试图片类文章的显示。","abbrlink":62583,"date":"2019-04-28T15:23:20.000Z","_content":"\nNunc dignissim volutpat enim, non sollicitudin purus dignissim id. Nam sit amet urna eu velit lacinia eleifend. Proin auctor rhoncus ligula nec aliquet. Donec sodales molestie lacinia. Curabitur dictum faucibus urna at convallis. Aliquam in lectus at urna rutrum porta. In lacus arcu, molestie ut vestibulum ut, rhoncus sed eros. Sed et elit vitae risus pretium consectetur vel in mi. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi tempus turpis quis lectus rhoncus adipiscing. Proin pulvinar placerat suscipit. Maecenas imperdiet, quam vitae varius auctor, enim mauris vulputate sapien, nec laoreet neque diam non quam.\n\n<!-- more -->\n\n![Wallbase - dgnfly (wallbase.cc/wallpaper/1384450)](http://ww1.sinaimg.cn/large/81b78497jw1emfgts2pt4j21hc0u0k1c.jpg)\n\nEtiam luctus mauris at mi sollicitudin quis malesuada nibh porttitor. Vestibulum non dapibus magna. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Proin feugiat hendrerit viverra. Phasellus sit amet nunc mauris, eu ultricies tellus. Sed a mi tortor, eleifend varius erat. Proin consectetur molestie tortor eu gravida. Cras placerat orci id arcu tristique ut rutrum justo pulvinar. Maecenas lacinia fringilla diam non bibendum. Aenean vel viverra turpis. Integer ut leo nisi. Pellentesque vehicula quam ut sapien convallis consequat. Aliquam ut arcu purus, eget tempor purus. Integer eu tellus quis erat tristique gravida eu vel lorem.\n\nPS: 本来是在页面最上方的分类于标签中添加了如下语句：\nphotos:\n- http://ww1.sinaimg.cn/mw690/81b78497jw1emfgwkasznj21hc0u0qb7.jpg\n- http://ww3.sinaimg.cn/mw690/81b78497jw1emfgwjrh2pj21hc0u01g3.jpg\n- http://ww2.sinaimg.cn/mw690/81b78497jw1emfgwil5xkj21hc0u0tpm.jpg\n- http://ww3.sinaimg.cn/mw690/81b78497jw1emfgvcdn25j21hc0u0qpa.jpg","source":"_posts/2019-04-28-ÌâÍ·²åÈëÕÕÆ¬.md","raw":"---\ntype: photo\ntitle: 题头插入照片\ncategory:\n  - 工科生的基本功\n  - GitHub\ntags:\n  - GitHub\ndescription: Gallery Post Test. 测试图片类文章的显示。\nabbrlink: 62583\ndate: 2019-04-28 15:23:20\n---\n\nNunc dignissim volutpat enim, non sollicitudin purus dignissim id. Nam sit amet urna eu velit lacinia eleifend. Proin auctor rhoncus ligula nec aliquet. Donec sodales molestie lacinia. Curabitur dictum faucibus urna at convallis. Aliquam in lectus at urna rutrum porta. In lacus arcu, molestie ut vestibulum ut, rhoncus sed eros. Sed et elit vitae risus pretium consectetur vel in mi. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi tempus turpis quis lectus rhoncus adipiscing. Proin pulvinar placerat suscipit. Maecenas imperdiet, quam vitae varius auctor, enim mauris vulputate sapien, nec laoreet neque diam non quam.\n\n<!-- more -->\n\n![Wallbase - dgnfly (wallbase.cc/wallpaper/1384450)](http://ww1.sinaimg.cn/large/81b78497jw1emfgts2pt4j21hc0u0k1c.jpg)\n\nEtiam luctus mauris at mi sollicitudin quis malesuada nibh porttitor. Vestibulum non dapibus magna. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Proin feugiat hendrerit viverra. Phasellus sit amet nunc mauris, eu ultricies tellus. Sed a mi tortor, eleifend varius erat. Proin consectetur molestie tortor eu gravida. Cras placerat orci id arcu tristique ut rutrum justo pulvinar. Maecenas lacinia fringilla diam non bibendum. Aenean vel viverra turpis. Integer ut leo nisi. Pellentesque vehicula quam ut sapien convallis consequat. Aliquam ut arcu purus, eget tempor purus. Integer eu tellus quis erat tristique gravida eu vel lorem.\n\nPS: 本来是在页面最上方的分类于标签中添加了如下语句：\nphotos:\n- http://ww1.sinaimg.cn/mw690/81b78497jw1emfgwkasznj21hc0u0qb7.jpg\n- http://ww3.sinaimg.cn/mw690/81b78497jw1emfgwjrh2pj21hc0u01g3.jpg\n- http://ww2.sinaimg.cn/mw690/81b78497jw1emfgwil5xkj21hc0u0tpm.jpg\n- http://ww3.sinaimg.cn/mw690/81b78497jw1emfgvcdn25j21hc0u0qpa.jpg","slug":"2019-04-28-ÌâÍ·²åÈëÕÕÆ¬","published":1,"updated":"2020-01-29T13:57:52.756Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck60spy8t0009da556v8g560y","content":"<p>Nunc dignissim volutpat enim, non sollicitudin purus dignissim id. Nam sit amet urna eu velit lacinia eleifend. Proin auctor rhoncus ligula nec aliquet. Donec sodales molestie lacinia. Curabitur dictum faucibus urna at convallis. Aliquam in lectus at urna rutrum porta. In lacus arcu, molestie ut vestibulum ut, rhoncus sed eros. Sed et elit vitae risus pretium consectetur vel in mi. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi tempus turpis quis lectus rhoncus adipiscing. Proin pulvinar placerat suscipit. Maecenas imperdiet, quam vitae varius auctor, enim mauris vulputate sapien, nec laoreet neque diam non quam.</p>\n<a id=\"more\"></a>\n\n<p><img src=\"http://ww1.sinaimg.cn/large/81b78497jw1emfgts2pt4j21hc0u0k1c.jpg\" alt=\"Wallbase - dgnfly (wallbase.cc/wallpaper/1384450)\"></p>\n<p>Etiam luctus mauris at mi sollicitudin quis malesuada nibh porttitor. Vestibulum non dapibus magna. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Proin feugiat hendrerit viverra. Phasellus sit amet nunc mauris, eu ultricies tellus. Sed a mi tortor, eleifend varius erat. Proin consectetur molestie tortor eu gravida. Cras placerat orci id arcu tristique ut rutrum justo pulvinar. Maecenas lacinia fringilla diam non bibendum. Aenean vel viverra turpis. Integer ut leo nisi. Pellentesque vehicula quam ut sapien convallis consequat. Aliquam ut arcu purus, eget tempor purus. Integer eu tellus quis erat tristique gravida eu vel lorem.</p>\n<p>PS: 本来是在页面最上方的分类于标签中添加了如下语句：<br>photos:</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3MS5zaW5haW1nLmNuL213NjkwLzgxYjc4NDk3ancxZW1mZ3drYXN6bmoyMWhjMHUwcWI3LmpwZw==\" title=\"http://ww1.sinaimg.cn/mw690/81b78497jw1emfgwkasznj21hc0u0qb7.jpg\">http://ww1.sinaimg.cn/mw690/81b78497jw1emfgwkasznj21hc0u0qb7.jpg<i class=\"fa fa-external-link\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3My5zaW5haW1nLmNuL213NjkwLzgxYjc4NDk3ancxZW1mZ3dqcmgycGoyMWhjMHUwMWczLmpwZw==\" title=\"http://ww3.sinaimg.cn/mw690/81b78497jw1emfgwjrh2pj21hc0u01g3.jpg\">http://ww3.sinaimg.cn/mw690/81b78497jw1emfgwjrh2pj21hc0u01g3.jpg<i class=\"fa fa-external-link\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3Mi5zaW5haW1nLmNuL213NjkwLzgxYjc4NDk3ancxZW1mZ3dpbDV4a2oyMWhjMHUwdHBtLmpwZw==\" title=\"http://ww2.sinaimg.cn/mw690/81b78497jw1emfgwil5xkj21hc0u0tpm.jpg\">http://ww2.sinaimg.cn/mw690/81b78497jw1emfgwil5xkj21hc0u0tpm.jpg<i class=\"fa fa-external-link\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3My5zaW5haW1nLmNuL213NjkwLzgxYjc4NDk3ancxZW1mZ3ZjZG4yNWoyMWhjMHUwcXBhLmpwZw==\" title=\"http://ww3.sinaimg.cn/mw690/81b78497jw1emfgvcdn25j21hc0u0qpa.jpg\">http://ww3.sinaimg.cn/mw690/81b78497jw1emfgvcdn25j21hc0u0qpa.jpg<i class=\"fa fa-external-link\"></i></span></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>Nunc dignissim volutpat enim, non sollicitudin purus dignissim id. Nam sit amet urna eu velit lacinia eleifend. Proin auctor rhoncus ligula nec aliquet. Donec sodales molestie lacinia. Curabitur dictum faucibus urna at convallis. Aliquam in lectus at urna rutrum porta. In lacus arcu, molestie ut vestibulum ut, rhoncus sed eros. Sed et elit vitae risus pretium consectetur vel in mi. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi tempus turpis quis lectus rhoncus adipiscing. Proin pulvinar placerat suscipit. Maecenas imperdiet, quam vitae varius auctor, enim mauris vulputate sapien, nec laoreet neque diam non quam.</p>","more":"<p><img src=\"http://ww1.sinaimg.cn/large/81b78497jw1emfgts2pt4j21hc0u0k1c.jpg\" alt=\"Wallbase - dgnfly (wallbase.cc/wallpaper/1384450)\"></p>\n<p>Etiam luctus mauris at mi sollicitudin quis malesuada nibh porttitor. Vestibulum non dapibus magna. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Proin feugiat hendrerit viverra. Phasellus sit amet nunc mauris, eu ultricies tellus. Sed a mi tortor, eleifend varius erat. Proin consectetur molestie tortor eu gravida. Cras placerat orci id arcu tristique ut rutrum justo pulvinar. Maecenas lacinia fringilla diam non bibendum. Aenean vel viverra turpis. Integer ut leo nisi. Pellentesque vehicula quam ut sapien convallis consequat. Aliquam ut arcu purus, eget tempor purus. Integer eu tellus quis erat tristique gravida eu vel lorem.</p>\n<p>PS: 本来是在页面最上方的分类于标签中添加了如下语句：<br>photos:</p>\n<ul>\n<li><a href=\"http://ww1.sinaimg.cn/mw690/81b78497jw1emfgwkasznj21hc0u0qb7.jpg\" target=\"_blank\" rel=\"noopener\">http://ww1.sinaimg.cn/mw690/81b78497jw1emfgwkasznj21hc0u0qb7.jpg</a></li>\n<li><a href=\"http://ww3.sinaimg.cn/mw690/81b78497jw1emfgwjrh2pj21hc0u01g3.jpg\" target=\"_blank\" rel=\"noopener\">http://ww3.sinaimg.cn/mw690/81b78497jw1emfgwjrh2pj21hc0u01g3.jpg</a></li>\n<li><a href=\"http://ww2.sinaimg.cn/mw690/81b78497jw1emfgwil5xkj21hc0u0tpm.jpg\" target=\"_blank\" rel=\"noopener\">http://ww2.sinaimg.cn/mw690/81b78497jw1emfgwil5xkj21hc0u0tpm.jpg</a></li>\n<li><a href=\"http://ww3.sinaimg.cn/mw690/81b78497jw1emfgvcdn25j21hc0u0qpa.jpg\" target=\"_blank\" rel=\"noopener\">http://ww3.sinaimg.cn/mw690/81b78497jw1emfgvcdn25j21hc0u0qpa.jpg</a></li>\n</ul>","popularPost_tmp_postPath":true,"eyeCatchImage":"http://ww1.sinaimg.cn/large/81b78497jw1emfgts2pt4j21hc0u0k1c.jpg","popularPost_tmp_gaData":{"updated":"Wed Jan 29 2020 21:57:52 GMT+0800 (China Standard Time)","title":"题头插入照片","path":"archives/62583.html","eyeCatchImage":"http://ww1.sinaimg.cn/large/81b78497jw1emfgts2pt4j21hc0u0k1c.jpg","excerpt":"Gallery Post Test. 测试图片类文章的显示。","date":{"_isAMomentObject":true,"_i":"2019-04-28T15:23:20.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2019-04-28T15:23:20.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"工科生的基本功 > GitHub","tags":["GitHub"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1407},{"title":"主页显示部分内容","abbrlink":5651,"date":"2019-04-28T15:23:23.000Z","_content":"\nThe following contents should be invisible in home/archive page.\n\n<!-- more -->\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce eget urna vitae velit eleifend interdum at ac nisi. In nec ligula lacus. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Sed eu cursus erat, ut dapibus quam. Aliquam eleifend dolor vitae libero pharetra adipiscing. Etiam adipiscing dolor a quam tempor, eu convallis nulla varius. Aliquam sollicitudin risus a porta aliquam. Ut nec velit dolor. Proin eget leo lobortis, aliquam est sed, mollis mauris. Fusce vitae leo pretium massa accumsan condimentum. Fusce malesuada gravida lectus vel vulputate. Donec bibendum porta nibh ut aliquam.\n\nSed lorem felis, congue non fringilla eu, aliquam eu eros. Curabitur orci libero, mollis sed semper vitae, adipiscing in lectus. Aenean non egestas odio. Donec sollicitudin nisi quis lorem gravida, in pharetra mauris fringilla. Duis sit amet faucibus dolor, id aliquam neque. In egestas, odio gravida tempor dictum, mauris felis faucibus purus, sit amet commodo lacus diam vitae est. Ut ut quam eget massa semper sodales. Aenean non ipsum cursus, blandit lectus in, ornare odio. Curabitur ultrices porttitor vulputate.\n","source":"_posts/2019-04-28-Ö÷Ò³ÏÔÊ¾²¿·ÖÄÚÈÝ.md","raw":"---\ntitle: 主页显示部分内容\ncategories:\n  - 工科生的基本功\n  - GitHub\ntags:\n  - GitHub\nabbrlink: 5651\ndate: 2019-04-28 15:23:23\n---\n\nThe following contents should be invisible in home/archive page.\n\n<!-- more -->\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce eget urna vitae velit eleifend interdum at ac nisi. In nec ligula lacus. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Sed eu cursus erat, ut dapibus quam. Aliquam eleifend dolor vitae libero pharetra adipiscing. Etiam adipiscing dolor a quam tempor, eu convallis nulla varius. Aliquam sollicitudin risus a porta aliquam. Ut nec velit dolor. Proin eget leo lobortis, aliquam est sed, mollis mauris. Fusce vitae leo pretium massa accumsan condimentum. Fusce malesuada gravida lectus vel vulputate. Donec bibendum porta nibh ut aliquam.\n\nSed lorem felis, congue non fringilla eu, aliquam eu eros. Curabitur orci libero, mollis sed semper vitae, adipiscing in lectus. Aenean non egestas odio. Donec sollicitudin nisi quis lorem gravida, in pharetra mauris fringilla. Duis sit amet faucibus dolor, id aliquam neque. In egestas, odio gravida tempor dictum, mauris felis faucibus purus, sit amet commodo lacus diam vitae est. Ut ut quam eget massa semper sodales. Aenean non ipsum cursus, blandit lectus in, ornare odio. Curabitur ultrices porttitor vulputate.\n","slug":"2019-04-28-Ö÷Ò³ÏÔÊ¾²¿·ÖÄÚÈÝ","published":1,"updated":"2020-01-29T13:57:52.756Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck60spy8v000bda55dqynemow","content":"<p>The following contents should be invisible in home/archive page.</p>\n<a id=\"more\"></a>\n\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce eget urna vitae velit eleifend interdum at ac nisi. In nec ligula lacus. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Sed eu cursus erat, ut dapibus quam. Aliquam eleifend dolor vitae libero pharetra adipiscing. Etiam adipiscing dolor a quam tempor, eu convallis nulla varius. Aliquam sollicitudin risus a porta aliquam. Ut nec velit dolor. Proin eget leo lobortis, aliquam est sed, mollis mauris. Fusce vitae leo pretium massa accumsan condimentum. Fusce malesuada gravida lectus vel vulputate. Donec bibendum porta nibh ut aliquam.</p>\n<p>Sed lorem felis, congue non fringilla eu, aliquam eu eros. Curabitur orci libero, mollis sed semper vitae, adipiscing in lectus. Aenean non egestas odio. Donec sollicitudin nisi quis lorem gravida, in pharetra mauris fringilla. Duis sit amet faucibus dolor, id aliquam neque. In egestas, odio gravida tempor dictum, mauris felis faucibus purus, sit amet commodo lacus diam vitae est. Ut ut quam eget massa semper sodales. Aenean non ipsum cursus, blandit lectus in, ornare odio. Curabitur ultrices porttitor vulputate.</p>\n","site":{"data":{}},"excerpt":"<p>The following contents should be invisible in home/archive page.</p>","more":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce eget urna vitae velit eleifend interdum at ac nisi. In nec ligula lacus. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Sed eu cursus erat, ut dapibus quam. Aliquam eleifend dolor vitae libero pharetra adipiscing. Etiam adipiscing dolor a quam tempor, eu convallis nulla varius. Aliquam sollicitudin risus a porta aliquam. Ut nec velit dolor. Proin eget leo lobortis, aliquam est sed, mollis mauris. Fusce vitae leo pretium massa accumsan condimentum. Fusce malesuada gravida lectus vel vulputate. Donec bibendum porta nibh ut aliquam.</p>\n<p>Sed lorem felis, congue non fringilla eu, aliquam eu eros. Curabitur orci libero, mollis sed semper vitae, adipiscing in lectus. Aenean non egestas odio. Donec sollicitudin nisi quis lorem gravida, in pharetra mauris fringilla. Duis sit amet faucibus dolor, id aliquam neque. In egestas, odio gravida tempor dictum, mauris felis faucibus purus, sit amet commodo lacus diam vitae est. Ut ut quam eget massa semper sodales. Aenean non ipsum cursus, blandit lectus in, ornare odio. Curabitur ultrices porttitor vulputate.</p>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Jan 29 2020 21:57:52 GMT+0800 (China Standard Time)","title":"主页显示部分内容","path":"archives/5651.html","eyeCatchImage":null,"excerpt":"<p>The following contents should be invisible in home/archive page.</p>","date":{"_isAMomentObject":true,"_i":"2019-04-28T15:23:23.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2019-04-28T15:23:23.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"工科生的基本功 > GitHub","tags":["GitHub"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1038},{"title":"MATLAB函数———newrb","description":"newrb神经网络函数学习。","date":"2019-05-11T09:00:00.000Z","abbrlink":48200,"_content":"\n> MATLAB函数学习篇之newrb函数。\n\n<!-- more -->\n\n## newrb函数介绍\n\n`newrb`是MATLAB中用于建立径向基函数神经网络(radial basis function network，RBF network)的函数，函数的两种调用格式如下：\n\n```\nnet = newrb\n[net,tr] = newrb(P,T,goal,spread,MN,DF)\n```\n\n径向基网可用于近似函数。 newrb函数将神经元添加到径向基网络的隐藏层，直到它满足指定的均方误差目标。\n\n第一种函数调用方式`net = newrb`用于创建一个新的网络，matlab给出各种参数，不实用。\n\n常用的是第二种调用方式`[net,tr] = newrb(P,T,goal,spread,MN,DF)`，其中的参数含义如下：\n\n - P -- $R \\times Q$维矩阵，Q维输入向量\n - T -- $S \\times Q$维矩阵，Q维目标类向量\n - goal -- 均方误差目标(MSE),默认为0\n - spread -- 径向基函数(RBF)速度，默认为1\n - MN -- 最大神经元数，默认为Q\n - DF -- 在显示之间添加的神经元数量，默认为25\n - 返回值为径向基网络。\n \n速度(spread)越大，函数逼近越平滑。 速度太大意味着需要很多神经元才能适应快速变化的功能。 \n太小的速度意味着需要许多神经元来适应平滑的功能，并且网络可能不会很好地概括。 \n使用不同的速度调用newrb以找到给定问题的最佳值。\n \n## 示例程序\n\nMATLAB给出的[官方示例程序](https://ww2.mathworks.cn/help/deeplearning/examples/radial-basis-approximation.html?searchHighlight=newrb&s_tid=doc_srchtitle)或者在MATLAB命令窗口输入以下命令。\n\n```\nopenExample('nnet/demorb1')\n```\n\n另外从YouTube上搜`newrb`找到的一个例程如下：\n\n```\nclear;\nclc;\nclose all;\nx = linspace(0,4*pi,3000);\ny = (sin(x) + cos(x) + tanh(x)) + rand(1,3000);\nnet = newrb(x,y,0.1,1,100,10);\nview(net);\nresult = sim(net,x);\nscatter(x,y);\nhold on;\nplot(x,result,'LineWidth',2,'MarkerSize',10);\nR = regression(y,result)\n```\n","source":"_posts/2019-05-11-MATLABº¯Êý¡ª¡ª¡ªnewrb.md","raw":"---\ntitle: MATLAB函数———newrb\ndescription: newrb神经网络函数学习。\ndate: '2019.05.11.09:00:00'\ncategories:\n  - 工科生的基本功\n  - 快乐码农\ntags:\n  - MATLAB\n  - Library\nabbrlink: 48200\n---\n\n> MATLAB函数学习篇之newrb函数。\n\n<!-- more -->\n\n## newrb函数介绍\n\n`newrb`是MATLAB中用于建立径向基函数神经网络(radial basis function network，RBF network)的函数，函数的两种调用格式如下：\n\n```\nnet = newrb\n[net,tr] = newrb(P,T,goal,spread,MN,DF)\n```\n\n径向基网可用于近似函数。 newrb函数将神经元添加到径向基网络的隐藏层，直到它满足指定的均方误差目标。\n\n第一种函数调用方式`net = newrb`用于创建一个新的网络，matlab给出各种参数，不实用。\n\n常用的是第二种调用方式`[net,tr] = newrb(P,T,goal,spread,MN,DF)`，其中的参数含义如下：\n\n - P -- $R \\times Q$维矩阵，Q维输入向量\n - T -- $S \\times Q$维矩阵，Q维目标类向量\n - goal -- 均方误差目标(MSE),默认为0\n - spread -- 径向基函数(RBF)速度，默认为1\n - MN -- 最大神经元数，默认为Q\n - DF -- 在显示之间添加的神经元数量，默认为25\n - 返回值为径向基网络。\n \n速度(spread)越大，函数逼近越平滑。 速度太大意味着需要很多神经元才能适应快速变化的功能。 \n太小的速度意味着需要许多神经元来适应平滑的功能，并且网络可能不会很好地概括。 \n使用不同的速度调用newrb以找到给定问题的最佳值。\n \n## 示例程序\n\nMATLAB给出的[官方示例程序](https://ww2.mathworks.cn/help/deeplearning/examples/radial-basis-approximation.html?searchHighlight=newrb&s_tid=doc_srchtitle)或者在MATLAB命令窗口输入以下命令。\n\n```\nopenExample('nnet/demorb1')\n```\n\n另外从YouTube上搜`newrb`找到的一个例程如下：\n\n```\nclear;\nclc;\nclose all;\nx = linspace(0,4*pi,3000);\ny = (sin(x) + cos(x) + tanh(x)) + rand(1,3000);\nnet = newrb(x,y,0.1,1,100,10);\nview(net);\nresult = sim(net,x);\nscatter(x,y);\nhold on;\nplot(x,result,'LineWidth',2,'MarkerSize',10);\nR = regression(y,result)\n```\n","slug":"2019-05-11-MATLABº¯Êý¡ª¡ª¡ªnewrb","published":1,"updated":"2020-01-29T13:57:52.756Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck60spy8z000fda551ipr61ny","content":"<blockquote>\n<p>MATLAB函数学习篇之newrb函数。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"newrb函数介绍\"><a href=\"#newrb函数介绍\" class=\"headerlink\" title=\"newrb函数介绍\"></a>newrb函数介绍</h2><p><code>newrb</code>是MATLAB中用于建立径向基函数神经网络(radial basis function network，RBF network)的函数，函数的两种调用格式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">net &#x3D; newrb</span><br><span class=\"line\">[net,tr] &#x3D; newrb(P,T,goal,spread,MN,DF)</span><br></pre></td></tr></table></figure>\n\n<p>径向基网可用于近似函数。 newrb函数将神经元添加到径向基网络的隐藏层，直到它满足指定的均方误差目标。</p>\n<p>第一种函数调用方式<code>net = newrb</code>用于创建一个新的网络，matlab给出各种参数，不实用。</p>\n<p>常用的是第二种调用方式<code>[net,tr] = newrb(P,T,goal,spread,MN,DF)</code>，其中的参数含义如下：</p>\n<ul>\n<li>P – $R \\times Q$维矩阵，Q维输入向量</li>\n<li>T – $S \\times Q$维矩阵，Q维目标类向量</li>\n<li>goal – 均方误差目标(MSE),默认为0</li>\n<li>spread – 径向基函数(RBF)速度，默认为1</li>\n<li>MN – 最大神经元数，默认为Q</li>\n<li>DF – 在显示之间添加的神经元数量，默认为25</li>\n<li>返回值为径向基网络。</li>\n</ul>\n<p>速度(spread)越大，函数逼近越平滑。 速度太大意味着需要很多神经元才能适应快速变化的功能。<br>太小的速度意味着需要许多神经元来适应平滑的功能，并且网络可能不会很好地概括。<br>使用不同的速度调用newrb以找到给定问题的最佳值。</p>\n<h2 id=\"示例程序\"><a href=\"#示例程序\" class=\"headerlink\" title=\"示例程序\"></a>示例程序</h2><p>MATLAB给出的<span class=\"exturl\" data-url=\"aHR0cHM6Ly93dzIubWF0aHdvcmtzLmNuL2hlbHAvZGVlcGxlYXJuaW5nL2V4YW1wbGVzL3JhZGlhbC1iYXNpcy1hcHByb3hpbWF0aW9uLmh0bWw/c2VhcmNoSGlnaGxpZ2h0PW5ld3JiJnNfdGlkPWRvY19zcmNodGl0bGU=\" title=\"https://ww2.mathworks.cn/help/deeplearning/examples/radial-basis-approximation.html?searchHighlight=newrb&s_tid=doc_srchtitle\">官方示例程序<i class=\"fa fa-external-link\"></i></span>或者在MATLAB命令窗口输入以下命令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openExample(&#39;nnet&#x2F;demorb1&#39;)</span><br></pre></td></tr></table></figure>\n\n<p>另外从YouTube上搜<code>newrb</code>找到的一个例程如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clear;</span><br><span class=\"line\">clc;</span><br><span class=\"line\">close all;</span><br><span class=\"line\">x &#x3D; linspace(0,4*pi,3000);</span><br><span class=\"line\">y &#x3D; (sin(x) + cos(x) + tanh(x)) + rand(1,3000);</span><br><span class=\"line\">net &#x3D; newrb(x,y,0.1,1,100,10);</span><br><span class=\"line\">view(net);</span><br><span class=\"line\">result &#x3D; sim(net,x);</span><br><span class=\"line\">scatter(x,y);</span><br><span class=\"line\">hold on;</span><br><span class=\"line\">plot(x,result,&#39;LineWidth&#39;,2,&#39;MarkerSize&#39;,10);</span><br><span class=\"line\">R &#x3D; regression(y,result)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>MATLAB函数学习篇之newrb函数。</p>\n</blockquote>","more":"<h2 id=\"newrb函数介绍\"><a href=\"#newrb函数介绍\" class=\"headerlink\" title=\"newrb函数介绍\"></a>newrb函数介绍</h2><p><code>newrb</code>是MATLAB中用于建立径向基函数神经网络(radial basis function network，RBF network)的函数，函数的两种调用格式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">net &#x3D; newrb</span><br><span class=\"line\">[net,tr] &#x3D; newrb(P,T,goal,spread,MN,DF)</span><br></pre></td></tr></table></figure>\n\n<p>径向基网可用于近似函数。 newrb函数将神经元添加到径向基网络的隐藏层，直到它满足指定的均方误差目标。</p>\n<p>第一种函数调用方式<code>net = newrb</code>用于创建一个新的网络，matlab给出各种参数，不实用。</p>\n<p>常用的是第二种调用方式<code>[net,tr] = newrb(P,T,goal,spread,MN,DF)</code>，其中的参数含义如下：</p>\n<ul>\n<li>P – $R \\times Q$维矩阵，Q维输入向量</li>\n<li>T – $S \\times Q$维矩阵，Q维目标类向量</li>\n<li>goal – 均方误差目标(MSE),默认为0</li>\n<li>spread – 径向基函数(RBF)速度，默认为1</li>\n<li>MN – 最大神经元数，默认为Q</li>\n<li>DF – 在显示之间添加的神经元数量，默认为25</li>\n<li>返回值为径向基网络。</li>\n</ul>\n<p>速度(spread)越大，函数逼近越平滑。 速度太大意味着需要很多神经元才能适应快速变化的功能。<br>太小的速度意味着需要许多神经元来适应平滑的功能，并且网络可能不会很好地概括。<br>使用不同的速度调用newrb以找到给定问题的最佳值。</p>\n<h2 id=\"示例程序\"><a href=\"#示例程序\" class=\"headerlink\" title=\"示例程序\"></a>示例程序</h2><p>MATLAB给出的<a href=\"https://ww2.mathworks.cn/help/deeplearning/examples/radial-basis-approximation.html?searchHighlight=newrb&s_tid=doc_srchtitle\" target=\"_blank\" rel=\"noopener\">官方示例程序</a>或者在MATLAB命令窗口输入以下命令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openExample(&#39;nnet&#x2F;demorb1&#39;)</span><br></pre></td></tr></table></figure>\n\n<p>另外从YouTube上搜<code>newrb</code>找到的一个例程如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clear;</span><br><span class=\"line\">clc;</span><br><span class=\"line\">close all;</span><br><span class=\"line\">x &#x3D; linspace(0,4*pi,3000);</span><br><span class=\"line\">y &#x3D; (sin(x) + cos(x) + tanh(x)) + rand(1,3000);</span><br><span class=\"line\">net &#x3D; newrb(x,y,0.1,1,100,10);</span><br><span class=\"line\">view(net);</span><br><span class=\"line\">result &#x3D; sim(net,x);</span><br><span class=\"line\">scatter(x,y);</span><br><span class=\"line\">hold on;</span><br><span class=\"line\">plot(x,result,&#39;LineWidth&#39;,2,&#39;MarkerSize&#39;,10);</span><br><span class=\"line\">R &#x3D; regression(y,result)</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Jan 29 2020 21:57:52 GMT+0800 (China Standard Time)","title":"MATLAB函数———newrb","path":"archives/48200.html","eyeCatchImage":null,"excerpt":"newrb神经网络函数学习。","date":{"_isAMomentObject":true,"_i":"2019-05-11T09:00:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2019-05-11T09:00:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"工科生的基本功 > 快乐码农","tags":["Library","MATLAB"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":959},{"title":"远程仓库与本地仓库的同步","description":"远程仓库与本地仓库的双向同步指令介绍","date":"2019-05-11T16:00:00.000Z","abbrlink":58743,"_content":"\n> 本文说明如何将远程仓库同步到本地，以及本地仓库添加文件后如何上传至远程仓库。\n\n<!-- more -->\n\n根据前面几篇博文的介绍，一般来讲我们在远程(即浏览器端)操作GitHub上建立的仓库即可。\n但是，在远程仓库中添加和删除文件很不方便。因此，需要通过一些指令来将远程仓库更新至\n本地仓库(即电脑硬盘中存储的仓库)，添加文件后再将本地仓库上传至远程仓库。\n\n### 远程仓库的同步\n\n如果本地还没有该仓库，则需要从远程仓库clone到本地。Windows10系统用`windows+X`快捷键按出一个菜单栏并选择`Windows PowerShell(管理员)`，\n打开首先将当前路径修改至期望存放该仓库的路径，然后使用`git clone`命令将其克隆至本地。具体命令如下：\n\n```sh\ncd e:       #打开E盘，准备在根目录下存放该仓库\ngit clone https://github.com/ColaInLibrary/colainlibrary.github.com     #将仓库的URL地址添加在命令后即可同步至本地\ncd colainlibrary.github.com       #打开同步后的本地仓库\n```\n\n三条指令执行完后便从PowerShell中打开了本地仓库。如果在执行`git clone`时失败，那应该是`git`没有安装的原因，\n那么需要下载[Git for Windows](https://gitforwindows.org/).安装后可以在文件浏览器中打开本地文件夹`colainlibrary.github.com`，\n再点右键，选择`Git Bash Here`，则可以直接使用`git`命令，而不需要像 PowerShell一样先打开到本地文件路径。\n\n如果是已经创建好的本地仓库，从命令行中打开本地仓库后，执行以下命令来将远程仓库同步至本地。\n\n```sh\ngit pull\n```\n\n### Git中登录GitHub账号\n\n为了实现本地仓库同步至远程仓库，往往需要在Git中登录自己的账号，相应的命令为：\n\n```sh\n git config --global user.email \"1901151471@qq.com\"    #登录邮箱\n git config --global user.name \"ColaInLibrary\"         #登录用户名\n```\n\n### 本地仓库同步至远程\n\n当在本地仓库中添加图片(或者其他文件)至路径`E:\\colainlibrary.github.com\\assests\\images`后，需要将本地仓库使用如下指令更新至远程仓库。\n\n```sh\ngit status    #查看当前状态\ngit add *     #将所有文件添加至缓冲区，也可以使用 git add \\assests\\images\\文件名.jpg添加单个文件\ngit commit -m \"image update\"     #引号中是在说本次更新内容\ngit push      #将在缓冲区的文件push到远程仓库\n```\n\n### 远程仓库文件的删除\n\n在远程仓库中删除文件十分不便，因此可以先将远程仓库同步至本地仓库再将其删除。以删除远程仓库中的文件夹`target`为例，首先打开本地仓库的文件夹，然后执行下列命令：\n\n```sh\ngit pull    #远程仓库同步\ngit rm -r --cached target     #删除target文件夹\ngit commit -m \"删除target文件夹\"     #引号中是说明本次更新内容\ngit push      #将本次更新push到远程仓库\n```\n\n值得一提的是，经过以上操作，远程仓库中的文件夹`target`被删除掉了，本地仓库中的不会被删掉。\n","source":"_posts/2019-05-11-Ô¶³Ì²Ö¿âÓë±¾µØ²Ö¿âµÄÍ¬²½.md","raw":"---\ntitle: 远程仓库与本地仓库的同步\ndescription: 远程仓库与本地仓库的双向同步指令介绍\ndate: '2019.05.11.16:00:00'\ncategories:\n  - 工科生的基本功\n  - GitHub\ntags:\n  - GitHub\n  - Library\nabbrlink: 58743\n---\n\n> 本文说明如何将远程仓库同步到本地，以及本地仓库添加文件后如何上传至远程仓库。\n\n<!-- more -->\n\n根据前面几篇博文的介绍，一般来讲我们在远程(即浏览器端)操作GitHub上建立的仓库即可。\n但是，在远程仓库中添加和删除文件很不方便。因此，需要通过一些指令来将远程仓库更新至\n本地仓库(即电脑硬盘中存储的仓库)，添加文件后再将本地仓库上传至远程仓库。\n\n### 远程仓库的同步\n\n如果本地还没有该仓库，则需要从远程仓库clone到本地。Windows10系统用`windows+X`快捷键按出一个菜单栏并选择`Windows PowerShell(管理员)`，\n打开首先将当前路径修改至期望存放该仓库的路径，然后使用`git clone`命令将其克隆至本地。具体命令如下：\n\n```sh\ncd e:       #打开E盘，准备在根目录下存放该仓库\ngit clone https://github.com/ColaInLibrary/colainlibrary.github.com     #将仓库的URL地址添加在命令后即可同步至本地\ncd colainlibrary.github.com       #打开同步后的本地仓库\n```\n\n三条指令执行完后便从PowerShell中打开了本地仓库。如果在执行`git clone`时失败，那应该是`git`没有安装的原因，\n那么需要下载[Git for Windows](https://gitforwindows.org/).安装后可以在文件浏览器中打开本地文件夹`colainlibrary.github.com`，\n再点右键，选择`Git Bash Here`，则可以直接使用`git`命令，而不需要像 PowerShell一样先打开到本地文件路径。\n\n如果是已经创建好的本地仓库，从命令行中打开本地仓库后，执行以下命令来将远程仓库同步至本地。\n\n```sh\ngit pull\n```\n\n### Git中登录GitHub账号\n\n为了实现本地仓库同步至远程仓库，往往需要在Git中登录自己的账号，相应的命令为：\n\n```sh\n git config --global user.email \"1901151471@qq.com\"    #登录邮箱\n git config --global user.name \"ColaInLibrary\"         #登录用户名\n```\n\n### 本地仓库同步至远程\n\n当在本地仓库中添加图片(或者其他文件)至路径`E:\\colainlibrary.github.com\\assests\\images`后，需要将本地仓库使用如下指令更新至远程仓库。\n\n```sh\ngit status    #查看当前状态\ngit add *     #将所有文件添加至缓冲区，也可以使用 git add \\assests\\images\\文件名.jpg添加单个文件\ngit commit -m \"image update\"     #引号中是在说本次更新内容\ngit push      #将在缓冲区的文件push到远程仓库\n```\n\n### 远程仓库文件的删除\n\n在远程仓库中删除文件十分不便，因此可以先将远程仓库同步至本地仓库再将其删除。以删除远程仓库中的文件夹`target`为例，首先打开本地仓库的文件夹，然后执行下列命令：\n\n```sh\ngit pull    #远程仓库同步\ngit rm -r --cached target     #删除target文件夹\ngit commit -m \"删除target文件夹\"     #引号中是说明本次更新内容\ngit push      #将本次更新push到远程仓库\n```\n\n值得一提的是，经过以上操作，远程仓库中的文件夹`target`被删除掉了，本地仓库中的不会被删掉。\n","slug":"2019-05-11-Ô¶³Ì²Ö¿âÓë±¾µØ²Ö¿âµÄÍ¬²½","published":1,"updated":"2020-01-29T13:57:52.756Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck60spy91000hda55gmp24axh","content":"<blockquote>\n<p>本文说明如何将远程仓库同步到本地，以及本地仓库添加文件后如何上传至远程仓库。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<p>根据前面几篇博文的介绍，一般来讲我们在远程(即浏览器端)操作GitHub上建立的仓库即可。<br>但是，在远程仓库中添加和删除文件很不方便。因此，需要通过一些指令来将远程仓库更新至<br>本地仓库(即电脑硬盘中存储的仓库)，添加文件后再将本地仓库上传至远程仓库。</p>\n<h3 id=\"远程仓库的同步\"><a href=\"#远程仓库的同步\" class=\"headerlink\" title=\"远程仓库的同步\"></a>远程仓库的同步</h3><p>如果本地还没有该仓库，则需要从远程仓库clone到本地。Windows10系统用<code>windows+X</code>快捷键按出一个菜单栏并选择<code>Windows PowerShell(管理员)</code>，<br>打开首先将当前路径修改至期望存放该仓库的路径，然后使用<code>git clone</code>命令将其克隆至本地。具体命令如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> e:       <span class=\"comment\">#打开E盘，准备在根目录下存放该仓库</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/ColaInLibrary/colainlibrary.github.com     <span class=\"comment\">#将仓库的URL地址添加在命令后即可同步至本地</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> colainlibrary.github.com       <span class=\"comment\">#打开同步后的本地仓库</span></span><br></pre></td></tr></table></figure>\n\n<p>三条指令执行完后便从PowerShell中打开了本地仓库。如果在执行<code>git clone</code>时失败，那应该是<code>git</code>没有安装的原因，<br>那么需要下载<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRmb3J3aW5kb3dzLm9yZy8=\" title=\"https://gitforwindows.org/\">Git for Windows<i class=\"fa fa-external-link\"></i></span>.安装后可以在文件浏览器中打开本地文件夹<code>colainlibrary.github.com</code>，<br>再点右键，选择<code>Git Bash Here</code>，则可以直接使用<code>git</code>命令，而不需要像 PowerShell一样先打开到本地文件路径。</p>\n<p>如果是已经创建好的本地仓库，从命令行中打开本地仓库后，执行以下命令来将远程仓库同步至本地。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Git中登录GitHub账号\"><a href=\"#Git中登录GitHub账号\" class=\"headerlink\" title=\"Git中登录GitHub账号\"></a>Git中登录GitHub账号</h3><p>为了实现本地仓库同步至远程仓库，往往需要在Git中登录自己的账号，相应的命令为：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.email <span class=\"string\">\"1901151471@qq.com\"</span>    <span class=\"comment\">#登录邮箱</span></span><br><span class=\"line\">git config --global user.name <span class=\"string\">\"ColaInLibrary\"</span>         <span class=\"comment\">#登录用户名</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"本地仓库同步至远程\"><a href=\"#本地仓库同步至远程\" class=\"headerlink\" title=\"本地仓库同步至远程\"></a>本地仓库同步至远程</h3><p>当在本地仓库中添加图片(或者其他文件)至路径<code>E:\\colainlibrary.github.com\\assests\\images</code>后，需要将本地仓库使用如下指令更新至远程仓库。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status    <span class=\"comment\">#查看当前状态</span></span><br><span class=\"line\">git add *     <span class=\"comment\">#将所有文件添加至缓冲区，也可以使用 git add \\assests\\images\\文件名.jpg添加单个文件</span></span><br><span class=\"line\">git commit -m <span class=\"string\">\"image update\"</span>     <span class=\"comment\">#引号中是在说本次更新内容</span></span><br><span class=\"line\">git push      <span class=\"comment\">#将在缓冲区的文件push到远程仓库</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"远程仓库文件的删除\"><a href=\"#远程仓库文件的删除\" class=\"headerlink\" title=\"远程仓库文件的删除\"></a>远程仓库文件的删除</h3><p>在远程仓库中删除文件十分不便，因此可以先将远程仓库同步至本地仓库再将其删除。以删除远程仓库中的文件夹<code>target</code>为例，首先打开本地仓库的文件夹，然后执行下列命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull    <span class=\"comment\">#远程仓库同步</span></span><br><span class=\"line\">git rm -r --cached target     <span class=\"comment\">#删除target文件夹</span></span><br><span class=\"line\">git commit -m <span class=\"string\">\"删除target文件夹\"</span>     <span class=\"comment\">#引号中是说明本次更新内容</span></span><br><span class=\"line\">git push      <span class=\"comment\">#将本次更新push到远程仓库</span></span><br></pre></td></tr></table></figure>\n\n<p>值得一提的是，经过以上操作，远程仓库中的文件夹<code>target</code>被删除掉了，本地仓库中的不会被删掉。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>本文说明如何将远程仓库同步到本地，以及本地仓库添加文件后如何上传至远程仓库。</p>\n</blockquote>","more":"<p>根据前面几篇博文的介绍，一般来讲我们在远程(即浏览器端)操作GitHub上建立的仓库即可。<br>但是，在远程仓库中添加和删除文件很不方便。因此，需要通过一些指令来将远程仓库更新至<br>本地仓库(即电脑硬盘中存储的仓库)，添加文件后再将本地仓库上传至远程仓库。</p>\n<h3 id=\"远程仓库的同步\"><a href=\"#远程仓库的同步\" class=\"headerlink\" title=\"远程仓库的同步\"></a>远程仓库的同步</h3><p>如果本地还没有该仓库，则需要从远程仓库clone到本地。Windows10系统用<code>windows+X</code>快捷键按出一个菜单栏并选择<code>Windows PowerShell(管理员)</code>，<br>打开首先将当前路径修改至期望存放该仓库的路径，然后使用<code>git clone</code>命令将其克隆至本地。具体命令如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> e:       <span class=\"comment\">#打开E盘，准备在根目录下存放该仓库</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/ColaInLibrary/colainlibrary.github.com     <span class=\"comment\">#将仓库的URL地址添加在命令后即可同步至本地</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> colainlibrary.github.com       <span class=\"comment\">#打开同步后的本地仓库</span></span><br></pre></td></tr></table></figure>\n\n<p>三条指令执行完后便从PowerShell中打开了本地仓库。如果在执行<code>git clone</code>时失败，那应该是<code>git</code>没有安装的原因，<br>那么需要下载<a href=\"https://gitforwindows.org/\" target=\"_blank\" rel=\"noopener\">Git for Windows</a>.安装后可以在文件浏览器中打开本地文件夹<code>colainlibrary.github.com</code>，<br>再点右键，选择<code>Git Bash Here</code>，则可以直接使用<code>git</code>命令，而不需要像 PowerShell一样先打开到本地文件路径。</p>\n<p>如果是已经创建好的本地仓库，从命令行中打开本地仓库后，执行以下命令来将远程仓库同步至本地。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Git中登录GitHub账号\"><a href=\"#Git中登录GitHub账号\" class=\"headerlink\" title=\"Git中登录GitHub账号\"></a>Git中登录GitHub账号</h3><p>为了实现本地仓库同步至远程仓库，往往需要在Git中登录自己的账号，相应的命令为：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.email <span class=\"string\">\"1901151471@qq.com\"</span>    <span class=\"comment\">#登录邮箱</span></span><br><span class=\"line\">git config --global user.name <span class=\"string\">\"ColaInLibrary\"</span>         <span class=\"comment\">#登录用户名</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"本地仓库同步至远程\"><a href=\"#本地仓库同步至远程\" class=\"headerlink\" title=\"本地仓库同步至远程\"></a>本地仓库同步至远程</h3><p>当在本地仓库中添加图片(或者其他文件)至路径<code>E:\\colainlibrary.github.com\\assests\\images</code>后，需要将本地仓库使用如下指令更新至远程仓库。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status    <span class=\"comment\">#查看当前状态</span></span><br><span class=\"line\">git add *     <span class=\"comment\">#将所有文件添加至缓冲区，也可以使用 git add \\assests\\images\\文件名.jpg添加单个文件</span></span><br><span class=\"line\">git commit -m <span class=\"string\">\"image update\"</span>     <span class=\"comment\">#引号中是在说本次更新内容</span></span><br><span class=\"line\">git push      <span class=\"comment\">#将在缓冲区的文件push到远程仓库</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"远程仓库文件的删除\"><a href=\"#远程仓库文件的删除\" class=\"headerlink\" title=\"远程仓库文件的删除\"></a>远程仓库文件的删除</h3><p>在远程仓库中删除文件十分不便，因此可以先将远程仓库同步至本地仓库再将其删除。以删除远程仓库中的文件夹<code>target</code>为例，首先打开本地仓库的文件夹，然后执行下列命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull    <span class=\"comment\">#远程仓库同步</span></span><br><span class=\"line\">git rm -r --cached target     <span class=\"comment\">#删除target文件夹</span></span><br><span class=\"line\">git commit -m <span class=\"string\">\"删除target文件夹\"</span>     <span class=\"comment\">#引号中是说明本次更新内容</span></span><br><span class=\"line\">git push      <span class=\"comment\">#将本次更新push到远程仓库</span></span><br></pre></td></tr></table></figure>\n\n<p>值得一提的是，经过以上操作，远程仓库中的文件夹<code>target</code>被删除掉了，本地仓库中的不会被删掉。</p>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Jan 29 2020 21:57:52 GMT+0800 (China Standard Time)","title":"远程仓库与本地仓库的同步","path":"archives/58743.html","eyeCatchImage":null,"excerpt":"远程仓库与本地仓库的双向同步指令介绍","date":{"_isAMomentObject":true,"_i":"2019-05-11T16:00:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2019-05-11T16:00:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"工科生的基本功 > GitHub","tags":["GitHub","Library"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1332},{"title":"笔记本电脑选型","description":"记录曾经看过的笔记本电脑","date":"2019-05-13T16:30:00.000Z","abbrlink":36616,"_content":"\n> 笔记本电脑总是看个不停，又记不下来，还是有个文件来“收纳”吧。\n\n<!-- more -->\n\n华为笔记本系列：（处理器没有后缀均表示低压版CPU）\n\n| 型号 | Matebook X Pro        | Matebook X | Matebook 14                | Matebook 13 | Matebook D |\n| --- | --- | --- | --- | --- |\n| CPU | i5-8265 / i7-8 / i7-8 | i5-7 / i7-7 | i5-8/i5-8/i7-8             | i5-8 / i7-8 | i7\n| 显卡 | MX250,2G             | HD620       | UHD620 / 2GMX250 / 2GMX250  | MX150,2G   | MX150,2G   |\n| 内存 | 8G / 8G / 16G        | 8G/8G       | 8G/8G/8G                   | 8G/8G       | 16G\n| 硬盘 | 512G / 512G / 1T     | 256G / 512G   | 512G / 512G / 512G       | 512G / 512  | 256G\n| 屏幕 | 3k,13.9寸            | 2k,13寸     | 2k,14寸                     | 2k,13寸     |2k，15.6  |\n| 重量 | 1.33kg               | 1.05kg      | 1.53kg                     | 1.3kg       | 1.9kg       |\n| 售价 | 8999 / 9999 / 13999  | 7188/8688   | 5699 / 5999 / 6999         | 5699 /6399  | 6488  |\n\n其他：（处理器没有后缀均表示低压版CPU）\n\n| 型号 | Dell燃7000    | 小新Air    | 雷蛇灵刃潜行版13   | DELL XPS13  | Surface PRO 6 |\n| --- | --- | --- | --- | --- |\n| CPU | i7-8          | i7-8        | i7-8             |  i7-8       | i7\n| 显卡 | UHD620       | 2G，MX150   | UHD620           | UHD620      | UHD620      |\n| 内存 | 16G          | 16G         | 16G              |  16G        | 16G\n| 硬盘 | 512G / 1T    | 256G/512G   | 512G             | 512G         | 512G\n| 屏幕 | 1080p,13.3寸 | 1080p,13.3寸| 1080p,13.3寸      | 1080p,13.3寸 |2k，12.3     |\n| 重量 | 1.33kg       | 1.25kg      | 1.3kg             | 1.2kg       | 0.8kg(无键盘)       |\n| 售价 | 7399 / 8799  | 5699/6599   | 9999              | 9998        | 13878(含键盘等外加1000左右)|\n","source":"_posts/2019-05-13-±Ê¼Ç±¾µçÄÔÑ¡ÐÍ.md","raw":"---\ntitle: 笔记本电脑选型\ndescription: 记录曾经看过的笔记本电脑\ndate: '2019.05.13.16:30'\ncategories:\n  - 茶余裨谈\ntags:\n  - 茶余裨谈\n  - Library\nabbrlink: 36616\n---\n\n> 笔记本电脑总是看个不停，又记不下来，还是有个文件来“收纳”吧。\n\n<!-- more -->\n\n华为笔记本系列：（处理器没有后缀均表示低压版CPU）\n\n| 型号 | Matebook X Pro        | Matebook X | Matebook 14                | Matebook 13 | Matebook D |\n| --- | --- | --- | --- | --- |\n| CPU | i5-8265 / i7-8 / i7-8 | i5-7 / i7-7 | i5-8/i5-8/i7-8             | i5-8 / i7-8 | i7\n| 显卡 | MX250,2G             | HD620       | UHD620 / 2GMX250 / 2GMX250  | MX150,2G   | MX150,2G   |\n| 内存 | 8G / 8G / 16G        | 8G/8G       | 8G/8G/8G                   | 8G/8G       | 16G\n| 硬盘 | 512G / 512G / 1T     | 256G / 512G   | 512G / 512G / 512G       | 512G / 512  | 256G\n| 屏幕 | 3k,13.9寸            | 2k,13寸     | 2k,14寸                     | 2k,13寸     |2k，15.6  |\n| 重量 | 1.33kg               | 1.05kg      | 1.53kg                     | 1.3kg       | 1.9kg       |\n| 售价 | 8999 / 9999 / 13999  | 7188/8688   | 5699 / 5999 / 6999         | 5699 /6399  | 6488  |\n\n其他：（处理器没有后缀均表示低压版CPU）\n\n| 型号 | Dell燃7000    | 小新Air    | 雷蛇灵刃潜行版13   | DELL XPS13  | Surface PRO 6 |\n| --- | --- | --- | --- | --- |\n| CPU | i7-8          | i7-8        | i7-8             |  i7-8       | i7\n| 显卡 | UHD620       | 2G，MX150   | UHD620           | UHD620      | UHD620      |\n| 内存 | 16G          | 16G         | 16G              |  16G        | 16G\n| 硬盘 | 512G / 1T    | 256G/512G   | 512G             | 512G         | 512G\n| 屏幕 | 1080p,13.3寸 | 1080p,13.3寸| 1080p,13.3寸      | 1080p,13.3寸 |2k，12.3     |\n| 重量 | 1.33kg       | 1.25kg      | 1.3kg             | 1.2kg       | 0.8kg(无键盘)       |\n| 售价 | 7399 / 8799  | 5699/6599   | 9999              | 9998        | 13878(含键盘等外加1000左右)|\n","slug":"2019-05-13-±Ê¼Ç±¾µçÄÔÑ¡ÐÍ","published":1,"updated":"2020-01-29T13:57:52.756Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck60spy94000lda555rwt4sgz","content":"<blockquote>\n<p>笔记本电脑总是看个不停，又记不下来，还是有个文件来“收纳”吧。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<p>华为笔记本系列：（处理器没有后缀均表示低压版CPU）</p>\n<p>| 型号 | Matebook X Pro        | Matebook X | Matebook 14                | Matebook 13 | Matebook D |<br>| — | — | — | — | — |<br>| CPU | i5-8265 / i7-8 / i7-8 | i5-7 / i7-7 | i5-8/i5-8/i7-8             | i5-8 / i7-8 | i7<br>| 显卡 | MX250,2G             | HD620       | UHD620 / 2GMX250 / 2GMX250  | MX150,2G   | MX150,2G   |<br>| 内存 | 8G / 8G / 16G        | 8G/8G       | 8G/8G/8G                   | 8G/8G       | 16G<br>| 硬盘 | 512G / 512G / 1T     | 256G / 512G   | 512G / 512G / 512G       | 512G / 512  | 256G<br>| 屏幕 | 3k,13.9寸            | 2k,13寸     | 2k,14寸                     | 2k,13寸     |2k，15.6  |<br>| 重量 | 1.33kg               | 1.05kg      | 1.53kg                     | 1.3kg       | 1.9kg       |<br>| 售价 | 8999 / 9999 / 13999  | 7188/8688   | 5699 / 5999 / 6999         | 5699 /6399  | 6488  |</p>\n<p>其他：（处理器没有后缀均表示低压版CPU）</p>\n<p>| 型号 | Dell燃7000    | 小新Air    | 雷蛇灵刃潜行版13   | DELL XPS13  | Surface PRO 6 |<br>| — | — | — | — | — |<br>| CPU | i7-8          | i7-8        | i7-8             |  i7-8       | i7<br>| 显卡 | UHD620       | 2G，MX150   | UHD620           | UHD620      | UHD620      |<br>| 内存 | 16G          | 16G         | 16G              |  16G        | 16G<br>| 硬盘 | 512G / 1T    | 256G/512G   | 512G             | 512G         | 512G<br>| 屏幕 | 1080p,13.3寸 | 1080p,13.3寸| 1080p,13.3寸      | 1080p,13.3寸 |2k，12.3     |<br>| 重量 | 1.33kg       | 1.25kg      | 1.3kg             | 1.2kg       | 0.8kg(无键盘)       |<br>| 售价 | 7399 / 8799  | 5699/6599   | 9999              | 9998        | 13878(含键盘等外加1000左右)|</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>笔记本电脑总是看个不停，又记不下来，还是有个文件来“收纳”吧。</p>\n</blockquote>","more":"<p>华为笔记本系列：（处理器没有后缀均表示低压版CPU）</p>\n<p>| 型号 | Matebook X Pro        | Matebook X | Matebook 14                | Matebook 13 | Matebook D |<br>| — | — | — | — | — |<br>| CPU | i5-8265 / i7-8 / i7-8 | i5-7 / i7-7 | i5-8/i5-8/i7-8             | i5-8 / i7-8 | i7<br>| 显卡 | MX250,2G             | HD620       | UHD620 / 2GMX250 / 2GMX250  | MX150,2G   | MX150,2G   |<br>| 内存 | 8G / 8G / 16G        | 8G/8G       | 8G/8G/8G                   | 8G/8G       | 16G<br>| 硬盘 | 512G / 512G / 1T     | 256G / 512G   | 512G / 512G / 512G       | 512G / 512  | 256G<br>| 屏幕 | 3k,13.9寸            | 2k,13寸     | 2k,14寸                     | 2k,13寸     |2k，15.6  |<br>| 重量 | 1.33kg               | 1.05kg      | 1.53kg                     | 1.3kg       | 1.9kg       |<br>| 售价 | 8999 / 9999 / 13999  | 7188/8688   | 5699 / 5999 / 6999         | 5699 /6399  | 6488  |</p>\n<p>其他：（处理器没有后缀均表示低压版CPU）</p>\n<p>| 型号 | Dell燃7000    | 小新Air    | 雷蛇灵刃潜行版13   | DELL XPS13  | Surface PRO 6 |<br>| — | — | — | — | — |<br>| CPU | i7-8          | i7-8        | i7-8             |  i7-8       | i7<br>| 显卡 | UHD620       | 2G，MX150   | UHD620           | UHD620      | UHD620      |<br>| 内存 | 16G          | 16G         | 16G              |  16G        | 16G<br>| 硬盘 | 512G / 1T    | 256G/512G   | 512G             | 512G         | 512G<br>| 屏幕 | 1080p,13.3寸 | 1080p,13.3寸| 1080p,13.3寸      | 1080p,13.3寸 |2k，12.3     |<br>| 重量 | 1.33kg       | 1.25kg      | 1.3kg             | 1.2kg       | 0.8kg(无键盘)       |<br>| 售价 | 7399 / 8799  | 5699/6599   | 9999              | 9998        | 13878(含键盘等外加1000左右)|</p>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Jan 29 2020 21:57:52 GMT+0800 (China Standard Time)","title":"笔记本电脑选型","path":"archives/36616.html","eyeCatchImage":null,"excerpt":"记录曾经看过的笔记本电脑","date":{"_isAMomentObject":true,"_i":"2019-05-13T16:30:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2019-05-13T16:30:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"茶余裨谈","tags":["Library","茶余裨谈"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":845},{"title":"VMware的联网、外设、复制粘贴问题","description":"The method for connecting Internet and USB in VMware","date":"2019-05-20T09:30:00.000Z","abbrlink":50695,"_content":"\n> Edit this file in Safari for iPad. Unfortunately, it doesn't support Chinese input.本文中的环境为Ubuntu16.04LTS + VMware10.\n\n<!-- more -->\n\n# Connecting Internet\n\nClick \"virtual machine\" tag --> settings --> Ethernet --> Choose the first choice(Bridge...) in \"Network connection\"\n\nclick \"Edit\" tag --> \"Virtual Network adapter\" --> \"VMnet0\" --> choose \"Bridged(...)\" and select your computer's wireless card --> OK\n\n中文版：\n\n1.在VMware的标签栏中，依次点击：虚拟机 --> 设置 --> 网络 --> 桥接，如下图所示：\n\n![VMnet1]( /images/20190520/VMnet1.png)\n\n2.在VMware的标签栏中，依次点击：编辑 --> 虚拟网络适配器 --> VMnet0 --> 桥接模式 --> 桥接到笔记本电脑的网卡，如下图所示：\n\n![VMnet2]( /images/20190520/VMnet2.png)\n\n> 参考链接：[VMware Workstation虚拟机不能联网的解决办法](https://blog.csdn.net/demonson/article/details/79276621)\n> 参考链接：[VMware虚拟机不能联网的解决办法](https://blog.csdn.net/zhyulo/article/details/78730009)\n\n# Connecting USB\n\nIn win10: right click \"This PC\" --> Management --> Service --> Find \"VMware USB...\" --> right click \"Manual Operation\" --> \"Launch\".\n\nIn VMware: click \"Virtual Machine\" tag --> Mobile Device --> choose your USB device.\n\n中文版：\n\n1.在win10桌面，依次点击：计算机 --> 管理 --> 服务 --> VMware USB，右键点击启动，如下图所示：\n\n![VMUSB]( /images/20190520/VMUSB.png)\n\n2.在VMware的标签栏中，依次点击：虚拟机 --> 可移动设备 --> 选择自己的USB设备。\n\n\n# 复制粘贴问题\n\n在虚拟机中装好Ubuntu后，会出现无法将Win10中的文件或文字复制到Ubuntu中的情况，需要在Ubuntu中进行设置才可以。\n\n1.打开虚拟机，运行系统后，在VMware中点击\"虚拟机\" --> \"安装VMware Tools\"，往往会出现下图所示的错误：\n\n![VMerror]( /images/20190520/VMerror.png)\n\n上图所示的错误并不代表我们无法安装，只是需要一些操作步骤，如下所示；\n\n2.点击：虚拟机 --> 设置，将VMware安装目录中的linux.iso文件添加到DVD驱动器中，添加完毕后会在侧边栏出现DVD图标，如下图所示：\n\n![VMTools]( /images/20190520/VMTools.png)\n\n3.打开侧边栏会出现一个DVD的图标，打开，找到一个\"xx.tar\"的压缩包；\n\n![VMToolsPackage]( /images/20190520/VMToolsPackage.png)\n\n4.将该压缩包解压到期望目录下；\n\n5.从期望目录中打开解压后的文件夹，并在解压后的文件夹中右键打开终端，运行\n\n```javascript\nsudo ./vmware-install.pl\n```\n\n6.在终端中一路回车，直至安装完成，重新启动虚拟机，即可。\n\nPS:如果经过上述的操作还是没办法实现的话，可以尝试在Ubuntu的Terminal中输入以下命令：\n\n```javascript\nsudo apt-get autoremove open-vm-tools\nsudo apt-get install open-vm-tools\nsudo apt-get install open-vm-tools-desktop\n```\n\n执行完上述指令后，关机，再重新以管理员身份启动VMware，即可。\n","source":"_posts/2019-05-20-VMwareµÄÁªÍø¡¢ÍâÉè¡¢¸´ÖÆÕ³ÌùÎÊÌâ.md","raw":"---\ntitle: VMware的联网、外设、复制粘贴问题\ndescription: The method for connecting Internet and USB in VMware\ndate: '2019.05.20.09:30'\ncategories:\n  - 工科生的基本功\n  - 软件技术\ntags:\n  - VMware\n  - Library\nabbrlink: 50695\n---\n\n> Edit this file in Safari for iPad. Unfortunately, it doesn't support Chinese input.本文中的环境为Ubuntu16.04LTS + VMware10.\n\n<!-- more -->\n\n# Connecting Internet\n\nClick \"virtual machine\" tag --> settings --> Ethernet --> Choose the first choice(Bridge...) in \"Network connection\"\n\nclick \"Edit\" tag --> \"Virtual Network adapter\" --> \"VMnet0\" --> choose \"Bridged(...)\" and select your computer's wireless card --> OK\n\n中文版：\n\n1.在VMware的标签栏中，依次点击：虚拟机 --> 设置 --> 网络 --> 桥接，如下图所示：\n\n![VMnet1]( /images/20190520/VMnet1.png)\n\n2.在VMware的标签栏中，依次点击：编辑 --> 虚拟网络适配器 --> VMnet0 --> 桥接模式 --> 桥接到笔记本电脑的网卡，如下图所示：\n\n![VMnet2]( /images/20190520/VMnet2.png)\n\n> 参考链接：[VMware Workstation虚拟机不能联网的解决办法](https://blog.csdn.net/demonson/article/details/79276621)\n> 参考链接：[VMware虚拟机不能联网的解决办法](https://blog.csdn.net/zhyulo/article/details/78730009)\n\n# Connecting USB\n\nIn win10: right click \"This PC\" --> Management --> Service --> Find \"VMware USB...\" --> right click \"Manual Operation\" --> \"Launch\".\n\nIn VMware: click \"Virtual Machine\" tag --> Mobile Device --> choose your USB device.\n\n中文版：\n\n1.在win10桌面，依次点击：计算机 --> 管理 --> 服务 --> VMware USB，右键点击启动，如下图所示：\n\n![VMUSB]( /images/20190520/VMUSB.png)\n\n2.在VMware的标签栏中，依次点击：虚拟机 --> 可移动设备 --> 选择自己的USB设备。\n\n\n# 复制粘贴问题\n\n在虚拟机中装好Ubuntu后，会出现无法将Win10中的文件或文字复制到Ubuntu中的情况，需要在Ubuntu中进行设置才可以。\n\n1.打开虚拟机，运行系统后，在VMware中点击\"虚拟机\" --> \"安装VMware Tools\"，往往会出现下图所示的错误：\n\n![VMerror]( /images/20190520/VMerror.png)\n\n上图所示的错误并不代表我们无法安装，只是需要一些操作步骤，如下所示；\n\n2.点击：虚拟机 --> 设置，将VMware安装目录中的linux.iso文件添加到DVD驱动器中，添加完毕后会在侧边栏出现DVD图标，如下图所示：\n\n![VMTools]( /images/20190520/VMTools.png)\n\n3.打开侧边栏会出现一个DVD的图标，打开，找到一个\"xx.tar\"的压缩包；\n\n![VMToolsPackage]( /images/20190520/VMToolsPackage.png)\n\n4.将该压缩包解压到期望目录下；\n\n5.从期望目录中打开解压后的文件夹，并在解压后的文件夹中右键打开终端，运行\n\n```javascript\nsudo ./vmware-install.pl\n```\n\n6.在终端中一路回车，直至安装完成，重新启动虚拟机，即可。\n\nPS:如果经过上述的操作还是没办法实现的话，可以尝试在Ubuntu的Terminal中输入以下命令：\n\n```javascript\nsudo apt-get autoremove open-vm-tools\nsudo apt-get install open-vm-tools\nsudo apt-get install open-vm-tools-desktop\n```\n\n执行完上述指令后，关机，再重新以管理员身份启动VMware，即可。\n","slug":"2019-05-20-VMwareµÄÁªÍø¡¢ÍâÉè¡¢¸´ÖÆÕ³ÌùÎÊÌâ","published":1,"updated":"2020-01-29T13:57:52.760Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck60spy95000nda55c798f8r7","content":"<blockquote>\n<p>Edit this file in Safari for iPad. Unfortunately, it doesn’t support Chinese input.本文中的环境为Ubuntu16.04LTS + VMware10.</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h1 id=\"Connecting-Internet\"><a href=\"#Connecting-Internet\" class=\"headerlink\" title=\"Connecting Internet\"></a>Connecting Internet</h1><p>Click “virtual machine” tag –&gt; settings –&gt; Ethernet –&gt; Choose the first choice(Bridge…) in “Network connection”</p>\n<p>click “Edit” tag –&gt; “Virtual Network adapter” –&gt; “VMnet0” –&gt; choose “Bridged(…)” and select your computer’s wireless card –&gt; OK</p>\n<p>中文版：</p>\n<p>1.在VMware的标签栏中，依次点击：虚拟机 –&gt; 设置 –&gt; 网络 –&gt; 桥接，如下图所示：</p>\n<p><img src=\"/images/20190520/VMnet1.png\" alt=\"VMnet1\"></p>\n<p>2.在VMware的标签栏中，依次点击：编辑 –&gt; 虚拟网络适配器 –&gt; VMnet0 –&gt; 桥接模式 –&gt; 桥接到笔记本电脑的网卡，如下图所示：</p>\n<p><img src=\"/images/20190520/VMnet2.png\" alt=\"VMnet2\"></p>\n<blockquote>\n<p>参考链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RlbW9uc29uL2FydGljbGUvZGV0YWlscy83OTI3NjYyMQ==\" title=\"https://blog.csdn.net/demonson/article/details/79276621\">VMware Workstation虚拟机不能联网的解决办法<i class=\"fa fa-external-link\"></i></span><br>参考链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poeXVsby9hcnRpY2xlL2RldGFpbHMvNzg3MzAwMDk=\" title=\"https://blog.csdn.net/zhyulo/article/details/78730009\">VMware虚拟机不能联网的解决办法<i class=\"fa fa-external-link\"></i></span></p>\n</blockquote>\n<h1 id=\"Connecting-USB\"><a href=\"#Connecting-USB\" class=\"headerlink\" title=\"Connecting USB\"></a>Connecting USB</h1><p>In win10: right click “This PC” –&gt; Management –&gt; Service –&gt; Find “VMware USB…” –&gt; right click “Manual Operation” –&gt; “Launch”.</p>\n<p>In VMware: click “Virtual Machine” tag –&gt; Mobile Device –&gt; choose your USB device.</p>\n<p>中文版：</p>\n<p>1.在win10桌面，依次点击：计算机 –&gt; 管理 –&gt; 服务 –&gt; VMware USB，右键点击启动，如下图所示：</p>\n<p><img src=\"/images/20190520/VMUSB.png\" alt=\"VMUSB\"></p>\n<p>2.在VMware的标签栏中，依次点击：虚拟机 –&gt; 可移动设备 –&gt; 选择自己的USB设备。</p>\n<h1 id=\"复制粘贴问题\"><a href=\"#复制粘贴问题\" class=\"headerlink\" title=\"复制粘贴问题\"></a>复制粘贴问题</h1><p>在虚拟机中装好Ubuntu后，会出现无法将Win10中的文件或文字复制到Ubuntu中的情况，需要在Ubuntu中进行设置才可以。</p>\n<p>1.打开虚拟机，运行系统后，在VMware中点击”虚拟机” –&gt; “安装VMware Tools”，往往会出现下图所示的错误：</p>\n<p><img src=\"/images/20190520/VMerror.png\" alt=\"VMerror\"></p>\n<p>上图所示的错误并不代表我们无法安装，只是需要一些操作步骤，如下所示；</p>\n<p>2.点击：虚拟机 –&gt; 设置，将VMware安装目录中的linux.iso文件添加到DVD驱动器中，添加完毕后会在侧边栏出现DVD图标，如下图所示：</p>\n<p><img src=\"/images/20190520/VMTools.png\" alt=\"VMTools\"></p>\n<p>3.打开侧边栏会出现一个DVD的图标，打开，找到一个”xx.tar”的压缩包；</p>\n<p><img src=\"/images/20190520/VMToolsPackage.png\" alt=\"VMToolsPackage\"></p>\n<p>4.将该压缩包解压到期望目录下；</p>\n<p>5.从期望目录中打开解压后的文件夹，并在解压后的文件夹中右键打开终端，运行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ./vmware-install.pl</span><br></pre></td></tr></table></figure>\n\n<p>6.在终端中一路回车，直至安装完成，重新启动虚拟机，即可。</p>\n<p>PS:如果经过上述的操作还是没办法实现的话，可以尝试在Ubuntu的Terminal中输入以下命令：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-<span class=\"keyword\">get</span> autoremove open-vm-tools</span><br><span class=\"line\">sudo apt-<span class=\"keyword\">get</span> install open-vm-tools</span><br><span class=\"line\">sudo apt-<span class=\"keyword\">get</span> install open-vm-tools-desktop</span><br></pre></td></tr></table></figure>\n\n<p>执行完上述指令后，关机，再重新以管理员身份启动VMware，即可。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>Edit this file in Safari for iPad. Unfortunately, it doesn’t support Chinese input.本文中的环境为Ubuntu16.04LTS + VMware10.</p>\n</blockquote>","more":"<h1 id=\"Connecting-Internet\"><a href=\"#Connecting-Internet\" class=\"headerlink\" title=\"Connecting Internet\"></a>Connecting Internet</h1><p>Click “virtual machine” tag –&gt; settings –&gt; Ethernet –&gt; Choose the first choice(Bridge…) in “Network connection”</p>\n<p>click “Edit” tag –&gt; “Virtual Network adapter” –&gt; “VMnet0” –&gt; choose “Bridged(…)” and select your computer’s wireless card –&gt; OK</p>\n<p>中文版：</p>\n<p>1.在VMware的标签栏中，依次点击：虚拟机 –&gt; 设置 –&gt; 网络 –&gt; 桥接，如下图所示：</p>\n<p><img src=\"/images/20190520/VMnet1.png\" alt=\"VMnet1\"></p>\n<p>2.在VMware的标签栏中，依次点击：编辑 –&gt; 虚拟网络适配器 –&gt; VMnet0 –&gt; 桥接模式 –&gt; 桥接到笔记本电脑的网卡，如下图所示：</p>\n<p><img src=\"/images/20190520/VMnet2.png\" alt=\"VMnet2\"></p>\n<blockquote>\n<p>参考链接：<a href=\"https://blog.csdn.net/demonson/article/details/79276621\" target=\"_blank\" rel=\"noopener\">VMware Workstation虚拟机不能联网的解决办法</a><br>参考链接：<a href=\"https://blog.csdn.net/zhyulo/article/details/78730009\" target=\"_blank\" rel=\"noopener\">VMware虚拟机不能联网的解决办法</a></p>\n</blockquote>\n<h1 id=\"Connecting-USB\"><a href=\"#Connecting-USB\" class=\"headerlink\" title=\"Connecting USB\"></a>Connecting USB</h1><p>In win10: right click “This PC” –&gt; Management –&gt; Service –&gt; Find “VMware USB…” –&gt; right click “Manual Operation” –&gt; “Launch”.</p>\n<p>In VMware: click “Virtual Machine” tag –&gt; Mobile Device –&gt; choose your USB device.</p>\n<p>中文版：</p>\n<p>1.在win10桌面，依次点击：计算机 –&gt; 管理 –&gt; 服务 –&gt; VMware USB，右键点击启动，如下图所示：</p>\n<p><img src=\"/images/20190520/VMUSB.png\" alt=\"VMUSB\"></p>\n<p>2.在VMware的标签栏中，依次点击：虚拟机 –&gt; 可移动设备 –&gt; 选择自己的USB设备。</p>\n<h1 id=\"复制粘贴问题\"><a href=\"#复制粘贴问题\" class=\"headerlink\" title=\"复制粘贴问题\"></a>复制粘贴问题</h1><p>在虚拟机中装好Ubuntu后，会出现无法将Win10中的文件或文字复制到Ubuntu中的情况，需要在Ubuntu中进行设置才可以。</p>\n<p>1.打开虚拟机，运行系统后，在VMware中点击”虚拟机” –&gt; “安装VMware Tools”，往往会出现下图所示的错误：</p>\n<p><img src=\"/images/20190520/VMerror.png\" alt=\"VMerror\"></p>\n<p>上图所示的错误并不代表我们无法安装，只是需要一些操作步骤，如下所示；</p>\n<p>2.点击：虚拟机 –&gt; 设置，将VMware安装目录中的linux.iso文件添加到DVD驱动器中，添加完毕后会在侧边栏出现DVD图标，如下图所示：</p>\n<p><img src=\"/images/20190520/VMTools.png\" alt=\"VMTools\"></p>\n<p>3.打开侧边栏会出现一个DVD的图标，打开，找到一个”xx.tar”的压缩包；</p>\n<p><img src=\"/images/20190520/VMToolsPackage.png\" alt=\"VMToolsPackage\"></p>\n<p>4.将该压缩包解压到期望目录下；</p>\n<p>5.从期望目录中打开解压后的文件夹，并在解压后的文件夹中右键打开终端，运行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ./vmware-install.pl</span><br></pre></td></tr></table></figure>\n\n<p>6.在终端中一路回车，直至安装完成，重新启动虚拟机，即可。</p>\n<p>PS:如果经过上述的操作还是没办法实现的话，可以尝试在Ubuntu的Terminal中输入以下命令：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-<span class=\"keyword\">get</span> autoremove open-vm-tools</span><br><span class=\"line\">sudo apt-<span class=\"keyword\">get</span> install open-vm-tools</span><br><span class=\"line\">sudo apt-<span class=\"keyword\">get</span> install open-vm-tools-desktop</span><br></pre></td></tr></table></figure>\n\n<p>执行完上述指令后，关机，再重新以管理员身份启动VMware，即可。</p>","popularPost_tmp_postPath":true,"eyeCatchImage":"/images/20190520/VMnet1.png","popularPost_tmp_gaData":{"updated":"Wed Jan 29 2020 21:57:52 GMT+0800 (China Standard Time)","title":"VMware的联网、外设、复制粘贴问题","path":"archives/50695.html","eyeCatchImage":"/images/20190520/VMnet1.png","excerpt":"The method for connecting Internet and USB in VMware","date":{"_isAMomentObject":true,"_i":"2019-05-20T09:30:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2019-05-20T09:30:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"工科生的基本功 > 软件技术","tags":["Library","VMware"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1434},{"title":"GitHub写博客的教程","description":"介绍用浏览器写博客中的过程","date":"2019-05-21T15:30:00.000Z","abbrlink":4685,"_content":"\n\n<!-- more -->\n\n# 图文描述\n\n## 新建博文\n\n1.打开GitHub官网，已有账户选择\"Sign In\"，如果还未注册选择\"Sign Up\"注册新账户。\n![01]( /images/20190521/01.jpg)\n\n2.登录GitHub账户。\n![02]( /images/20190521/02.jpg)\n\n3.选择要操作的仓库，这里是\"ColaInLibrary/colainlibrary.github.com.io\"。\n![03]( /images/20190521/03.jpg)\n\n4.打开仓库，其中文件夹`_posts`用来存放编写好的博文。\n![04]( /images/20190521/04.jpg)\n\n5.从浏览器的新标签页中随便先打开一个博文`XX.md`，这时浏览器应该有两个标签页。\n![05]( /images/20190521/05.jpg)\n\n6.打开该博文页面如下，主要目的是为了复制名字(第1处)和内容抬头(第2处)。\n![06]( /images/20190521/06.jpg)\n\n7.返回第一个标签页的文件夹`_posts`目录中，点击\"Create new file\"。\n![07]( /images/20190521/07.jpg)\n\n8.将第6步中的第1处和第2处的内容依次复制到该新博文中，并依据需要修改，注意博文名字格式必须为`xxxx-xx-xx-xxx.md`。\n![08]( /images/20190521/08.jpg)\n\n9.适当编辑内容，滚动浏览器页面至下方，点击\"Commit new file\"，提交新建的博文。\n![09]( /images/20190521/09.jpg)\n\n## 修改博文\n\n1.打开文件夹`_posts`，找到要修改的博文，并点击蓝色的博文名称（注意不要点击后面的黑色字体，黑色字体打开后看到的是修改记录）。\n![10]( /images/20190521/10.jpg)\n\n2.点击右上角的铅笔图标，使博客进入可编辑状态。\n![11]( /images/20190521/11.jpg)\n\n3.依据需要对博客进行修改，完成后滚动浏览器页面至底部，点击绿色的\"Commit changes\"按钮，保存提交。等待几秒后，回博客查看修改结果。\n\n\n# 视频教程\n在GitHub上编写博客的过程如下：\n\n![video]( /images/20190521/GitHub编写博客视频教程.wmv)\n\n如视频不能播放，请在[网站](https://github.com/ColaInLibrary/ColaInLibrary.github.com/tree/master/images/20190521)中自行下载`GitHub编写博客视频教程.wmv`观看。\n","source":"_posts/2019-05-21-GitHubÐ´²©¿ÍµÄ½Ì³Ì.md","raw":"---\ntitle: GitHub写博客的教程\ndescription: 介绍用浏览器写博客中的过程\ndate: '2019.05.21.15:30'\ncategories:\n  - 工科生的基本功\n  - GitHub\ntags:\n  - GitHub\n  - Library\nabbrlink: 4685\n---\n\n\n<!-- more -->\n\n# 图文描述\n\n## 新建博文\n\n1.打开GitHub官网，已有账户选择\"Sign In\"，如果还未注册选择\"Sign Up\"注册新账户。\n![01]( /images/20190521/01.jpg)\n\n2.登录GitHub账户。\n![02]( /images/20190521/02.jpg)\n\n3.选择要操作的仓库，这里是\"ColaInLibrary/colainlibrary.github.com.io\"。\n![03]( /images/20190521/03.jpg)\n\n4.打开仓库，其中文件夹`_posts`用来存放编写好的博文。\n![04]( /images/20190521/04.jpg)\n\n5.从浏览器的新标签页中随便先打开一个博文`XX.md`，这时浏览器应该有两个标签页。\n![05]( /images/20190521/05.jpg)\n\n6.打开该博文页面如下，主要目的是为了复制名字(第1处)和内容抬头(第2处)。\n![06]( /images/20190521/06.jpg)\n\n7.返回第一个标签页的文件夹`_posts`目录中，点击\"Create new file\"。\n![07]( /images/20190521/07.jpg)\n\n8.将第6步中的第1处和第2处的内容依次复制到该新博文中，并依据需要修改，注意博文名字格式必须为`xxxx-xx-xx-xxx.md`。\n![08]( /images/20190521/08.jpg)\n\n9.适当编辑内容，滚动浏览器页面至下方，点击\"Commit new file\"，提交新建的博文。\n![09]( /images/20190521/09.jpg)\n\n## 修改博文\n\n1.打开文件夹`_posts`，找到要修改的博文，并点击蓝色的博文名称（注意不要点击后面的黑色字体，黑色字体打开后看到的是修改记录）。\n![10]( /images/20190521/10.jpg)\n\n2.点击右上角的铅笔图标，使博客进入可编辑状态。\n![11]( /images/20190521/11.jpg)\n\n3.依据需要对博客进行修改，完成后滚动浏览器页面至底部，点击绿色的\"Commit changes\"按钮，保存提交。等待几秒后，回博客查看修改结果。\n\n\n# 视频教程\n在GitHub上编写博客的过程如下：\n\n![video]( /images/20190521/GitHub编写博客视频教程.wmv)\n\n如视频不能播放，请在[网站](https://github.com/ColaInLibrary/ColaInLibrary.github.com/tree/master/images/20190521)中自行下载`GitHub编写博客视频教程.wmv`观看。\n","slug":"2019-05-21-GitHubÐ´²©¿ÍµÄ½Ì³Ì","published":1,"updated":"2020-01-29T13:57:52.760Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck60spy97000qda55cz448wdh","content":"<a id=\"more\"></a>\n\n<h1 id=\"图文描述\"><a href=\"#图文描述\" class=\"headerlink\" title=\"图文描述\"></a>图文描述</h1><h2 id=\"新建博文\"><a href=\"#新建博文\" class=\"headerlink\" title=\"新建博文\"></a>新建博文</h2><p>1.打开GitHub官网，已有账户选择”Sign In”，如果还未注册选择”Sign Up”注册新账户。<br><img src=\"/images/20190521/01.jpg\" alt=\"01\"></p>\n<p>2.登录GitHub账户。<br><img src=\"/images/20190521/02.jpg\" alt=\"02\"></p>\n<p>3.选择要操作的仓库，这里是”ColaInLibrary/colainlibrary.github.com.io”。<br><img src=\"/images/20190521/03.jpg\" alt=\"03\"></p>\n<p>4.打开仓库，其中文件夹<code>_posts</code>用来存放编写好的博文。<br><img src=\"/images/20190521/04.jpg\" alt=\"04\"></p>\n<p>5.从浏览器的新标签页中随便先打开一个博文<code>XX.md</code>，这时浏览器应该有两个标签页。<br><img src=\"/images/20190521/05.jpg\" alt=\"05\"></p>\n<p>6.打开该博文页面如下，主要目的是为了复制名字(第1处)和内容抬头(第2处)。<br><img src=\"/images/20190521/06.jpg\" alt=\"06\"></p>\n<p>7.返回第一个标签页的文件夹<code>_posts</code>目录中，点击”Create new file”。<br><img src=\"/images/20190521/07.jpg\" alt=\"07\"></p>\n<p>8.将第6步中的第1处和第2处的内容依次复制到该新博文中，并依据需要修改，注意博文名字格式必须为<code>xxxx-xx-xx-xxx.md</code>。<br><img src=\"/images/20190521/08.jpg\" alt=\"08\"></p>\n<p>9.适当编辑内容，滚动浏览器页面至下方，点击”Commit new file”，提交新建的博文。<br><img src=\"/images/20190521/09.jpg\" alt=\"09\"></p>\n<h2 id=\"修改博文\"><a href=\"#修改博文\" class=\"headerlink\" title=\"修改博文\"></a>修改博文</h2><p>1.打开文件夹<code>_posts</code>，找到要修改的博文，并点击蓝色的博文名称（注意不要点击后面的黑色字体，黑色字体打开后看到的是修改记录）。<br><img src=\"/images/20190521/10.jpg\" alt=\"10\"></p>\n<p>2.点击右上角的铅笔图标，使博客进入可编辑状态。<br><img src=\"/images/20190521/11.jpg\" alt=\"11\"></p>\n<p>3.依据需要对博客进行修改，完成后滚动浏览器页面至底部，点击绿色的”Commit changes”按钮，保存提交。等待几秒后，回博客查看修改结果。</p>\n<h1 id=\"视频教程\"><a href=\"#视频教程\" class=\"headerlink\" title=\"视频教程\"></a>视频教程</h1><p>在GitHub上编写博客的过程如下：</p>\n<p><img src=\"/images/20190521/GitHub%E7%BC%96%E5%86%99%E5%8D%9A%E5%AE%A2%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B.wmv\" alt=\"video\"></p>\n<p>如视频不能播放，请在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0NvbGFJbkxpYnJhcnkvQ29sYUluTGlicmFyeS5naXRodWIuY29tL3RyZWUvbWFzdGVyL2ltYWdlcy8yMDE5MDUyMQ==\" title=\"https://github.com/ColaInLibrary/ColaInLibrary.github.com/tree/master/images/20190521\">网站<i class=\"fa fa-external-link\"></i></span>中自行下载<code>GitHub编写博客视频教程.wmv</code>观看。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"图文描述\"><a href=\"#图文描述\" class=\"headerlink\" title=\"图文描述\"></a>图文描述</h1><h2 id=\"新建博文\"><a href=\"#新建博文\" class=\"headerlink\" title=\"新建博文\"></a>新建博文</h2><p>1.打开GitHub官网，已有账户选择”Sign In”，如果还未注册选择”Sign Up”注册新账户。<br><img src=\"/images/20190521/01.jpg\" alt=\"01\"></p>\n<p>2.登录GitHub账户。<br><img src=\"/images/20190521/02.jpg\" alt=\"02\"></p>\n<p>3.选择要操作的仓库，这里是”ColaInLibrary/colainlibrary.github.com.io”。<br><img src=\"/images/20190521/03.jpg\" alt=\"03\"></p>\n<p>4.打开仓库，其中文件夹<code>_posts</code>用来存放编写好的博文。<br><img src=\"/images/20190521/04.jpg\" alt=\"04\"></p>\n<p>5.从浏览器的新标签页中随便先打开一个博文<code>XX.md</code>，这时浏览器应该有两个标签页。<br><img src=\"/images/20190521/05.jpg\" alt=\"05\"></p>\n<p>6.打开该博文页面如下，主要目的是为了复制名字(第1处)和内容抬头(第2处)。<br><img src=\"/images/20190521/06.jpg\" alt=\"06\"></p>\n<p>7.返回第一个标签页的文件夹<code>_posts</code>目录中，点击”Create new file”。<br><img src=\"/images/20190521/07.jpg\" alt=\"07\"></p>\n<p>8.将第6步中的第1处和第2处的内容依次复制到该新博文中，并依据需要修改，注意博文名字格式必须为<code>xxxx-xx-xx-xxx.md</code>。<br><img src=\"/images/20190521/08.jpg\" alt=\"08\"></p>\n<p>9.适当编辑内容，滚动浏览器页面至下方，点击”Commit new file”，提交新建的博文。<br><img src=\"/images/20190521/09.jpg\" alt=\"09\"></p>\n<h2 id=\"修改博文\"><a href=\"#修改博文\" class=\"headerlink\" title=\"修改博文\"></a>修改博文</h2><p>1.打开文件夹<code>_posts</code>，找到要修改的博文，并点击蓝色的博文名称（注意不要点击后面的黑色字体，黑色字体打开后看到的是修改记录）。<br><img src=\"/images/20190521/10.jpg\" alt=\"10\"></p>\n<p>2.点击右上角的铅笔图标，使博客进入可编辑状态。<br><img src=\"/images/20190521/11.jpg\" alt=\"11\"></p>\n<p>3.依据需要对博客进行修改，完成后滚动浏览器页面至底部，点击绿色的”Commit changes”按钮，保存提交。等待几秒后，回博客查看修改结果。</p>\n<h1 id=\"视频教程\"><a href=\"#视频教程\" class=\"headerlink\" title=\"视频教程\"></a>视频教程</h1><p>在GitHub上编写博客的过程如下：</p>\n<p><img src=\"/images/20190521/GitHub%E7%BC%96%E5%86%99%E5%8D%9A%E5%AE%A2%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B.wmv\" alt=\"video\"></p>\n<p>如视频不能播放，请在<a href=\"https://github.com/ColaInLibrary/ColaInLibrary.github.com/tree/master/images/20190521\" target=\"_blank\" rel=\"noopener\">网站</a>中自行下载<code>GitHub编写博客视频教程.wmv</code>观看。</p>","popularPost_tmp_postPath":true,"eyeCatchImage":"/images/20190521/01.jpg","popularPost_tmp_gaData":{"updated":"Wed Jan 29 2020 21:57:52 GMT+0800 (China Standard Time)","title":"GitHub写博客的教程","path":"archives/4685.html","eyeCatchImage":"/images/20190521/01.jpg","excerpt":"介绍用浏览器写博客中的过程","date":{"_isAMomentObject":true,"_i":"2019-05-21T15:30:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2019-05-21T15:30:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"工科生的基本功 > GitHub","tags":["GitHub","Library"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":617},{"title":"Linux编程环境的配置","description":"在Linux环境下，进行C++的开发。","date":"2019-05-21T09:30:00.000Z","abbrlink":45747,"_content":"\n> 本文主要介绍在Linux下实现C++的开发环境搭建，此前应当已经装好Linux系统，笔者所用系统是Ubuntu 16.04。\n\n<!-- more -->\n\n# 开发流程简介\n\n在Linux环境下实现C++的开发，主要是在Terminal中通过命令行来实现。在这里以“Hello World”为例进行说明。(该代码可以从根目录下`code`文件中找到)。\n\n1.建立文件夹，用来存放整个工程文件。例如在`Docuements`目录下新建文件夹`HelloWorld`；\n\n2.在`HelloWorld`中新建文件`main.cpp`；\n\n3.`main.cpp`中编写代码：\n\n ```c++\n#include <iostream>\n\nint main()\n{\n  int i;\n  std::cout << \"Hello World!\" << std::endl;\n  std::cout << \"i = \" << i << std::endl;\n  return 0;\n}\n```\n\n4.在`HelloWorld`中新建文件`CMakeLists.txt`，并在其中编写以下内容：\n\n ```javascript\ncmake_minimum_required(VERSION 3.1.0)         #设置版本号\nProject(Hello)                                #设置工程名为 Hello\nset(SRC_LIST main.cpp ${SRC_FILES})           #设定源文件集，将main.cpp添加到工程\nadd_executable(Hello main.cpp ${SRC_LIST})    #添加可执行程序文件\n```\n\n5.用Terminal执行下列语句，打开当前目录(`#`后为注释)：\n\n```javascript\ncd Documents\ncd HelloWorld  #打开当前目录，也可以在想要打开的目录下右击鼠标，选择`Open in Terminal`\n```\n\n6.执行下列语句进行编译：\n\n```javascript\nmkdir build  #创建编译文件夹\ncd build     #打开编译文件夹\ncmake ..     #寻找CMakeLists，..表示返回上一目录\nmake         #编译\n```\n\n7.编译成功后，运行可执行程序文件：\n\n```javascript\n./Hello\n```\n\n8.在Terminal中查看显示结果。\n\n```javascript\nHello World!\ni = 0\n```\n \n> 本文旨在介绍Ubuntu中C++的开发流程，其中CMakeLists.txt的编写决定了开发者能否完成大型工程项目的编程开发，在以后的博文中再逐渐给出介绍。\n","source":"_posts/2019-05-21-Linux±à³Ì»·¾³µÄÅäÖÃ.md","raw":"---\ntitle: Linux编程环境的配置\ndescription: 在Linux环境下，进行C++的开发。\ndate: '2019.05.21.09:30'\ncategories:\n  - 工科生的基本功\n  - 快乐码农\ntags:\n  - Linux\n  - Library\nabbrlink: 45747\n---\n\n> 本文主要介绍在Linux下实现C++的开发环境搭建，此前应当已经装好Linux系统，笔者所用系统是Ubuntu 16.04。\n\n<!-- more -->\n\n# 开发流程简介\n\n在Linux环境下实现C++的开发，主要是在Terminal中通过命令行来实现。在这里以“Hello World”为例进行说明。(该代码可以从根目录下`code`文件中找到)。\n\n1.建立文件夹，用来存放整个工程文件。例如在`Docuements`目录下新建文件夹`HelloWorld`；\n\n2.在`HelloWorld`中新建文件`main.cpp`；\n\n3.`main.cpp`中编写代码：\n\n ```c++\n#include <iostream>\n\nint main()\n{\n  int i;\n  std::cout << \"Hello World!\" << std::endl;\n  std::cout << \"i = \" << i << std::endl;\n  return 0;\n}\n```\n\n4.在`HelloWorld`中新建文件`CMakeLists.txt`，并在其中编写以下内容：\n\n ```javascript\ncmake_minimum_required(VERSION 3.1.0)         #设置版本号\nProject(Hello)                                #设置工程名为 Hello\nset(SRC_LIST main.cpp ${SRC_FILES})           #设定源文件集，将main.cpp添加到工程\nadd_executable(Hello main.cpp ${SRC_LIST})    #添加可执行程序文件\n```\n\n5.用Terminal执行下列语句，打开当前目录(`#`后为注释)：\n\n```javascript\ncd Documents\ncd HelloWorld  #打开当前目录，也可以在想要打开的目录下右击鼠标，选择`Open in Terminal`\n```\n\n6.执行下列语句进行编译：\n\n```javascript\nmkdir build  #创建编译文件夹\ncd build     #打开编译文件夹\ncmake ..     #寻找CMakeLists，..表示返回上一目录\nmake         #编译\n```\n\n7.编译成功后，运行可执行程序文件：\n\n```javascript\n./Hello\n```\n\n8.在Terminal中查看显示结果。\n\n```javascript\nHello World!\ni = 0\n```\n \n> 本文旨在介绍Ubuntu中C++的开发流程，其中CMakeLists.txt的编写决定了开发者能否完成大型工程项目的编程开发，在以后的博文中再逐渐给出介绍。\n","slug":"2019-05-21-Linux±à³Ì»·¾³µÄÅäÖÃ","published":1,"updated":"2020-01-29T13:57:52.760Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck60spy99000rda55dyet2g89","content":"<blockquote>\n<p>本文主要介绍在Linux下实现C++的开发环境搭建，此前应当已经装好Linux系统，笔者所用系统是Ubuntu 16.04。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h1 id=\"开发流程简介\"><a href=\"#开发流程简介\" class=\"headerlink\" title=\"开发流程简介\"></a>开发流程简介</h1><p>在Linux环境下实现C++的开发，主要是在Terminal中通过命令行来实现。在这里以“Hello World”为例进行说明。(该代码可以从根目录下<code>code</code>文件中找到)。</p>\n<p>1.建立文件夹，用来存放整个工程文件。例如在<code>Docuements</code>目录下新建文件夹<code>HelloWorld</code>；</p>\n<p>2.在<code>HelloWorld</code>中新建文件<code>main.cpp</code>；</p>\n<p>3.<code>main.cpp</code>中编写代码：</p>\n <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Hello World!\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"i = \"</span> &lt;&lt; i &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4.在<code>HelloWorld</code>中新建文件<code>CMakeLists.txt</code>，并在其中编写以下内容：</p>\n <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake_minimum_required(VERSION 3.1.0)         #设置版本号</span><br><span class=\"line\">Project(Hello)                                #设置工程名为 Hello</span><br><span class=\"line\">set(SRC_LIST main.cpp $&#123;SRC_FILES&#125;)           #设定源文件集，将main.cpp添加到工程</span><br><span class=\"line\">add_executable(Hello main.cpp $&#123;SRC_LIST&#125;)    #添加可执行程序文件</span><br></pre></td></tr></table></figure>\n\n<p>5.用Terminal执行下列语句，打开当前目录(<code>#</code>后为注释)：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd Documents</span><br><span class=\"line\">cd HelloWorld  #打开当前目录，也可以在想要打开的目录下右击鼠标，选择`Open in Terminal`</span><br></pre></td></tr></table></figure>\n\n<p>6.执行下列语句进行编译：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir build  #创建编译文件夹</span><br><span class=\"line\">cd build     #打开编译文件夹</span><br><span class=\"line\">cmake ..     #寻找CMakeLists，..表示返回上一目录</span><br><span class=\"line\">make         #编译</span><br></pre></td></tr></table></figure>\n\n<p>7.编译成功后，运行可执行程序文件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./Hello</span><br></pre></td></tr></table></figure>\n\n<p>8.在Terminal中查看显示结果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello World!</span><br><span class=\"line\">i = <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>本文旨在介绍Ubuntu中C++的开发流程，其中CMakeLists.txt的编写决定了开发者能否完成大型工程项目的编程开发，在以后的博文中再逐渐给出介绍。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>本文主要介绍在Linux下实现C++的开发环境搭建，此前应当已经装好Linux系统，笔者所用系统是Ubuntu 16.04。</p>\n</blockquote>","more":"<h1 id=\"开发流程简介\"><a href=\"#开发流程简介\" class=\"headerlink\" title=\"开发流程简介\"></a>开发流程简介</h1><p>在Linux环境下实现C++的开发，主要是在Terminal中通过命令行来实现。在这里以“Hello World”为例进行说明。(该代码可以从根目录下<code>code</code>文件中找到)。</p>\n<p>1.建立文件夹，用来存放整个工程文件。例如在<code>Docuements</code>目录下新建文件夹<code>HelloWorld</code>；</p>\n<p>2.在<code>HelloWorld</code>中新建文件<code>main.cpp</code>；</p>\n<p>3.<code>main.cpp</code>中编写代码：</p>\n <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Hello World!\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"i = \"</span> &lt;&lt; i &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4.在<code>HelloWorld</code>中新建文件<code>CMakeLists.txt</code>，并在其中编写以下内容：</p>\n <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake_minimum_required(VERSION 3.1.0)         #设置版本号</span><br><span class=\"line\">Project(Hello)                                #设置工程名为 Hello</span><br><span class=\"line\">set(SRC_LIST main.cpp $&#123;SRC_FILES&#125;)           #设定源文件集，将main.cpp添加到工程</span><br><span class=\"line\">add_executable(Hello main.cpp $&#123;SRC_LIST&#125;)    #添加可执行程序文件</span><br></pre></td></tr></table></figure>\n\n<p>5.用Terminal执行下列语句，打开当前目录(<code>#</code>后为注释)：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd Documents</span><br><span class=\"line\">cd HelloWorld  #打开当前目录，也可以在想要打开的目录下右击鼠标，选择`Open in Terminal`</span><br></pre></td></tr></table></figure>\n\n<p>6.执行下列语句进行编译：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir build  #创建编译文件夹</span><br><span class=\"line\">cd build     #打开编译文件夹</span><br><span class=\"line\">cmake ..     #寻找CMakeLists，..表示返回上一目录</span><br><span class=\"line\">make         #编译</span><br></pre></td></tr></table></figure>\n\n<p>7.编译成功后，运行可执行程序文件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./Hello</span><br></pre></td></tr></table></figure>\n\n<p>8.在Terminal中查看显示结果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello World!</span><br><span class=\"line\">i = <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>本文旨在介绍Ubuntu中C++的开发流程，其中CMakeLists.txt的编写决定了开发者能否完成大型工程项目的编程开发，在以后的博文中再逐渐给出介绍。</p>\n</blockquote>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Jan 29 2020 21:57:52 GMT+0800 (China Standard Time)","title":"Linux编程环境的配置","path":"archives/45747.html","eyeCatchImage":null,"excerpt":"在Linux环境下，进行C++的开发。","date":{"_isAMomentObject":true,"_i":"2019-05-21T09:30:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2019-05-21T09:30:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"工科生的基本功 > 快乐码农","tags":["Library","Linux"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":977},{"title":"C++中vector的用法","description":"介绍Vector的用法。","date":"2019-06-09T09:30:00.000Z","abbrlink":20080,"_content":"\n> 由于项目需要，发现自己对C++中vector的用法不是很清楚，因此写一篇博文来介绍vector的基础用法。\n\n<!-- more -->\n\n# vector简介\n\nvector是表现为可变长数组的序列容器。vector使用连续的存储位置来存储元素，也就是说，vector可以使用一个指针上的偏移量来访问其元素，就像数组一样。但与数组不同的是，它们的大小可以动态变化，其存储由容器自动处理。 因此，vector相比于数组，vector消耗更多的内存，以换取管理存储和动态增长的能力。 \n\n与其它的动态序列容器(deque, lists, forward_lists)相比，vector可以非常高效的访问其元素，就像数组一样，并且可以相对高效的增加和删除元素从其末尾。对于在其它位置插入或删除元素的操作，它的性能要比其它的要差，而且其迭代器和引用的一致性相比lists和forward_lists要差。\n\n# vector的基本操作\n\n1.头文件的调用：\n\n```c++\n#include <vector>\n```\n\n2.创建一个名为vec的vector对象：\n\n```c++\nvector<int> vec;\t//以下的示例如无特殊声明，均以vec作为示例\n```\n\n3.向量大小：\n\n```c++\nvec.size();\n```\n\n4.向量清空：\n\n```c++\nvec.clear();\t\t\n```\n\n5.尾部插入数字：\n\n```c++\nvec.push_back(a);\n```\n\n6.使用下标访问元素：\n\n```c++\ncout << vec[0] << endl;\t\t//索引号从0开始\n```\n\n7.插入元素：\n\n```c++\nvec.insert( vec.begin() + i, a );\t\t//在第i个元素后面插入a\n```\n\n8.删除单个元素：\n\n```c++\nvec.erase(vec.begin()+2);\t\t//删除第3个元素\n```\n\n9.删除区间元素：\n\n```c++\n vec.erase(vec.begin()+i,vec.end()+j);\t\t//删除区间[i,j-1];区间从0开始\n```\n\n10.使用迭代器访问元素：\n\n```c++\n<span style=\"font-size:18px;\">vector<int>::iterator it;\nfor(it=vec.begin();it!=vec.end();it++)\n    cout<<*it<<endl;</span>\n```\n\n# Eigen库的安装\n\n由于C++对矩阵的运算支持不是很好，而Eigen库则是一个简便的用于矩阵运算的库，因此需要安装它。在Ubuntu中安装该库的指令如下：\n\n```javascript\nsudo apt-get install libeigen3-dev\n```\n\n安装完成后，该库的路径为`/usr/include/eigen3`,使用时注意调用该路径。\n\n# vector的元素为自定义类型\n\n由于项目需要，需要自己定义一个类型作为vector的元素。该段代码的目的是保存两组六轴机器人速度于一个vector中，Ubuntu环境下的`main.cpp`代码如下：\n\n```c++\n#include <iostream>\n#include <vector>\n#include <Eigen/Core>\t\t\t\t\t// Eigen库\n#include <Eigen/Dense>\t\t\t\t\t// 稠密矩阵的代数运算\n\nusing namespace std;\nusing namespace Eigen;\n\n#define Vector6d Matrix<double,6,1>\t\t// Eigen中所有向量和矩阵都是Eigen::Matrix，它是一个模板类，前三个参数为：数据类型，行，列\n\nint main() {\n\tVector6d robotJointVel1;\t\t\t\t\t\t\t// 声明第1组六轴机器人关节速度\n\tVector6d robotJointVel2;\t\t\t\t\t\t\t// 声明第2组六轴机器人关节速度\n\tvector<Vector6d> vel;\t\t\t\t\t\t\t\t// 声明一个vector用来存放两组速度\n\trobotJointVel1 << 0, 0, 0.04, 0, 0, 0;\t            // 定义第一组速度\n\trobotJointVel2 << 1, 1, 1, 1, 1, 1;  \t\t        // 定义第2组速度\n\tcout << \"Size of vel: \" << vel.size() << endl;\n\tcout << \"Add the 1st data in the end of the vector...\" << endl;\n\tvel.push_back(robotJointVel1);\n\tcout << \"robotJointVel1: \" << endl;\n\tcout << vel[0] << endl;\n\tcout << \"Size of vel: \" << vel.size() << endl;\n\tcout << \"Add the 2nd data in the end of the vector...\" << endl;\n\tvel.push_back(robotJointVel2);\n\tcout << \"robotJointVel1: \" << endl;\n\tcout << vel[1] << endl;\n\tcout << \"Size of vel: \" << vel.size() << endl;\n\treturn 0;\n}\n\n```\n\n`CMakeLists.txt`代码如下：\n```c++\ncmake_minimum_required(VERSION 3.1.0)\n\nproject(VectorTest)\n\nset(SRC_LIST main.cpp ${SRC_FILES})\n\ninclude_directories(\"/usr/include/eigen3\")\t\t\t# 调用eigen3库\n\nadd_executable(VectorTest main.cpp ${SRC_LIST})\n```\n\n程序运行结果如下：\n![VectorTest]( /images/20190609/VectorTest.png)\n\n> 本文主要介绍vector的基础用法，关于Eigen库将在以后介绍，本文的参考如下：\n> [C++ vector用法（详解！！函数，实现）](https://blog.csdn.net/msdnwolaile/article/details/52708144)\n> [vector详解](https://blog.csdn.net/Snow_Me/article/details/77150998)","source":"_posts/2019-06-09-C++ÖÐVectorµÄÓÃ·¨.md","raw":"---\ntitle: C++中vector的用法\ndescription: 介绍Vector的用法。\ndate: '2019.06.09.09:30'\ncategories:\n  - 工科生的基本功\n  - 快乐码农\ntags:\n  - C++\n  - Library\nabbrlink: 20080\n---\n\n> 由于项目需要，发现自己对C++中vector的用法不是很清楚，因此写一篇博文来介绍vector的基础用法。\n\n<!-- more -->\n\n# vector简介\n\nvector是表现为可变长数组的序列容器。vector使用连续的存储位置来存储元素，也就是说，vector可以使用一个指针上的偏移量来访问其元素，就像数组一样。但与数组不同的是，它们的大小可以动态变化，其存储由容器自动处理。 因此，vector相比于数组，vector消耗更多的内存，以换取管理存储和动态增长的能力。 \n\n与其它的动态序列容器(deque, lists, forward_lists)相比，vector可以非常高效的访问其元素，就像数组一样，并且可以相对高效的增加和删除元素从其末尾。对于在其它位置插入或删除元素的操作，它的性能要比其它的要差，而且其迭代器和引用的一致性相比lists和forward_lists要差。\n\n# vector的基本操作\n\n1.头文件的调用：\n\n```c++\n#include <vector>\n```\n\n2.创建一个名为vec的vector对象：\n\n```c++\nvector<int> vec;\t//以下的示例如无特殊声明，均以vec作为示例\n```\n\n3.向量大小：\n\n```c++\nvec.size();\n```\n\n4.向量清空：\n\n```c++\nvec.clear();\t\t\n```\n\n5.尾部插入数字：\n\n```c++\nvec.push_back(a);\n```\n\n6.使用下标访问元素：\n\n```c++\ncout << vec[0] << endl;\t\t//索引号从0开始\n```\n\n7.插入元素：\n\n```c++\nvec.insert( vec.begin() + i, a );\t\t//在第i个元素后面插入a\n```\n\n8.删除单个元素：\n\n```c++\nvec.erase(vec.begin()+2);\t\t//删除第3个元素\n```\n\n9.删除区间元素：\n\n```c++\n vec.erase(vec.begin()+i,vec.end()+j);\t\t//删除区间[i,j-1];区间从0开始\n```\n\n10.使用迭代器访问元素：\n\n```c++\n<span style=\"font-size:18px;\">vector<int>::iterator it;\nfor(it=vec.begin();it!=vec.end();it++)\n    cout<<*it<<endl;</span>\n```\n\n# Eigen库的安装\n\n由于C++对矩阵的运算支持不是很好，而Eigen库则是一个简便的用于矩阵运算的库，因此需要安装它。在Ubuntu中安装该库的指令如下：\n\n```javascript\nsudo apt-get install libeigen3-dev\n```\n\n安装完成后，该库的路径为`/usr/include/eigen3`,使用时注意调用该路径。\n\n# vector的元素为自定义类型\n\n由于项目需要，需要自己定义一个类型作为vector的元素。该段代码的目的是保存两组六轴机器人速度于一个vector中，Ubuntu环境下的`main.cpp`代码如下：\n\n```c++\n#include <iostream>\n#include <vector>\n#include <Eigen/Core>\t\t\t\t\t// Eigen库\n#include <Eigen/Dense>\t\t\t\t\t// 稠密矩阵的代数运算\n\nusing namespace std;\nusing namespace Eigen;\n\n#define Vector6d Matrix<double,6,1>\t\t// Eigen中所有向量和矩阵都是Eigen::Matrix，它是一个模板类，前三个参数为：数据类型，行，列\n\nint main() {\n\tVector6d robotJointVel1;\t\t\t\t\t\t\t// 声明第1组六轴机器人关节速度\n\tVector6d robotJointVel2;\t\t\t\t\t\t\t// 声明第2组六轴机器人关节速度\n\tvector<Vector6d> vel;\t\t\t\t\t\t\t\t// 声明一个vector用来存放两组速度\n\trobotJointVel1 << 0, 0, 0.04, 0, 0, 0;\t            // 定义第一组速度\n\trobotJointVel2 << 1, 1, 1, 1, 1, 1;  \t\t        // 定义第2组速度\n\tcout << \"Size of vel: \" << vel.size() << endl;\n\tcout << \"Add the 1st data in the end of the vector...\" << endl;\n\tvel.push_back(robotJointVel1);\n\tcout << \"robotJointVel1: \" << endl;\n\tcout << vel[0] << endl;\n\tcout << \"Size of vel: \" << vel.size() << endl;\n\tcout << \"Add the 2nd data in the end of the vector...\" << endl;\n\tvel.push_back(robotJointVel2);\n\tcout << \"robotJointVel1: \" << endl;\n\tcout << vel[1] << endl;\n\tcout << \"Size of vel: \" << vel.size() << endl;\n\treturn 0;\n}\n\n```\n\n`CMakeLists.txt`代码如下：\n```c++\ncmake_minimum_required(VERSION 3.1.0)\n\nproject(VectorTest)\n\nset(SRC_LIST main.cpp ${SRC_FILES})\n\ninclude_directories(\"/usr/include/eigen3\")\t\t\t# 调用eigen3库\n\nadd_executable(VectorTest main.cpp ${SRC_LIST})\n```\n\n程序运行结果如下：\n![VectorTest]( /images/20190609/VectorTest.png)\n\n> 本文主要介绍vector的基础用法，关于Eigen库将在以后介绍，本文的参考如下：\n> [C++ vector用法（详解！！函数，实现）](https://blog.csdn.net/msdnwolaile/article/details/52708144)\n> [vector详解](https://blog.csdn.net/Snow_Me/article/details/77150998)","slug":"2019-06-09-C++ÖÐVectorµÄÓÃ·¨","published":1,"updated":"2020-01-29T13:57:52.760Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck60spy9c000uda5561gw8icg","content":"<blockquote>\n<p>由于项目需要，发现自己对C++中vector的用法不是很清楚，因此写一篇博文来介绍vector的基础用法。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h1 id=\"vector简介\"><a href=\"#vector简介\" class=\"headerlink\" title=\"vector简介\"></a>vector简介</h1><p>vector是表现为可变长数组的序列容器。vector使用连续的存储位置来存储元素，也就是说，vector可以使用一个指针上的偏移量来访问其元素，就像数组一样。但与数组不同的是，它们的大小可以动态变化，其存储由容器自动处理。 因此，vector相比于数组，vector消耗更多的内存，以换取管理存储和动态增长的能力。 </p>\n<p>与其它的动态序列容器(deque, lists, forward_lists)相比，vector可以非常高效的访问其元素，就像数组一样，并且可以相对高效的增加和删除元素从其末尾。对于在其它位置插入或删除元素的操作，它的性能要比其它的要差，而且其迭代器和引用的一致性相比lists和forward_lists要差。</p>\n<h1 id=\"vector的基本操作\"><a href=\"#vector的基本操作\" class=\"headerlink\" title=\"vector的基本操作\"></a>vector的基本操作</h1><p>1.头文件的调用：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>2.创建一个名为vec的vector对象：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vec;\t<span class=\"comment\">//以下的示例如无特殊声明，均以vec作为示例</span></span><br></pre></td></tr></table></figure>\n\n<p>3.向量大小：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vec.<span class=\"built_in\">size</span>();</span><br></pre></td></tr></table></figure>\n\n<p>4.向量清空：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vec.<span class=\"built_in\">clear</span>();</span><br></pre></td></tr></table></figure>\n\n<p>5.尾部插入数字：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vec.push_back(a);</span><br></pre></td></tr></table></figure>\n\n<p>6.使用下标访问元素：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; vec[<span class=\"number\">0</span>] &lt;&lt; <span class=\"built_in\">endl</span>;\t\t<span class=\"comment\">//索引号从0开始</span></span><br></pre></td></tr></table></figure>\n\n<p>7.插入元素：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vec.insert( vec.<span class=\"built_in\">begin</span>() + i, a );\t\t<span class=\"comment\">//在第i个元素后面插入a</span></span><br></pre></td></tr></table></figure>\n\n<p>8.删除单个元素：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vec.erase(vec.<span class=\"built_in\">begin</span>()+<span class=\"number\">2</span>);\t\t<span class=\"comment\">//删除第3个元素</span></span><br></pre></td></tr></table></figure>\n\n<p>9.删除区间元素：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vec.erase(vec.<span class=\"built_in\">begin</span>()+i,vec.<span class=\"built_in\">end</span>()+j);\t\t<span class=\"comment\">//删除区间[i,j-1];区间从0开始</span></span><br></pre></td></tr></table></figure>\n\n<p>10.使用迭代器访问元素：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;span style=<span class=\"string\">\"font-size:18px;\"</span>&gt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator it;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(it=vec.<span class=\"built_in\">begin</span>();it!=vec.<span class=\"built_in\">end</span>();it++)</span><br><span class=\"line\">    cout&lt;&lt;*it&lt;&lt;endl;&lt;/span&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Eigen库的安装\"><a href=\"#Eigen库的安装\" class=\"headerlink\" title=\"Eigen库的安装\"></a>Eigen库的安装</h1><p>由于C++对矩阵的运算支持不是很好，而Eigen库则是一个简便的用于矩阵运算的库，因此需要安装它。在Ubuntu中安装该库的指令如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-<span class=\"keyword\">get</span> install libeigen3-dev</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，该库的路径为<code>/usr/include/eigen3</code>,使用时注意调用该路径。</p>\n<h1 id=\"vector的元素为自定义类型\"><a href=\"#vector的元素为自定义类型\" class=\"headerlink\" title=\"vector的元素为自定义类型\"></a>vector的元素为自定义类型</h1><p>由于项目需要，需要自己定义一个类型作为vector的元素。该段代码的目的是保存两组六轴机器人速度于一个vector中，Ubuntu环境下的<code>main.cpp</code>代码如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;Eigen/Core&gt;\t\t\t\t\t// Eigen库</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;Eigen/Dense&gt;\t\t\t\t\t// 稠密矩阵的代数运算</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> Eigen;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Vector6d Matrix<span class=\"meta-string\">&lt;double,6,1&gt;\t\t// Eigen中所有向量和矩阵都是Eigen::Matrix，它是一个模板类，前三个参数为：数据类型，行，列</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tVector6d robotJointVel1;\t\t\t\t\t\t\t<span class=\"comment\">// 声明第1组六轴机器人关节速度</span></span><br><span class=\"line\">\tVector6d robotJointVel2;\t\t\t\t\t\t\t<span class=\"comment\">// 声明第2组六轴机器人关节速度</span></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;Vector6d&gt; vel;\t\t\t\t\t\t\t\t<span class=\"comment\">// 声明一个vector用来存放两组速度</span></span><br><span class=\"line\">\trobotJointVel1 &lt;&lt; <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.04</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>;\t            <span class=\"comment\">// 定义第一组速度</span></span><br><span class=\"line\">\trobotJointVel2 &lt;&lt; <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>;  \t\t        <span class=\"comment\">// 定义第2组速度</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Size of vel: \"</span> &lt;&lt; vel.<span class=\"built_in\">size</span>() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Add the 1st data in the end of the vector...\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tvel.push_back(robotJointVel1);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"robotJointVel1: \"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; vel[<span class=\"number\">0</span>] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Size of vel: \"</span> &lt;&lt; vel.<span class=\"built_in\">size</span>() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Add the 2nd data in the end of the vector...\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tvel.push_back(robotJointVel2);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"robotJointVel1: \"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; vel[<span class=\"number\">1</span>] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Size of vel: \"</span> &lt;&lt; vel.<span class=\"built_in\">size</span>() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>CMakeLists.txt</code>代码如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake_minimum_required(VERSION <span class=\"number\">3.1</span><span class=\"number\">.0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">project(VectorTest)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span>(SRC_LIST main.cpp $&#123;SRC_FILES&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">include_directories(<span class=\"string\">\"/usr/include/eigen3\"</span>)\t\t\t# 调用eigen3库</span><br><span class=\"line\"></span><br><span class=\"line\">add_executable(VectorTest main.cpp $&#123;SRC_LIST&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>程序运行结果如下：<br><img src=\"/images/20190609/VectorTest.png\" alt=\"VectorTest\"></p>\n<blockquote>\n<p>本文主要介绍vector的基础用法，关于Eigen库将在以后介绍，本文的参考如下：<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21zZG53b2xhaWxlL2FydGljbGUvZGV0YWlscy81MjcwODE0NA==\" title=\"https://blog.csdn.net/msdnwolaile/article/details/52708144\">C++ vector用法（详解！！函数，实现）<i class=\"fa fa-external-link\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Nub3dfTWUvYXJ0aWNsZS9kZXRhaWxzLzc3MTUwOTk4\" title=\"https://blog.csdn.net/Snow_Me/article/details/77150998\">vector详解<i class=\"fa fa-external-link\"></i></span></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>由于项目需要，发现自己对C++中vector的用法不是很清楚，因此写一篇博文来介绍vector的基础用法。</p>\n</blockquote>","more":"<h1 id=\"vector简介\"><a href=\"#vector简介\" class=\"headerlink\" title=\"vector简介\"></a>vector简介</h1><p>vector是表现为可变长数组的序列容器。vector使用连续的存储位置来存储元素，也就是说，vector可以使用一个指针上的偏移量来访问其元素，就像数组一样。但与数组不同的是，它们的大小可以动态变化，其存储由容器自动处理。 因此，vector相比于数组，vector消耗更多的内存，以换取管理存储和动态增长的能力。 </p>\n<p>与其它的动态序列容器(deque, lists, forward_lists)相比，vector可以非常高效的访问其元素，就像数组一样，并且可以相对高效的增加和删除元素从其末尾。对于在其它位置插入或删除元素的操作，它的性能要比其它的要差，而且其迭代器和引用的一致性相比lists和forward_lists要差。</p>\n<h1 id=\"vector的基本操作\"><a href=\"#vector的基本操作\" class=\"headerlink\" title=\"vector的基本操作\"></a>vector的基本操作</h1><p>1.头文件的调用：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>2.创建一个名为vec的vector对象：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vec;\t<span class=\"comment\">//以下的示例如无特殊声明，均以vec作为示例</span></span><br></pre></td></tr></table></figure>\n\n<p>3.向量大小：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vec.<span class=\"built_in\">size</span>();</span><br></pre></td></tr></table></figure>\n\n<p>4.向量清空：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vec.<span class=\"built_in\">clear</span>();</span><br></pre></td></tr></table></figure>\n\n<p>5.尾部插入数字：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vec.push_back(a);</span><br></pre></td></tr></table></figure>\n\n<p>6.使用下标访问元素：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; vec[<span class=\"number\">0</span>] &lt;&lt; <span class=\"built_in\">endl</span>;\t\t<span class=\"comment\">//索引号从0开始</span></span><br></pre></td></tr></table></figure>\n\n<p>7.插入元素：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vec.insert( vec.<span class=\"built_in\">begin</span>() + i, a );\t\t<span class=\"comment\">//在第i个元素后面插入a</span></span><br></pre></td></tr></table></figure>\n\n<p>8.删除单个元素：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vec.erase(vec.<span class=\"built_in\">begin</span>()+<span class=\"number\">2</span>);\t\t<span class=\"comment\">//删除第3个元素</span></span><br></pre></td></tr></table></figure>\n\n<p>9.删除区间元素：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vec.erase(vec.<span class=\"built_in\">begin</span>()+i,vec.<span class=\"built_in\">end</span>()+j);\t\t<span class=\"comment\">//删除区间[i,j-1];区间从0开始</span></span><br></pre></td></tr></table></figure>\n\n<p>10.使用迭代器访问元素：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;span style=<span class=\"string\">\"font-size:18px;\"</span>&gt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator it;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(it=vec.<span class=\"built_in\">begin</span>();it!=vec.<span class=\"built_in\">end</span>();it++)</span><br><span class=\"line\">    cout&lt;&lt;*it&lt;&lt;endl;&lt;/span&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Eigen库的安装\"><a href=\"#Eigen库的安装\" class=\"headerlink\" title=\"Eigen库的安装\"></a>Eigen库的安装</h1><p>由于C++对矩阵的运算支持不是很好，而Eigen库则是一个简便的用于矩阵运算的库，因此需要安装它。在Ubuntu中安装该库的指令如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-<span class=\"keyword\">get</span> install libeigen3-dev</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，该库的路径为<code>/usr/include/eigen3</code>,使用时注意调用该路径。</p>\n<h1 id=\"vector的元素为自定义类型\"><a href=\"#vector的元素为自定义类型\" class=\"headerlink\" title=\"vector的元素为自定义类型\"></a>vector的元素为自定义类型</h1><p>由于项目需要，需要自己定义一个类型作为vector的元素。该段代码的目的是保存两组六轴机器人速度于一个vector中，Ubuntu环境下的<code>main.cpp</code>代码如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;Eigen/Core&gt;\t\t\t\t\t// Eigen库</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;Eigen/Dense&gt;\t\t\t\t\t// 稠密矩阵的代数运算</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> Eigen;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Vector6d Matrix<span class=\"meta-string\">&lt;double,6,1&gt;\t\t// Eigen中所有向量和矩阵都是Eigen::Matrix，它是一个模板类，前三个参数为：数据类型，行，列</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tVector6d robotJointVel1;\t\t\t\t\t\t\t<span class=\"comment\">// 声明第1组六轴机器人关节速度</span></span><br><span class=\"line\">\tVector6d robotJointVel2;\t\t\t\t\t\t\t<span class=\"comment\">// 声明第2组六轴机器人关节速度</span></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;Vector6d&gt; vel;\t\t\t\t\t\t\t\t<span class=\"comment\">// 声明一个vector用来存放两组速度</span></span><br><span class=\"line\">\trobotJointVel1 &lt;&lt; <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.04</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>;\t            <span class=\"comment\">// 定义第一组速度</span></span><br><span class=\"line\">\trobotJointVel2 &lt;&lt; <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>;  \t\t        <span class=\"comment\">// 定义第2组速度</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Size of vel: \"</span> &lt;&lt; vel.<span class=\"built_in\">size</span>() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Add the 1st data in the end of the vector...\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tvel.push_back(robotJointVel1);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"robotJointVel1: \"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; vel[<span class=\"number\">0</span>] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Size of vel: \"</span> &lt;&lt; vel.<span class=\"built_in\">size</span>() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Add the 2nd data in the end of the vector...\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tvel.push_back(robotJointVel2);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"robotJointVel1: \"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; vel[<span class=\"number\">1</span>] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Size of vel: \"</span> &lt;&lt; vel.<span class=\"built_in\">size</span>() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>CMakeLists.txt</code>代码如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake_minimum_required(VERSION <span class=\"number\">3.1</span><span class=\"number\">.0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">project(VectorTest)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span>(SRC_LIST main.cpp $&#123;SRC_FILES&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">include_directories(<span class=\"string\">\"/usr/include/eigen3\"</span>)\t\t\t# 调用eigen3库</span><br><span class=\"line\"></span><br><span class=\"line\">add_executable(VectorTest main.cpp $&#123;SRC_LIST&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>程序运行结果如下：<br><img src=\"/images/20190609/VectorTest.png\" alt=\"VectorTest\"></p>\n<blockquote>\n<p>本文主要介绍vector的基础用法，关于Eigen库将在以后介绍，本文的参考如下：<br><a href=\"https://blog.csdn.net/msdnwolaile/article/details/52708144\" target=\"_blank\" rel=\"noopener\">C++ vector用法（详解！！函数，实现）</a><br><a href=\"https://blog.csdn.net/Snow_Me/article/details/77150998\" target=\"_blank\" rel=\"noopener\">vector详解</a></p>\n</blockquote>","popularPost_tmp_postPath":true,"eyeCatchImage":"/images/20190609/VectorTest.png","popularPost_tmp_gaData":{"updated":"Wed Jan 29 2020 21:57:52 GMT+0800 (China Standard Time)","title":"C++中vector的用法","path":"archives/20080.html","eyeCatchImage":"/images/20190609/VectorTest.png","excerpt":"介绍Vector的用法。","date":{"_isAMomentObject":true,"_i":"2019-06-09T09:30:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2019-06-09T09:30:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"工科生的基本功 > 快乐码农","tags":["Library","C++"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":2515},{"title":"Linux环境下Emacs的配置方法","description":"介绍Emacs的安装方法。","date":"2019-06-14T21:30:00.000Z","abbrlink":20916,"_content":"\n> 为提升自己的开发速度，因此需要熟练掌握一种编辑器，Emacs就是备受推崇的一种优秀编辑器。本文主要针对对Emacs了解较少的初学者，所使用系统环境是Ubuntu16.04。\n> 本文主要参考了[Emacs初学者配置文件](https://github.com/linweiyang/emacs.starter)，但是该文最后所描述的rtags安装有些问题，这是由于其所需的clang版本和rtags版本不匹配造成的。\n\n<!-- more -->\n\n# Emacs简介\n\nEmacs是一款优秀的编辑器。\n\n# Emacs的安装\n\n1.cmake的安装：\n\n```javascript\nsudo apt install cmake          //安装cmake是因为后面需要用它来编译\n```\n\n2.对于Ubuntu LTS 14.04或以上，安装指令如下：\n\n```c++\nsudo add-apt-repository ppa:kelleyk/emacs\nsudo apt update\nsudo apt install emacs26\t\t//获取高版本的emacs\n```\n\n3.Emacs初学者配置：\n\n```\ngit clone https://github.com/linweiyang/emacs.starter   \t\ncd emacs.starter\n./install.sh\n```\n\n> 至此，Emacs已经安装完毕。\n\n# 个性化配置\n\n> 由于自己常用的是C++编程，因此进行以下适合程序员的一些配置。\n\n## 一、安装Google Docs的C++语法检查工具\n\n```c++\nsudo apt-get install python-pip\nsudo pip install cpplint\t\t\n```\n\n## 二、安装Zeal工具\n\n安装Zeal工具并下载语言函数手册库：\n```c++\nsudo apt-get install zeal\n```\n\n使用方法：快捷键为`Ctrl+c D`\n\n## 三、rtags工具的安装\n\nrtags能使开发者在emacs中快速查找变量的声明和定义，是开发的利器！安装rtags要求clang的版本与其相匹配。截止笔者写稿之前，用LLVM/Clang的6.0版本可以与其相配。安装方法如下(首先新打开一个终端)：\n\n```\nsudo apt-get install llvm-6.0-dev clang-6.0 libclang-6.0-dev openssl\ngit clone --recursive https://github.com/Andersbakken/rtags.git\ncd rtags\nmkdir build\ncd build\nsource ~/.bashrc \ncmake ..\nmake -j2\nsudo make install\n```\n\n其中`make -j2`是采用双核编译。\n\n这里，需要注意的是，如果以上过程无法安装rtags，应该是clang版本与rtags版本不匹配造成的，可用如下方法来查看：\n\n```c++\nclang --version\nsudo apt-get remove clang* llvm*   //移除旧版本\nsudo apt-get update\nsudo apt-get install llvm-6.0-dev clang-6.0 libclang-6.0-dev openssl\t//安装新版本\n```\n\nrtags的使用方法：快捷键为`Crtl+c r`，等待两三秒后，右侧将显示所有的快捷键，这里只给出前三个：\n\n```c++\nCtrl+c r ,   //当前变量参考\nCtrl+c r .   //当前变量定义\nCtrl+c r /   //当前变量所有参考\n```\n\n## 四、CapsLock与Ctrl键的交换\n\n由于Emacs严重依赖于快捷键组合，或者说严重依赖于`Ctrl`键，因此为了方便操作，需要将`CapsLock`与`Ctrl`两个按键进行交换。方法如下：\n\n1.新打开一个终端，输入\n\n```c++\nemacs .xmodmap\t\t//用emacs打开xmodmap文件，如没有，将创建\n```\n\n2.在.xmodmap中输入\n\n```c++\nremove Lock = Caps_Lock\nremove Control = Control_L\nkeysym Control_L = Caps_Lock\nkeysym Caps_Lock = Control_L\nadd Lock = Caps_Lock\nadd Control = Control_L\n```\n\n> Emacs中粘贴的快捷键是`Ctrl+Y`。\n\n3.在终端中执行：\n\n```c++\nxmodmap .xmodmap\n```\n\n> 至此，完成了Emacs环境的配置，但是对于Emacs的快捷键，还需要花很多时间去摸索和学习。","source":"_posts/2019-06-14-Linux»·¾³ÏÂEmacsµÄÅäÖÃ.md","raw":"---\ntitle: Linux环境下Emacs的配置方法\ndescription: 介绍Emacs的安装方法。\ndate: '2019.06.14.21:30'\ncategories:\n  - 工科生的基本功\n  - 快乐码农\ntags:\n  - Linux\n  - Library\nabbrlink: 20916\n---\n\n> 为提升自己的开发速度，因此需要熟练掌握一种编辑器，Emacs就是备受推崇的一种优秀编辑器。本文主要针对对Emacs了解较少的初学者，所使用系统环境是Ubuntu16.04。\n> 本文主要参考了[Emacs初学者配置文件](https://github.com/linweiyang/emacs.starter)，但是该文最后所描述的rtags安装有些问题，这是由于其所需的clang版本和rtags版本不匹配造成的。\n\n<!-- more -->\n\n# Emacs简介\n\nEmacs是一款优秀的编辑器。\n\n# Emacs的安装\n\n1.cmake的安装：\n\n```javascript\nsudo apt install cmake          //安装cmake是因为后面需要用它来编译\n```\n\n2.对于Ubuntu LTS 14.04或以上，安装指令如下：\n\n```c++\nsudo add-apt-repository ppa:kelleyk/emacs\nsudo apt update\nsudo apt install emacs26\t\t//获取高版本的emacs\n```\n\n3.Emacs初学者配置：\n\n```\ngit clone https://github.com/linweiyang/emacs.starter   \t\ncd emacs.starter\n./install.sh\n```\n\n> 至此，Emacs已经安装完毕。\n\n# 个性化配置\n\n> 由于自己常用的是C++编程，因此进行以下适合程序员的一些配置。\n\n## 一、安装Google Docs的C++语法检查工具\n\n```c++\nsudo apt-get install python-pip\nsudo pip install cpplint\t\t\n```\n\n## 二、安装Zeal工具\n\n安装Zeal工具并下载语言函数手册库：\n```c++\nsudo apt-get install zeal\n```\n\n使用方法：快捷键为`Ctrl+c D`\n\n## 三、rtags工具的安装\n\nrtags能使开发者在emacs中快速查找变量的声明和定义，是开发的利器！安装rtags要求clang的版本与其相匹配。截止笔者写稿之前，用LLVM/Clang的6.0版本可以与其相配。安装方法如下(首先新打开一个终端)：\n\n```\nsudo apt-get install llvm-6.0-dev clang-6.0 libclang-6.0-dev openssl\ngit clone --recursive https://github.com/Andersbakken/rtags.git\ncd rtags\nmkdir build\ncd build\nsource ~/.bashrc \ncmake ..\nmake -j2\nsudo make install\n```\n\n其中`make -j2`是采用双核编译。\n\n这里，需要注意的是，如果以上过程无法安装rtags，应该是clang版本与rtags版本不匹配造成的，可用如下方法来查看：\n\n```c++\nclang --version\nsudo apt-get remove clang* llvm*   //移除旧版本\nsudo apt-get update\nsudo apt-get install llvm-6.0-dev clang-6.0 libclang-6.0-dev openssl\t//安装新版本\n```\n\nrtags的使用方法：快捷键为`Crtl+c r`，等待两三秒后，右侧将显示所有的快捷键，这里只给出前三个：\n\n```c++\nCtrl+c r ,   //当前变量参考\nCtrl+c r .   //当前变量定义\nCtrl+c r /   //当前变量所有参考\n```\n\n## 四、CapsLock与Ctrl键的交换\n\n由于Emacs严重依赖于快捷键组合，或者说严重依赖于`Ctrl`键，因此为了方便操作，需要将`CapsLock`与`Ctrl`两个按键进行交换。方法如下：\n\n1.新打开一个终端，输入\n\n```c++\nemacs .xmodmap\t\t//用emacs打开xmodmap文件，如没有，将创建\n```\n\n2.在.xmodmap中输入\n\n```c++\nremove Lock = Caps_Lock\nremove Control = Control_L\nkeysym Control_L = Caps_Lock\nkeysym Caps_Lock = Control_L\nadd Lock = Caps_Lock\nadd Control = Control_L\n```\n\n> Emacs中粘贴的快捷键是`Ctrl+Y`。\n\n3.在终端中执行：\n\n```c++\nxmodmap .xmodmap\n```\n\n> 至此，完成了Emacs环境的配置，但是对于Emacs的快捷键，还需要花很多时间去摸索和学习。","slug":"2019-06-14-Linux»·¾³ÏÂEmacsµÄÅäÖÃ","published":1,"updated":"2020-01-29T13:57:52.760Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck60spy9f000vda554rf685py","content":"<blockquote>\n<p>为提升自己的开发速度，因此需要熟练掌握一种编辑器，Emacs就是备受推崇的一种优秀编辑器。本文主要针对对Emacs了解较少的初学者，所使用系统环境是Ubuntu16.04。<br>本文主要参考了<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2xpbndlaXlhbmcvZW1hY3Muc3RhcnRlcg==\" title=\"https://github.com/linweiyang/emacs.starter\">Emacs初学者配置文件<i class=\"fa fa-external-link\"></i></span>，但是该文最后所描述的rtags安装有些问题，这是由于其所需的clang版本和rtags版本不匹配造成的。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h1 id=\"Emacs简介\"><a href=\"#Emacs简介\" class=\"headerlink\" title=\"Emacs简介\"></a>Emacs简介</h1><p>Emacs是一款优秀的编辑器。</p>\n<h1 id=\"Emacs的安装\"><a href=\"#Emacs的安装\" class=\"headerlink\" title=\"Emacs的安装\"></a>Emacs的安装</h1><p>1.cmake的安装：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install cmake          <span class=\"comment\">//安装cmake是因为后面需要用它来编译</span></span><br></pre></td></tr></table></figure>\n\n<p>2.对于Ubuntu LTS 14.04或以上，安装指令如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:kelleyk/emacs</span><br><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install emacs26\t\t<span class=\"comment\">//获取高版本的emacs</span></span><br></pre></td></tr></table></figure>\n\n<p>3.Emacs初学者配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https:&#x2F;&#x2F;github.com&#x2F;linweiyang&#x2F;emacs.starter   \t</span><br><span class=\"line\">cd emacs.starter</span><br><span class=\"line\">.&#x2F;install.sh</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>至此，Emacs已经安装完毕。</p>\n</blockquote>\n<h1 id=\"个性化配置\"><a href=\"#个性化配置\" class=\"headerlink\" title=\"个性化配置\"></a>个性化配置</h1><blockquote>\n<p>由于自己常用的是C++编程，因此进行以下适合程序员的一些配置。</p>\n</blockquote>\n<h2 id=\"一、安装Google-Docs的C-语法检查工具\"><a href=\"#一、安装Google-Docs的C-语法检查工具\" class=\"headerlink\" title=\"一、安装Google Docs的C++语法检查工具\"></a>一、安装Google Docs的C++语法检查工具</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> install python-pip</span><br><span class=\"line\">sudo pip install cpplint</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、安装Zeal工具\"><a href=\"#二、安装Zeal工具\" class=\"headerlink\" title=\"二、安装Zeal工具\"></a>二、安装Zeal工具</h2><p>安装Zeal工具并下载语言函数手册库：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> install zeal</span><br></pre></td></tr></table></figure>\n\n<p>使用方法：快捷键为<code>Ctrl+c D</code></p>\n<h2 id=\"三、rtags工具的安装\"><a href=\"#三、rtags工具的安装\" class=\"headerlink\" title=\"三、rtags工具的安装\"></a>三、rtags工具的安装</h2><p>rtags能使开发者在emacs中快速查找变量的声明和定义，是开发的利器！安装rtags要求clang的版本与其相匹配。截止笔者写稿之前，用LLVM/Clang的6.0版本可以与其相配。安装方法如下(首先新打开一个终端)：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install llvm-6.0-dev clang-6.0 libclang-6.0-dev openssl</span><br><span class=\"line\">git clone --recursive https:&#x2F;&#x2F;github.com&#x2F;Andersbakken&#x2F;rtags.git</span><br><span class=\"line\">cd rtags</span><br><span class=\"line\">mkdir build</span><br><span class=\"line\">cd build</span><br><span class=\"line\">source ~&#x2F;.bashrc </span><br><span class=\"line\">cmake ..</span><br><span class=\"line\">make -j2</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>make -j2</code>是采用双核编译。</p>\n<p>这里，需要注意的是，如果以上过程无法安装rtags，应该是clang版本与rtags版本不匹配造成的，可用如下方法来查看：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clang --version</span><br><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> <span class=\"built_in\">remove</span> clang* llvm*   <span class=\"comment\">//移除旧版本</span></span><br><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> update</span><br><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> install llvm<span class=\"number\">-6.0</span>-dev clang<span class=\"number\">-6.0</span> libclang<span class=\"number\">-6.0</span>-dev openssl\t<span class=\"comment\">//安装新版本</span></span><br></pre></td></tr></table></figure>\n\n<p>rtags的使用方法：快捷键为<code>Crtl+c r</code>，等待两三秒后，右侧将显示所有的快捷键，这里只给出前三个：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ctrl+c r ,   <span class=\"comment\">//当前变量参考</span></span><br><span class=\"line\">Ctrl+c r .   <span class=\"comment\">//当前变量定义</span></span><br><span class=\"line\">Ctrl+c r /   <span class=\"comment\">//当前变量所有参考</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、CapsLock与Ctrl键的交换\"><a href=\"#四、CapsLock与Ctrl键的交换\" class=\"headerlink\" title=\"四、CapsLock与Ctrl键的交换\"></a>四、CapsLock与Ctrl键的交换</h2><p>由于Emacs严重依赖于快捷键组合，或者说严重依赖于<code>Ctrl</code>键，因此为了方便操作，需要将<code>CapsLock</code>与<code>Ctrl</code>两个按键进行交换。方法如下：</p>\n<p>1.新打开一个终端，输入</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">emacs .xmodmap\t\t<span class=\"comment\">//用emacs打开xmodmap文件，如没有，将创建</span></span><br></pre></td></tr></table></figure>\n\n<p>2.在.xmodmap中输入</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">remove</span> Lock = Caps_Lock</span><br><span class=\"line\"><span class=\"built_in\">remove</span> Control = Control_L</span><br><span class=\"line\">keysym Control_L = Caps_Lock</span><br><span class=\"line\">keysym Caps_Lock = Control_L</span><br><span class=\"line\">add Lock = Caps_Lock</span><br><span class=\"line\">add Control = Control_L</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Emacs中粘贴的快捷键是<code>Ctrl+Y</code>。</p>\n</blockquote>\n<p>3.在终端中执行：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xmodmap .xmodmap</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>至此，完成了Emacs环境的配置，但是对于Emacs的快捷键，还需要花很多时间去摸索和学习。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>为提升自己的开发速度，因此需要熟练掌握一种编辑器，Emacs就是备受推崇的一种优秀编辑器。本文主要针对对Emacs了解较少的初学者，所使用系统环境是Ubuntu16.04。<br>本文主要参考了<a href=\"https://github.com/linweiyang/emacs.starter\" target=\"_blank\" rel=\"noopener\">Emacs初学者配置文件</a>，但是该文最后所描述的rtags安装有些问题，这是由于其所需的clang版本和rtags版本不匹配造成的。</p>\n</blockquote>","more":"<h1 id=\"Emacs简介\"><a href=\"#Emacs简介\" class=\"headerlink\" title=\"Emacs简介\"></a>Emacs简介</h1><p>Emacs是一款优秀的编辑器。</p>\n<h1 id=\"Emacs的安装\"><a href=\"#Emacs的安装\" class=\"headerlink\" title=\"Emacs的安装\"></a>Emacs的安装</h1><p>1.cmake的安装：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install cmake          <span class=\"comment\">//安装cmake是因为后面需要用它来编译</span></span><br></pre></td></tr></table></figure>\n\n<p>2.对于Ubuntu LTS 14.04或以上，安装指令如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:kelleyk/emacs</span><br><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install emacs26\t\t<span class=\"comment\">//获取高版本的emacs</span></span><br></pre></td></tr></table></figure>\n\n<p>3.Emacs初学者配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https:&#x2F;&#x2F;github.com&#x2F;linweiyang&#x2F;emacs.starter   \t</span><br><span class=\"line\">cd emacs.starter</span><br><span class=\"line\">.&#x2F;install.sh</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>至此，Emacs已经安装完毕。</p>\n</blockquote>\n<h1 id=\"个性化配置\"><a href=\"#个性化配置\" class=\"headerlink\" title=\"个性化配置\"></a>个性化配置</h1><blockquote>\n<p>由于自己常用的是C++编程，因此进行以下适合程序员的一些配置。</p>\n</blockquote>\n<h2 id=\"一、安装Google-Docs的C-语法检查工具\"><a href=\"#一、安装Google-Docs的C-语法检查工具\" class=\"headerlink\" title=\"一、安装Google Docs的C++语法检查工具\"></a>一、安装Google Docs的C++语法检查工具</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> install python-pip</span><br><span class=\"line\">sudo pip install cpplint</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、安装Zeal工具\"><a href=\"#二、安装Zeal工具\" class=\"headerlink\" title=\"二、安装Zeal工具\"></a>二、安装Zeal工具</h2><p>安装Zeal工具并下载语言函数手册库：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> install zeal</span><br></pre></td></tr></table></figure>\n\n<p>使用方法：快捷键为<code>Ctrl+c D</code></p>\n<h2 id=\"三、rtags工具的安装\"><a href=\"#三、rtags工具的安装\" class=\"headerlink\" title=\"三、rtags工具的安装\"></a>三、rtags工具的安装</h2><p>rtags能使开发者在emacs中快速查找变量的声明和定义，是开发的利器！安装rtags要求clang的版本与其相匹配。截止笔者写稿之前，用LLVM/Clang的6.0版本可以与其相配。安装方法如下(首先新打开一个终端)：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install llvm-6.0-dev clang-6.0 libclang-6.0-dev openssl</span><br><span class=\"line\">git clone --recursive https:&#x2F;&#x2F;github.com&#x2F;Andersbakken&#x2F;rtags.git</span><br><span class=\"line\">cd rtags</span><br><span class=\"line\">mkdir build</span><br><span class=\"line\">cd build</span><br><span class=\"line\">source ~&#x2F;.bashrc </span><br><span class=\"line\">cmake ..</span><br><span class=\"line\">make -j2</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>make -j2</code>是采用双核编译。</p>\n<p>这里，需要注意的是，如果以上过程无法安装rtags，应该是clang版本与rtags版本不匹配造成的，可用如下方法来查看：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clang --version</span><br><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> <span class=\"built_in\">remove</span> clang* llvm*   <span class=\"comment\">//移除旧版本</span></span><br><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> update</span><br><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> install llvm<span class=\"number\">-6.0</span>-dev clang<span class=\"number\">-6.0</span> libclang<span class=\"number\">-6.0</span>-dev openssl\t<span class=\"comment\">//安装新版本</span></span><br></pre></td></tr></table></figure>\n\n<p>rtags的使用方法：快捷键为<code>Crtl+c r</code>，等待两三秒后，右侧将显示所有的快捷键，这里只给出前三个：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ctrl+c r ,   <span class=\"comment\">//当前变量参考</span></span><br><span class=\"line\">Ctrl+c r .   <span class=\"comment\">//当前变量定义</span></span><br><span class=\"line\">Ctrl+c r /   <span class=\"comment\">//当前变量所有参考</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、CapsLock与Ctrl键的交换\"><a href=\"#四、CapsLock与Ctrl键的交换\" class=\"headerlink\" title=\"四、CapsLock与Ctrl键的交换\"></a>四、CapsLock与Ctrl键的交换</h2><p>由于Emacs严重依赖于快捷键组合，或者说严重依赖于<code>Ctrl</code>键，因此为了方便操作，需要将<code>CapsLock</code>与<code>Ctrl</code>两个按键进行交换。方法如下：</p>\n<p>1.新打开一个终端，输入</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">emacs .xmodmap\t\t<span class=\"comment\">//用emacs打开xmodmap文件，如没有，将创建</span></span><br></pre></td></tr></table></figure>\n\n<p>2.在.xmodmap中输入</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">remove</span> Lock = Caps_Lock</span><br><span class=\"line\"><span class=\"built_in\">remove</span> Control = Control_L</span><br><span class=\"line\">keysym Control_L = Caps_Lock</span><br><span class=\"line\">keysym Caps_Lock = Control_L</span><br><span class=\"line\">add Lock = Caps_Lock</span><br><span class=\"line\">add Control = Control_L</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Emacs中粘贴的快捷键是<code>Ctrl+Y</code>。</p>\n</blockquote>\n<p>3.在终端中执行：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xmodmap .xmodmap</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>至此，完成了Emacs环境的配置，但是对于Emacs的快捷键，还需要花很多时间去摸索和学习。</p>\n</blockquote>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Jan 29 2020 21:57:52 GMT+0800 (China Standard Time)","title":"Linux环境下Emacs的配置方法","path":"archives/20916.html","eyeCatchImage":null,"excerpt":"介绍Emacs的安装方法。","date":{"_isAMomentObject":true,"_i":"2019-06-14T21:30:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2019-06-14T21:30:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"工科生的基本功 > 快乐码农","tags":["Library","Linux"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1723},{"title":"Win10下完美安装MathType的方法","description":"介绍在win10下完美安装MathType的方法。","date":"2019-06-21T21:30:00.000Z","abbrlink":56794,"_content":"\n> 由于某些软件破解后再联网会导致激活失败，因此需要将该软件禁止联网。\n\n\n<!-- more -->\n\nMathType6.9安装方法：\n\n下载地址：\n\n[MathType 6.9b 简体中文版官方下载](http://www.mathtype.cn/xiazai.html)\n\n这个安装后无法使用输入注册码的方法进行激活，需要在试用期到期后删除注册表以延长试用期，方法如下：\n\n1.按`Win+R`键，打开运行；\n\n2.输入regedit，打开注册表；\n\n3.依次找到 `HKEY_CURRENT_USER ` -> `Software` -> `Install Options`，右侧显示`Options6.9`，将其删除。如下图所示。\n![DeleteMathTypeRegedit]( /images/20190621/DeleteMathTypeRegedit.PNG)\n\n4.重新打开MathType。\n\nMathType7.4主要参考以下内容：\n> 7.4的方法已经不再实用，注册码在2019-6-30到期了，而一旦到期就无法再次使用\n\n[数学公式编辑器 MathType 7.4.2.480 for Windows](http://www.itxiaozhong.com/1963.html)(重点看蓝色字部分)\n![InstallMathType]( /images/20190621/InstallMathType.PNG)\n\n[win10系统怎么禁用某个程序联网，阻止软件联网](https://jingyan.baidu.com/article/dca1fa6f1a75aaf1a44052f1.html)\n\n软件安装包已保存至网盘，相关链接和操作方法已在微信中收藏(标签为MathType7.4的安装方法)\n\n","source":"_posts/2019-06-21-Win10ÏÂÍêÃÀ°²×°MathTypeµÄ·½·¨.md","raw":"---\ntitle: Win10下完美安装MathType的方法\ndescription: 介绍在win10下完美安装MathType的方法。\ndate: '2019.06.21.21:30'\ncategories:\n  - 工科生的基本功\n  - 软件技术\ntags:\n  - Windows\n  - Library\nabbrlink: 56794\n---\n\n> 由于某些软件破解后再联网会导致激活失败，因此需要将该软件禁止联网。\n\n\n<!-- more -->\n\nMathType6.9安装方法：\n\n下载地址：\n\n[MathType 6.9b 简体中文版官方下载](http://www.mathtype.cn/xiazai.html)\n\n这个安装后无法使用输入注册码的方法进行激活，需要在试用期到期后删除注册表以延长试用期，方法如下：\n\n1.按`Win+R`键，打开运行；\n\n2.输入regedit，打开注册表；\n\n3.依次找到 `HKEY_CURRENT_USER ` -> `Software` -> `Install Options`，右侧显示`Options6.9`，将其删除。如下图所示。\n![DeleteMathTypeRegedit]( /images/20190621/DeleteMathTypeRegedit.PNG)\n\n4.重新打开MathType。\n\nMathType7.4主要参考以下内容：\n> 7.4的方法已经不再实用，注册码在2019-6-30到期了，而一旦到期就无法再次使用\n\n[数学公式编辑器 MathType 7.4.2.480 for Windows](http://www.itxiaozhong.com/1963.html)(重点看蓝色字部分)\n![InstallMathType]( /images/20190621/InstallMathType.PNG)\n\n[win10系统怎么禁用某个程序联网，阻止软件联网](https://jingyan.baidu.com/article/dca1fa6f1a75aaf1a44052f1.html)\n\n软件安装包已保存至网盘，相关链接和操作方法已在微信中收藏(标签为MathType7.4的安装方法)\n\n","slug":"2019-06-21-Win10ÏÂÍêÃÀ°²×°MathTypeµÄ·½·¨","published":1,"updated":"2020-01-29T13:57:52.764Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck60spy9h000zda55gm2t6p6q","content":"<blockquote>\n<p>由于某些软件破解后再联网会导致激活失败，因此需要将该软件禁止联网。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<p>MathType6.9安装方法：</p>\n<p>下载地址：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5tYXRodHlwZS5jbi94aWF6YWkuaHRtbA==\" title=\"http://www.mathtype.cn/xiazai.html\">MathType 6.9b 简体中文版官方下载<i class=\"fa fa-external-link\"></i></span></p>\n<p>这个安装后无法使用输入注册码的方法进行激活，需要在试用期到期后删除注册表以延长试用期，方法如下：</p>\n<p>1.按<code>Win+R</code>键，打开运行；</p>\n<p>2.输入regedit，打开注册表；</p>\n<p>3.依次找到 <code>HKEY_CURRENT_USER</code> -&gt; <code>Software</code> -&gt; <code>Install Options</code>，右侧显示<code>Options6.9</code>，将其删除。如下图所示。<br><img src=\"/images/20190621/DeleteMathTypeRegedit.PNG\" alt=\"DeleteMathTypeRegedit\"></p>\n<p>4.重新打开MathType。</p>\n<p>MathType7.4主要参考以下内容：</p>\n<blockquote>\n<p>7.4的方法已经不再实用，注册码在2019-6-30到期了，而一旦到期就无法再次使用</p>\n</blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5pdHhpYW96aG9uZy5jb20vMTk2My5odG1s\" title=\"http://www.itxiaozhong.com/1963.html\">数学公式编辑器 MathType 7.4.2.480 for Windows<i class=\"fa fa-external-link\"></i></span>(重点看蓝色字部分)<br><img src=\"/images/20190621/InstallMathType.PNG\" alt=\"InstallMathType\"></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qaW5neWFuLmJhaWR1LmNvbS9hcnRpY2xlL2RjYTFmYTZmMWE3NWFhZjFhNDQwNTJmMS5odG1s\" title=\"https://jingyan.baidu.com/article/dca1fa6f1a75aaf1a44052f1.html\">win10系统怎么禁用某个程序联网，阻止软件联网<i class=\"fa fa-external-link\"></i></span></p>\n<p>软件安装包已保存至网盘，相关链接和操作方法已在微信中收藏(标签为MathType7.4的安装方法)</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>由于某些软件破解后再联网会导致激活失败，因此需要将该软件禁止联网。</p>\n</blockquote>","more":"<p>MathType6.9安装方法：</p>\n<p>下载地址：</p>\n<p><a href=\"http://www.mathtype.cn/xiazai.html\" target=\"_blank\" rel=\"noopener\">MathType 6.9b 简体中文版官方下载</a></p>\n<p>这个安装后无法使用输入注册码的方法进行激活，需要在试用期到期后删除注册表以延长试用期，方法如下：</p>\n<p>1.按<code>Win+R</code>键，打开运行；</p>\n<p>2.输入regedit，打开注册表；</p>\n<p>3.依次找到 <code>HKEY_CURRENT_USER</code> -&gt; <code>Software</code> -&gt; <code>Install Options</code>，右侧显示<code>Options6.9</code>，将其删除。如下图所示。<br><img src=\"/images/20190621/DeleteMathTypeRegedit.PNG\" alt=\"DeleteMathTypeRegedit\"></p>\n<p>4.重新打开MathType。</p>\n<p>MathType7.4主要参考以下内容：</p>\n<blockquote>\n<p>7.4的方法已经不再实用，注册码在2019-6-30到期了，而一旦到期就无法再次使用</p>\n</blockquote>\n<p><a href=\"http://www.itxiaozhong.com/1963.html\" target=\"_blank\" rel=\"noopener\">数学公式编辑器 MathType 7.4.2.480 for Windows</a>(重点看蓝色字部分)<br><img src=\"/images/20190621/InstallMathType.PNG\" alt=\"InstallMathType\"></p>\n<p><a href=\"https://jingyan.baidu.com/article/dca1fa6f1a75aaf1a44052f1.html\" target=\"_blank\" rel=\"noopener\">win10系统怎么禁用某个程序联网，阻止软件联网</a></p>\n<p>软件安装包已保存至网盘，相关链接和操作方法已在微信中收藏(标签为MathType7.4的安装方法)</p>","popularPost_tmp_postPath":true,"eyeCatchImage":"/images/20190621/DeleteMathTypeRegedit.PNG","popularPost_tmp_gaData":{"updated":"Wed Jan 29 2020 21:57:52 GMT+0800 (China Standard Time)","title":"Win10下完美安装MathType的方法","path":"archives/56794.html","eyeCatchImage":"/images/20190621/DeleteMathTypeRegedit.PNG","excerpt":"介绍在win10下完美安装MathType的方法。","date":{"_isAMomentObject":true,"_i":"2019-06-21T21:30:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2019-06-21T21:30:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"工科生的基本功 > 软件技术","tags":["Library","Windows"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":432},{"title":"Win10下安装Linux双系统的方法","description":"介绍在win10下完美安装Ubuntu16.04的方法。","date":"2019-06-21T21:30:00.000Z","abbrlink":22360,"_content":"\n> 由于工作，往往不仅需要Windows系统，而且需要Linux系统，装虚拟机对内存是个很大的考验，因此选择装双系统。\n\n\n<!-- more -->\n\n# 系统安装的主要流程\n\n笔者目前已win10为主要操作系统，Ubuntu为第二操作系统，且由于win10安装简便，因此本文介绍的是基于win10的双系统安装方法，主要流程为：\n\n1. 安装win10；\n2. 安装Ubuntu16.04。\n\n# win10安装方法\n\n关于Windows的安装方法，已经非常熟悉了，这里只做个说明，详细的可参考最后一部分列出的网站。Win10安装的主要方法有两种：\n\n1.U盘安装。使用U盘安装需要区分电脑的BIOS是UEFI类型还是Legacy类型，如果是Legacy类型（适用于古老的电脑，例如笔者2013年买的笔记本），需要用软碟通或者大白菜之类的做U盘启动的系统盘；如果是UEFI类型的，截止现在（2019年），能买到的新机器都是UEFI类型的，这种的不需要用软件来将U盘做成系统盘，只需将系统镜像文件（.iso）拷贝到U盘中并解压。然后在开机时，选择U盘boot，开始装机。\n\n> 注意：关于UEFI类型的，笔者没有实际装过win10，因为Ubuntu16.04是这么干的，所以猜测win10也可以。\n\n2.电脑硬盘直接安装。将系统镜像.iso文件拷贝到非安装分区并解压，然后开始装机。\n\n# Ubuntu的安装方法\n\n关于Ubuntu的安装方法其实和win10差不太多，这里只强调两点：\n\n1. 对于新手，在分区的时候，不需要选择那么多分区，只需选择swap分区和/分区。swap分区选择主分区，大小为内存大小；/分区选逻辑分区，剩余大小全分配给它即可。\n\n2. 对于挂载位置的选择(整个页面最最最下面的下拉菜单)，直接默认选择在整个硬盘上即可，就是后面会标注你硬盘大小的那个选项。\n\n其他操作着重参考\n[UEFI模式安装Win10和Linux双系统](https://blog.csdn.net/romandion/article/details/79031519?utm_source=app)。\n\n# 主要参考\n\n1. [UEFI模式安装Win10和Linux双系统](https://blog.csdn.net/romandion/article/details/79031519?utm_source=app)\n\n2. [笔记本实现Win10+Ubuntu双系统(超详细)](https://blog.csdn.net/qq_28919991/article/details/83989958?utm_source=app)\n\n3. [win10安装ubuntu16.04双系统](https://www.jianshu.com/p/00ddf43a4f16)\n\n4. [win10下Ubuntu 双系统安装](https://blog.csdn.net/weixin_44585583/article/details/90704452)\n\n5. [window10和ubuntu16.04双系统装好后无法打开win10解决办法](https://www.jianshu.com/p/4be29762227f)\n\n6. [ubuntu16.04下无法打开win10的处理过程](https://blog.csdn.net/u010472596/article/details/85100474)\n","source":"_posts/2019-06-24-Win10ÏÂ°²×°LinuxË«ÏµÍ³µÄ·½·¨.md","raw":"---\ntitle: Win10下安装Linux双系统的方法\ndescription: 介绍在win10下完美安装Ubuntu16.04的方法。\ndate: '2019.06.21.21:30'\ncategories:\n  - 工科生的基本功\n  - 软件技术\ntags:\n  - Windows\n  - Linux\n  - Library\nabbrlink: 22360\n---\n\n> 由于工作，往往不仅需要Windows系统，而且需要Linux系统，装虚拟机对内存是个很大的考验，因此选择装双系统。\n\n\n<!-- more -->\n\n# 系统安装的主要流程\n\n笔者目前已win10为主要操作系统，Ubuntu为第二操作系统，且由于win10安装简便，因此本文介绍的是基于win10的双系统安装方法，主要流程为：\n\n1. 安装win10；\n2. 安装Ubuntu16.04。\n\n# win10安装方法\n\n关于Windows的安装方法，已经非常熟悉了，这里只做个说明，详细的可参考最后一部分列出的网站。Win10安装的主要方法有两种：\n\n1.U盘安装。使用U盘安装需要区分电脑的BIOS是UEFI类型还是Legacy类型，如果是Legacy类型（适用于古老的电脑，例如笔者2013年买的笔记本），需要用软碟通或者大白菜之类的做U盘启动的系统盘；如果是UEFI类型的，截止现在（2019年），能买到的新机器都是UEFI类型的，这种的不需要用软件来将U盘做成系统盘，只需将系统镜像文件（.iso）拷贝到U盘中并解压。然后在开机时，选择U盘boot，开始装机。\n\n> 注意：关于UEFI类型的，笔者没有实际装过win10，因为Ubuntu16.04是这么干的，所以猜测win10也可以。\n\n2.电脑硬盘直接安装。将系统镜像.iso文件拷贝到非安装分区并解压，然后开始装机。\n\n# Ubuntu的安装方法\n\n关于Ubuntu的安装方法其实和win10差不太多，这里只强调两点：\n\n1. 对于新手，在分区的时候，不需要选择那么多分区，只需选择swap分区和/分区。swap分区选择主分区，大小为内存大小；/分区选逻辑分区，剩余大小全分配给它即可。\n\n2. 对于挂载位置的选择(整个页面最最最下面的下拉菜单)，直接默认选择在整个硬盘上即可，就是后面会标注你硬盘大小的那个选项。\n\n其他操作着重参考\n[UEFI模式安装Win10和Linux双系统](https://blog.csdn.net/romandion/article/details/79031519?utm_source=app)。\n\n# 主要参考\n\n1. [UEFI模式安装Win10和Linux双系统](https://blog.csdn.net/romandion/article/details/79031519?utm_source=app)\n\n2. [笔记本实现Win10+Ubuntu双系统(超详细)](https://blog.csdn.net/qq_28919991/article/details/83989958?utm_source=app)\n\n3. [win10安装ubuntu16.04双系统](https://www.jianshu.com/p/00ddf43a4f16)\n\n4. [win10下Ubuntu 双系统安装](https://blog.csdn.net/weixin_44585583/article/details/90704452)\n\n5. [window10和ubuntu16.04双系统装好后无法打开win10解决办法](https://www.jianshu.com/p/4be29762227f)\n\n6. [ubuntu16.04下无法打开win10的处理过程](https://blog.csdn.net/u010472596/article/details/85100474)\n","slug":"2019-06-24-Win10ÏÂ°²×°LinuxË«ÏµÍ³µÄ·½·¨","published":1,"updated":"2020-01-29T13:57:52.764Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck60spy9j0012da555yiu5chl","content":"<blockquote>\n<p>由于工作，往往不仅需要Windows系统，而且需要Linux系统，装虚拟机对内存是个很大的考验，因此选择装双系统。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h1 id=\"系统安装的主要流程\"><a href=\"#系统安装的主要流程\" class=\"headerlink\" title=\"系统安装的主要流程\"></a>系统安装的主要流程</h1><p>笔者目前已win10为主要操作系统，Ubuntu为第二操作系统，且由于win10安装简便，因此本文介绍的是基于win10的双系统安装方法，主要流程为：</p>\n<ol>\n<li>安装win10；</li>\n<li>安装Ubuntu16.04。</li>\n</ol>\n<h1 id=\"win10安装方法\"><a href=\"#win10安装方法\" class=\"headerlink\" title=\"win10安装方法\"></a>win10安装方法</h1><p>关于Windows的安装方法，已经非常熟悉了，这里只做个说明，详细的可参考最后一部分列出的网站。Win10安装的主要方法有两种：</p>\n<p>1.U盘安装。使用U盘安装需要区分电脑的BIOS是UEFI类型还是Legacy类型，如果是Legacy类型（适用于古老的电脑，例如笔者2013年买的笔记本），需要用软碟通或者大白菜之类的做U盘启动的系统盘；如果是UEFI类型的，截止现在（2019年），能买到的新机器都是UEFI类型的，这种的不需要用软件来将U盘做成系统盘，只需将系统镜像文件（.iso）拷贝到U盘中并解压。然后在开机时，选择U盘boot，开始装机。</p>\n<blockquote>\n<p>注意：关于UEFI类型的，笔者没有实际装过win10，因为Ubuntu16.04是这么干的，所以猜测win10也可以。</p>\n</blockquote>\n<p>2.电脑硬盘直接安装。将系统镜像.iso文件拷贝到非安装分区并解压，然后开始装机。</p>\n<h1 id=\"Ubuntu的安装方法\"><a href=\"#Ubuntu的安装方法\" class=\"headerlink\" title=\"Ubuntu的安装方法\"></a>Ubuntu的安装方法</h1><p>关于Ubuntu的安装方法其实和win10差不太多，这里只强调两点：</p>\n<ol>\n<li><p>对于新手，在分区的时候，不需要选择那么多分区，只需选择swap分区和/分区。swap分区选择主分区，大小为内存大小；/分区选逻辑分区，剩余大小全分配给它即可。</p>\n</li>\n<li><p>对于挂载位置的选择(整个页面最最最下面的下拉菜单)，直接默认选择在整个硬盘上即可，就是后面会标注你硬盘大小的那个选项。</p>\n</li>\n</ol>\n<p>其他操作着重参考<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3JvbWFuZGlvbi9hcnRpY2xlL2RldGFpbHMvNzkwMzE1MTk/dXRtX3NvdXJjZT1hcHA=\" title=\"https://blog.csdn.net/romandion/article/details/79031519?utm_source=app\">UEFI模式安装Win10和Linux双系统<i class=\"fa fa-external-link\"></i></span>。</p>\n<h1 id=\"主要参考\"><a href=\"#主要参考\" class=\"headerlink\" title=\"主要参考\"></a>主要参考</h1><ol>\n<li><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3JvbWFuZGlvbi9hcnRpY2xlL2RldGFpbHMvNzkwMzE1MTk/dXRtX3NvdXJjZT1hcHA=\" title=\"https://blog.csdn.net/romandion/article/details/79031519?utm_source=app\">UEFI模式安装Win10和Linux双系统<i class=\"fa fa-external-link\"></i></span></p>\n</li>\n<li><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4OTE5OTkxL2FydGljbGUvZGV0YWlscy84Mzk4OTk1OD91dG1fc291cmNlPWFwcA==\" title=\"https://blog.csdn.net/qq_28919991/article/details/83989958?utm_source=app\">笔记本实现Win10+Ubuntu双系统(超详细)<i class=\"fa fa-external-link\"></i></span></p>\n</li>\n<li><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8wMGRkZjQzYTRmMTY=\" title=\"https://www.jianshu.com/p/00ddf43a4f16\">win10安装ubuntu16.04双系统<i class=\"fa fa-external-link\"></i></span></p>\n</li>\n<li><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDU4NTU4My9hcnRpY2xlL2RldGFpbHMvOTA3MDQ0NTI=\" title=\"https://blog.csdn.net/weixin_44585583/article/details/90704452\">win10下Ubuntu 双系统安装<i class=\"fa fa-external-link\"></i></span></p>\n</li>\n<li><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC80YmUyOTc2MjIyN2Y=\" title=\"https://www.jianshu.com/p/4be29762227f\">window10和ubuntu16.04双系统装好后无法打开win10解决办法<i class=\"fa fa-external-link\"></i></span></p>\n</li>\n<li><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA0NzI1OTYvYXJ0aWNsZS9kZXRhaWxzLzg1MTAwNDc0\" title=\"https://blog.csdn.net/u010472596/article/details/85100474\">ubuntu16.04下无法打开win10的处理过程<i class=\"fa fa-external-link\"></i></span></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>由于工作，往往不仅需要Windows系统，而且需要Linux系统，装虚拟机对内存是个很大的考验，因此选择装双系统。</p>\n</blockquote>","more":"<h1 id=\"系统安装的主要流程\"><a href=\"#系统安装的主要流程\" class=\"headerlink\" title=\"系统安装的主要流程\"></a>系统安装的主要流程</h1><p>笔者目前已win10为主要操作系统，Ubuntu为第二操作系统，且由于win10安装简便，因此本文介绍的是基于win10的双系统安装方法，主要流程为：</p>\n<ol>\n<li>安装win10；</li>\n<li>安装Ubuntu16.04。</li>\n</ol>\n<h1 id=\"win10安装方法\"><a href=\"#win10安装方法\" class=\"headerlink\" title=\"win10安装方法\"></a>win10安装方法</h1><p>关于Windows的安装方法，已经非常熟悉了，这里只做个说明，详细的可参考最后一部分列出的网站。Win10安装的主要方法有两种：</p>\n<p>1.U盘安装。使用U盘安装需要区分电脑的BIOS是UEFI类型还是Legacy类型，如果是Legacy类型（适用于古老的电脑，例如笔者2013年买的笔记本），需要用软碟通或者大白菜之类的做U盘启动的系统盘；如果是UEFI类型的，截止现在（2019年），能买到的新机器都是UEFI类型的，这种的不需要用软件来将U盘做成系统盘，只需将系统镜像文件（.iso）拷贝到U盘中并解压。然后在开机时，选择U盘boot，开始装机。</p>\n<blockquote>\n<p>注意：关于UEFI类型的，笔者没有实际装过win10，因为Ubuntu16.04是这么干的，所以猜测win10也可以。</p>\n</blockquote>\n<p>2.电脑硬盘直接安装。将系统镜像.iso文件拷贝到非安装分区并解压，然后开始装机。</p>\n<h1 id=\"Ubuntu的安装方法\"><a href=\"#Ubuntu的安装方法\" class=\"headerlink\" title=\"Ubuntu的安装方法\"></a>Ubuntu的安装方法</h1><p>关于Ubuntu的安装方法其实和win10差不太多，这里只强调两点：</p>\n<ol>\n<li><p>对于新手，在分区的时候，不需要选择那么多分区，只需选择swap分区和/分区。swap分区选择主分区，大小为内存大小；/分区选逻辑分区，剩余大小全分配给它即可。</p>\n</li>\n<li><p>对于挂载位置的选择(整个页面最最最下面的下拉菜单)，直接默认选择在整个硬盘上即可，就是后面会标注你硬盘大小的那个选项。</p>\n</li>\n</ol>\n<p>其他操作着重参考<br><a href=\"https://blog.csdn.net/romandion/article/details/79031519?utm_source=app\" target=\"_blank\" rel=\"noopener\">UEFI模式安装Win10和Linux双系统</a>。</p>\n<h1 id=\"主要参考\"><a href=\"#主要参考\" class=\"headerlink\" title=\"主要参考\"></a>主要参考</h1><ol>\n<li><p><a href=\"https://blog.csdn.net/romandion/article/details/79031519?utm_source=app\" target=\"_blank\" rel=\"noopener\">UEFI模式安装Win10和Linux双系统</a></p>\n</li>\n<li><p><a href=\"https://blog.csdn.net/qq_28919991/article/details/83989958?utm_source=app\" target=\"_blank\" rel=\"noopener\">笔记本实现Win10+Ubuntu双系统(超详细)</a></p>\n</li>\n<li><p><a href=\"https://www.jianshu.com/p/00ddf43a4f16\" target=\"_blank\" rel=\"noopener\">win10安装ubuntu16.04双系统</a></p>\n</li>\n<li><p><a href=\"https://blog.csdn.net/weixin_44585583/article/details/90704452\" target=\"_blank\" rel=\"noopener\">win10下Ubuntu 双系统安装</a></p>\n</li>\n<li><p><a href=\"https://www.jianshu.com/p/4be29762227f\" target=\"_blank\" rel=\"noopener\">window10和ubuntu16.04双系统装好后无法打开win10解决办法</a></p>\n</li>\n<li><p><a href=\"https://blog.csdn.net/u010472596/article/details/85100474\" target=\"_blank\" rel=\"noopener\">ubuntu16.04下无法打开win10的处理过程</a></p>\n</li>\n</ol>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Jan 29 2020 21:57:52 GMT+0800 (China Standard Time)","title":"Win10下安装Linux双系统的方法","path":"archives/22360.html","eyeCatchImage":null,"excerpt":"介绍在win10下完美安装Ubuntu16.04的方法。","date":{"_isAMomentObject":true,"_i":"2019-06-21T21:30:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2019-06-21T21:30:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"工科生的基本功 > 软件技术","tags":["Library","Linux","Windows"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":912},{"title":"C++中配置文件的读取","description":"介绍配置文件(*.ini)的使用方法。","date":"2019-07-11T11:00:00.000Z","abbrlink":22984,"_content":"\n> 开发环境：Ubuntu16.04 LTS。 需要的库：Eigen3。 额外的文件:inifile.h、inifile.cpp。\n\n<!-- more -->\n\n# 前言\n\n使用配置文件是提高项目开发效率的一个重要方法。如果不使用配置文件，当我们需要不断调整程序中的参数时，就会造成每修改一次参数需要进行一次编译的情况，\n而当项目代码很庞大时，编译往往会耗费大量时间。为了节约项目开发时间，提高工作效率，就需要将待调整参数存放至配置文件中。这样做，在修改时只需要修改配\n置文件中的参数，而不必对整个项目进行编译。\n\n# 完整程序源码\n\n完整程序目录入下图所示：\n![iniTestTree]( /images/20190711/iniTestTree.PNG)\n\n## CMakeLists.txt\n\n```c++\ncmake_minimum_required(VERSION 2.8)\nproject(iniTest)   \nset (CMAKE_CXX_STANDARD 11) \ninclude_directories(\t\"./include/\"\n\t\t\t\"/usr/include/eigen3\"\t)\nadd_executable(iniTest main.cpp ./src/inifile.cpp) \n```\n\n说明：\n\n1. `include_directories`是指添加所需头文件的目录，一些常规文件可自行添加，本例中为添加`inifile.h`需要加上\"./include/\"，还需手动添加\"/usr/include/eigen3\"。\n\n2. `add_executable`是指添加需要执行的cpp文件，注意需要将不同文件夹下的源文件包含进来。\n\n## test.ini\n配置文件test.ini内容如下，主要包含两个标题，每个标题下有两个标签。(标题、标签说法可能不专业)\n\n```c++\n[ObjectType]\n# Obj0\nminHSV0=0 15 10\nmaxHSV0=10 25 20\n\n\n[Motion]\nCoeffJv=1 1 1 1.5 1.5 2 3\nPos=1 2 3 4 5 6 7\n```\n\n## main.cpp\n\n```c++\n#include <iostream>\n#include \"stdio.h\"\n#include \"inifile.h\"\n#include <Eigen/Core>\n#include <Eigen/Dense>\n\nusing namespace std;\nusing namespace inifile;\nusing namespace Eigen;\n\n#define Vector7d Matrix<double, 7, 1>\n#define Vector3d Matrix<double, 3, 1>\n\nint main() {\n  Vector7d a;\n  a << 1, 1, 1, 1, 1, 1, 1;\n  Vector7d &coeffJv = a;\n  Vector3d b;\n  Vector3d &minHSV0 = b;\n  IniFile ini;\n  int rtn;\n  string file = \"../test.ini\";\n  const char* fileName = file.c_str();\n  if (ini.load(fileName) < 0) {\n    cout << \"No such file!\" << endl;\n    return -1;\n  }\n  cout << \"Load file succeed!\" << endl;\n  cout << \"\\na : \" << a.transpose() << endl;\n\n  string str1, str2;\n  string title = \"Motion\";\n  string label = \"CoeffJv\";\n  str1 = ini.getStringValue(title.c_str(), label.c_str(), rtn);\n\n  title = \"ObjectType\";\n  label = \"minHSV0\";\n  str2 = ini.getStringValue(title.c_str(), label.c_str(), rtn);\n  if (rtn != 0)\n    return -1;\n\n  sscanf(str1.c_str(), \"%lf %lf %lf %lf %lf %lf %lf\", &coeffJv[0],\n  \t &coeffJv[1], &coeffJv[2], &coeffJv[3],\n\t &coeffJv[4], &coeffJv[5], &coeffJv[6]);\n  sscanf(str2.c_str(), \"%lf %lf %lf\", &minHSV0[0],\n  \t &minHSV0[1], &minHSV0[2]);\n\n  cout << \"\\nCoeffJv : \" << coeffJv.transpose() << endl;\n  cout << \"\\na: \" << a.transpose() << endl;\n  cout << \"\\nminHSV0 : \" << minHSV0.transpose() << endl;\n  cout << \"\\nb: \" << b.transpose() << endl;\n\n  return 1;\n}\n```\n\n说明：\n\n1.Q：为什么要用引用？\n\n  A：用引用的目的是为了最后通过`sscanf`函数将配置文件中的参数写到自己的变量中，不用引用会写入失败。`sscanf`函数的用法目前尚不十分明确，因此这里只是\n     给出一种能用的方法。使用引用时必须初始化，因此首先定义了a、b两个变量，引用只是这两个变量的两个别名，修改引用的值会改掉a、b的值。\n\n2.Q：c_str()的作用是啥？\n\n  A：c_str()是string类下的一个函数，返回类型是`const char*`，这个类型在load()、getStringValue()类型中都需要用到。而直接用`const char*`来定义，将会\n     导致字符串无法修改。\n\n3.Q：transpose()的作用为何？\n\n  A：这是matrix中的一个函数，将矩阵进行转置。\n\n## ../include/inifile.h\n\n```c++\n#ifndef _INIFILE_H\n#define _INIFILE_H\n\n#include <map>\n#include <vector>\n#include <string>\n#include <string.h>\n\nusing namespace std;\nnamespace inifile\n{\nconst int RET_OK  = 0;\nconst int RET_ERR = -1;\nconst string delim = \"\\n\";\nstruct IniItem {\n    string key;\n    string value;\n    string comment;\n};\nstruct IniSection {\n    typedef vector<IniItem>::iterator iterator;\n    iterator begin() {\n        return items.begin();\n    }\n    iterator end() {\n        return items.end();\n    }\n\n    string name;\n    string comment;\n    vector<IniItem> items;\n};\n\nclass IniFile\n{\npublic:\n    IniFile();\n    ~IniFile() {\n        release();\n    }\n\npublic:\n    typedef map<string, IniSection *>::iterator iterator;\n\n    iterator begin() {\n        return sections_.begin();\n    }\n    iterator end() {\n        return sections_.end();\n    }\npublic:\n    /* 打开并解析一个名为fname的INI文件 */\n    int load(const string &fname);\n    /*将内容保存到当前文件*/\n    int save();\n    /*将内容另存到一个名为fname的文件*/\n    int saveas(const string &fname);\n\n    /*获取section段第一个键为key的值,并返回其string型的值*/\n    string getStringValue(const string &section, const string &key, int &ret);\n    /*获取section段第一个键为key的值,并返回其int型的值*/\n    int getIntValue(const string &section, const string &key, int &ret);\n    /*获取section段第一个键为key的值,并返回其double型的值*/\n    double getDoubleValue(const string &section, const string &key, int &ret);\n\n    /*获取section段第一个键为key的值,并将值赋到value中*/\n    int getValue(const string &section, const string &key, string &value);\n    /*获取section段第一个键为key的值,并将值赋到value中,将注释赋到comment中*/\n    int getValue(const string &section, const string &key, string &value, string &comment);\n\n    /*获取section段所有键为key的值,并将值赋到values的vector中*/\n    int getValues(const string &section, const string &key, vector<string> &values);\n    /*获取section段所有键为key的值,并将值赋到values的vector中,,将注释赋到comments的vector中*/\n    int getValues(const string &section, const string &key, vector<string> &value, vector<string> &comments);\n\n    bool hasSection(const string &section) ;\n    bool hasKey(const string &section, const string &key) ;\n\n    /* 获取section段的注释 */\n    int getSectionComment(const string &section, string &comment);\n    /* 设置section段的注释 */\n    int setSectionComment(const string &section, const string &comment);\n    /*获取注释标记符列表*/\n    void getCommentFlags(vector<string> &flags);\n    /*设置注释标记符列表*/\n    void setCommentFlags(const vector<string> &flags);\n\n    /*同时设置值和注释*/\n    int setValue(const string &section, const string &key, const string &value, const string &comment = \"\");\n    /*删除段*/\n    void deleteSection(const string &section);\n    /*删除特定段的特定参数*/\n    void deleteKey(const string &section, const string &key);\npublic:\n    /*去掉str后面的c字符*/\n    static void trimleft(string &str, char c = ' ');\n    /*去掉str前面的c字符*/\n    static void trimright(string &str, char c = ' ');\n    /*去掉str前面和后面的空格符,Tab符等空白符*/\n    static void trim(string &str);\n    /*将字符串str按分割符delim分割成多个子串*/\nprivate:\n    IniSection *getSection(const string &section = \"\");\n    void release();\n    int getline(string &str, FILE *fp);\n    bool isComment(const string &str);\n    bool parse(const string &content, string &key, string &value, char c = '=');\n    //for dubug\n    void print();\n\nprivate:\n    map<string, IniSection *> sections_;\n    string fname_;\n    vector<string> flags_;\n};\n}\n\n#endif\n```\n\n## ../src/inifile.cpp\n\n```c++\n#ifndef _INIFILE_CPP\n#define _INIFILE_CPP\n#include \"inifile.h\"\n#include <stdlib.h>\n#include <stdio.h>\n#include <ctype.h>\n\nnamespace inifile {\nint INI_BUF_SIZE = 2048;\n\nIniFile::IniFile() {\n  flags_.push_back(\"#\");\n  flags_.push_back(\";\");\n}\nbool IniFile::parse(const string &content, string &key, string &value, char c/*= '='*/)\n{\n  int i = 0;\n  int len = content.length();\n  while (i < len && content[i] != c) {\n    ++i;\n  }\n  if (i >= 0 && i < len) {\n    key = string(content.c_str(), i);\n    value = string(content.c_str() + i + 1, len - i - 1);\n    trim(key);\n    trim(value);\n    return true;\n  }\n  return false;\n}\n\nint IniFile::getline(string &str, FILE *fp)\n{\n  int plen = 0;\n  int buf_size = INI_BUF_SIZE * sizeof(char);\n\n  char *buf = (char *) malloc(buf_size);\n  char *pbuf = NULL;\n  char *p = buf;\n\n  if (buf == NULL) {\n    fprintf(stderr, \"no enough memory!exit!\\n\");\n    exit(-1);\n  }\n\n  memset(buf, 0, buf_size);\n  int total_size = buf_size;\n\n  while (fgets(p, buf_size, fp) != NULL) {\n    plen = strlen(p);\n\n    if (plen > 0 && p[plen - 1] != '\\n' && !feof(fp)) {\n\n      total_size = strlen(buf) + buf_size;\n      pbuf = (char *)realloc(buf, total_size);\n\n      if (pbuf == NULL) {\n\tfree(buf);\n\tfprintf(stderr, \"no enough memory!exit!\\n\");\n\texit(-1);\n      }\n\n      buf = pbuf;\n\n      p = buf + strlen(buf);\n\n      continue;\n    } else {\n      break;\n    }\n  }\n  str = buf;\n  free(buf);\n  buf = NULL;\n  return str.length();\n\n}\n\nint IniFile::load(const string &filename)\n{\n  release();\n  fname_ = filename;\n  IniSection *section = NULL;\n  FILE *fp = fopen(filename.c_str(), \"r\");\n\n  if (fp == NULL) {\n    return -1;\n  }\n\n  string line;\n  string comment;\n\n  //增加默认段section = new IniSection();\n  sections_[\"\"] = section;\n\n  while (getline(line, fp) > 0) {\n\n    trimright(line, '\\n');\n    trimright(line, '\\r');\n    trim(line);\n\n    if (!isComment(line)) {\n      string subline;\n      string tmp = line;\n\n      for (size_t i = 0; i < flags_.size(); ++i) {\n        subline = line.substr(0, line.find(flags_[i]));\n        line = subline;\n      }\n\n      comment += tmp.substr(line.length());\n    }\n\n    trim(line);\n\n    if (line.length() <= 0) {\n      continue;\n    }\n\n    if (line[0] == '[') {\n      section = NULL;\n      int index = line.find_first_of(']');\n\n      if (index == -1) {\n        fclose(fp);\n        fprintf(stderr, \"没有找到匹配的]\\n\");\n        return -1;\n      }\n\n      int len = index - 1;\n\n      if (len <= 0) {\n        fprintf(stderr, \"段为空\\n\");\n        continue;\n      }\n\n      string s(line, 1, len);\n\n      if (getSection(s.c_str()) != NULL) {\n        fclose(fp);\n        fprintf(stderr, \"此段已存在:%s\\n\", s.c_str());\n        return -1;\n      }\n\n      section = new IniSection();\n      sections_[s] = section;\n\n      section->name = s;\n      section->comment = comment;\n      comment = \"\";\n    } else if (isComment(line)) {\n      if (comment != \"\") {\n        comment += delim + line;\n      } else {\n        comment = line;\n      }\n    } else {\n      string key, value;\n\n      if (parse(line, key, value)) {\n        IniItem item;\n        item.key = key;\n        item.value = value;\n        item.comment = comment;\n\n        section->items.push_back(item);\n      } else {\n        fprintf(stderr, \"解析参数失败[%s]\\n\", line.c_str());\n      }\n\n      comment = \"\";\n    }\n  }\n  fclose(fp);\n  return 0;\n}\n\nint IniFile::save() { return saveas(fname_); }\n\nint IniFile::saveas(const string &filename) {\n  string data = \"\";\n\n  for (iterator sect = sections_.begin(); sect != sections_.end(); ++sect) {\n    if (sect->second->comment != \"\") {\n      data += sect->second->comment;\n      data += delim;\n    }\n\n    if (sect->first != \"\") {\n      data += string(\"[\") + sect->first + string(\"]\");\n      data += delim;\n    }\n\n    for (IniSection::iterator item = sect->second->items.begin();\n         item != sect->second->items.end(); ++item) {\n      if (item->comment != \"\") {\n        data += item->comment;\n        data += delim;\n      }\n\n      data += item->key + \"=\" + item->value;\n      data += delim;\n    }\n  }\n\n  FILE *fp = fopen(filename.c_str(), \"w\");\n\n  fwrite(data.c_str(), 1, data.length(), fp);\n\n  fclose(fp);\n\n  return 0;\n}\nIniSection *IniFile::getSection(const string &section /*=\"\"*/) {\n  iterator it = sections_.find(section);\n\n  if (it != sections_.end()) {\n    return it->second;\n  }\n\n  return NULL;\n}\n\nstring IniFile::getStringValue(const string &section, const string &key,\n                               int &ret) {\n  string value, comment;\n\n  ret = getValue(section, key, value, comment);\n\n  return value;\n}\n\nint IniFile::getIntValue(const string &section, const string &key, int &ret) {\n  string value, comment;\n\n  ret = getValue(section, key, value, comment);\n\n  return atoi(value.c_str());\n}\n\ndouble IniFile::getDoubleValue(const string &section, const string &key,\n                               int &ret) {\n  string value, comment;\n\n  ret = getValue(section, key, value, comment);\n\n  return atof(value.c_str());\n}\n\nint IniFile::getValue(const string &section, const string &key, string &value) {\n  string comment;\n  return getValue(section, key, value, comment);\n}\nint IniFile::getValue(const string &section, const string &key, string &value,\n                      string &comment) {\n  IniSection *sect = getSection(section);\n\n  if (sect != NULL) {\n    for (IniSection::iterator it = sect->begin(); it != sect->end(); ++it) {\n      if (it->key == key) {\n        value = it->value;\n        comment = it->comment;\n        return RET_OK;\n      }\n    }\n  }\n\n  return RET_ERR;\n}\nint IniFile::getValues(const string &section, const string &key,\n                       vector<string> &values) {\n  vector<string> comments;\n  return getValues(section, key, values, comments);\n}\nint IniFile::getValues(const string &section, const string &key,\n                       vector<string> &values, vector<string> &comments) {\n  string value, comment;\n\n  values.clear();\n  comments.clear();\n\n  IniSection *sect = getSection(section);\n\n  if (sect != NULL) {\n    for (IniSection::iterator it = sect->begin(); it != sect->end(); ++it) {\n      if (it->key == key) {\n        value = it->value;\n        comment = it->comment;\n\n        values.push_back(value);\n        comments.push_back(comment);\n      }\n    }\n  }\n\n  return (values.size() ? RET_OK : RET_ERR);\n}\nbool IniFile::hasSection(const string &section) {\n  return (getSection(section) != NULL);\n}\n\nbool IniFile::hasKey(const string &section, const string &key) {\n  IniSection *sect = getSection(section);\n\n  if (sect != NULL) {\n    for (IniSection::iterator it = sect->begin(); it != sect->end(); ++it) {\n      if (it->key == key) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\nint IniFile::getSectionComment(const string &section, string &comment) {\n  comment = \"\";\n  IniSection *sect = getSection(section);\n\n  if (sect != NULL) {\n    comment = sect->comment;\n    return RET_OK;\n  }\n\n  return RET_ERR;\n}\nint IniFile::setSectionComment(const string &section, const string &comment) {\n  IniSection *sect = getSection(section);\n\n  if (sect != NULL) {\n    sect->comment = comment;\n    return RET_OK;\n  }\n\n  return RET_ERR;\n}\n\nint IniFile::setValue(const string &section, const string &key,\n                      const string &value, const string &comment /*=\"\"*/) {\n  IniSection *sect = getSection(section);\n\n  string comt = comment;\n\n  if (comt != \"\") {\n    comt = flags_[0] + comt;\n  }\n\n  if (sect == NULL) {\n    sect = new IniSection();\n\n    if (sect == NULL) {\n      fprintf(stderr, \"no enough memory!\\n\");\n      exit(-1);\n    }\n\n    sect->name = section;\n    sections_[section] = sect;\n  }\n\n  for (IniSection::iterator it = sect->begin(); it != sect->end(); ++it) {\n    if (it->key == key) {\n      it->value = value;\n      it->comment = comt;\n      return RET_OK;\n    }\n  }\n\n  // not found key\n  IniItem item;\n  item.key = key;\n  item.value = value;\n  item.comment = comt;\n\n  sect->items.push_back(item);\n\n  return RET_OK;\n}\nvoid IniFile::getCommentFlags(vector<string> &flags) { flags = flags_; }\nvoid IniFile::setCommentFlags(const vector<string> &flags) { flags_ = flags; }\nvoid IniFile::deleteSection(const string &section) {\n  IniSection *sect = getSection(section);\n\n  if (sect != NULL) {\n\n    sections_.erase(section);\n    delete sect;\n  }\n}\nvoid IniFile::deleteKey(const string &section, const string &key) {\n  IniSection *sect = getSection(section);\n\n  if (sect != NULL) {\n    for (IniSection::iterator it = sect->begin(); it != sect->end(); ++it) {\n      if (it->key == key) {\n        sect->items.erase(it);\n        break;\n      }\n    }\n  }\n}\n\nvoid IniFile::release() {\n  fname_ = \"\";\n\n  for (iterator i = sections_.begin(); i != sections_.end(); ++i) {\n    delete i->second;\n  }\n\n  sections_.clear();\n}\n\nbool IniFile::isComment(const string &str) {\n  bool ret = false;\n\n  for (size_t i = 0; i < flags_.size(); ++i) {\n    size_t k = 0;\n\n    if (str.length() < flags_[i].length()) {\n      continue;\n    }\n\n    for (k = 0; k < flags_[i].length(); ++k) {\n      if (str[k] != flags_[i][k]) {\n        break;\n      }\n    }\n\n    if (k == flags_[i].length()) {\n      ret = true;\n      break;\n    }\n  }\n\n  return ret;\n}\n// for debug\nvoid IniFile::print() {\n  printf(\"filename:[%s]\\n\", fname_.c_str());\n\n  printf(\"flags_:[\");\n\n  for (size_t i = 0; i < flags_.size(); ++i) {\n    printf(\" %s \", flags_[i].c_str());\n  }\n\n  printf(\"]\\n\");\n\n  for (iterator it = sections_.begin(); it != sections_.end(); ++it) {\n    printf(\"section:[%s]\\n\", it->first.c_str());\n    printf(\"comment:[%s]\\n\", it->second->comment.c_str());\n\n    for (IniSection::iterator i = it->second->items.begin();\n         i != it->second->items.end(); ++i) {\n      printf(\"    comment:%s\\n\", i->comment.c_str());\n      printf(\"    parm   :%s=%s\\n\", i->key.c_str(), i->value.c_str());\n    }\n  }\n}\n\nvoid IniFile::trimleft(string &str, char c /*=' '*/) {\n  // trim head\n  int len = str.length();\n\n  int i = 0;\n\n  while (str[i] == c && str[i] != '\\0') {\n    i++;\n  }\n\n  if (i != 0) {\n    str = string(str, i, len - i);\n  }\n}\n\nvoid IniFile::trimright(string &str, char c /*=' '*/) {\n  // trim tail\n  int i = 0;\n  int len = str.length();\n\n  for (i = len - 1; i >= 0; --i) {\n    if (str[i] != c) {\n      break;\n    }\n  }\n  str = string(str, 0, i + 1);\n}\nvoid IniFile::trim(string &str) {\n  // trim head\n\n  int len = str.length();\n\n  int i = 0;\n\n  while (isspace(str[i]) && str[i] != '\\0') {\n    i++;\n  }\n\n  if (i != 0) {\n    str = string(str, i, len - i);\n  }\n  // trim tail\n  len = str.length();\n\n  for (i = len - 1; i >= 0; --i) {\n    if (!isspace(str[i])) {\n      break;\n    }\n  }\n  str = string(str, 0, i + 1);\n}\n} // namespace inifile\n#endif\n\n```\n\n# 程序运行结果\n![iniTest]( /images/20190711/iniTest.PNG)\n\n","source":"_posts/2019-07-11-C++ÖÐÅäÖÃÎÄ¼þµÄ¶ÁÈ¡.md","raw":"---\ntitle: C++中配置文件的读取\ndescription: 介绍配置文件(*.ini)的使用方法。\ndate: '2019.07.11.11:00'\ncategories:\n  - 工科生的基本功\n  - 快乐码农\ntags:\n  - C++\n  - Library\nabbrlink: 22984\n---\n\n> 开发环境：Ubuntu16.04 LTS。 需要的库：Eigen3。 额外的文件:inifile.h、inifile.cpp。\n\n<!-- more -->\n\n# 前言\n\n使用配置文件是提高项目开发效率的一个重要方法。如果不使用配置文件，当我们需要不断调整程序中的参数时，就会造成每修改一次参数需要进行一次编译的情况，\n而当项目代码很庞大时，编译往往会耗费大量时间。为了节约项目开发时间，提高工作效率，就需要将待调整参数存放至配置文件中。这样做，在修改时只需要修改配\n置文件中的参数，而不必对整个项目进行编译。\n\n# 完整程序源码\n\n完整程序目录入下图所示：\n![iniTestTree]( /images/20190711/iniTestTree.PNG)\n\n## CMakeLists.txt\n\n```c++\ncmake_minimum_required(VERSION 2.8)\nproject(iniTest)   \nset (CMAKE_CXX_STANDARD 11) \ninclude_directories(\t\"./include/\"\n\t\t\t\"/usr/include/eigen3\"\t)\nadd_executable(iniTest main.cpp ./src/inifile.cpp) \n```\n\n说明：\n\n1. `include_directories`是指添加所需头文件的目录，一些常规文件可自行添加，本例中为添加`inifile.h`需要加上\"./include/\"，还需手动添加\"/usr/include/eigen3\"。\n\n2. `add_executable`是指添加需要执行的cpp文件，注意需要将不同文件夹下的源文件包含进来。\n\n## test.ini\n配置文件test.ini内容如下，主要包含两个标题，每个标题下有两个标签。(标题、标签说法可能不专业)\n\n```c++\n[ObjectType]\n# Obj0\nminHSV0=0 15 10\nmaxHSV0=10 25 20\n\n\n[Motion]\nCoeffJv=1 1 1 1.5 1.5 2 3\nPos=1 2 3 4 5 6 7\n```\n\n## main.cpp\n\n```c++\n#include <iostream>\n#include \"stdio.h\"\n#include \"inifile.h\"\n#include <Eigen/Core>\n#include <Eigen/Dense>\n\nusing namespace std;\nusing namespace inifile;\nusing namespace Eigen;\n\n#define Vector7d Matrix<double, 7, 1>\n#define Vector3d Matrix<double, 3, 1>\n\nint main() {\n  Vector7d a;\n  a << 1, 1, 1, 1, 1, 1, 1;\n  Vector7d &coeffJv = a;\n  Vector3d b;\n  Vector3d &minHSV0 = b;\n  IniFile ini;\n  int rtn;\n  string file = \"../test.ini\";\n  const char* fileName = file.c_str();\n  if (ini.load(fileName) < 0) {\n    cout << \"No such file!\" << endl;\n    return -1;\n  }\n  cout << \"Load file succeed!\" << endl;\n  cout << \"\\na : \" << a.transpose() << endl;\n\n  string str1, str2;\n  string title = \"Motion\";\n  string label = \"CoeffJv\";\n  str1 = ini.getStringValue(title.c_str(), label.c_str(), rtn);\n\n  title = \"ObjectType\";\n  label = \"minHSV0\";\n  str2 = ini.getStringValue(title.c_str(), label.c_str(), rtn);\n  if (rtn != 0)\n    return -1;\n\n  sscanf(str1.c_str(), \"%lf %lf %lf %lf %lf %lf %lf\", &coeffJv[0],\n  \t &coeffJv[1], &coeffJv[2], &coeffJv[3],\n\t &coeffJv[4], &coeffJv[5], &coeffJv[6]);\n  sscanf(str2.c_str(), \"%lf %lf %lf\", &minHSV0[0],\n  \t &minHSV0[1], &minHSV0[2]);\n\n  cout << \"\\nCoeffJv : \" << coeffJv.transpose() << endl;\n  cout << \"\\na: \" << a.transpose() << endl;\n  cout << \"\\nminHSV0 : \" << minHSV0.transpose() << endl;\n  cout << \"\\nb: \" << b.transpose() << endl;\n\n  return 1;\n}\n```\n\n说明：\n\n1.Q：为什么要用引用？\n\n  A：用引用的目的是为了最后通过`sscanf`函数将配置文件中的参数写到自己的变量中，不用引用会写入失败。`sscanf`函数的用法目前尚不十分明确，因此这里只是\n     给出一种能用的方法。使用引用时必须初始化，因此首先定义了a、b两个变量，引用只是这两个变量的两个别名，修改引用的值会改掉a、b的值。\n\n2.Q：c_str()的作用是啥？\n\n  A：c_str()是string类下的一个函数，返回类型是`const char*`，这个类型在load()、getStringValue()类型中都需要用到。而直接用`const char*`来定义，将会\n     导致字符串无法修改。\n\n3.Q：transpose()的作用为何？\n\n  A：这是matrix中的一个函数，将矩阵进行转置。\n\n## ../include/inifile.h\n\n```c++\n#ifndef _INIFILE_H\n#define _INIFILE_H\n\n#include <map>\n#include <vector>\n#include <string>\n#include <string.h>\n\nusing namespace std;\nnamespace inifile\n{\nconst int RET_OK  = 0;\nconst int RET_ERR = -1;\nconst string delim = \"\\n\";\nstruct IniItem {\n    string key;\n    string value;\n    string comment;\n};\nstruct IniSection {\n    typedef vector<IniItem>::iterator iterator;\n    iterator begin() {\n        return items.begin();\n    }\n    iterator end() {\n        return items.end();\n    }\n\n    string name;\n    string comment;\n    vector<IniItem> items;\n};\n\nclass IniFile\n{\npublic:\n    IniFile();\n    ~IniFile() {\n        release();\n    }\n\npublic:\n    typedef map<string, IniSection *>::iterator iterator;\n\n    iterator begin() {\n        return sections_.begin();\n    }\n    iterator end() {\n        return sections_.end();\n    }\npublic:\n    /* 打开并解析一个名为fname的INI文件 */\n    int load(const string &fname);\n    /*将内容保存到当前文件*/\n    int save();\n    /*将内容另存到一个名为fname的文件*/\n    int saveas(const string &fname);\n\n    /*获取section段第一个键为key的值,并返回其string型的值*/\n    string getStringValue(const string &section, const string &key, int &ret);\n    /*获取section段第一个键为key的值,并返回其int型的值*/\n    int getIntValue(const string &section, const string &key, int &ret);\n    /*获取section段第一个键为key的值,并返回其double型的值*/\n    double getDoubleValue(const string &section, const string &key, int &ret);\n\n    /*获取section段第一个键为key的值,并将值赋到value中*/\n    int getValue(const string &section, const string &key, string &value);\n    /*获取section段第一个键为key的值,并将值赋到value中,将注释赋到comment中*/\n    int getValue(const string &section, const string &key, string &value, string &comment);\n\n    /*获取section段所有键为key的值,并将值赋到values的vector中*/\n    int getValues(const string &section, const string &key, vector<string> &values);\n    /*获取section段所有键为key的值,并将值赋到values的vector中,,将注释赋到comments的vector中*/\n    int getValues(const string &section, const string &key, vector<string> &value, vector<string> &comments);\n\n    bool hasSection(const string &section) ;\n    bool hasKey(const string &section, const string &key) ;\n\n    /* 获取section段的注释 */\n    int getSectionComment(const string &section, string &comment);\n    /* 设置section段的注释 */\n    int setSectionComment(const string &section, const string &comment);\n    /*获取注释标记符列表*/\n    void getCommentFlags(vector<string> &flags);\n    /*设置注释标记符列表*/\n    void setCommentFlags(const vector<string> &flags);\n\n    /*同时设置值和注释*/\n    int setValue(const string &section, const string &key, const string &value, const string &comment = \"\");\n    /*删除段*/\n    void deleteSection(const string &section);\n    /*删除特定段的特定参数*/\n    void deleteKey(const string &section, const string &key);\npublic:\n    /*去掉str后面的c字符*/\n    static void trimleft(string &str, char c = ' ');\n    /*去掉str前面的c字符*/\n    static void trimright(string &str, char c = ' ');\n    /*去掉str前面和后面的空格符,Tab符等空白符*/\n    static void trim(string &str);\n    /*将字符串str按分割符delim分割成多个子串*/\nprivate:\n    IniSection *getSection(const string &section = \"\");\n    void release();\n    int getline(string &str, FILE *fp);\n    bool isComment(const string &str);\n    bool parse(const string &content, string &key, string &value, char c = '=');\n    //for dubug\n    void print();\n\nprivate:\n    map<string, IniSection *> sections_;\n    string fname_;\n    vector<string> flags_;\n};\n}\n\n#endif\n```\n\n## ../src/inifile.cpp\n\n```c++\n#ifndef _INIFILE_CPP\n#define _INIFILE_CPP\n#include \"inifile.h\"\n#include <stdlib.h>\n#include <stdio.h>\n#include <ctype.h>\n\nnamespace inifile {\nint INI_BUF_SIZE = 2048;\n\nIniFile::IniFile() {\n  flags_.push_back(\"#\");\n  flags_.push_back(\";\");\n}\nbool IniFile::parse(const string &content, string &key, string &value, char c/*= '='*/)\n{\n  int i = 0;\n  int len = content.length();\n  while (i < len && content[i] != c) {\n    ++i;\n  }\n  if (i >= 0 && i < len) {\n    key = string(content.c_str(), i);\n    value = string(content.c_str() + i + 1, len - i - 1);\n    trim(key);\n    trim(value);\n    return true;\n  }\n  return false;\n}\n\nint IniFile::getline(string &str, FILE *fp)\n{\n  int plen = 0;\n  int buf_size = INI_BUF_SIZE * sizeof(char);\n\n  char *buf = (char *) malloc(buf_size);\n  char *pbuf = NULL;\n  char *p = buf;\n\n  if (buf == NULL) {\n    fprintf(stderr, \"no enough memory!exit!\\n\");\n    exit(-1);\n  }\n\n  memset(buf, 0, buf_size);\n  int total_size = buf_size;\n\n  while (fgets(p, buf_size, fp) != NULL) {\n    plen = strlen(p);\n\n    if (plen > 0 && p[plen - 1] != '\\n' && !feof(fp)) {\n\n      total_size = strlen(buf) + buf_size;\n      pbuf = (char *)realloc(buf, total_size);\n\n      if (pbuf == NULL) {\n\tfree(buf);\n\tfprintf(stderr, \"no enough memory!exit!\\n\");\n\texit(-1);\n      }\n\n      buf = pbuf;\n\n      p = buf + strlen(buf);\n\n      continue;\n    } else {\n      break;\n    }\n  }\n  str = buf;\n  free(buf);\n  buf = NULL;\n  return str.length();\n\n}\n\nint IniFile::load(const string &filename)\n{\n  release();\n  fname_ = filename;\n  IniSection *section = NULL;\n  FILE *fp = fopen(filename.c_str(), \"r\");\n\n  if (fp == NULL) {\n    return -1;\n  }\n\n  string line;\n  string comment;\n\n  //增加默认段section = new IniSection();\n  sections_[\"\"] = section;\n\n  while (getline(line, fp) > 0) {\n\n    trimright(line, '\\n');\n    trimright(line, '\\r');\n    trim(line);\n\n    if (!isComment(line)) {\n      string subline;\n      string tmp = line;\n\n      for (size_t i = 0; i < flags_.size(); ++i) {\n        subline = line.substr(0, line.find(flags_[i]));\n        line = subline;\n      }\n\n      comment += tmp.substr(line.length());\n    }\n\n    trim(line);\n\n    if (line.length() <= 0) {\n      continue;\n    }\n\n    if (line[0] == '[') {\n      section = NULL;\n      int index = line.find_first_of(']');\n\n      if (index == -1) {\n        fclose(fp);\n        fprintf(stderr, \"没有找到匹配的]\\n\");\n        return -1;\n      }\n\n      int len = index - 1;\n\n      if (len <= 0) {\n        fprintf(stderr, \"段为空\\n\");\n        continue;\n      }\n\n      string s(line, 1, len);\n\n      if (getSection(s.c_str()) != NULL) {\n        fclose(fp);\n        fprintf(stderr, \"此段已存在:%s\\n\", s.c_str());\n        return -1;\n      }\n\n      section = new IniSection();\n      sections_[s] = section;\n\n      section->name = s;\n      section->comment = comment;\n      comment = \"\";\n    } else if (isComment(line)) {\n      if (comment != \"\") {\n        comment += delim + line;\n      } else {\n        comment = line;\n      }\n    } else {\n      string key, value;\n\n      if (parse(line, key, value)) {\n        IniItem item;\n        item.key = key;\n        item.value = value;\n        item.comment = comment;\n\n        section->items.push_back(item);\n      } else {\n        fprintf(stderr, \"解析参数失败[%s]\\n\", line.c_str());\n      }\n\n      comment = \"\";\n    }\n  }\n  fclose(fp);\n  return 0;\n}\n\nint IniFile::save() { return saveas(fname_); }\n\nint IniFile::saveas(const string &filename) {\n  string data = \"\";\n\n  for (iterator sect = sections_.begin(); sect != sections_.end(); ++sect) {\n    if (sect->second->comment != \"\") {\n      data += sect->second->comment;\n      data += delim;\n    }\n\n    if (sect->first != \"\") {\n      data += string(\"[\") + sect->first + string(\"]\");\n      data += delim;\n    }\n\n    for (IniSection::iterator item = sect->second->items.begin();\n         item != sect->second->items.end(); ++item) {\n      if (item->comment != \"\") {\n        data += item->comment;\n        data += delim;\n      }\n\n      data += item->key + \"=\" + item->value;\n      data += delim;\n    }\n  }\n\n  FILE *fp = fopen(filename.c_str(), \"w\");\n\n  fwrite(data.c_str(), 1, data.length(), fp);\n\n  fclose(fp);\n\n  return 0;\n}\nIniSection *IniFile::getSection(const string &section /*=\"\"*/) {\n  iterator it = sections_.find(section);\n\n  if (it != sections_.end()) {\n    return it->second;\n  }\n\n  return NULL;\n}\n\nstring IniFile::getStringValue(const string &section, const string &key,\n                               int &ret) {\n  string value, comment;\n\n  ret = getValue(section, key, value, comment);\n\n  return value;\n}\n\nint IniFile::getIntValue(const string &section, const string &key, int &ret) {\n  string value, comment;\n\n  ret = getValue(section, key, value, comment);\n\n  return atoi(value.c_str());\n}\n\ndouble IniFile::getDoubleValue(const string &section, const string &key,\n                               int &ret) {\n  string value, comment;\n\n  ret = getValue(section, key, value, comment);\n\n  return atof(value.c_str());\n}\n\nint IniFile::getValue(const string &section, const string &key, string &value) {\n  string comment;\n  return getValue(section, key, value, comment);\n}\nint IniFile::getValue(const string &section, const string &key, string &value,\n                      string &comment) {\n  IniSection *sect = getSection(section);\n\n  if (sect != NULL) {\n    for (IniSection::iterator it = sect->begin(); it != sect->end(); ++it) {\n      if (it->key == key) {\n        value = it->value;\n        comment = it->comment;\n        return RET_OK;\n      }\n    }\n  }\n\n  return RET_ERR;\n}\nint IniFile::getValues(const string &section, const string &key,\n                       vector<string> &values) {\n  vector<string> comments;\n  return getValues(section, key, values, comments);\n}\nint IniFile::getValues(const string &section, const string &key,\n                       vector<string> &values, vector<string> &comments) {\n  string value, comment;\n\n  values.clear();\n  comments.clear();\n\n  IniSection *sect = getSection(section);\n\n  if (sect != NULL) {\n    for (IniSection::iterator it = sect->begin(); it != sect->end(); ++it) {\n      if (it->key == key) {\n        value = it->value;\n        comment = it->comment;\n\n        values.push_back(value);\n        comments.push_back(comment);\n      }\n    }\n  }\n\n  return (values.size() ? RET_OK : RET_ERR);\n}\nbool IniFile::hasSection(const string &section) {\n  return (getSection(section) != NULL);\n}\n\nbool IniFile::hasKey(const string &section, const string &key) {\n  IniSection *sect = getSection(section);\n\n  if (sect != NULL) {\n    for (IniSection::iterator it = sect->begin(); it != sect->end(); ++it) {\n      if (it->key == key) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\nint IniFile::getSectionComment(const string &section, string &comment) {\n  comment = \"\";\n  IniSection *sect = getSection(section);\n\n  if (sect != NULL) {\n    comment = sect->comment;\n    return RET_OK;\n  }\n\n  return RET_ERR;\n}\nint IniFile::setSectionComment(const string &section, const string &comment) {\n  IniSection *sect = getSection(section);\n\n  if (sect != NULL) {\n    sect->comment = comment;\n    return RET_OK;\n  }\n\n  return RET_ERR;\n}\n\nint IniFile::setValue(const string &section, const string &key,\n                      const string &value, const string &comment /*=\"\"*/) {\n  IniSection *sect = getSection(section);\n\n  string comt = comment;\n\n  if (comt != \"\") {\n    comt = flags_[0] + comt;\n  }\n\n  if (sect == NULL) {\n    sect = new IniSection();\n\n    if (sect == NULL) {\n      fprintf(stderr, \"no enough memory!\\n\");\n      exit(-1);\n    }\n\n    sect->name = section;\n    sections_[section] = sect;\n  }\n\n  for (IniSection::iterator it = sect->begin(); it != sect->end(); ++it) {\n    if (it->key == key) {\n      it->value = value;\n      it->comment = comt;\n      return RET_OK;\n    }\n  }\n\n  // not found key\n  IniItem item;\n  item.key = key;\n  item.value = value;\n  item.comment = comt;\n\n  sect->items.push_back(item);\n\n  return RET_OK;\n}\nvoid IniFile::getCommentFlags(vector<string> &flags) { flags = flags_; }\nvoid IniFile::setCommentFlags(const vector<string> &flags) { flags_ = flags; }\nvoid IniFile::deleteSection(const string &section) {\n  IniSection *sect = getSection(section);\n\n  if (sect != NULL) {\n\n    sections_.erase(section);\n    delete sect;\n  }\n}\nvoid IniFile::deleteKey(const string &section, const string &key) {\n  IniSection *sect = getSection(section);\n\n  if (sect != NULL) {\n    for (IniSection::iterator it = sect->begin(); it != sect->end(); ++it) {\n      if (it->key == key) {\n        sect->items.erase(it);\n        break;\n      }\n    }\n  }\n}\n\nvoid IniFile::release() {\n  fname_ = \"\";\n\n  for (iterator i = sections_.begin(); i != sections_.end(); ++i) {\n    delete i->second;\n  }\n\n  sections_.clear();\n}\n\nbool IniFile::isComment(const string &str) {\n  bool ret = false;\n\n  for (size_t i = 0; i < flags_.size(); ++i) {\n    size_t k = 0;\n\n    if (str.length() < flags_[i].length()) {\n      continue;\n    }\n\n    for (k = 0; k < flags_[i].length(); ++k) {\n      if (str[k] != flags_[i][k]) {\n        break;\n      }\n    }\n\n    if (k == flags_[i].length()) {\n      ret = true;\n      break;\n    }\n  }\n\n  return ret;\n}\n// for debug\nvoid IniFile::print() {\n  printf(\"filename:[%s]\\n\", fname_.c_str());\n\n  printf(\"flags_:[\");\n\n  for (size_t i = 0; i < flags_.size(); ++i) {\n    printf(\" %s \", flags_[i].c_str());\n  }\n\n  printf(\"]\\n\");\n\n  for (iterator it = sections_.begin(); it != sections_.end(); ++it) {\n    printf(\"section:[%s]\\n\", it->first.c_str());\n    printf(\"comment:[%s]\\n\", it->second->comment.c_str());\n\n    for (IniSection::iterator i = it->second->items.begin();\n         i != it->second->items.end(); ++i) {\n      printf(\"    comment:%s\\n\", i->comment.c_str());\n      printf(\"    parm   :%s=%s\\n\", i->key.c_str(), i->value.c_str());\n    }\n  }\n}\n\nvoid IniFile::trimleft(string &str, char c /*=' '*/) {\n  // trim head\n  int len = str.length();\n\n  int i = 0;\n\n  while (str[i] == c && str[i] != '\\0') {\n    i++;\n  }\n\n  if (i != 0) {\n    str = string(str, i, len - i);\n  }\n}\n\nvoid IniFile::trimright(string &str, char c /*=' '*/) {\n  // trim tail\n  int i = 0;\n  int len = str.length();\n\n  for (i = len - 1; i >= 0; --i) {\n    if (str[i] != c) {\n      break;\n    }\n  }\n  str = string(str, 0, i + 1);\n}\nvoid IniFile::trim(string &str) {\n  // trim head\n\n  int len = str.length();\n\n  int i = 0;\n\n  while (isspace(str[i]) && str[i] != '\\0') {\n    i++;\n  }\n\n  if (i != 0) {\n    str = string(str, i, len - i);\n  }\n  // trim tail\n  len = str.length();\n\n  for (i = len - 1; i >= 0; --i) {\n    if (!isspace(str[i])) {\n      break;\n    }\n  }\n  str = string(str, 0, i + 1);\n}\n} // namespace inifile\n#endif\n\n```\n\n# 程序运行结果\n![iniTest]( /images/20190711/iniTest.PNG)\n\n","slug":"2019-07-11-C++ÖÐÅäÖÃÎÄ¼þµÄ¶ÁÈ¡","published":1,"updated":"2020-01-29T13:57:52.764Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck60spy9l0017da5511ow6fhh","content":"<blockquote>\n<p>开发环境：Ubuntu16.04 LTS。 需要的库：Eigen3。 额外的文件:inifile.h、inifile.cpp。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>使用配置文件是提高项目开发效率的一个重要方法。如果不使用配置文件，当我们需要不断调整程序中的参数时，就会造成每修改一次参数需要进行一次编译的情况，<br>而当项目代码很庞大时，编译往往会耗费大量时间。为了节约项目开发时间，提高工作效率，就需要将待调整参数存放至配置文件中。这样做，在修改时只需要修改配<br>置文件中的参数，而不必对整个项目进行编译。</p>\n<h1 id=\"完整程序源码\"><a href=\"#完整程序源码\" class=\"headerlink\" title=\"完整程序源码\"></a>完整程序源码</h1><p>完整程序目录入下图所示：<br><img src=\"/images/20190711/iniTestTree.PNG\" alt=\"iniTestTree\"></p>\n<h2 id=\"CMakeLists-txt\"><a href=\"#CMakeLists-txt\" class=\"headerlink\" title=\"CMakeLists.txt\"></a>CMakeLists.txt</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake_minimum_required(VERSION <span class=\"number\">2.8</span>)</span><br><span class=\"line\">project(iniTest)   </span><br><span class=\"line\"><span class=\"built_in\">set</span> (CMAKE_CXX_STANDARD <span class=\"number\">11</span>) </span><br><span class=\"line\">include_directories(\t<span class=\"string\">\"./include/\"</span></span><br><span class=\"line\">\t\t\t<span class=\"string\">\"/usr/include/eigen3\"</span>\t)</span><br><span class=\"line\">add_executable(iniTest main.cpp ./src/inifile.cpp)</span><br></pre></td></tr></table></figure>\n\n<p>说明：</p>\n<ol>\n<li><p><code>include_directories</code>是指添加所需头文件的目录，一些常规文件可自行添加，本例中为添加<code>inifile.h</code>需要加上”./include/“，还需手动添加”/usr/include/eigen3”。</p>\n</li>\n<li><p><code>add_executable</code>是指添加需要执行的cpp文件，注意需要将不同文件夹下的源文件包含进来。</p>\n</li>\n</ol>\n<h2 id=\"test-ini\"><a href=\"#test-ini\" class=\"headerlink\" title=\"test.ini\"></a>test.ini</h2><p>配置文件test.ini内容如下，主要包含两个标题，每个标题下有两个标签。(标题、标签说法可能不专业)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ObjectType]</span><br><span class=\"line\"># Obj0</span><br><span class=\"line\">minHSV0=<span class=\"number\">0</span> <span class=\"number\">15</span> <span class=\"number\">10</span></span><br><span class=\"line\">maxHSV0=<span class=\"number\">10</span> <span class=\"number\">25</span> <span class=\"number\">20</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[Motion]</span><br><span class=\"line\">CoeffJv=<span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">1.5</span> <span class=\"number\">1.5</span> <span class=\"number\">2</span> <span class=\"number\">3</span></span><br><span class=\"line\">Pos=<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"main-cpp\"><a href=\"#main-cpp\" class=\"headerlink\" title=\"main.cpp\"></a>main.cpp</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"stdio.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"inifile.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;Eigen/Core&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;Eigen/Dense&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> inifile;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> Eigen;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Vector7d Matrix<span class=\"meta-string\">&lt;double, 7, 1&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Vector3d Matrix<span class=\"meta-string\">&lt;double, 3, 1&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  Vector7d a;</span><br><span class=\"line\">  a &lt;&lt; <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>;</span><br><span class=\"line\">  Vector7d &amp;coeffJv = a;</span><br><span class=\"line\">  Vector3d b;</span><br><span class=\"line\">  Vector3d &amp;minHSV0 = b;</span><br><span class=\"line\">  IniFile ini;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> rtn;</span><br><span class=\"line\">  <span class=\"built_in\">string</span> file = <span class=\"string\">\"../test.ini\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* fileName = file.c_str();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ini.load(fileName) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"No such file!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Load file succeed!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"\\na : \"</span> &lt;&lt; a.transpose() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">string</span> str1, str2;</span><br><span class=\"line\">  <span class=\"built_in\">string</span> title = <span class=\"string\">\"Motion\"</span>;</span><br><span class=\"line\">  <span class=\"built_in\">string</span> label = <span class=\"string\">\"CoeffJv\"</span>;</span><br><span class=\"line\">  str1 = ini.getStringValue(title.c_str(), label.c_str(), rtn);</span><br><span class=\"line\"></span><br><span class=\"line\">  title = <span class=\"string\">\"ObjectType\"</span>;</span><br><span class=\"line\">  label = <span class=\"string\">\"minHSV0\"</span>;</span><br><span class=\"line\">  str2 = ini.getStringValue(title.c_str(), label.c_str(), rtn);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (rtn != <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">sscanf</span>(str1.c_str(), <span class=\"string\">\"%lf %lf %lf %lf %lf %lf %lf\"</span>, &amp;coeffJv[<span class=\"number\">0</span>],</span><br><span class=\"line\">  \t &amp;coeffJv[<span class=\"number\">1</span>], &amp;coeffJv[<span class=\"number\">2</span>], &amp;coeffJv[<span class=\"number\">3</span>],</span><br><span class=\"line\">\t &amp;coeffJv[<span class=\"number\">4</span>], &amp;coeffJv[<span class=\"number\">5</span>], &amp;coeffJv[<span class=\"number\">6</span>]);</span><br><span class=\"line\">  <span class=\"built_in\">sscanf</span>(str2.c_str(), <span class=\"string\">\"%lf %lf %lf\"</span>, &amp;minHSV0[<span class=\"number\">0</span>],</span><br><span class=\"line\">  \t &amp;minHSV0[<span class=\"number\">1</span>], &amp;minHSV0[<span class=\"number\">2</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"\\nCoeffJv : \"</span> &lt;&lt; coeffJv.transpose() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"\\na: \"</span> &lt;&lt; a.transpose() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"\\nminHSV0 : \"</span> &lt;&lt; minHSV0.transpose() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"\\nb: \"</span> &lt;&lt; b.transpose() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>说明：</p>\n<p>1.Q：为什么要用引用？</p>\n<p>  A：用引用的目的是为了最后通过<code>sscanf</code>函数将配置文件中的参数写到自己的变量中，不用引用会写入失败。<code>sscanf</code>函数的用法目前尚不十分明确，因此这里只是<br>     给出一种能用的方法。使用引用时必须初始化，因此首先定义了a、b两个变量，引用只是这两个变量的两个别名，修改引用的值会改掉a、b的值。</p>\n<p>2.Q：c_str()的作用是啥？</p>\n<p>  A：c_str()是string类下的一个函数，返回类型是<code>const char*</code>，这个类型在load()、getStringValue()类型中都需要用到。而直接用<code>const char*</code>来定义，将会<br>     导致字符串无法修改。</p>\n<p>3.Q：transpose()的作用为何？</p>\n<p>  A：这是matrix中的一个函数，将矩阵进行转置。</p>\n<h2 id=\"include-inifile-h\"><a href=\"#include-inifile-h\" class=\"headerlink\" title=\"../include/inifile.h\"></a>../include/inifile.h</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _INIFILE_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _INIFILE_H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> inifile</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> RET_OK  = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> RET_ERR = <span class=\"number\">-1</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">string</span> delim = <span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">IniItem</span> &#123;</span></span><br><span class=\"line\">    <span class=\"built_in\">string</span> key;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> value;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> comment;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">IniSection</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"built_in\">vector</span>&lt;IniItem&gt;::iterator iterator;</span><br><span class=\"line\">    <span class=\"function\">iterator <span class=\"title\">begin</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> items.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">iterator <span class=\"title\">end</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> items.<span class=\"built_in\">end</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">string</span> name;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> comment;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;IniItem&gt; items;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IniFile</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    IniFile();</span><br><span class=\"line\">    ~IniFile() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">release</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>, IniSection *&gt;::iterator iterator;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">iterator <span class=\"title\">begin</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sections_.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">iterator <span class=\"title\">end</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sections_.<span class=\"built_in\">end</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">/* 打开并解析一个名为fname的INI文件 */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">load</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;fname)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/*将内容保存到当前文件*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">save</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/*将内容另存到一个名为fname的文件*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">saveas</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;fname)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*获取section段第一个键为key的值,并返回其string型的值*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">getStringValue</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;key, <span class=\"keyword\">int</span> &amp;ret)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/*获取section段第一个键为key的值,并返回其int型的值*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getIntValue</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;key, <span class=\"keyword\">int</span> &amp;ret)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/*获取section段第一个键为key的值,并返回其double型的值*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getDoubleValue</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;key, <span class=\"keyword\">int</span> &amp;ret)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*获取section段第一个键为key的值,并将值赋到value中*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getValue</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;key, <span class=\"built_in\">string</span> &amp;value)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/*获取section段第一个键为key的值,并将值赋到value中,将注释赋到comment中*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getValue</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;key, <span class=\"built_in\">string</span> &amp;value, <span class=\"built_in\">string</span> &amp;comment)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*获取section段所有键为key的值,并将值赋到values的vector中*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getValues</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;key, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; &amp;values)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/*获取section段所有键为key的值,并将值赋到values的vector中,,将注释赋到comments的vector中*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getValues</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;key, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; &amp;value, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; &amp;comments)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">hasSection</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section)</span> </span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">hasKey</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;key)</span> </span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 获取section段的注释 */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getSectionComment</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section, <span class=\"built_in\">string</span> &amp;comment)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/* 设置section段的注释 */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">setSectionComment</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;comment)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/*获取注释标记符列表*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getCommentFlags</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; &amp;flags)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/*设置注释标记符列表*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setCommentFlags</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; &amp;flags)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*同时设置值和注释*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">setValue</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;key, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;value, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;comment = <span class=\"string\">\"\"</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/*删除段*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deleteSection</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/*删除特定段的特定参数*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deleteKey</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;key)</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">/*去掉str后面的c字符*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">trimleft</span><span class=\"params\">(<span class=\"built_in\">string</span> &amp;str, <span class=\"keyword\">char</span> c = <span class=\"string\">' '</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/*去掉str前面的c字符*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">trimright</span><span class=\"params\">(<span class=\"built_in\">string</span> &amp;str, <span class=\"keyword\">char</span> c = <span class=\"string\">' '</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/*去掉str前面和后面的空格符,Tab符等空白符*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">trim</span><span class=\"params\">(<span class=\"built_in\">string</span> &amp;str)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/*将字符串str按分割符delim分割成多个子串*/</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"function\">IniSection *<span class=\"title\">getSection</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section = <span class=\"string\">\"\"</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">release</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getline</span><span class=\"params\">(<span class=\"built_in\">string</span> &amp;str, FILE *fp)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isComment</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;str)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">parse</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;content, <span class=\"built_in\">string</span> &amp;key, <span class=\"built_in\">string</span> &amp;value, <span class=\"keyword\">char</span> c = <span class=\"string\">'='</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//for dubug</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>, IniSection *&gt; sections_;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> fname_;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; flags_;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"src-inifile-cpp\"><a href=\"#src-inifile-cpp\" class=\"headerlink\" title=\"../src/inifile.cpp\"></a>../src/inifile.cpp</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _INIFILE_CPP</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _INIFILE_CPP</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"inifile.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctype.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> inifile &#123;</span><br><span class=\"line\"><span class=\"keyword\">int</span> INI_BUF_SIZE = <span class=\"number\">2048</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">IniFile::IniFile() &#123;</span><br><span class=\"line\">  flags_.push_back(<span class=\"string\">\"#\"</span>);</span><br><span class=\"line\">  flags_.push_back(<span class=\"string\">\";\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">IniFile::parse</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;content, <span class=\"built_in\">string</span> &amp;key, <span class=\"built_in\">string</span> &amp;value, <span class=\"keyword\">char</span> c<span class=\"comment\">/*= '='*/</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> len = content.length();</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i &lt; len &amp;&amp; content[i] != c) &#123;</span><br><span class=\"line\">    ++i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i &gt;= <span class=\"number\">0</span> &amp;&amp; i &lt; len) &#123;</span><br><span class=\"line\">    key = <span class=\"built_in\">string</span>(content.c_str(), i);</span><br><span class=\"line\">    value = <span class=\"built_in\">string</span>(content.c_str() + i + <span class=\"number\">1</span>, len - i - <span class=\"number\">1</span>);</span><br><span class=\"line\">    trim(key);</span><br><span class=\"line\">    trim(value);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">IniFile::getline</span><span class=\"params\">(<span class=\"built_in\">string</span> &amp;str, FILE *fp)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> plen = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> buf_size = INI_BUF_SIZE * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">char</span> *buf = (<span class=\"keyword\">char</span> *) <span class=\"built_in\">malloc</span>(buf_size);</span><br><span class=\"line\">  <span class=\"keyword\">char</span> *pbuf = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> *p = buf;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (buf == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"no enough memory!exit!\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">memset</span>(buf, <span class=\"number\">0</span>, buf_size);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> total_size = buf_size;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (fgets(p, buf_size, fp) != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">    plen = <span class=\"built_in\">strlen</span>(p);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (plen &gt; <span class=\"number\">0</span> &amp;&amp; p[plen - <span class=\"number\">1</span>] != <span class=\"string\">'\\n'</span> &amp;&amp; !feof(fp)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      total_size = <span class=\"built_in\">strlen</span>(buf) + buf_size;</span><br><span class=\"line\">      pbuf = (<span class=\"keyword\">char</span> *)<span class=\"built_in\">realloc</span>(buf, total_size);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (pbuf == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(buf);</span><br><span class=\"line\">\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"no enough memory!exit!\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      buf = pbuf;</span><br><span class=\"line\"></span><br><span class=\"line\">      p = buf + <span class=\"built_in\">strlen</span>(buf);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  str = buf;</span><br><span class=\"line\">  <span class=\"built_in\">free</span>(buf);</span><br><span class=\"line\">  buf = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str.length();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">IniFile::load</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;filename)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">release</span>();</span><br><span class=\"line\">  fname_ = filename;</span><br><span class=\"line\">  IniSection *section = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  FILE *fp = fopen(filename.c_str(), <span class=\"string\">\"r\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fp == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">string</span> <span class=\"built_in\">line</span>;</span><br><span class=\"line\">  <span class=\"built_in\">string</span> comment;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//增加默认段section = new IniSection();</span></span><br><span class=\"line\">  sections_[<span class=\"string\">\"\"</span>] = section;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (getline(<span class=\"built_in\">line</span>, fp) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    trimright(<span class=\"built_in\">line</span>, <span class=\"string\">'\\n'</span>);</span><br><span class=\"line\">    trimright(<span class=\"built_in\">line</span>, <span class=\"string\">'\\r'</span>);</span><br><span class=\"line\">    trim(<span class=\"built_in\">line</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isComment(<span class=\"built_in\">line</span>)) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">string</span> subline;</span><br><span class=\"line\">      <span class=\"built_in\">string</span> tmp = <span class=\"built_in\">line</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; flags_.<span class=\"built_in\">size</span>(); ++i) &#123;</span><br><span class=\"line\">        subline = <span class=\"built_in\">line</span>.substr(<span class=\"number\">0</span>, <span class=\"built_in\">line</span>.<span class=\"built_in\">find</span>(flags_[i]));</span><br><span class=\"line\">        <span class=\"built_in\">line</span> = subline;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      comment += tmp.substr(<span class=\"built_in\">line</span>.length());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    trim(<span class=\"built_in\">line</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">line</span>.length() &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">line</span>[<span class=\"number\">0</span>] == <span class=\"string\">'['</span>) &#123;</span><br><span class=\"line\">      section = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> index = <span class=\"built_in\">line</span>.find_first_of(<span class=\"string\">']'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (index == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        fclose(fp);</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"没有找到匹配的]\\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">int</span> len = index - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (len &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"段为空\\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">s</span><span class=\"params\">(<span class=\"built_in\">line</span>, <span class=\"number\">1</span>, len)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (getSection(s.c_str()) != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        fclose(fp);</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"此段已存在:%s\\n\"</span>, s.c_str());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      section = <span class=\"keyword\">new</span> IniSection();</span><br><span class=\"line\">      sections_[s] = section;</span><br><span class=\"line\"></span><br><span class=\"line\">      section-&gt;name = s;</span><br><span class=\"line\">      section-&gt;comment = comment;</span><br><span class=\"line\">      comment = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isComment(<span class=\"built_in\">line</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (comment != <span class=\"string\">\"\"</span>) &#123;</span><br><span class=\"line\">        comment += delim + <span class=\"built_in\">line</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        comment = <span class=\"built_in\">line</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">string</span> key, value;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (parse(<span class=\"built_in\">line</span>, key, value)) &#123;</span><br><span class=\"line\">        IniItem item;</span><br><span class=\"line\">        item.key = key;</span><br><span class=\"line\">        item.value = value;</span><br><span class=\"line\">        item.comment = comment;</span><br><span class=\"line\"></span><br><span class=\"line\">        section-&gt;items.push_back(item);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"解析参数失败[%s]\\n\"</span>, <span class=\"built_in\">line</span>.c_str());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      comment = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fclose(fp);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">IniFile::save</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> saveas(fname_); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">IniFile::saveas</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;filename)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">string</span> data = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (iterator sect = sections_.<span class=\"built_in\">begin</span>(); sect != sections_.<span class=\"built_in\">end</span>(); ++sect) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sect-&gt;second-&gt;comment != <span class=\"string\">\"\"</span>) &#123;</span><br><span class=\"line\">      data += sect-&gt;second-&gt;comment;</span><br><span class=\"line\">      data += delim;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sect-&gt;first != <span class=\"string\">\"\"</span>) &#123;</span><br><span class=\"line\">      data += <span class=\"built_in\">string</span>(<span class=\"string\">\"[\"</span>) + sect-&gt;first + <span class=\"built_in\">string</span>(<span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">      data += delim;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (IniSection::iterator item = sect-&gt;second-&gt;items.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">         item != sect-&gt;second-&gt;items.<span class=\"built_in\">end</span>(); ++item) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (item-&gt;comment != <span class=\"string\">\"\"</span>) &#123;</span><br><span class=\"line\">        data += item-&gt;comment;</span><br><span class=\"line\">        data += delim;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      data += item-&gt;key + <span class=\"string\">\"=\"</span> + item-&gt;value;</span><br><span class=\"line\">      data += delim;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  FILE *fp = fopen(filename.c_str(), <span class=\"string\">\"w\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  fwrite(data.c_str(), <span class=\"number\">1</span>, data.length(), fp);</span><br><span class=\"line\"></span><br><span class=\"line\">  fclose(fp);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">IniSection *<span class=\"title\">IniFile::getSection</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section <span class=\"comment\">/*=\"\"*/</span>)</span> </span>&#123;</span><br><span class=\"line\">  iterator it = sections_.<span class=\"built_in\">find</span>(section);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (it != sections_.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> it-&gt;second;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">IniFile::getStringValue</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;key,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                               <span class=\"keyword\">int</span> &amp;ret)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">string</span> value, comment;</span><br><span class=\"line\"></span><br><span class=\"line\">  ret = getValue(section, key, value, comment);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">IniFile::getIntValue</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;key, <span class=\"keyword\">int</span> &amp;ret)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">string</span> value, comment;</span><br><span class=\"line\"></span><br><span class=\"line\">  ret = getValue(section, key, value, comment);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> atoi(value.c_str());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">IniFile::getDoubleValue</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;key,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                               <span class=\"keyword\">int</span> &amp;ret)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">string</span> value, comment;</span><br><span class=\"line\"></span><br><span class=\"line\">  ret = getValue(section, key, value, comment);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> atof(value.c_str());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">IniFile::getValue</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;key, <span class=\"built_in\">string</span> &amp;value)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">string</span> comment;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> getValue(section, key, value, comment);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">IniFile::getValue</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;key, <span class=\"built_in\">string</span> &amp;value,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                      <span class=\"built_in\">string</span> &amp;comment)</span> </span>&#123;</span><br><span class=\"line\">  IniSection *sect = getSection(section);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (sect != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (IniSection::iterator it = sect-&gt;<span class=\"built_in\">begin</span>(); it != sect-&gt;<span class=\"built_in\">end</span>(); ++it) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (it-&gt;key == key) &#123;</span><br><span class=\"line\">        value = it-&gt;value;</span><br><span class=\"line\">        comment = it-&gt;comment;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> RET_OK;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> RET_ERR;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">IniFile::getValues</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;key,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                       <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; &amp;values)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; comments;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> getValues(section, key, values, comments);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">IniFile::getValues</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;key,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                       <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; &amp;values, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; &amp;comments)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">string</span> value, comment;</span><br><span class=\"line\"></span><br><span class=\"line\">  values.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">  comments.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  IniSection *sect = getSection(section);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (sect != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (IniSection::iterator it = sect-&gt;<span class=\"built_in\">begin</span>(); it != sect-&gt;<span class=\"built_in\">end</span>(); ++it) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (it-&gt;key == key) &#123;</span><br><span class=\"line\">        value = it-&gt;value;</span><br><span class=\"line\">        comment = it-&gt;comment;</span><br><span class=\"line\"></span><br><span class=\"line\">        values.push_back(value);</span><br><span class=\"line\">        comments.push_back(comment);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (values.<span class=\"built_in\">size</span>() ? RET_OK : RET_ERR);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">IniFile::hasSection</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (getSection(section) != <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">IniFile::hasKey</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;key)</span> </span>&#123;</span><br><span class=\"line\">  IniSection *sect = getSection(section);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (sect != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (IniSection::iterator it = sect-&gt;<span class=\"built_in\">begin</span>(); it != sect-&gt;<span class=\"built_in\">end</span>(); ++it) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (it-&gt;key == key) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">IniFile::getSectionComment</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section, <span class=\"built_in\">string</span> &amp;comment)</span> </span>&#123;</span><br><span class=\"line\">  comment = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  IniSection *sect = getSection(section);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (sect != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">    comment = sect-&gt;comment;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> RET_OK;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> RET_ERR;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">IniFile::setSectionComment</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;comment)</span> </span>&#123;</span><br><span class=\"line\">  IniSection *sect = getSection(section);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (sect != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">    sect-&gt;comment = comment;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> RET_OK;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> RET_ERR;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">IniFile::setValue</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;key,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                      <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;value, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;comment <span class=\"comment\">/*=\"\"*/</span>)</span> </span>&#123;</span><br><span class=\"line\">  IniSection *sect = getSection(section);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">string</span> comt = comment;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (comt != <span class=\"string\">\"\"</span>) &#123;</span><br><span class=\"line\">    comt = flags_[<span class=\"number\">0</span>] + comt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (sect == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">    sect = <span class=\"keyword\">new</span> IniSection();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sect == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"no enough memory!\\n\"</span>);</span><br><span class=\"line\">      <span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    sect-&gt;name = section;</span><br><span class=\"line\">    sections_[section] = sect;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (IniSection::iterator it = sect-&gt;<span class=\"built_in\">begin</span>(); it != sect-&gt;<span class=\"built_in\">end</span>(); ++it) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (it-&gt;key == key) &#123;</span><br><span class=\"line\">      it-&gt;value = value;</span><br><span class=\"line\">      it-&gt;comment = comt;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> RET_OK;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// not found key</span></span><br><span class=\"line\">  IniItem item;</span><br><span class=\"line\">  item.key = key;</span><br><span class=\"line\">  item.value = value;</span><br><span class=\"line\">  item.comment = comt;</span><br><span class=\"line\"></span><br><span class=\"line\">  sect-&gt;items.push_back(item);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> RET_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">IniFile::getCommentFlags</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; &amp;flags)</span> </span>&#123; flags = flags_; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">IniFile::setCommentFlags</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; &amp;flags)</span> </span>&#123; flags_ = flags; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">IniFile::deleteSection</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section)</span> </span>&#123;</span><br><span class=\"line\">  IniSection *sect = getSection(section);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (sect != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    sections_.erase(section);</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> sect;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">IniFile::deleteKey</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;key)</span> </span>&#123;</span><br><span class=\"line\">  IniSection *sect = getSection(section);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (sect != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (IniSection::iterator it = sect-&gt;<span class=\"built_in\">begin</span>(); it != sect-&gt;<span class=\"built_in\">end</span>(); ++it) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (it-&gt;key == key) &#123;</span><br><span class=\"line\">        sect-&gt;items.erase(it);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">IniFile::release</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  fname_ = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (iterator i = sections_.<span class=\"built_in\">begin</span>(); i != sections_.<span class=\"built_in\">end</span>(); ++i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> i-&gt;second;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  sections_.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">IniFile::isComment</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;str)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">bool</span> ret = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; flags_.<span class=\"built_in\">size</span>(); ++i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str.length() &lt; flags_[i].length()) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (k = <span class=\"number\">0</span>; k &lt; flags_[i].length(); ++k) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (str[k] != flags_[i][k]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k == flags_[i].length()) &#123;</span><br><span class=\"line\">      ret = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// for debug</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">IniFile::print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"filename:[%s]\\n\"</span>, fname_.c_str());</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"flags_:[\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; flags_.<span class=\"built_in\">size</span>(); ++i) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\" %s \"</span>, flags_[i].c_str());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"]\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (iterator it = sections_.<span class=\"built_in\">begin</span>(); it != sections_.<span class=\"built_in\">end</span>(); ++it) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"section:[%s]\\n\"</span>, it-&gt;first.c_str());</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"comment:[%s]\\n\"</span>, it-&gt;second-&gt;comment.c_str());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (IniSection::iterator i = it-&gt;second-&gt;items.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">         i != it-&gt;second-&gt;items.<span class=\"built_in\">end</span>(); ++i) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">\"    comment:%s\\n\"</span>, i-&gt;comment.c_str());</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">\"    parm   :%s=%s\\n\"</span>, i-&gt;key.c_str(), i-&gt;value.c_str());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">IniFile::trimleft</span><span class=\"params\">(<span class=\"built_in\">string</span> &amp;str, <span class=\"keyword\">char</span> c <span class=\"comment\">/*=' '*/</span>)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// trim head</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> len = str.length();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (str[i] == c &amp;&amp; str[i] != <span class=\"string\">'\\0'</span>) &#123;</span><br><span class=\"line\">    i++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    str = <span class=\"built_in\">string</span>(str, i, len - i);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">IniFile::trimright</span><span class=\"params\">(<span class=\"built_in\">string</span> &amp;str, <span class=\"keyword\">char</span> c <span class=\"comment\">/*=' '*/</span>)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// trim tail</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> len = str.length();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = len - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; --i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str[i] != c) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  str = <span class=\"built_in\">string</span>(str, <span class=\"number\">0</span>, i + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">IniFile::trim</span><span class=\"params\">(<span class=\"built_in\">string</span> &amp;str)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// trim head</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">int</span> len = str.length();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"built_in\">isspace</span>(str[i]) &amp;&amp; str[i] != <span class=\"string\">'\\0'</span>) &#123;</span><br><span class=\"line\">    i++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    str = <span class=\"built_in\">string</span>(str, i, len - i);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// trim tail</span></span><br><span class=\"line\">  len = str.length();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = len - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; --i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">isspace</span>(str[i])) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  str = <span class=\"built_in\">string</span>(str, <span class=\"number\">0</span>, i + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125; <span class=\"comment\">// namespace inifile</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"程序运行结果\"><a href=\"#程序运行结果\" class=\"headerlink\" title=\"程序运行结果\"></a>程序运行结果</h1><p><img src=\"/images/20190711/iniTest.PNG\" alt=\"iniTest\"></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>开发环境：Ubuntu16.04 LTS。 需要的库：Eigen3。 额外的文件:inifile.h、inifile.cpp。</p>\n</blockquote>","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>使用配置文件是提高项目开发效率的一个重要方法。如果不使用配置文件，当我们需要不断调整程序中的参数时，就会造成每修改一次参数需要进行一次编译的情况，<br>而当项目代码很庞大时，编译往往会耗费大量时间。为了节约项目开发时间，提高工作效率，就需要将待调整参数存放至配置文件中。这样做，在修改时只需要修改配<br>置文件中的参数，而不必对整个项目进行编译。</p>\n<h1 id=\"完整程序源码\"><a href=\"#完整程序源码\" class=\"headerlink\" title=\"完整程序源码\"></a>完整程序源码</h1><p>完整程序目录入下图所示：<br><img src=\"/images/20190711/iniTestTree.PNG\" alt=\"iniTestTree\"></p>\n<h2 id=\"CMakeLists-txt\"><a href=\"#CMakeLists-txt\" class=\"headerlink\" title=\"CMakeLists.txt\"></a>CMakeLists.txt</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake_minimum_required(VERSION <span class=\"number\">2.8</span>)</span><br><span class=\"line\">project(iniTest)   </span><br><span class=\"line\"><span class=\"built_in\">set</span> (CMAKE_CXX_STANDARD <span class=\"number\">11</span>) </span><br><span class=\"line\">include_directories(\t<span class=\"string\">\"./include/\"</span></span><br><span class=\"line\">\t\t\t<span class=\"string\">\"/usr/include/eigen3\"</span>\t)</span><br><span class=\"line\">add_executable(iniTest main.cpp ./src/inifile.cpp)</span><br></pre></td></tr></table></figure>\n\n<p>说明：</p>\n<ol>\n<li><p><code>include_directories</code>是指添加所需头文件的目录，一些常规文件可自行添加，本例中为添加<code>inifile.h</code>需要加上”./include/“，还需手动添加”/usr/include/eigen3”。</p>\n</li>\n<li><p><code>add_executable</code>是指添加需要执行的cpp文件，注意需要将不同文件夹下的源文件包含进来。</p>\n</li>\n</ol>\n<h2 id=\"test-ini\"><a href=\"#test-ini\" class=\"headerlink\" title=\"test.ini\"></a>test.ini</h2><p>配置文件test.ini内容如下，主要包含两个标题，每个标题下有两个标签。(标题、标签说法可能不专业)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ObjectType]</span><br><span class=\"line\"># Obj0</span><br><span class=\"line\">minHSV0=<span class=\"number\">0</span> <span class=\"number\">15</span> <span class=\"number\">10</span></span><br><span class=\"line\">maxHSV0=<span class=\"number\">10</span> <span class=\"number\">25</span> <span class=\"number\">20</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[Motion]</span><br><span class=\"line\">CoeffJv=<span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">1.5</span> <span class=\"number\">1.5</span> <span class=\"number\">2</span> <span class=\"number\">3</span></span><br><span class=\"line\">Pos=<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"main-cpp\"><a href=\"#main-cpp\" class=\"headerlink\" title=\"main.cpp\"></a>main.cpp</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"stdio.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"inifile.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;Eigen/Core&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;Eigen/Dense&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> inifile;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> Eigen;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Vector7d Matrix<span class=\"meta-string\">&lt;double, 7, 1&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Vector3d Matrix<span class=\"meta-string\">&lt;double, 3, 1&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  Vector7d a;</span><br><span class=\"line\">  a &lt;&lt; <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>;</span><br><span class=\"line\">  Vector7d &amp;coeffJv = a;</span><br><span class=\"line\">  Vector3d b;</span><br><span class=\"line\">  Vector3d &amp;minHSV0 = b;</span><br><span class=\"line\">  IniFile ini;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> rtn;</span><br><span class=\"line\">  <span class=\"built_in\">string</span> file = <span class=\"string\">\"../test.ini\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* fileName = file.c_str();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ini.load(fileName) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"No such file!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Load file succeed!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"\\na : \"</span> &lt;&lt; a.transpose() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">string</span> str1, str2;</span><br><span class=\"line\">  <span class=\"built_in\">string</span> title = <span class=\"string\">\"Motion\"</span>;</span><br><span class=\"line\">  <span class=\"built_in\">string</span> label = <span class=\"string\">\"CoeffJv\"</span>;</span><br><span class=\"line\">  str1 = ini.getStringValue(title.c_str(), label.c_str(), rtn);</span><br><span class=\"line\"></span><br><span class=\"line\">  title = <span class=\"string\">\"ObjectType\"</span>;</span><br><span class=\"line\">  label = <span class=\"string\">\"minHSV0\"</span>;</span><br><span class=\"line\">  str2 = ini.getStringValue(title.c_str(), label.c_str(), rtn);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (rtn != <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">sscanf</span>(str1.c_str(), <span class=\"string\">\"%lf %lf %lf %lf %lf %lf %lf\"</span>, &amp;coeffJv[<span class=\"number\">0</span>],</span><br><span class=\"line\">  \t &amp;coeffJv[<span class=\"number\">1</span>], &amp;coeffJv[<span class=\"number\">2</span>], &amp;coeffJv[<span class=\"number\">3</span>],</span><br><span class=\"line\">\t &amp;coeffJv[<span class=\"number\">4</span>], &amp;coeffJv[<span class=\"number\">5</span>], &amp;coeffJv[<span class=\"number\">6</span>]);</span><br><span class=\"line\">  <span class=\"built_in\">sscanf</span>(str2.c_str(), <span class=\"string\">\"%lf %lf %lf\"</span>, &amp;minHSV0[<span class=\"number\">0</span>],</span><br><span class=\"line\">  \t &amp;minHSV0[<span class=\"number\">1</span>], &amp;minHSV0[<span class=\"number\">2</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"\\nCoeffJv : \"</span> &lt;&lt; coeffJv.transpose() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"\\na: \"</span> &lt;&lt; a.transpose() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"\\nminHSV0 : \"</span> &lt;&lt; minHSV0.transpose() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"\\nb: \"</span> &lt;&lt; b.transpose() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>说明：</p>\n<p>1.Q：为什么要用引用？</p>\n<p>  A：用引用的目的是为了最后通过<code>sscanf</code>函数将配置文件中的参数写到自己的变量中，不用引用会写入失败。<code>sscanf</code>函数的用法目前尚不十分明确，因此这里只是<br>     给出一种能用的方法。使用引用时必须初始化，因此首先定义了a、b两个变量，引用只是这两个变量的两个别名，修改引用的值会改掉a、b的值。</p>\n<p>2.Q：c_str()的作用是啥？</p>\n<p>  A：c_str()是string类下的一个函数，返回类型是<code>const char*</code>，这个类型在load()、getStringValue()类型中都需要用到。而直接用<code>const char*</code>来定义，将会<br>     导致字符串无法修改。</p>\n<p>3.Q：transpose()的作用为何？</p>\n<p>  A：这是matrix中的一个函数，将矩阵进行转置。</p>\n<h2 id=\"include-inifile-h\"><a href=\"#include-inifile-h\" class=\"headerlink\" title=\"../include/inifile.h\"></a>../include/inifile.h</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _INIFILE_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _INIFILE_H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> inifile</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> RET_OK  = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> RET_ERR = <span class=\"number\">-1</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">string</span> delim = <span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">IniItem</span> &#123;</span></span><br><span class=\"line\">    <span class=\"built_in\">string</span> key;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> value;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> comment;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">IniSection</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"built_in\">vector</span>&lt;IniItem&gt;::iterator iterator;</span><br><span class=\"line\">    <span class=\"function\">iterator <span class=\"title\">begin</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> items.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">iterator <span class=\"title\">end</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> items.<span class=\"built_in\">end</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">string</span> name;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> comment;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;IniItem&gt; items;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IniFile</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    IniFile();</span><br><span class=\"line\">    ~IniFile() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">release</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>, IniSection *&gt;::iterator iterator;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">iterator <span class=\"title\">begin</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sections_.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">iterator <span class=\"title\">end</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sections_.<span class=\"built_in\">end</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">/* 打开并解析一个名为fname的INI文件 */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">load</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;fname)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/*将内容保存到当前文件*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">save</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/*将内容另存到一个名为fname的文件*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">saveas</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;fname)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*获取section段第一个键为key的值,并返回其string型的值*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">getStringValue</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;key, <span class=\"keyword\">int</span> &amp;ret)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/*获取section段第一个键为key的值,并返回其int型的值*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getIntValue</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;key, <span class=\"keyword\">int</span> &amp;ret)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/*获取section段第一个键为key的值,并返回其double型的值*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getDoubleValue</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;key, <span class=\"keyword\">int</span> &amp;ret)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*获取section段第一个键为key的值,并将值赋到value中*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getValue</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;key, <span class=\"built_in\">string</span> &amp;value)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/*获取section段第一个键为key的值,并将值赋到value中,将注释赋到comment中*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getValue</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;key, <span class=\"built_in\">string</span> &amp;value, <span class=\"built_in\">string</span> &amp;comment)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*获取section段所有键为key的值,并将值赋到values的vector中*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getValues</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;key, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; &amp;values)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/*获取section段所有键为key的值,并将值赋到values的vector中,,将注释赋到comments的vector中*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getValues</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;key, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; &amp;value, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; &amp;comments)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">hasSection</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section)</span> </span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">hasKey</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;key)</span> </span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 获取section段的注释 */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getSectionComment</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section, <span class=\"built_in\">string</span> &amp;comment)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/* 设置section段的注释 */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">setSectionComment</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;comment)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/*获取注释标记符列表*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getCommentFlags</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; &amp;flags)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/*设置注释标记符列表*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setCommentFlags</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; &amp;flags)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*同时设置值和注释*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">setValue</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;key, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;value, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;comment = <span class=\"string\">\"\"</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/*删除段*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deleteSection</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/*删除特定段的特定参数*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deleteKey</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;key)</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">/*去掉str后面的c字符*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">trimleft</span><span class=\"params\">(<span class=\"built_in\">string</span> &amp;str, <span class=\"keyword\">char</span> c = <span class=\"string\">' '</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/*去掉str前面的c字符*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">trimright</span><span class=\"params\">(<span class=\"built_in\">string</span> &amp;str, <span class=\"keyword\">char</span> c = <span class=\"string\">' '</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/*去掉str前面和后面的空格符,Tab符等空白符*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">trim</span><span class=\"params\">(<span class=\"built_in\">string</span> &amp;str)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/*将字符串str按分割符delim分割成多个子串*/</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"function\">IniSection *<span class=\"title\">getSection</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section = <span class=\"string\">\"\"</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">release</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getline</span><span class=\"params\">(<span class=\"built_in\">string</span> &amp;str, FILE *fp)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isComment</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;str)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">parse</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;content, <span class=\"built_in\">string</span> &amp;key, <span class=\"built_in\">string</span> &amp;value, <span class=\"keyword\">char</span> c = <span class=\"string\">'='</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//for dubug</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>, IniSection *&gt; sections_;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> fname_;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; flags_;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"src-inifile-cpp\"><a href=\"#src-inifile-cpp\" class=\"headerlink\" title=\"../src/inifile.cpp\"></a>../src/inifile.cpp</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _INIFILE_CPP</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _INIFILE_CPP</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"inifile.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctype.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> inifile &#123;</span><br><span class=\"line\"><span class=\"keyword\">int</span> INI_BUF_SIZE = <span class=\"number\">2048</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">IniFile::IniFile() &#123;</span><br><span class=\"line\">  flags_.push_back(<span class=\"string\">\"#\"</span>);</span><br><span class=\"line\">  flags_.push_back(<span class=\"string\">\";\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">IniFile::parse</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;content, <span class=\"built_in\">string</span> &amp;key, <span class=\"built_in\">string</span> &amp;value, <span class=\"keyword\">char</span> c<span class=\"comment\">/*= '='*/</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> len = content.length();</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i &lt; len &amp;&amp; content[i] != c) &#123;</span><br><span class=\"line\">    ++i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i &gt;= <span class=\"number\">0</span> &amp;&amp; i &lt; len) &#123;</span><br><span class=\"line\">    key = <span class=\"built_in\">string</span>(content.c_str(), i);</span><br><span class=\"line\">    value = <span class=\"built_in\">string</span>(content.c_str() + i + <span class=\"number\">1</span>, len - i - <span class=\"number\">1</span>);</span><br><span class=\"line\">    trim(key);</span><br><span class=\"line\">    trim(value);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">IniFile::getline</span><span class=\"params\">(<span class=\"built_in\">string</span> &amp;str, FILE *fp)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> plen = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> buf_size = INI_BUF_SIZE * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">char</span> *buf = (<span class=\"keyword\">char</span> *) <span class=\"built_in\">malloc</span>(buf_size);</span><br><span class=\"line\">  <span class=\"keyword\">char</span> *pbuf = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> *p = buf;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (buf == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"no enough memory!exit!\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">memset</span>(buf, <span class=\"number\">0</span>, buf_size);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> total_size = buf_size;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (fgets(p, buf_size, fp) != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">    plen = <span class=\"built_in\">strlen</span>(p);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (plen &gt; <span class=\"number\">0</span> &amp;&amp; p[plen - <span class=\"number\">1</span>] != <span class=\"string\">'\\n'</span> &amp;&amp; !feof(fp)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      total_size = <span class=\"built_in\">strlen</span>(buf) + buf_size;</span><br><span class=\"line\">      pbuf = (<span class=\"keyword\">char</span> *)<span class=\"built_in\">realloc</span>(buf, total_size);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (pbuf == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(buf);</span><br><span class=\"line\">\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"no enough memory!exit!\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      buf = pbuf;</span><br><span class=\"line\"></span><br><span class=\"line\">      p = buf + <span class=\"built_in\">strlen</span>(buf);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  str = buf;</span><br><span class=\"line\">  <span class=\"built_in\">free</span>(buf);</span><br><span class=\"line\">  buf = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str.length();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">IniFile::load</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;filename)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">release</span>();</span><br><span class=\"line\">  fname_ = filename;</span><br><span class=\"line\">  IniSection *section = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  FILE *fp = fopen(filename.c_str(), <span class=\"string\">\"r\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fp == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">string</span> <span class=\"built_in\">line</span>;</span><br><span class=\"line\">  <span class=\"built_in\">string</span> comment;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//增加默认段section = new IniSection();</span></span><br><span class=\"line\">  sections_[<span class=\"string\">\"\"</span>] = section;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (getline(<span class=\"built_in\">line</span>, fp) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    trimright(<span class=\"built_in\">line</span>, <span class=\"string\">'\\n'</span>);</span><br><span class=\"line\">    trimright(<span class=\"built_in\">line</span>, <span class=\"string\">'\\r'</span>);</span><br><span class=\"line\">    trim(<span class=\"built_in\">line</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isComment(<span class=\"built_in\">line</span>)) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">string</span> subline;</span><br><span class=\"line\">      <span class=\"built_in\">string</span> tmp = <span class=\"built_in\">line</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; flags_.<span class=\"built_in\">size</span>(); ++i) &#123;</span><br><span class=\"line\">        subline = <span class=\"built_in\">line</span>.substr(<span class=\"number\">0</span>, <span class=\"built_in\">line</span>.<span class=\"built_in\">find</span>(flags_[i]));</span><br><span class=\"line\">        <span class=\"built_in\">line</span> = subline;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      comment += tmp.substr(<span class=\"built_in\">line</span>.length());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    trim(<span class=\"built_in\">line</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">line</span>.length() &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">line</span>[<span class=\"number\">0</span>] == <span class=\"string\">'['</span>) &#123;</span><br><span class=\"line\">      section = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> index = <span class=\"built_in\">line</span>.find_first_of(<span class=\"string\">']'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (index == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        fclose(fp);</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"没有找到匹配的]\\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">int</span> len = index - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (len &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"段为空\\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">s</span><span class=\"params\">(<span class=\"built_in\">line</span>, <span class=\"number\">1</span>, len)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (getSection(s.c_str()) != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        fclose(fp);</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"此段已存在:%s\\n\"</span>, s.c_str());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      section = <span class=\"keyword\">new</span> IniSection();</span><br><span class=\"line\">      sections_[s] = section;</span><br><span class=\"line\"></span><br><span class=\"line\">      section-&gt;name = s;</span><br><span class=\"line\">      section-&gt;comment = comment;</span><br><span class=\"line\">      comment = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isComment(<span class=\"built_in\">line</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (comment != <span class=\"string\">\"\"</span>) &#123;</span><br><span class=\"line\">        comment += delim + <span class=\"built_in\">line</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        comment = <span class=\"built_in\">line</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">string</span> key, value;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (parse(<span class=\"built_in\">line</span>, key, value)) &#123;</span><br><span class=\"line\">        IniItem item;</span><br><span class=\"line\">        item.key = key;</span><br><span class=\"line\">        item.value = value;</span><br><span class=\"line\">        item.comment = comment;</span><br><span class=\"line\"></span><br><span class=\"line\">        section-&gt;items.push_back(item);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"解析参数失败[%s]\\n\"</span>, <span class=\"built_in\">line</span>.c_str());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      comment = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fclose(fp);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">IniFile::save</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> saveas(fname_); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">IniFile::saveas</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;filename)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">string</span> data = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (iterator sect = sections_.<span class=\"built_in\">begin</span>(); sect != sections_.<span class=\"built_in\">end</span>(); ++sect) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sect-&gt;second-&gt;comment != <span class=\"string\">\"\"</span>) &#123;</span><br><span class=\"line\">      data += sect-&gt;second-&gt;comment;</span><br><span class=\"line\">      data += delim;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sect-&gt;first != <span class=\"string\">\"\"</span>) &#123;</span><br><span class=\"line\">      data += <span class=\"built_in\">string</span>(<span class=\"string\">\"[\"</span>) + sect-&gt;first + <span class=\"built_in\">string</span>(<span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">      data += delim;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (IniSection::iterator item = sect-&gt;second-&gt;items.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">         item != sect-&gt;second-&gt;items.<span class=\"built_in\">end</span>(); ++item) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (item-&gt;comment != <span class=\"string\">\"\"</span>) &#123;</span><br><span class=\"line\">        data += item-&gt;comment;</span><br><span class=\"line\">        data += delim;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      data += item-&gt;key + <span class=\"string\">\"=\"</span> + item-&gt;value;</span><br><span class=\"line\">      data += delim;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  FILE *fp = fopen(filename.c_str(), <span class=\"string\">\"w\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  fwrite(data.c_str(), <span class=\"number\">1</span>, data.length(), fp);</span><br><span class=\"line\"></span><br><span class=\"line\">  fclose(fp);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">IniSection *<span class=\"title\">IniFile::getSection</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section <span class=\"comment\">/*=\"\"*/</span>)</span> </span>&#123;</span><br><span class=\"line\">  iterator it = sections_.<span class=\"built_in\">find</span>(section);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (it != sections_.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> it-&gt;second;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">IniFile::getStringValue</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;key,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                               <span class=\"keyword\">int</span> &amp;ret)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">string</span> value, comment;</span><br><span class=\"line\"></span><br><span class=\"line\">  ret = getValue(section, key, value, comment);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">IniFile::getIntValue</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;key, <span class=\"keyword\">int</span> &amp;ret)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">string</span> value, comment;</span><br><span class=\"line\"></span><br><span class=\"line\">  ret = getValue(section, key, value, comment);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> atoi(value.c_str());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">IniFile::getDoubleValue</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;key,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                               <span class=\"keyword\">int</span> &amp;ret)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">string</span> value, comment;</span><br><span class=\"line\"></span><br><span class=\"line\">  ret = getValue(section, key, value, comment);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> atof(value.c_str());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">IniFile::getValue</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;key, <span class=\"built_in\">string</span> &amp;value)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">string</span> comment;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> getValue(section, key, value, comment);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">IniFile::getValue</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;key, <span class=\"built_in\">string</span> &amp;value,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                      <span class=\"built_in\">string</span> &amp;comment)</span> </span>&#123;</span><br><span class=\"line\">  IniSection *sect = getSection(section);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (sect != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (IniSection::iterator it = sect-&gt;<span class=\"built_in\">begin</span>(); it != sect-&gt;<span class=\"built_in\">end</span>(); ++it) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (it-&gt;key == key) &#123;</span><br><span class=\"line\">        value = it-&gt;value;</span><br><span class=\"line\">        comment = it-&gt;comment;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> RET_OK;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> RET_ERR;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">IniFile::getValues</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;key,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                       <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; &amp;values)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; comments;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> getValues(section, key, values, comments);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">IniFile::getValues</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;key,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                       <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; &amp;values, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; &amp;comments)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">string</span> value, comment;</span><br><span class=\"line\"></span><br><span class=\"line\">  values.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">  comments.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  IniSection *sect = getSection(section);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (sect != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (IniSection::iterator it = sect-&gt;<span class=\"built_in\">begin</span>(); it != sect-&gt;<span class=\"built_in\">end</span>(); ++it) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (it-&gt;key == key) &#123;</span><br><span class=\"line\">        value = it-&gt;value;</span><br><span class=\"line\">        comment = it-&gt;comment;</span><br><span class=\"line\"></span><br><span class=\"line\">        values.push_back(value);</span><br><span class=\"line\">        comments.push_back(comment);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (values.<span class=\"built_in\">size</span>() ? RET_OK : RET_ERR);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">IniFile::hasSection</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (getSection(section) != <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">IniFile::hasKey</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;key)</span> </span>&#123;</span><br><span class=\"line\">  IniSection *sect = getSection(section);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (sect != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (IniSection::iterator it = sect-&gt;<span class=\"built_in\">begin</span>(); it != sect-&gt;<span class=\"built_in\">end</span>(); ++it) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (it-&gt;key == key) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">IniFile::getSectionComment</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section, <span class=\"built_in\">string</span> &amp;comment)</span> </span>&#123;</span><br><span class=\"line\">  comment = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  IniSection *sect = getSection(section);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (sect != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">    comment = sect-&gt;comment;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> RET_OK;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> RET_ERR;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">IniFile::setSectionComment</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;comment)</span> </span>&#123;</span><br><span class=\"line\">  IniSection *sect = getSection(section);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (sect != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">    sect-&gt;comment = comment;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> RET_OK;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> RET_ERR;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">IniFile::setValue</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;key,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                      <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;value, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;comment <span class=\"comment\">/*=\"\"*/</span>)</span> </span>&#123;</span><br><span class=\"line\">  IniSection *sect = getSection(section);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">string</span> comt = comment;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (comt != <span class=\"string\">\"\"</span>) &#123;</span><br><span class=\"line\">    comt = flags_[<span class=\"number\">0</span>] + comt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (sect == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">    sect = <span class=\"keyword\">new</span> IniSection();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sect == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"no enough memory!\\n\"</span>);</span><br><span class=\"line\">      <span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    sect-&gt;name = section;</span><br><span class=\"line\">    sections_[section] = sect;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (IniSection::iterator it = sect-&gt;<span class=\"built_in\">begin</span>(); it != sect-&gt;<span class=\"built_in\">end</span>(); ++it) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (it-&gt;key == key) &#123;</span><br><span class=\"line\">      it-&gt;value = value;</span><br><span class=\"line\">      it-&gt;comment = comt;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> RET_OK;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// not found key</span></span><br><span class=\"line\">  IniItem item;</span><br><span class=\"line\">  item.key = key;</span><br><span class=\"line\">  item.value = value;</span><br><span class=\"line\">  item.comment = comt;</span><br><span class=\"line\"></span><br><span class=\"line\">  sect-&gt;items.push_back(item);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> RET_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">IniFile::getCommentFlags</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; &amp;flags)</span> </span>&#123; flags = flags_; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">IniFile::setCommentFlags</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; &amp;flags)</span> </span>&#123; flags_ = flags; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">IniFile::deleteSection</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section)</span> </span>&#123;</span><br><span class=\"line\">  IniSection *sect = getSection(section);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (sect != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    sections_.erase(section);</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> sect;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">IniFile::deleteKey</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;section, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;key)</span> </span>&#123;</span><br><span class=\"line\">  IniSection *sect = getSection(section);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (sect != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (IniSection::iterator it = sect-&gt;<span class=\"built_in\">begin</span>(); it != sect-&gt;<span class=\"built_in\">end</span>(); ++it) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (it-&gt;key == key) &#123;</span><br><span class=\"line\">        sect-&gt;items.erase(it);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">IniFile::release</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  fname_ = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (iterator i = sections_.<span class=\"built_in\">begin</span>(); i != sections_.<span class=\"built_in\">end</span>(); ++i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> i-&gt;second;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  sections_.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">IniFile::isComment</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;str)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">bool</span> ret = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; flags_.<span class=\"built_in\">size</span>(); ++i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str.length() &lt; flags_[i].length()) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (k = <span class=\"number\">0</span>; k &lt; flags_[i].length(); ++k) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (str[k] != flags_[i][k]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k == flags_[i].length()) &#123;</span><br><span class=\"line\">      ret = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// for debug</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">IniFile::print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"filename:[%s]\\n\"</span>, fname_.c_str());</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"flags_:[\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; flags_.<span class=\"built_in\">size</span>(); ++i) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\" %s \"</span>, flags_[i].c_str());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"]\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (iterator it = sections_.<span class=\"built_in\">begin</span>(); it != sections_.<span class=\"built_in\">end</span>(); ++it) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"section:[%s]\\n\"</span>, it-&gt;first.c_str());</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"comment:[%s]\\n\"</span>, it-&gt;second-&gt;comment.c_str());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (IniSection::iterator i = it-&gt;second-&gt;items.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">         i != it-&gt;second-&gt;items.<span class=\"built_in\">end</span>(); ++i) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">\"    comment:%s\\n\"</span>, i-&gt;comment.c_str());</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">\"    parm   :%s=%s\\n\"</span>, i-&gt;key.c_str(), i-&gt;value.c_str());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">IniFile::trimleft</span><span class=\"params\">(<span class=\"built_in\">string</span> &amp;str, <span class=\"keyword\">char</span> c <span class=\"comment\">/*=' '*/</span>)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// trim head</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> len = str.length();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (str[i] == c &amp;&amp; str[i] != <span class=\"string\">'\\0'</span>) &#123;</span><br><span class=\"line\">    i++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    str = <span class=\"built_in\">string</span>(str, i, len - i);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">IniFile::trimright</span><span class=\"params\">(<span class=\"built_in\">string</span> &amp;str, <span class=\"keyword\">char</span> c <span class=\"comment\">/*=' '*/</span>)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// trim tail</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> len = str.length();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = len - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; --i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str[i] != c) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  str = <span class=\"built_in\">string</span>(str, <span class=\"number\">0</span>, i + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">IniFile::trim</span><span class=\"params\">(<span class=\"built_in\">string</span> &amp;str)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// trim head</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">int</span> len = str.length();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"built_in\">isspace</span>(str[i]) &amp;&amp; str[i] != <span class=\"string\">'\\0'</span>) &#123;</span><br><span class=\"line\">    i++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    str = <span class=\"built_in\">string</span>(str, i, len - i);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// trim tail</span></span><br><span class=\"line\">  len = str.length();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = len - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; --i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">isspace</span>(str[i])) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  str = <span class=\"built_in\">string</span>(str, <span class=\"number\">0</span>, i + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125; <span class=\"comment\">// namespace inifile</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"程序运行结果\"><a href=\"#程序运行结果\" class=\"headerlink\" title=\"程序运行结果\"></a>程序运行结果</h1><p><img src=\"/images/20190711/iniTest.PNG\" alt=\"iniTest\"></p>","popularPost_tmp_postPath":true,"eyeCatchImage":"/images/20190711/iniTestTree.PNG","popularPost_tmp_gaData":{"updated":"Wed Jan 29 2020 21:57:52 GMT+0800 (China Standard Time)","title":"C++中配置文件的读取","path":"archives/22984.html","eyeCatchImage":"/images/20190711/iniTestTree.PNG","excerpt":"介绍配置文件(*.ini)的使用方法。","date":{"_isAMomentObject":true,"_i":"2019-07-11T11:00:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2019-07-11T11:00:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"工科生的基本功 > 快乐码农","tags":["Library","C++"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":16355},{"title":"Linux下QT环境的配置","description":"介绍QT环境的安装和CMake的联合使用。","date":"2019-07-11T11:00:00.000Z","abbrlink":24574,"_content":"\n> 开发环境：Ubuntu16.04 LTS、 QT Creator 5.8。 \n\n<!-- more -->\n\n# 前言\n\nQT Creator是一款可以用来编写界面的IDE，而QT则是库。本文旨在说明QT Creator 5.8的安装方法，以及用cmake来编译创建的QT工程。用cmake的原因是，当开发的\n程序是包含了大量的第三方库时，QT自带的qmake并不实用，还是跨平台编译工具cmake好用。\n\n# QT Creator 5.8 及其他库的安装\n\n## 下载安装包\n\n不知道为啥QT官方的安装过程整的很麻烦，需要用户注册，嗯，注册完还不能直接下载，各(zhen)种(ma)绕(fan)。下载QT的安装包可以从[QT镜像下载](http://download.qt.io/)。下面直接给出下载过程，关于整个下载页面的说明，请参考[Qt Creator的下载和安装](https://blog.csdn.net/weixin_38090427/article/details/83827678)。\n\n打开网页后，依次点击`archive/` -> `qt/` -> `5.8/` -> `qt-opensource-linux-x64-5.8.0.run`，下载安装包。\n\n## 安装过程\n\n在Terminal中，打开安装包存放路径，执行下列语句进行安装。\n\n```c++\nchmod +x qt-opensource-linux-x64-5.8.0.run\n./qt-opensource-linux-x64-5.8.0.run\n```\n\n执行完上述语句后，会弹出QT Creator的安装界面，如下图。\n![01.png]( /images/20190716QT/01.png)\n\n点击Next，在下面的输入登录信息点击Skip即可。\n![02.png]( /images/20190716QT/02.png)\n\n继续点击Next。\n![03.png]( /images/20190716QT/03.png)\n\n在下面的页面中，选择自己要安装的位置，再点Next。\n![04.png]( /images/20190716QT/04.png)\n\n在下面的页面中，默认是不安装`Sources`的，由于笔者第一次使用，不明白这里不安装会有什么问题，故而选择了安装。\n![05.png]( /images/20190716QT/05.png)\n\n同意协议。\n![06.png]( /images/20190716QT/06.png)\n\n在下面的页面中，点击Install，开始安装，等待安装完成即可。\n![07.png]( /images/20190716QT/07.png)\n\n## 其他库的安装\n\n以上过程只是安装了QT Creator 5.8，为了能正常使用，还需要安装一些其他的库，依次执行下列语句即可。\n\n```c++\nsudo apt-get install g++\nsudo apt-get install libx11-dev libxext-dev libxtst-dev\nsudo apt-get install libgl1-mesa-dev\nsudo apt-get install build-essential\nsudo apt-get install libqt4-dev\nsudo apt-get install git build-essential cmake qt5-default qtscript5-dev libssl-dev qttools5-dev qttools5-dev-tools qtmultimedia5-dev libqt5svg5-dev libqt5webkit5-dev libsdl2-dev libasound2 libxmu-dev libxi-dev freeglut3-dev libasound2-dev libjack-jackd2-dev libxrandr-dev libqt5xmlpatterns5-dev libqt5xmlpatterns5 libqt5xmlpatterns5-private-dev\n```\n\n说明：上述的命令是通过参考一些帖子得来的，前5条命令笔者并不知道是否为必须，最后一条命令是必须要安装的。事实上，最后一条是包含了前面部分的库的。\n\n# HelloWorld案例介绍\n\n本节介绍使用QT来创建一个例子HelloWorld，首先使用QT Creator来编写程序，弹出如下的页面，再介绍添加cmake来实现同样的功能。\n![08.png]( /images/20190716QT/08.png)\n\n## QT Creator的创建过程\n\n### 工程的创建\n\n打开QT Creator，创建一个新的工程，选择相应的存放路径。如下图所示。\n![09.png]( /images/20190716QT/09.png)\n![10.png]( /images/20190716QT/10.png)\n![11.png]( /images/20190716QT/11.png)\n\n选择默认的Kits。\n![12.png]( /images/20190716QT/12.png)\n\n在`Class Information`中的`Base Class`中选择`QWidget`，如下图所示。\n![13.png]( /images/20190716QT/13.png)\n\n点击`Finish`完成工程创建。\n![14.png]( /images/20190716QT/14.png)\n\n创建完工程后，QT Creator中的目录如下：\n![15.png]( /images/20190716QT/15.png)\n\n### 程序的编写\n\n在上图中，`widget.ui`是整个的显示页面程序，`widget.cpp`是页面程序中的处理方法，`main.cpp`包含了主函数。\n\n双击`widget.ui`，打开如下界面，找到`Display Widgets`下的`Label`，用鼠标左键按住拖动至右面的框中，将显示文本修改为“Hello QT and CMAKE!”。\n\n双击`widget.cpp`，修改程序如下：\n\n```c++\n#include \"widget.h\"\n#include \"ui_widget.h\"\n\nWidget::Widget(QWidget *parent) :\n    QWidget(parent),\n    ui(new Ui::Widget)\n{\n    ui->setupUi(this);\n\n    //窗体标题\n    this->setWindowTitle(\"Qt5.1 窗体应用\");\n    //窗体 ICO 图片,如图不起别名,后缀直接写图片全名。\n    this->setWindowIcon(QIcon(\":/new/prefix1/ico.png\"));\n}\n\nWidget::~Widget()\n{\n    delete ui;\n}\n```\n\n点击上图中左下角的第一个绿色三角，即可运行程序。至此，使用QT Creator创建了第一个界面程序。\n\n### 使用cmake对程序进行编译\n\n在HelloWorld工程中右键，添加新文件，选择`General` -> `Empty File`，命名为`CMakeLists.txt`，如图所示。\n![16.png]( /images/20190716QT/16.png)\n\n并在`CMakeLists.txt`中添加如下内容：\n\n```c++\ncmake_minimum_required(VERSION 2.8.11 FATAL_ERROR)\nproject(QtHelloWorld)\nset(CMAKE_INCLUDE_CURRENT_DIR ON)\nset(CMAKE_AUTOMOC ON)\nset(CMAKE_AUTOUIC ON)\nset(CMAKE_AUTORCC ON)\n\nfind_package(Qt5 REQUIRED Widgets)\n qt5_wrap_cpp( MOC widget.h)\nqt5_wrap_ui( UIC widget.ui)\nadd_executable(QtHelloWorld main.cpp widget.cpp widget.h widget.ui ${RESOURCE_DIR})\ntarget_link_libraries(QtHelloWorld Qt5::Widgets)\n\n```\n\n接下来尝试使用cmake对工程进行编译。\n\n```c++\ncd 工程所在目录\nmkdir build\ncd build\nmake -j2\n./QtHelloWorld\n```\n\n# 程序运行结果\n![08.png]( /images/20190716QT/08.png)\n\n至此，完成了通过QT Creator创建工程并通过IDE直接运行或者使用cmake来编译运行工程的示例。","source":"_posts/2019-07-16-LinuxÏÂQT5»·¾³µÄÅäÖÃ.md","raw":"---\ntitle: Linux下QT环境的配置\ndescription: 介绍QT环境的安装和CMake的联合使用。\ndate: '2019.07.11.11:00'\ncategories:\n  - 工科生的基本功\n  - 快乐码农\ntags:\n  - C++\n  - QT\n  - Library\nabbrlink: 24574\n---\n\n> 开发环境：Ubuntu16.04 LTS、 QT Creator 5.8。 \n\n<!-- more -->\n\n# 前言\n\nQT Creator是一款可以用来编写界面的IDE，而QT则是库。本文旨在说明QT Creator 5.8的安装方法，以及用cmake来编译创建的QT工程。用cmake的原因是，当开发的\n程序是包含了大量的第三方库时，QT自带的qmake并不实用，还是跨平台编译工具cmake好用。\n\n# QT Creator 5.8 及其他库的安装\n\n## 下载安装包\n\n不知道为啥QT官方的安装过程整的很麻烦，需要用户注册，嗯，注册完还不能直接下载，各(zhen)种(ma)绕(fan)。下载QT的安装包可以从[QT镜像下载](http://download.qt.io/)。下面直接给出下载过程，关于整个下载页面的说明，请参考[Qt Creator的下载和安装](https://blog.csdn.net/weixin_38090427/article/details/83827678)。\n\n打开网页后，依次点击`archive/` -> `qt/` -> `5.8/` -> `qt-opensource-linux-x64-5.8.0.run`，下载安装包。\n\n## 安装过程\n\n在Terminal中，打开安装包存放路径，执行下列语句进行安装。\n\n```c++\nchmod +x qt-opensource-linux-x64-5.8.0.run\n./qt-opensource-linux-x64-5.8.0.run\n```\n\n执行完上述语句后，会弹出QT Creator的安装界面，如下图。\n![01.png]( /images/20190716QT/01.png)\n\n点击Next，在下面的输入登录信息点击Skip即可。\n![02.png]( /images/20190716QT/02.png)\n\n继续点击Next。\n![03.png]( /images/20190716QT/03.png)\n\n在下面的页面中，选择自己要安装的位置，再点Next。\n![04.png]( /images/20190716QT/04.png)\n\n在下面的页面中，默认是不安装`Sources`的，由于笔者第一次使用，不明白这里不安装会有什么问题，故而选择了安装。\n![05.png]( /images/20190716QT/05.png)\n\n同意协议。\n![06.png]( /images/20190716QT/06.png)\n\n在下面的页面中，点击Install，开始安装，等待安装完成即可。\n![07.png]( /images/20190716QT/07.png)\n\n## 其他库的安装\n\n以上过程只是安装了QT Creator 5.8，为了能正常使用，还需要安装一些其他的库，依次执行下列语句即可。\n\n```c++\nsudo apt-get install g++\nsudo apt-get install libx11-dev libxext-dev libxtst-dev\nsudo apt-get install libgl1-mesa-dev\nsudo apt-get install build-essential\nsudo apt-get install libqt4-dev\nsudo apt-get install git build-essential cmake qt5-default qtscript5-dev libssl-dev qttools5-dev qttools5-dev-tools qtmultimedia5-dev libqt5svg5-dev libqt5webkit5-dev libsdl2-dev libasound2 libxmu-dev libxi-dev freeglut3-dev libasound2-dev libjack-jackd2-dev libxrandr-dev libqt5xmlpatterns5-dev libqt5xmlpatterns5 libqt5xmlpatterns5-private-dev\n```\n\n说明：上述的命令是通过参考一些帖子得来的，前5条命令笔者并不知道是否为必须，最后一条命令是必须要安装的。事实上，最后一条是包含了前面部分的库的。\n\n# HelloWorld案例介绍\n\n本节介绍使用QT来创建一个例子HelloWorld，首先使用QT Creator来编写程序，弹出如下的页面，再介绍添加cmake来实现同样的功能。\n![08.png]( /images/20190716QT/08.png)\n\n## QT Creator的创建过程\n\n### 工程的创建\n\n打开QT Creator，创建一个新的工程，选择相应的存放路径。如下图所示。\n![09.png]( /images/20190716QT/09.png)\n![10.png]( /images/20190716QT/10.png)\n![11.png]( /images/20190716QT/11.png)\n\n选择默认的Kits。\n![12.png]( /images/20190716QT/12.png)\n\n在`Class Information`中的`Base Class`中选择`QWidget`，如下图所示。\n![13.png]( /images/20190716QT/13.png)\n\n点击`Finish`完成工程创建。\n![14.png]( /images/20190716QT/14.png)\n\n创建完工程后，QT Creator中的目录如下：\n![15.png]( /images/20190716QT/15.png)\n\n### 程序的编写\n\n在上图中，`widget.ui`是整个的显示页面程序，`widget.cpp`是页面程序中的处理方法，`main.cpp`包含了主函数。\n\n双击`widget.ui`，打开如下界面，找到`Display Widgets`下的`Label`，用鼠标左键按住拖动至右面的框中，将显示文本修改为“Hello QT and CMAKE!”。\n\n双击`widget.cpp`，修改程序如下：\n\n```c++\n#include \"widget.h\"\n#include \"ui_widget.h\"\n\nWidget::Widget(QWidget *parent) :\n    QWidget(parent),\n    ui(new Ui::Widget)\n{\n    ui->setupUi(this);\n\n    //窗体标题\n    this->setWindowTitle(\"Qt5.1 窗体应用\");\n    //窗体 ICO 图片,如图不起别名,后缀直接写图片全名。\n    this->setWindowIcon(QIcon(\":/new/prefix1/ico.png\"));\n}\n\nWidget::~Widget()\n{\n    delete ui;\n}\n```\n\n点击上图中左下角的第一个绿色三角，即可运行程序。至此，使用QT Creator创建了第一个界面程序。\n\n### 使用cmake对程序进行编译\n\n在HelloWorld工程中右键，添加新文件，选择`General` -> `Empty File`，命名为`CMakeLists.txt`，如图所示。\n![16.png]( /images/20190716QT/16.png)\n\n并在`CMakeLists.txt`中添加如下内容：\n\n```c++\ncmake_minimum_required(VERSION 2.8.11 FATAL_ERROR)\nproject(QtHelloWorld)\nset(CMAKE_INCLUDE_CURRENT_DIR ON)\nset(CMAKE_AUTOMOC ON)\nset(CMAKE_AUTOUIC ON)\nset(CMAKE_AUTORCC ON)\n\nfind_package(Qt5 REQUIRED Widgets)\n qt5_wrap_cpp( MOC widget.h)\nqt5_wrap_ui( UIC widget.ui)\nadd_executable(QtHelloWorld main.cpp widget.cpp widget.h widget.ui ${RESOURCE_DIR})\ntarget_link_libraries(QtHelloWorld Qt5::Widgets)\n\n```\n\n接下来尝试使用cmake对工程进行编译。\n\n```c++\ncd 工程所在目录\nmkdir build\ncd build\nmake -j2\n./QtHelloWorld\n```\n\n# 程序运行结果\n![08.png]( /images/20190716QT/08.png)\n\n至此，完成了通过QT Creator创建工程并通过IDE直接运行或者使用cmake来编译运行工程的示例。","slug":"2019-07-16-LinuxÏÂQT5»·¾³µÄÅäÖÃ","published":1,"updated":"2020-01-29T13:57:52.768Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck60spy9n001ada55febc9cfj","content":"<blockquote>\n<p>开发环境：Ubuntu16.04 LTS、 QT Creator 5.8。 </p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>QT Creator是一款可以用来编写界面的IDE，而QT则是库。本文旨在说明QT Creator 5.8的安装方法，以及用cmake来编译创建的QT工程。用cmake的原因是，当开发的<br>程序是包含了大量的第三方库时，QT自带的qmake并不实用，还是跨平台编译工具cmake好用。</p>\n<h1 id=\"QT-Creator-5-8-及其他库的安装\"><a href=\"#QT-Creator-5-8-及其他库的安装\" class=\"headerlink\" title=\"QT Creator 5.8 及其他库的安装\"></a>QT Creator 5.8 及其他库的安装</h1><h2 id=\"下载安装包\"><a href=\"#下载安装包\" class=\"headerlink\" title=\"下载安装包\"></a>下载安装包</h2><p>不知道为啥QT官方的安装过程整的很麻烦，需要用户注册，嗯，注册完还不能直接下载，各(zhen)种(ma)绕(fan)。下载QT的安装包可以从<span class=\"exturl\" data-url=\"aHR0cDovL2Rvd25sb2FkLnF0LmlvLw==\" title=\"http://download.qt.io/\">QT镜像下载<i class=\"fa fa-external-link\"></i></span>。下面直接给出下载过程，关于整个下载页面的说明，请参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODA5MDQyNy9hcnRpY2xlL2RldGFpbHMvODM4Mjc2Nzg=\" title=\"https://blog.csdn.net/weixin_38090427/article/details/83827678\">Qt Creator的下载和安装<i class=\"fa fa-external-link\"></i></span>。</p>\n<p>打开网页后，依次点击<code>archive/</code> -&gt; <code>qt/</code> -&gt; <code>5.8/</code> -&gt; <code>qt-opensource-linux-x64-5.8.0.run</code>，下载安装包。</p>\n<h2 id=\"安装过程\"><a href=\"#安装过程\" class=\"headerlink\" title=\"安装过程\"></a>安装过程</h2><p>在Terminal中，打开安装包存放路径，执行下列语句进行安装。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x qt-opensource-linux-x64<span class=\"number\">-5.8</span><span class=\"number\">.0</span>.<span class=\"built_in\">run</span></span><br><span class=\"line\">./qt-opensource-linux-x64<span class=\"number\">-5.8</span><span class=\"number\">.0</span>.<span class=\"built_in\">run</span></span><br></pre></td></tr></table></figure>\n\n<p>执行完上述语句后，会弹出QT Creator的安装界面，如下图。<br><img src=\"/images/20190716QT/01.png\" alt=\"01.png\"></p>\n<p>点击Next，在下面的输入登录信息点击Skip即可。<br><img src=\"/images/20190716QT/02.png\" alt=\"02.png\"></p>\n<p>继续点击Next。<br><img src=\"/images/20190716QT/03.png\" alt=\"03.png\"></p>\n<p>在下面的页面中，选择自己要安装的位置，再点Next。<br><img src=\"/images/20190716QT/04.png\" alt=\"04.png\"></p>\n<p>在下面的页面中，默认是不安装<code>Sources</code>的，由于笔者第一次使用，不明白这里不安装会有什么问题，故而选择了安装。<br><img src=\"/images/20190716QT/05.png\" alt=\"05.png\"></p>\n<p>同意协议。<br><img src=\"/images/20190716QT/06.png\" alt=\"06.png\"></p>\n<p>在下面的页面中，点击Install，开始安装，等待安装完成即可。<br><img src=\"/images/20190716QT/07.png\" alt=\"07.png\"></p>\n<h2 id=\"其他库的安装\"><a href=\"#其他库的安装\" class=\"headerlink\" title=\"其他库的安装\"></a>其他库的安装</h2><p>以上过程只是安装了QT Creator 5.8，为了能正常使用，还需要安装一些其他的库，依次执行下列语句即可。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> install g++</span><br><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> install libx11-dev libxext-dev libxtst-dev</span><br><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> install libgl1-mesa-dev</span><br><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> install build-essential</span><br><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> install libqt4-dev</span><br><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> install git build-essential cmake qt5-<span class=\"keyword\">default</span> qtscript5-dev libssl-dev qttools5-dev qttools5-dev-tools qtmultimedia5-dev libqt5svg5-dev libqt5webkit5-dev libsdl2-dev libasound2 libxmu-dev libxi-dev freeglut3-dev libasound2-dev libjack-jackd2-dev libxrandr-dev libqt5xmlpatterns5-dev libqt5xmlpatterns5 libqt5xmlpatterns5-<span class=\"keyword\">private</span>-dev</span><br></pre></td></tr></table></figure>\n\n<p>说明：上述的命令是通过参考一些帖子得来的，前5条命令笔者并不知道是否为必须，最后一条命令是必须要安装的。事实上，最后一条是包含了前面部分的库的。</p>\n<h1 id=\"HelloWorld案例介绍\"><a href=\"#HelloWorld案例介绍\" class=\"headerlink\" title=\"HelloWorld案例介绍\"></a>HelloWorld案例介绍</h1><p>本节介绍使用QT来创建一个例子HelloWorld，首先使用QT Creator来编写程序，弹出如下的页面，再介绍添加cmake来实现同样的功能。<br><img src=\"/images/20190716QT/08.png\" alt=\"08.png\"></p>\n<h2 id=\"QT-Creator的创建过程\"><a href=\"#QT-Creator的创建过程\" class=\"headerlink\" title=\"QT Creator的创建过程\"></a>QT Creator的创建过程</h2><h3 id=\"工程的创建\"><a href=\"#工程的创建\" class=\"headerlink\" title=\"工程的创建\"></a>工程的创建</h3><p>打开QT Creator，创建一个新的工程，选择相应的存放路径。如下图所示。<br><img src=\"/images/20190716QT/09.png\" alt=\"09.png\"><br><img src=\"/images/20190716QT/10.png\" alt=\"10.png\"><br><img src=\"/images/20190716QT/11.png\" alt=\"11.png\"></p>\n<p>选择默认的Kits。<br><img src=\"/images/20190716QT/12.png\" alt=\"12.png\"></p>\n<p>在<code>Class Information</code>中的<code>Base Class</code>中选择<code>QWidget</code>，如下图所示。<br><img src=\"/images/20190716QT/13.png\" alt=\"13.png\"></p>\n<p>点击<code>Finish</code>完成工程创建。<br><img src=\"/images/20190716QT/14.png\" alt=\"14.png\"></p>\n<p>创建完工程后，QT Creator中的目录如下：<br><img src=\"/images/20190716QT/15.png\" alt=\"15.png\"></p>\n<h3 id=\"程序的编写\"><a href=\"#程序的编写\" class=\"headerlink\" title=\"程序的编写\"></a>程序的编写</h3><p>在上图中，<code>widget.ui</code>是整个的显示页面程序，<code>widget.cpp</code>是页面程序中的处理方法，<code>main.cpp</code>包含了主函数。</p>\n<p>双击<code>widget.ui</code>，打开如下界面，找到<code>Display Widgets</code>下的<code>Label</code>，用鼠标左键按住拖动至右面的框中，将显示文本修改为“Hello QT and CMAKE!”。</p>\n<p>双击<code>widget.cpp</code>，修改程序如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"widget.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"ui_widget.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">Widget::Widget(QWidget *parent) :</span><br><span class=\"line\">    QWidget(parent),</span><br><span class=\"line\">    ui(<span class=\"keyword\">new</span> Ui::Widget)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ui-&gt;setupUi(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//窗体标题</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>-&gt;setWindowTitle(<span class=\"string\">\"Qt5.1 窗体应用\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//窗体 ICO 图片,如图不起别名,后缀直接写图片全名。</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>-&gt;setWindowIcon(QIcon(<span class=\"string\">\":/new/prefix1/ico.png\"</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Widget::~Widget()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> ui;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>点击上图中左下角的第一个绿色三角，即可运行程序。至此，使用QT Creator创建了第一个界面程序。</p>\n<h3 id=\"使用cmake对程序进行编译\"><a href=\"#使用cmake对程序进行编译\" class=\"headerlink\" title=\"使用cmake对程序进行编译\"></a>使用cmake对程序进行编译</h3><p>在HelloWorld工程中右键，添加新文件，选择<code>General</code> -&gt; <code>Empty File</code>，命名为<code>CMakeLists.txt</code>，如图所示。<br><img src=\"/images/20190716QT/16.png\" alt=\"16.png\"></p>\n<p>并在<code>CMakeLists.txt</code>中添加如下内容：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake_minimum_required(VERSION <span class=\"number\">2.8</span><span class=\"number\">.11</span> FATAL_ERROR)</span><br><span class=\"line\">project(QtHelloWorld)</span><br><span class=\"line\"><span class=\"built_in\">set</span>(CMAKE_INCLUDE_CURRENT_DIR ON)</span><br><span class=\"line\"><span class=\"built_in\">set</span>(CMAKE_AUTOMOC ON)</span><br><span class=\"line\"><span class=\"built_in\">set</span>(CMAKE_AUTOUIC ON)</span><br><span class=\"line\"><span class=\"built_in\">set</span>(CMAKE_AUTORCC ON)</span><br><span class=\"line\"></span><br><span class=\"line\">find_package(Qt5 REQUIRED Widgets)</span><br><span class=\"line\"> qt5_wrap_cpp( MOC widget.h)</span><br><span class=\"line\">qt5_wrap_ui( UIC widget.ui)</span><br><span class=\"line\">add_executable(QtHelloWorld main.cpp widget.cpp widget.h widget.ui $&#123;RESOURCE_DIR&#125;)</span><br><span class=\"line\">target_link_libraries(QtHelloWorld Qt5::Widgets)</span><br></pre></td></tr></table></figure>\n\n<p>接下来尝试使用cmake对工程进行编译。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd 工程所在目录</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> build</span><br><span class=\"line\">cd build</span><br><span class=\"line\">make -j2</span><br><span class=\"line\">./QtHelloWorld</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"程序运行结果\"><a href=\"#程序运行结果\" class=\"headerlink\" title=\"程序运行结果\"></a>程序运行结果</h1><p><img src=\"/images/20190716QT/08.png\" alt=\"08.png\"></p>\n<p>至此，完成了通过QT Creator创建工程并通过IDE直接运行或者使用cmake来编译运行工程的示例。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>开发环境：Ubuntu16.04 LTS、 QT Creator 5.8。 </p>\n</blockquote>","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>QT Creator是一款可以用来编写界面的IDE，而QT则是库。本文旨在说明QT Creator 5.8的安装方法，以及用cmake来编译创建的QT工程。用cmake的原因是，当开发的<br>程序是包含了大量的第三方库时，QT自带的qmake并不实用，还是跨平台编译工具cmake好用。</p>\n<h1 id=\"QT-Creator-5-8-及其他库的安装\"><a href=\"#QT-Creator-5-8-及其他库的安装\" class=\"headerlink\" title=\"QT Creator 5.8 及其他库的安装\"></a>QT Creator 5.8 及其他库的安装</h1><h2 id=\"下载安装包\"><a href=\"#下载安装包\" class=\"headerlink\" title=\"下载安装包\"></a>下载安装包</h2><p>不知道为啥QT官方的安装过程整的很麻烦，需要用户注册，嗯，注册完还不能直接下载，各(zhen)种(ma)绕(fan)。下载QT的安装包可以从<a href=\"http://download.qt.io/\" target=\"_blank\" rel=\"noopener\">QT镜像下载</a>。下面直接给出下载过程，关于整个下载页面的说明，请参考<a href=\"https://blog.csdn.net/weixin_38090427/article/details/83827678\" target=\"_blank\" rel=\"noopener\">Qt Creator的下载和安装</a>。</p>\n<p>打开网页后，依次点击<code>archive/</code> -&gt; <code>qt/</code> -&gt; <code>5.8/</code> -&gt; <code>qt-opensource-linux-x64-5.8.0.run</code>，下载安装包。</p>\n<h2 id=\"安装过程\"><a href=\"#安装过程\" class=\"headerlink\" title=\"安装过程\"></a>安装过程</h2><p>在Terminal中，打开安装包存放路径，执行下列语句进行安装。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x qt-opensource-linux-x64<span class=\"number\">-5.8</span><span class=\"number\">.0</span>.<span class=\"built_in\">run</span></span><br><span class=\"line\">./qt-opensource-linux-x64<span class=\"number\">-5.8</span><span class=\"number\">.0</span>.<span class=\"built_in\">run</span></span><br></pre></td></tr></table></figure>\n\n<p>执行完上述语句后，会弹出QT Creator的安装界面，如下图。<br><img src=\"/images/20190716QT/01.png\" alt=\"01.png\"></p>\n<p>点击Next，在下面的输入登录信息点击Skip即可。<br><img src=\"/images/20190716QT/02.png\" alt=\"02.png\"></p>\n<p>继续点击Next。<br><img src=\"/images/20190716QT/03.png\" alt=\"03.png\"></p>\n<p>在下面的页面中，选择自己要安装的位置，再点Next。<br><img src=\"/images/20190716QT/04.png\" alt=\"04.png\"></p>\n<p>在下面的页面中，默认是不安装<code>Sources</code>的，由于笔者第一次使用，不明白这里不安装会有什么问题，故而选择了安装。<br><img src=\"/images/20190716QT/05.png\" alt=\"05.png\"></p>\n<p>同意协议。<br><img src=\"/images/20190716QT/06.png\" alt=\"06.png\"></p>\n<p>在下面的页面中，点击Install，开始安装，等待安装完成即可。<br><img src=\"/images/20190716QT/07.png\" alt=\"07.png\"></p>\n<h2 id=\"其他库的安装\"><a href=\"#其他库的安装\" class=\"headerlink\" title=\"其他库的安装\"></a>其他库的安装</h2><p>以上过程只是安装了QT Creator 5.8，为了能正常使用，还需要安装一些其他的库，依次执行下列语句即可。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> install g++</span><br><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> install libx11-dev libxext-dev libxtst-dev</span><br><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> install libgl1-mesa-dev</span><br><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> install build-essential</span><br><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> install libqt4-dev</span><br><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> install git build-essential cmake qt5-<span class=\"keyword\">default</span> qtscript5-dev libssl-dev qttools5-dev qttools5-dev-tools qtmultimedia5-dev libqt5svg5-dev libqt5webkit5-dev libsdl2-dev libasound2 libxmu-dev libxi-dev freeglut3-dev libasound2-dev libjack-jackd2-dev libxrandr-dev libqt5xmlpatterns5-dev libqt5xmlpatterns5 libqt5xmlpatterns5-<span class=\"keyword\">private</span>-dev</span><br></pre></td></tr></table></figure>\n\n<p>说明：上述的命令是通过参考一些帖子得来的，前5条命令笔者并不知道是否为必须，最后一条命令是必须要安装的。事实上，最后一条是包含了前面部分的库的。</p>\n<h1 id=\"HelloWorld案例介绍\"><a href=\"#HelloWorld案例介绍\" class=\"headerlink\" title=\"HelloWorld案例介绍\"></a>HelloWorld案例介绍</h1><p>本节介绍使用QT来创建一个例子HelloWorld，首先使用QT Creator来编写程序，弹出如下的页面，再介绍添加cmake来实现同样的功能。<br><img src=\"/images/20190716QT/08.png\" alt=\"08.png\"></p>\n<h2 id=\"QT-Creator的创建过程\"><a href=\"#QT-Creator的创建过程\" class=\"headerlink\" title=\"QT Creator的创建过程\"></a>QT Creator的创建过程</h2><h3 id=\"工程的创建\"><a href=\"#工程的创建\" class=\"headerlink\" title=\"工程的创建\"></a>工程的创建</h3><p>打开QT Creator，创建一个新的工程，选择相应的存放路径。如下图所示。<br><img src=\"/images/20190716QT/09.png\" alt=\"09.png\"><br><img src=\"/images/20190716QT/10.png\" alt=\"10.png\"><br><img src=\"/images/20190716QT/11.png\" alt=\"11.png\"></p>\n<p>选择默认的Kits。<br><img src=\"/images/20190716QT/12.png\" alt=\"12.png\"></p>\n<p>在<code>Class Information</code>中的<code>Base Class</code>中选择<code>QWidget</code>，如下图所示。<br><img src=\"/images/20190716QT/13.png\" alt=\"13.png\"></p>\n<p>点击<code>Finish</code>完成工程创建。<br><img src=\"/images/20190716QT/14.png\" alt=\"14.png\"></p>\n<p>创建完工程后，QT Creator中的目录如下：<br><img src=\"/images/20190716QT/15.png\" alt=\"15.png\"></p>\n<h3 id=\"程序的编写\"><a href=\"#程序的编写\" class=\"headerlink\" title=\"程序的编写\"></a>程序的编写</h3><p>在上图中，<code>widget.ui</code>是整个的显示页面程序，<code>widget.cpp</code>是页面程序中的处理方法，<code>main.cpp</code>包含了主函数。</p>\n<p>双击<code>widget.ui</code>，打开如下界面，找到<code>Display Widgets</code>下的<code>Label</code>，用鼠标左键按住拖动至右面的框中，将显示文本修改为“Hello QT and CMAKE!”。</p>\n<p>双击<code>widget.cpp</code>，修改程序如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"widget.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"ui_widget.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">Widget::Widget(QWidget *parent) :</span><br><span class=\"line\">    QWidget(parent),</span><br><span class=\"line\">    ui(<span class=\"keyword\">new</span> Ui::Widget)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ui-&gt;setupUi(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//窗体标题</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>-&gt;setWindowTitle(<span class=\"string\">\"Qt5.1 窗体应用\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//窗体 ICO 图片,如图不起别名,后缀直接写图片全名。</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>-&gt;setWindowIcon(QIcon(<span class=\"string\">\":/new/prefix1/ico.png\"</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Widget::~Widget()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> ui;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>点击上图中左下角的第一个绿色三角，即可运行程序。至此，使用QT Creator创建了第一个界面程序。</p>\n<h3 id=\"使用cmake对程序进行编译\"><a href=\"#使用cmake对程序进行编译\" class=\"headerlink\" title=\"使用cmake对程序进行编译\"></a>使用cmake对程序进行编译</h3><p>在HelloWorld工程中右键，添加新文件，选择<code>General</code> -&gt; <code>Empty File</code>，命名为<code>CMakeLists.txt</code>，如图所示。<br><img src=\"/images/20190716QT/16.png\" alt=\"16.png\"></p>\n<p>并在<code>CMakeLists.txt</code>中添加如下内容：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake_minimum_required(VERSION <span class=\"number\">2.8</span><span class=\"number\">.11</span> FATAL_ERROR)</span><br><span class=\"line\">project(QtHelloWorld)</span><br><span class=\"line\"><span class=\"built_in\">set</span>(CMAKE_INCLUDE_CURRENT_DIR ON)</span><br><span class=\"line\"><span class=\"built_in\">set</span>(CMAKE_AUTOMOC ON)</span><br><span class=\"line\"><span class=\"built_in\">set</span>(CMAKE_AUTOUIC ON)</span><br><span class=\"line\"><span class=\"built_in\">set</span>(CMAKE_AUTORCC ON)</span><br><span class=\"line\"></span><br><span class=\"line\">find_package(Qt5 REQUIRED Widgets)</span><br><span class=\"line\"> qt5_wrap_cpp( MOC widget.h)</span><br><span class=\"line\">qt5_wrap_ui( UIC widget.ui)</span><br><span class=\"line\">add_executable(QtHelloWorld main.cpp widget.cpp widget.h widget.ui $&#123;RESOURCE_DIR&#125;)</span><br><span class=\"line\">target_link_libraries(QtHelloWorld Qt5::Widgets)</span><br></pre></td></tr></table></figure>\n\n<p>接下来尝试使用cmake对工程进行编译。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd 工程所在目录</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> build</span><br><span class=\"line\">cd build</span><br><span class=\"line\">make -j2</span><br><span class=\"line\">./QtHelloWorld</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"程序运行结果\"><a href=\"#程序运行结果\" class=\"headerlink\" title=\"程序运行结果\"></a>程序运行结果</h1><p><img src=\"/images/20190716QT/08.png\" alt=\"08.png\"></p>\n<p>至此，完成了通过QT Creator创建工程并通过IDE直接运行或者使用cmake来编译运行工程的示例。</p>","popularPost_tmp_postPath":true,"eyeCatchImage":"/images/20190716QT/01.png","popularPost_tmp_gaData":{"updated":"Wed Jan 29 2020 21:57:52 GMT+0800 (China Standard Time)","title":"Linux下QT环境的配置","path":"archives/24574.html","eyeCatchImage":"/images/20190716QT/01.png","excerpt":"介绍QT环境的安装和CMake的联合使用。","date":{"_isAMomentObject":true,"_i":"2019-07-11T11:00:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2019-07-11T11:00:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"工科生的基本功 > 快乐码农","tags":["Library","C++","QT"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":2730},{"title":"Linux下boost库的安装","description":"介绍boost库的安装方法。","date":"2019-07-30T11:00:00.000Z","abbrlink":45371,"_content":"\n> 开发环境：Ubuntu16.04 LTS、 boost 1.69。 \n\n<!-- more -->\n\n# 前言\n\nboost库是子Linux环境下用来做串口通信的一个库，本篇主要介绍该库的安装方法。\n\n# boost库的安装\n\n## 下载安装包\n\n可以从[此链接](https://sourceforge.net/projects/boost/files/boost/1.69.0/)下载相应的boost 1.69的安装包，也可以自行从官网上下载安装包。下载完成后，右键解压，极好存放的路径。\n\n## 安装过程\n\n在Terminal中，打开安装包存放路径，执行下列语句进行安装。\n\n```c++\ncd 安装包存放路径\n./boostrap.sh\n./b2\nsudo ./b2 --prefix=/usr/local install\n```\n\n> 参考链接[Linux下编译安装boost 1.69库全过程](https://www.linuxidc.com/Linux/2019-03/157605.htm)\n\n# 低版本boost库的安装\n\n由于在学习中科院的ROS安装过程中，编译时出现了如下错误，看错误应该是在/usr/local/boost库中调用出错，查资料应该是boost库安装版本过高(当然也可能是由于安装时路径出错，应该在/usr/local路径中)。\n\n![03.png]( /images/20190730boost/03.png)\n\n![02.png]( /images/20190730boost/02.png)\n\n于是本节开始提到的两个路径中使用`sudo rm -rf boost`强制删掉boost，重新在/usr/local路径中安装boost，再次编译，通过！\n\n![01.png]( /images/20190730boost/01.png)\n","source":"_posts/2019-07-30-LinuxÏÂboost¿âµÄ°²×°.md","raw":"---\ntitle: Linux下boost库的安装\ndescription: 介绍boost库的安装方法。\ndate: '2019.07.30.11:00'\ncategories:\n  - 工科生的基本功\n  - 快乐码农\ntags:\n  - Linux\n  - Library\nabbrlink: 45371\n---\n\n> 开发环境：Ubuntu16.04 LTS、 boost 1.69。 \n\n<!-- more -->\n\n# 前言\n\nboost库是子Linux环境下用来做串口通信的一个库，本篇主要介绍该库的安装方法。\n\n# boost库的安装\n\n## 下载安装包\n\n可以从[此链接](https://sourceforge.net/projects/boost/files/boost/1.69.0/)下载相应的boost 1.69的安装包，也可以自行从官网上下载安装包。下载完成后，右键解压，极好存放的路径。\n\n## 安装过程\n\n在Terminal中，打开安装包存放路径，执行下列语句进行安装。\n\n```c++\ncd 安装包存放路径\n./boostrap.sh\n./b2\nsudo ./b2 --prefix=/usr/local install\n```\n\n> 参考链接[Linux下编译安装boost 1.69库全过程](https://www.linuxidc.com/Linux/2019-03/157605.htm)\n\n# 低版本boost库的安装\n\n由于在学习中科院的ROS安装过程中，编译时出现了如下错误，看错误应该是在/usr/local/boost库中调用出错，查资料应该是boost库安装版本过高(当然也可能是由于安装时路径出错，应该在/usr/local路径中)。\n\n![03.png]( /images/20190730boost/03.png)\n\n![02.png]( /images/20190730boost/02.png)\n\n于是本节开始提到的两个路径中使用`sudo rm -rf boost`强制删掉boost，重新在/usr/local路径中安装boost，再次编译，通过！\n\n![01.png]( /images/20190730boost/01.png)\n","slug":"2019-07-30-LinuxÏÂboost¿âµÄ°²×°","published":1,"updated":"2020-01-29T13:57:52.768Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck60spy9p001eda55bspm8671","content":"<blockquote>\n<p>开发环境：Ubuntu16.04 LTS、 boost 1.69。 </p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>boost库是子Linux环境下用来做串口通信的一个库，本篇主要介绍该库的安装方法。</p>\n<h1 id=\"boost库的安装\"><a href=\"#boost库的安装\" class=\"headerlink\" title=\"boost库的安装\"></a>boost库的安装</h1><h2 id=\"下载安装包\"><a href=\"#下载安装包\" class=\"headerlink\" title=\"下载安装包\"></a>下载安装包</h2><p>可以从<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zb3VyY2Vmb3JnZS5uZXQvcHJvamVjdHMvYm9vc3QvZmlsZXMvYm9vc3QvMS42OS4wLw==\" title=\"https://sourceforge.net/projects/boost/files/boost/1.69.0/\">此链接<i class=\"fa fa-external-link\"></i></span>下载相应的boost 1.69的安装包，也可以自行从官网上下载安装包。下载完成后，右键解压，极好存放的路径。</p>\n<h2 id=\"安装过程\"><a href=\"#安装过程\" class=\"headerlink\" title=\"安装过程\"></a>安装过程</h2><p>在Terminal中，打开安装包存放路径，执行下列语句进行安装。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd 安装包存放路径</span><br><span class=\"line\">./boostrap.sh</span><br><span class=\"line\">./b2</span><br><span class=\"line\">sudo ./b2 --prefix=/usr/local install</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>参考链接<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGludXhpZGMuY29tL0xpbnV4LzIwMTktMDMvMTU3NjA1Lmh0bQ==\" title=\"https://www.linuxidc.com/Linux/2019-03/157605.htm\">Linux下编译安装boost 1.69库全过程<i class=\"fa fa-external-link\"></i></span></p>\n</blockquote>\n<h1 id=\"低版本boost库的安装\"><a href=\"#低版本boost库的安装\" class=\"headerlink\" title=\"低版本boost库的安装\"></a>低版本boost库的安装</h1><p>由于在学习中科院的ROS安装过程中，编译时出现了如下错误，看错误应该是在/usr/local/boost库中调用出错，查资料应该是boost库安装版本过高(当然也可能是由于安装时路径出错，应该在/usr/local路径中)。</p>\n<p><img src=\"/images/20190730boost/03.png\" alt=\"03.png\"></p>\n<p><img src=\"/images/20190730boost/02.png\" alt=\"02.png\"></p>\n<p>于是本节开始提到的两个路径中使用<code>sudo rm -rf boost</code>强制删掉boost，重新在/usr/local路径中安装boost，再次编译，通过！</p>\n<p><img src=\"/images/20190730boost/01.png\" alt=\"01.png\"></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>开发环境：Ubuntu16.04 LTS、 boost 1.69。 </p>\n</blockquote>","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>boost库是子Linux环境下用来做串口通信的一个库，本篇主要介绍该库的安装方法。</p>\n<h1 id=\"boost库的安装\"><a href=\"#boost库的安装\" class=\"headerlink\" title=\"boost库的安装\"></a>boost库的安装</h1><h2 id=\"下载安装包\"><a href=\"#下载安装包\" class=\"headerlink\" title=\"下载安装包\"></a>下载安装包</h2><p>可以从<a href=\"https://sourceforge.net/projects/boost/files/boost/1.69.0/\" target=\"_blank\" rel=\"noopener\">此链接</a>下载相应的boost 1.69的安装包，也可以自行从官网上下载安装包。下载完成后，右键解压，极好存放的路径。</p>\n<h2 id=\"安装过程\"><a href=\"#安装过程\" class=\"headerlink\" title=\"安装过程\"></a>安装过程</h2><p>在Terminal中，打开安装包存放路径，执行下列语句进行安装。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd 安装包存放路径</span><br><span class=\"line\">./boostrap.sh</span><br><span class=\"line\">./b2</span><br><span class=\"line\">sudo ./b2 --prefix=/usr/local install</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>参考链接<a href=\"https://www.linuxidc.com/Linux/2019-03/157605.htm\" target=\"_blank\" rel=\"noopener\">Linux下编译安装boost 1.69库全过程</a></p>\n</blockquote>\n<h1 id=\"低版本boost库的安装\"><a href=\"#低版本boost库的安装\" class=\"headerlink\" title=\"低版本boost库的安装\"></a>低版本boost库的安装</h1><p>由于在学习中科院的ROS安装过程中，编译时出现了如下错误，看错误应该是在/usr/local/boost库中调用出错，查资料应该是boost库安装版本过高(当然也可能是由于安装时路径出错，应该在/usr/local路径中)。</p>\n<p><img src=\"/images/20190730boost/03.png\" alt=\"03.png\"></p>\n<p><img src=\"/images/20190730boost/02.png\" alt=\"02.png\"></p>\n<p>于是本节开始提到的两个路径中使用<code>sudo rm -rf boost</code>强制删掉boost，重新在/usr/local路径中安装boost，再次编译，通过！</p>\n<p><img src=\"/images/20190730boost/01.png\" alt=\"01.png\"></p>","popularPost_tmp_postPath":true,"eyeCatchImage":"/images/20190730boost/03.png","popularPost_tmp_gaData":{"updated":"Wed Jan 29 2020 21:57:52 GMT+0800 (China Standard Time)","title":"Linux下boost库的安装","path":"archives/45371.html","eyeCatchImage":"/images/20190730boost/03.png","excerpt":"介绍boost库的安装方法。","date":{"_isAMomentObject":true,"_i":"2019-07-30T11:00:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2019-07-30T11:00:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"工科生的基本功 > 快乐码农","tags":["Library","Linux"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":470},{"title":"Linux下共享内存的使用方法","description":"介绍共享内存的使用方法。","date":"2019-07-31T11:00:00.000Z","abbrlink":10600,"_content":"\n> 开发环境：Ubuntu16.04 LTS。 \n\n<!-- more -->\n\n# 前言\n\n共享存储允许两个或多个进程共享一个给定的存储区，是进程间通信最快的一种方式。不要同时对共享存储空间进行写操作。通常，可以将信号量用于同步共享存储访问。\n\n最简单的共享内存的使用流程如下：\n\n1. ftok函数生成键值\n\n2. shmget函数创建共享内存空间\n\n3. shmat函数获取第一个可用共享内存空间的地址\n\n4. shmdt函数进行分离（对共享存储段操作结束时的步骤，并不是从系统中删除共享内存和结构）\n\n5. shmctl函数进行删除共享存储空间\n\n上述的五个函数都是系统自带的函数，接下来对它们一一介绍。\n\n# 系统函数介绍\n\n## ftok函数\n\n1.功能：生成键值。每一个共享存储段都有一个对应的键值（key）相关联（消息队列、信号量也同样需要）。\n\n2.所需头文件：\n\n```c++\n#include<sys/ipc.h>\n```\n\n3.函数原型：\n\n```c++\nkey_t ftok(const char *path ,int id);\n```\n\n> path为一个已存在的路径名；id为0~255之间的一个数值，代表项目ID。\n\n4.返回值：成功返回键值（相当于32位的int），出错返回-1。\n\n5.示例：\n\n```c++\nkey_t key = ftok( “/tmp”, 66);\n```\n\n## shmget函数\n\n1.功能：创建共享存储空间并返回一个共享存储标识符。\n\n2.所需头文件：\n\n```c++\n#include<sys/shm.h>\n```\n\n3.函数原型：\n\n```c++\nint shmget(key_t key, size_t size,int flag);\n```\n> key为ftok生成的键值。\n> size为共享内存的长度，以字节为单位。\n> flag为所需要的操作和权限，可以用来创建一个共享存储空间并返回一个标识符或者获得一个共享标识符。所取值可为IPC_CREAT、IPC_CREAT | IPC_EXCL。\n> flag的值为IPC_CREAT：如果不存在key值的共享存储空间，且权限不为0，则创建共享存储空间，并返回一个共享存储标识符。如果存在，则直接返回共享存储标识符。\n> flag的值为 IPC_CREAT | IPC_EXCL：如果不存在key值的共享存储空间，且权限不为0，则创建共享存储空间，并返回一个共享存储标识符。如果存在，则产生错误。\n\n4.返回值：成功返回共享存储ID，出错返回-1。\n\n5.示例：\n\n```c++\nint id = shmget(key,4096,IPC_CREAT|0666);\n```\n\n> 说明：创建一个大小为4096个字节的权限为0666（所有用户可读可写，具体查询linux权限相关内容）的共享存储空间，并返回一个共享存储标识符，如果key值已经存在有共享存储空间了，则直接返回一个共享存储标识符。\n\n```c++\nint id = shmget(key, 4096, IPC_CREAT|IPC_EXCL|0666);\n```\n\n> 说明：创建一个大小为4096个字节的权限为0666（所有用户可读可写，具体查询linux权限相关内容）的共享存储空间，并返回一个整形共享存储标识符，如果key值已经存在有共享存储空间了，则出错返回-1。\n\n## shmat函数\n\n1.功能：获取第一个可用共享内存空间的地址。\n\n2.所需头文件：\n\n```c++\n#include<sys/shm.h>\n```\n\n3.函数原型：\n\n```c++\nvoid *shmat(int shmid, const void *addr, int flag);\n```\n\n> shmid为shmget生成的共享存储标识符。\n> addr指定共享内存出现在进程内存地址的什么位置，直接指定为NULL让内核自己决定一个合适的地址位置。\n> flag为对数据的操作，如果指定为SHM_RDONLY则以只读方式连接此段，其他值为读写方式连接此段。\n> 翻阅linux下shm.c文件得到#define SHM_RDONLY      010000  // read-only access 。\n> flag的值为 IPC_CREAT | IPC_EXCL：如果不存在key值的共享存储空间，且权限不为0，则创建共享存储空间，并返回一个共享存储标识符。如果存在，则产生错误。\n\n4.返回值：成功返回指向共享存储段的指针；错误返回-1（打印出指针的值为全F）。\n\n5.示例：\n\n```c++\nchar *addr  = shmat(id, NULL, 0);      //返回第一个可用的共享内存地址的指针的值给addr \n```\n\n## shmdt函数\n\n1.功能：当不需要对此共享内存进行操作时候，调用shmdt函数进行分离，不是删除此共享存储空间哟。\n\n2.所需头文件：\n\n```c++\n#include<sys/shm.h>\n```\n\n3.函数原型：\n\n```c++\nint shmdt(const void *addr);\n```\n\n> addr为shmat函数返回的地址指针。\n\n4.返回值：成功返回0；错误返回-1。\n\n5.示例：\n\n```c++\nint ret = shmdt(addr);\n```\n\n## shmctl函数\n\n1.功能：对共享内存进行控制。最简单的操作就是删除共享存储空间了，也可以获取和改变共享内存的状态。\n\n2.所需头文件：\n\n```c++\n#include<sys/shm.h>\n```\n\n3.函数原型：\n\n```c++\nint shmctl(int shmid, int cmd, struct shmid_ds *buf);\n```\n\n> shmid就是shmget函数返回的共享存储标识符。\n> cmd有三个:IPC_RMID——删除共享内存；\n>          IPC_STAT——得到共享内存的状态，把共享内存的shmid_ds结构复制到buf中；\n>          IPC_SET——改变共享内存的状态，把buf所指的shmid_ds结构中的uid、gid、mode复制到共享内存的shmid_ds结构内。（内核为每个共享存储段维护着一个结构，结构名为shmid_ds，这里就不讲啦，里面存放着共享内存的大小，pid，存放时\n>          间等一些参数）\n> buf就是结构体shmid_ds。\n\n4.返回值：成功返回0；错误返回-1。\n\n5.示例：\n\n```c++\nint ret = shmctl(id, IPC_RMID,NULL);    //删除id号的共享存储空间\n```\n\n# Linux共享内存的查看方法\n\n1.使用`ipcs -m`命令可以查看当前系统所有的共享内存空间信息，如下图所示。\n\n![01]( /images/20190731shrmm/01.png)\n\n2.如果程序创建了一个共享内存段，但没有被正确销毁，可能在下次打开程序时出现错误，这时可使用`ipcrm -m shmid`命令先删除共享内存段。例如要删除上图中的最后一块共享内存，可使用命令`ipcrm -m 6455308`，删除后的效果如下图所示。\n\n![02]( /images/20190731shrmm/02.png)\n\n3.在Linux下，如果你申请24字节大小的共享存储空间，系统还是会默认给你分配一页的大小，但你还是只能使用这一页上24字节的空间。使用`getconf PAGE_SIZE`命令就能显示出一页的大小。\n\n# 共享内存使用示例程序\n\n## 整体介绍\n\n本例采用两个独立程序(server与client)来进行共享内存测试。首次打开程序时，先用server开辟一段共享内存，再用client连接到该共享内存；之后使用时，server与client可以互相向共享内存中读和写。两个程序都具有如下目录结构：\n\n![07]( /images/20190731shrmm/07.png)\n\n两个程序的区别是在main.cpp和CMakeLists.txt中。\n\n## CKX.h\n该头文件只是定义一个数据类，用来向内存中写入姓名和年龄。\n\n```c++\n#ifndef  __CKX_H_\n#define  __CKX_H_\n\n#define NAME_LEN  20\n\nclass ckx {\n public:\n  char name[NAME_LEN];\n  int age;\n  ckx() {};\n};\n\n#endif // __CKX_H_\n```\n\n## CShareMemory.h\n\n```c++\n#ifndef  __CSHAREMEMORY_H_\n#define  __CSHAREMEMORY_H_\n\n#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n#include  <sys/types.h>\n#include  <sys/ipc.h>\n#include  <sys/shm.h>\n\nclass CShareMemory {\n public:\n  CShareMemory() {addr = NULL; shmid=0; size=0;};\n  int create_ipc(int key_id, int ipc_size);\n  int get_ipc(int key_id, int ipc_size);\n  int destroy_sharememory();\n  int close_shm();\n  void* get_address();\n private:\n  int shmid;\n  int size;\n  void* addr;\n  int sharememory(int key_id, int ipc_size, int flag);\n};\n\n#endif // __CSHAREMEMORY_H_\n```\n\n## CShareMemory.cpp\n\n```c++\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n#include<sys/types.h>\n#include<sys/shm.h>\n#include \"CShareMemory.h\"\nint CShareMemory::sharememory(int key_id, int ipc_size, int flag) {\n  key_t key = ftok(\"/tmp\", key_id);\n  if (key < 0) {\n    printf(\"get key error\\n\");\n    return -1;\n  }\n  shmid = shmget(key, ipc_size, flag);\n  addr = shmat(shmid, (void *)0, 0);\n  if (shmid < 0) {\n    printf(\"get shmid error\\n\");\n    return -1;\n  }\n  return shmid;\n}\n\nint CShareMemory::create_ipc(int key_id, int ipc_size) {\n  return sharememory(key_id, ipc_size, IPC_CREAT|IPC_EXCL|0666);\n}\n\nint CShareMemory::get_ipc(int key_id, int ipc_size) {\n  return sharememory(key_id, ipc_size, IPC_CREAT|0666);\n}\n\nint CShareMemory::destroy_sharememory() {\n  return shmctl(shmid, IPC_RMID, NULL);\n}\n\n/**\n * @brief  free the share memory\n * <long-description>\n *\n * @param\n * @return <ReturnValue>\n */\nint CShareMemory::close_shm()\n{\n    int rtn;\n    rtn = shmdt(addr);\n    return rtn;\n}\n\n/**\n * @brief get address of share memory\n * <long-description>\n *\n * @param\n * @return <ReturnValue>\n */\nvoid* CShareMemory::get_address()\n{\n    if (addr == NULL) return NULL;\n    return (void*) addr;\n}\n\n```\n\n## Server的main.cpp\n\n```c++\n#include<iostream>\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n#include<sys/shm.h>\n#include<sys/types.h>\n#include<stdlib.h>\n#include \"CKX.h\"\n#include \"CShareMemory.h\"\n\nusing namespace std;\n\nint main() {\n  int i = 0;\n  int key = 66;\n  ckx *p2 = new ckx();\n  CShareMemory shmm;\n  int id = shmm.create_ipc(key, sizeof(*p2));\n  cout << \"sizeof *p2 is: \" << sizeof(*p2) << endl;\n  cout << \"id = \" << id << endl;\n  if (id < 0) {\n    cout << \"Create sharememory error!\" << endl;\n    return 0;\n  }\n\n  while(1) {\n    cout << \"\\n\\n1.input data to sharememory\\n2.get sharememory data\\n3.destroy sharememory\\ninput select:\" << endl;\n    cin >> i;\n    if(i > 3 || i < 1) {\n      cout << \"Input error!\" << endl;\n    }\n    id = shmm.get_ipc(key, sizeof(*p2));\n    cout << \"id = \" << id << endl;\n    if(id < 0) {\n      cout << \"Get sharememory error!\" << endl;\n      break;\n    }\n    p2 = (ckx *)shmat(id, NULL, 0);\n    if(p2 < 0) {\n      cout << \"Get sharememory address error!\" << endl;\n      p2 = NULL;\n      break;\n    }\n    switch (i) {\n      case 1: {\n\tchar name[NAME_LEN];\n\tint age = 0;\n\tcout << \"Input name:\" << endl;\n\tfflush(stdin);\n\tgetchar();\n\tgets(name);\n\tstrcpy(p2->name, name);\n\tcout << \"Input age: \" << endl;\n\tcin >> age;\n\tp2->age = age;\n\tcout << \"Write success!\" << endl;\n\tbreak;\n      }\n      case 2: {\n\tcout << \"name: \" << p2->name << \"\\t\" << \"age: \" << p2->age << endl;\n\tbreak;\n      }\n      case 3: {\n\tif(shmm.destroy_sharememory() == -1)\n\t  cout << \"-1\" << endl;\n\tid = 0;\n\tbreak;\n      }\n      default:\n\tbreak;\n    }\n\n    if(shmm.close_shm() == -1) {\n      cout << \"shmdt error!\" << endl;\n      break;\n    }\n    if(id == 0) {\n      break;\n    }\n  }\n}\n\n\n```\n\n## Server的CMakeLists.txt\n\n```c++\ncmake_minimum_required(VERSION 3.1.0)\nproject(shrmmTestServer)\nset (CMAKE_CXX_STANDARD 11)\ninclude_directories(\"./include/\")\nadd_executable(shrmmTestServer main.cpp ./src/CShareMemory.cpp)\n```\n\n## Client的main.cpp\n\n```c++\n#include<iostream>\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n#include<sys/shm.h>\n#include<sys/types.h>\n#include<stdlib.h>\n#include \"CKX.h\"\n#include \"CShareMemory.h\"\n\nusing namespace std;\n\nint main() {\n  int i = 0;\n  int key = 66;\n  ckx *p2 = new ckx();\n  CShareMemory shmm;\n  int id = 0;\n  cout << \"sizeof *p2 is: \" << sizeof(*p2) << endl;\n  cout << \"id = \" << id << endl;\n\n  if (id < 0) {\n    cout << \"Create sharememory error!\" << endl;\n    return 0;\n  }\n\n  while(1) {\n    cout << \"\\n\\n1.input data to sharememory\\n2.get sharememory data\\n3.destroy sharememory\\ninput select:\" << endl;\n    cin >> i;\n    if(i > 3 || i < 1) {\n      cout << \"Input error!\" << endl;\n    }\n    id = shmm.get_ipc(key, sizeof(*p2));\n    cout << \"id = \" << id << endl;\n    if(id < 0) {\n      cout << \"Get sharememory error!\" << endl;\n      break;\n    }\n    p2 = (ckx *)shmat(id, NULL, 0);\n    if(p2 < 0) {\n      cout << \"Get sharememory address error!\" << endl;\n      p2 = NULL;\n      break;\n    }\n    switch (i) {\n      case 1: {\n\tchar name[NAME_LEN];\n\tint age = 0;\n\tcout << \"Input name:\" << endl;\n\tfflush(stdin);\n\tgetchar();\n\tgets(name);\n\tstrcpy(p2->name, name);\n\tcout << \"Input age: \" << endl;\n\tcin >> age;\n\tp2->age = age;\n\tcout << \"Write success!\" << endl;\n\tbreak;\n      }\n      case 2: {\n\tcout << \"name: \" << p2->name << \"\\t\" << \"age: \" << p2->age << endl;\n\tbreak;\n      }\n      case 3: {\n\tif(shmm.destroy_sharememory() == -1)\n\t  cout << \"-1\" << endl;\n\tid = 0;\n\tbreak;\n      }\n      default:\n\tbreak;\n    }\n\n    if(shmm.close_shm() == -1) {\n      cout << \"shmdt error!\" << endl;\n      break;\n    }\n    if(id == 0) {\n      break;\n    }\n  }\n}\n```\n\n## Server的CMakeLists.txt\n\n```c++\ncmake_minimum_required(VERSION 3.1.0)\nproject(shrmmTestClient)\nset (CMAKE_CXX_STANDARD 11)\ninclude_directories(\"./include/\")\nadd_executable(shrmmTestClient main.cpp ./src/CShareMemory.cpp)\n```\n\n## 程序运行结果\n\n1.从server中输入名字和年龄存储到共享内存中，并从client中读取：\n\n![03]( /images/20190731shrmm/03.png)\n![04]( /images/20190731shrmm/04.png)\n\n2.从client中输入名字和年龄存储到共享内存中，并从server中读取：\n\n![05]( /images/20190731shrmm/05.png)\n![06]( s/images/20190731shrmm/06.png)\n\n> Note：自己创建build文件夹并进行编译！\n\n> 参考链接[Linux下共享内存编程(共享存储空间)](https://blog.csdn.net/qq_27664167/article/details/81277096)\n","source":"_posts/2019-07-31-LinuxÏÂ¹²ÏíÄÚ´æµÄÊ¹ÓÃ·½·¨.md","raw":"---\ntitle: Linux下共享内存的使用方法\ndescription: 介绍共享内存的使用方法。\ndate: '2019.07.31.11:00'\ncategories:\n  - 工科生的基本功\n  - 快乐码农\ntags:\n  - Linux\n  - C++\n  - Library\nabbrlink: 10600\n---\n\n> 开发环境：Ubuntu16.04 LTS。 \n\n<!-- more -->\n\n# 前言\n\n共享存储允许两个或多个进程共享一个给定的存储区，是进程间通信最快的一种方式。不要同时对共享存储空间进行写操作。通常，可以将信号量用于同步共享存储访问。\n\n最简单的共享内存的使用流程如下：\n\n1. ftok函数生成键值\n\n2. shmget函数创建共享内存空间\n\n3. shmat函数获取第一个可用共享内存空间的地址\n\n4. shmdt函数进行分离（对共享存储段操作结束时的步骤，并不是从系统中删除共享内存和结构）\n\n5. shmctl函数进行删除共享存储空间\n\n上述的五个函数都是系统自带的函数，接下来对它们一一介绍。\n\n# 系统函数介绍\n\n## ftok函数\n\n1.功能：生成键值。每一个共享存储段都有一个对应的键值（key）相关联（消息队列、信号量也同样需要）。\n\n2.所需头文件：\n\n```c++\n#include<sys/ipc.h>\n```\n\n3.函数原型：\n\n```c++\nkey_t ftok(const char *path ,int id);\n```\n\n> path为一个已存在的路径名；id为0~255之间的一个数值，代表项目ID。\n\n4.返回值：成功返回键值（相当于32位的int），出错返回-1。\n\n5.示例：\n\n```c++\nkey_t key = ftok( “/tmp”, 66);\n```\n\n## shmget函数\n\n1.功能：创建共享存储空间并返回一个共享存储标识符。\n\n2.所需头文件：\n\n```c++\n#include<sys/shm.h>\n```\n\n3.函数原型：\n\n```c++\nint shmget(key_t key, size_t size,int flag);\n```\n> key为ftok生成的键值。\n> size为共享内存的长度，以字节为单位。\n> flag为所需要的操作和权限，可以用来创建一个共享存储空间并返回一个标识符或者获得一个共享标识符。所取值可为IPC_CREAT、IPC_CREAT | IPC_EXCL。\n> flag的值为IPC_CREAT：如果不存在key值的共享存储空间，且权限不为0，则创建共享存储空间，并返回一个共享存储标识符。如果存在，则直接返回共享存储标识符。\n> flag的值为 IPC_CREAT | IPC_EXCL：如果不存在key值的共享存储空间，且权限不为0，则创建共享存储空间，并返回一个共享存储标识符。如果存在，则产生错误。\n\n4.返回值：成功返回共享存储ID，出错返回-1。\n\n5.示例：\n\n```c++\nint id = shmget(key,4096,IPC_CREAT|0666);\n```\n\n> 说明：创建一个大小为4096个字节的权限为0666（所有用户可读可写，具体查询linux权限相关内容）的共享存储空间，并返回一个共享存储标识符，如果key值已经存在有共享存储空间了，则直接返回一个共享存储标识符。\n\n```c++\nint id = shmget(key, 4096, IPC_CREAT|IPC_EXCL|0666);\n```\n\n> 说明：创建一个大小为4096个字节的权限为0666（所有用户可读可写，具体查询linux权限相关内容）的共享存储空间，并返回一个整形共享存储标识符，如果key值已经存在有共享存储空间了，则出错返回-1。\n\n## shmat函数\n\n1.功能：获取第一个可用共享内存空间的地址。\n\n2.所需头文件：\n\n```c++\n#include<sys/shm.h>\n```\n\n3.函数原型：\n\n```c++\nvoid *shmat(int shmid, const void *addr, int flag);\n```\n\n> shmid为shmget生成的共享存储标识符。\n> addr指定共享内存出现在进程内存地址的什么位置，直接指定为NULL让内核自己决定一个合适的地址位置。\n> flag为对数据的操作，如果指定为SHM_RDONLY则以只读方式连接此段，其他值为读写方式连接此段。\n> 翻阅linux下shm.c文件得到#define SHM_RDONLY      010000  // read-only access 。\n> flag的值为 IPC_CREAT | IPC_EXCL：如果不存在key值的共享存储空间，且权限不为0，则创建共享存储空间，并返回一个共享存储标识符。如果存在，则产生错误。\n\n4.返回值：成功返回指向共享存储段的指针；错误返回-1（打印出指针的值为全F）。\n\n5.示例：\n\n```c++\nchar *addr  = shmat(id, NULL, 0);      //返回第一个可用的共享内存地址的指针的值给addr \n```\n\n## shmdt函数\n\n1.功能：当不需要对此共享内存进行操作时候，调用shmdt函数进行分离，不是删除此共享存储空间哟。\n\n2.所需头文件：\n\n```c++\n#include<sys/shm.h>\n```\n\n3.函数原型：\n\n```c++\nint shmdt(const void *addr);\n```\n\n> addr为shmat函数返回的地址指针。\n\n4.返回值：成功返回0；错误返回-1。\n\n5.示例：\n\n```c++\nint ret = shmdt(addr);\n```\n\n## shmctl函数\n\n1.功能：对共享内存进行控制。最简单的操作就是删除共享存储空间了，也可以获取和改变共享内存的状态。\n\n2.所需头文件：\n\n```c++\n#include<sys/shm.h>\n```\n\n3.函数原型：\n\n```c++\nint shmctl(int shmid, int cmd, struct shmid_ds *buf);\n```\n\n> shmid就是shmget函数返回的共享存储标识符。\n> cmd有三个:IPC_RMID——删除共享内存；\n>          IPC_STAT——得到共享内存的状态，把共享内存的shmid_ds结构复制到buf中；\n>          IPC_SET——改变共享内存的状态，把buf所指的shmid_ds结构中的uid、gid、mode复制到共享内存的shmid_ds结构内。（内核为每个共享存储段维护着一个结构，结构名为shmid_ds，这里就不讲啦，里面存放着共享内存的大小，pid，存放时\n>          间等一些参数）\n> buf就是结构体shmid_ds。\n\n4.返回值：成功返回0；错误返回-1。\n\n5.示例：\n\n```c++\nint ret = shmctl(id, IPC_RMID,NULL);    //删除id号的共享存储空间\n```\n\n# Linux共享内存的查看方法\n\n1.使用`ipcs -m`命令可以查看当前系统所有的共享内存空间信息，如下图所示。\n\n![01]( /images/20190731shrmm/01.png)\n\n2.如果程序创建了一个共享内存段，但没有被正确销毁，可能在下次打开程序时出现错误，这时可使用`ipcrm -m shmid`命令先删除共享内存段。例如要删除上图中的最后一块共享内存，可使用命令`ipcrm -m 6455308`，删除后的效果如下图所示。\n\n![02]( /images/20190731shrmm/02.png)\n\n3.在Linux下，如果你申请24字节大小的共享存储空间，系统还是会默认给你分配一页的大小，但你还是只能使用这一页上24字节的空间。使用`getconf PAGE_SIZE`命令就能显示出一页的大小。\n\n# 共享内存使用示例程序\n\n## 整体介绍\n\n本例采用两个独立程序(server与client)来进行共享内存测试。首次打开程序时，先用server开辟一段共享内存，再用client连接到该共享内存；之后使用时，server与client可以互相向共享内存中读和写。两个程序都具有如下目录结构：\n\n![07]( /images/20190731shrmm/07.png)\n\n两个程序的区别是在main.cpp和CMakeLists.txt中。\n\n## CKX.h\n该头文件只是定义一个数据类，用来向内存中写入姓名和年龄。\n\n```c++\n#ifndef  __CKX_H_\n#define  __CKX_H_\n\n#define NAME_LEN  20\n\nclass ckx {\n public:\n  char name[NAME_LEN];\n  int age;\n  ckx() {};\n};\n\n#endif // __CKX_H_\n```\n\n## CShareMemory.h\n\n```c++\n#ifndef  __CSHAREMEMORY_H_\n#define  __CSHAREMEMORY_H_\n\n#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n#include  <sys/types.h>\n#include  <sys/ipc.h>\n#include  <sys/shm.h>\n\nclass CShareMemory {\n public:\n  CShareMemory() {addr = NULL; shmid=0; size=0;};\n  int create_ipc(int key_id, int ipc_size);\n  int get_ipc(int key_id, int ipc_size);\n  int destroy_sharememory();\n  int close_shm();\n  void* get_address();\n private:\n  int shmid;\n  int size;\n  void* addr;\n  int sharememory(int key_id, int ipc_size, int flag);\n};\n\n#endif // __CSHAREMEMORY_H_\n```\n\n## CShareMemory.cpp\n\n```c++\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n#include<sys/types.h>\n#include<sys/shm.h>\n#include \"CShareMemory.h\"\nint CShareMemory::sharememory(int key_id, int ipc_size, int flag) {\n  key_t key = ftok(\"/tmp\", key_id);\n  if (key < 0) {\n    printf(\"get key error\\n\");\n    return -1;\n  }\n  shmid = shmget(key, ipc_size, flag);\n  addr = shmat(shmid, (void *)0, 0);\n  if (shmid < 0) {\n    printf(\"get shmid error\\n\");\n    return -1;\n  }\n  return shmid;\n}\n\nint CShareMemory::create_ipc(int key_id, int ipc_size) {\n  return sharememory(key_id, ipc_size, IPC_CREAT|IPC_EXCL|0666);\n}\n\nint CShareMemory::get_ipc(int key_id, int ipc_size) {\n  return sharememory(key_id, ipc_size, IPC_CREAT|0666);\n}\n\nint CShareMemory::destroy_sharememory() {\n  return shmctl(shmid, IPC_RMID, NULL);\n}\n\n/**\n * @brief  free the share memory\n * <long-description>\n *\n * @param\n * @return <ReturnValue>\n */\nint CShareMemory::close_shm()\n{\n    int rtn;\n    rtn = shmdt(addr);\n    return rtn;\n}\n\n/**\n * @brief get address of share memory\n * <long-description>\n *\n * @param\n * @return <ReturnValue>\n */\nvoid* CShareMemory::get_address()\n{\n    if (addr == NULL) return NULL;\n    return (void*) addr;\n}\n\n```\n\n## Server的main.cpp\n\n```c++\n#include<iostream>\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n#include<sys/shm.h>\n#include<sys/types.h>\n#include<stdlib.h>\n#include \"CKX.h\"\n#include \"CShareMemory.h\"\n\nusing namespace std;\n\nint main() {\n  int i = 0;\n  int key = 66;\n  ckx *p2 = new ckx();\n  CShareMemory shmm;\n  int id = shmm.create_ipc(key, sizeof(*p2));\n  cout << \"sizeof *p2 is: \" << sizeof(*p2) << endl;\n  cout << \"id = \" << id << endl;\n  if (id < 0) {\n    cout << \"Create sharememory error!\" << endl;\n    return 0;\n  }\n\n  while(1) {\n    cout << \"\\n\\n1.input data to sharememory\\n2.get sharememory data\\n3.destroy sharememory\\ninput select:\" << endl;\n    cin >> i;\n    if(i > 3 || i < 1) {\n      cout << \"Input error!\" << endl;\n    }\n    id = shmm.get_ipc(key, sizeof(*p2));\n    cout << \"id = \" << id << endl;\n    if(id < 0) {\n      cout << \"Get sharememory error!\" << endl;\n      break;\n    }\n    p2 = (ckx *)shmat(id, NULL, 0);\n    if(p2 < 0) {\n      cout << \"Get sharememory address error!\" << endl;\n      p2 = NULL;\n      break;\n    }\n    switch (i) {\n      case 1: {\n\tchar name[NAME_LEN];\n\tint age = 0;\n\tcout << \"Input name:\" << endl;\n\tfflush(stdin);\n\tgetchar();\n\tgets(name);\n\tstrcpy(p2->name, name);\n\tcout << \"Input age: \" << endl;\n\tcin >> age;\n\tp2->age = age;\n\tcout << \"Write success!\" << endl;\n\tbreak;\n      }\n      case 2: {\n\tcout << \"name: \" << p2->name << \"\\t\" << \"age: \" << p2->age << endl;\n\tbreak;\n      }\n      case 3: {\n\tif(shmm.destroy_sharememory() == -1)\n\t  cout << \"-1\" << endl;\n\tid = 0;\n\tbreak;\n      }\n      default:\n\tbreak;\n    }\n\n    if(shmm.close_shm() == -1) {\n      cout << \"shmdt error!\" << endl;\n      break;\n    }\n    if(id == 0) {\n      break;\n    }\n  }\n}\n\n\n```\n\n## Server的CMakeLists.txt\n\n```c++\ncmake_minimum_required(VERSION 3.1.0)\nproject(shrmmTestServer)\nset (CMAKE_CXX_STANDARD 11)\ninclude_directories(\"./include/\")\nadd_executable(shrmmTestServer main.cpp ./src/CShareMemory.cpp)\n```\n\n## Client的main.cpp\n\n```c++\n#include<iostream>\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n#include<sys/shm.h>\n#include<sys/types.h>\n#include<stdlib.h>\n#include \"CKX.h\"\n#include \"CShareMemory.h\"\n\nusing namespace std;\n\nint main() {\n  int i = 0;\n  int key = 66;\n  ckx *p2 = new ckx();\n  CShareMemory shmm;\n  int id = 0;\n  cout << \"sizeof *p2 is: \" << sizeof(*p2) << endl;\n  cout << \"id = \" << id << endl;\n\n  if (id < 0) {\n    cout << \"Create sharememory error!\" << endl;\n    return 0;\n  }\n\n  while(1) {\n    cout << \"\\n\\n1.input data to sharememory\\n2.get sharememory data\\n3.destroy sharememory\\ninput select:\" << endl;\n    cin >> i;\n    if(i > 3 || i < 1) {\n      cout << \"Input error!\" << endl;\n    }\n    id = shmm.get_ipc(key, sizeof(*p2));\n    cout << \"id = \" << id << endl;\n    if(id < 0) {\n      cout << \"Get sharememory error!\" << endl;\n      break;\n    }\n    p2 = (ckx *)shmat(id, NULL, 0);\n    if(p2 < 0) {\n      cout << \"Get sharememory address error!\" << endl;\n      p2 = NULL;\n      break;\n    }\n    switch (i) {\n      case 1: {\n\tchar name[NAME_LEN];\n\tint age = 0;\n\tcout << \"Input name:\" << endl;\n\tfflush(stdin);\n\tgetchar();\n\tgets(name);\n\tstrcpy(p2->name, name);\n\tcout << \"Input age: \" << endl;\n\tcin >> age;\n\tp2->age = age;\n\tcout << \"Write success!\" << endl;\n\tbreak;\n      }\n      case 2: {\n\tcout << \"name: \" << p2->name << \"\\t\" << \"age: \" << p2->age << endl;\n\tbreak;\n      }\n      case 3: {\n\tif(shmm.destroy_sharememory() == -1)\n\t  cout << \"-1\" << endl;\n\tid = 0;\n\tbreak;\n      }\n      default:\n\tbreak;\n    }\n\n    if(shmm.close_shm() == -1) {\n      cout << \"shmdt error!\" << endl;\n      break;\n    }\n    if(id == 0) {\n      break;\n    }\n  }\n}\n```\n\n## Server的CMakeLists.txt\n\n```c++\ncmake_minimum_required(VERSION 3.1.0)\nproject(shrmmTestClient)\nset (CMAKE_CXX_STANDARD 11)\ninclude_directories(\"./include/\")\nadd_executable(shrmmTestClient main.cpp ./src/CShareMemory.cpp)\n```\n\n## 程序运行结果\n\n1.从server中输入名字和年龄存储到共享内存中，并从client中读取：\n\n![03]( /images/20190731shrmm/03.png)\n![04]( /images/20190731shrmm/04.png)\n\n2.从client中输入名字和年龄存储到共享内存中，并从server中读取：\n\n![05]( /images/20190731shrmm/05.png)\n![06]( s/images/20190731shrmm/06.png)\n\n> Note：自己创建build文件夹并进行编译！\n\n> 参考链接[Linux下共享内存编程(共享存储空间)](https://blog.csdn.net/qq_27664167/article/details/81277096)\n","slug":"2019-07-31-LinuxÏÂ¹²ÏíÄÚ´æµÄÊ¹ÓÃ·½·¨","published":1,"updated":"2020-01-29T13:57:52.768Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck60spy9r001hda5584o08vte","content":"<blockquote>\n<p>开发环境：Ubuntu16.04 LTS。 </p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>共享存储允许两个或多个进程共享一个给定的存储区，是进程间通信最快的一种方式。不要同时对共享存储空间进行写操作。通常，可以将信号量用于同步共享存储访问。</p>\n<p>最简单的共享内存的使用流程如下：</p>\n<ol>\n<li><p>ftok函数生成键值</p>\n</li>\n<li><p>shmget函数创建共享内存空间</p>\n</li>\n<li><p>shmat函数获取第一个可用共享内存空间的地址</p>\n</li>\n<li><p>shmdt函数进行分离（对共享存储段操作结束时的步骤，并不是从系统中删除共享内存和结构）</p>\n</li>\n<li><p>shmctl函数进行删除共享存储空间</p>\n</li>\n</ol>\n<p>上述的五个函数都是系统自带的函数，接下来对它们一一介绍。</p>\n<h1 id=\"系统函数介绍\"><a href=\"#系统函数介绍\" class=\"headerlink\" title=\"系统函数介绍\"></a>系统函数介绍</h1><h2 id=\"ftok函数\"><a href=\"#ftok函数\" class=\"headerlink\" title=\"ftok函数\"></a>ftok函数</h2><p>1.功能：生成键值。每一个共享存储段都有一个对应的键值（key）相关联（消息队列、信号量也同样需要）。</p>\n<p>2.所需头文件：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/ipc.h&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>3.函数原型：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">key_t</span> <span class=\"title\">ftok</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *path ,<span class=\"keyword\">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>path为一个已存在的路径名；id为0~255之间的一个数值，代表项目ID。</p>\n</blockquote>\n<p>4.返回值：成功返回键值（相当于32位的int），出错返回-1。</p>\n<p>5.示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">key_t</span> key = ftok( “/tmp”, <span class=\"number\">66</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"shmget函数\"><a href=\"#shmget函数\" class=\"headerlink\" title=\"shmget函数\"></a>shmget函数</h2><p>1.功能：创建共享存储空间并返回一个共享存储标识符。</p>\n<p>2.所需头文件：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/shm.h&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>3.函数原型：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">shmget</span><span class=\"params\">(<span class=\"keyword\">key_t</span> key, <span class=\"keyword\">size_t</span> <span class=\"built_in\">size</span>,<span class=\"keyword\">int</span> flag)</span></span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>key为ftok生成的键值。<br>size为共享内存的长度，以字节为单位。<br>flag为所需要的操作和权限，可以用来创建一个共享存储空间并返回一个标识符或者获得一个共享标识符。所取值可为IPC_CREAT、IPC_CREAT | IPC_EXCL。<br>flag的值为IPC_CREAT：如果不存在key值的共享存储空间，且权限不为0，则创建共享存储空间，并返回一个共享存储标识符。如果存在，则直接返回共享存储标识符。<br>flag的值为 IPC_CREAT | IPC_EXCL：如果不存在key值的共享存储空间，且权限不为0，则创建共享存储空间，并返回一个共享存储标识符。如果存在，则产生错误。</p>\n</blockquote>\n<p>4.返回值：成功返回共享存储ID，出错返回-1。</p>\n<p>5.示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> id = shmget(key,<span class=\"number\">4096</span>,IPC_CREAT|<span class=\"number\">0666</span>);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>说明：创建一个大小为4096个字节的权限为0666（所有用户可读可写，具体查询linux权限相关内容）的共享存储空间，并返回一个共享存储标识符，如果key值已经存在有共享存储空间了，则直接返回一个共享存储标识符。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> id = shmget(key, <span class=\"number\">4096</span>, IPC_CREAT|IPC_EXCL|<span class=\"number\">0666</span>);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>说明：创建一个大小为4096个字节的权限为0666（所有用户可读可写，具体查询linux权限相关内容）的共享存储空间，并返回一个整形共享存储标识符，如果key值已经存在有共享存储空间了，则出错返回-1。</p>\n</blockquote>\n<h2 id=\"shmat函数\"><a href=\"#shmat函数\" class=\"headerlink\" title=\"shmat函数\"></a>shmat函数</h2><p>1.功能：获取第一个可用共享内存空间的地址。</p>\n<p>2.所需头文件：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/shm.h&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>3.函数原型：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> *<span class=\"title\">shmat</span><span class=\"params\">(<span class=\"keyword\">int</span> shmid, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *addr, <span class=\"keyword\">int</span> flag)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>shmid为shmget生成的共享存储标识符。<br>addr指定共享内存出现在进程内存地址的什么位置，直接指定为NULL让内核自己决定一个合适的地址位置。<br>flag为对数据的操作，如果指定为SHM_RDONLY则以只读方式连接此段，其他值为读写方式连接此段。<br>翻阅linux下shm.c文件得到#define SHM_RDONLY      010000  // read-only access 。<br>flag的值为 IPC_CREAT | IPC_EXCL：如果不存在key值的共享存储空间，且权限不为0，则创建共享存储空间，并返回一个共享存储标识符。如果存在，则产生错误。</p>\n</blockquote>\n<p>4.返回值：成功返回指向共享存储段的指针；错误返回-1（打印出指针的值为全F）。</p>\n<p>5.示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> *addr  = shmat(id, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>);      <span class=\"comment\">//返回第一个可用的共享内存地址的指针的值给addr</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"shmdt函数\"><a href=\"#shmdt函数\" class=\"headerlink\" title=\"shmdt函数\"></a>shmdt函数</h2><p>1.功能：当不需要对此共享内存进行操作时候，调用shmdt函数进行分离，不是删除此共享存储空间哟。</p>\n<p>2.所需头文件：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/shm.h&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>3.函数原型：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">shmdt</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *addr)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>addr为shmat函数返回的地址指针。</p>\n</blockquote>\n<p>4.返回值：成功返回0；错误返回-1。</p>\n<p>5.示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> ret = shmdt(addr);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"shmctl函数\"><a href=\"#shmctl函数\" class=\"headerlink\" title=\"shmctl函数\"></a>shmctl函数</h2><p>1.功能：对共享内存进行控制。最简单的操作就是删除共享存储空间了，也可以获取和改变共享内存的状态。</p>\n<p>2.所需头文件：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/shm.h&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>3.函数原型：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">shmctl</span><span class=\"params\">(<span class=\"keyword\">int</span> shmid, <span class=\"keyword\">int</span> cmd, struct shmid_ds *buf)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>shmid就是shmget函数返回的共享存储标识符。<br>cmd有三个:IPC_RMID——删除共享内存；<br>         IPC_STAT——得到共享内存的状态，把共享内存的shmid_ds结构复制到buf中；<br>         IPC_SET——改变共享内存的状态，把buf所指的shmid_ds结构中的uid、gid、mode复制到共享内存的shmid_ds结构内。（内核为每个共享存储段维护着一个结构，结构名为shmid_ds，这里就不讲啦，里面存放着共享内存的大小，pid，存放时<br>         间等一些参数）<br>buf就是结构体shmid_ds。</p>\n</blockquote>\n<p>4.返回值：成功返回0；错误返回-1。</p>\n<p>5.示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> ret = shmctl(id, IPC_RMID,<span class=\"literal\">NULL</span>);    <span class=\"comment\">//删除id号的共享存储空间</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Linux共享内存的查看方法\"><a href=\"#Linux共享内存的查看方法\" class=\"headerlink\" title=\"Linux共享内存的查看方法\"></a>Linux共享内存的查看方法</h1><p>1.使用<code>ipcs -m</code>命令可以查看当前系统所有的共享内存空间信息，如下图所示。</p>\n<p><img src=\"/images/20190731shrmm/01.png\" alt=\"01\"></p>\n<p>2.如果程序创建了一个共享内存段，但没有被正确销毁，可能在下次打开程序时出现错误，这时可使用<code>ipcrm -m shmid</code>命令先删除共享内存段。例如要删除上图中的最后一块共享内存，可使用命令<code>ipcrm -m 6455308</code>，删除后的效果如下图所示。</p>\n<p><img src=\"/images/20190731shrmm/02.png\" alt=\"02\"></p>\n<p>3.在Linux下，如果你申请24字节大小的共享存储空间，系统还是会默认给你分配一页的大小，但你还是只能使用这一页上24字节的空间。使用<code>getconf PAGE_SIZE</code>命令就能显示出一页的大小。</p>\n<h1 id=\"共享内存使用示例程序\"><a href=\"#共享内存使用示例程序\" class=\"headerlink\" title=\"共享内存使用示例程序\"></a>共享内存使用示例程序</h1><h2 id=\"整体介绍\"><a href=\"#整体介绍\" class=\"headerlink\" title=\"整体介绍\"></a>整体介绍</h2><p>本例采用两个独立程序(server与client)来进行共享内存测试。首次打开程序时，先用server开辟一段共享内存，再用client连接到该共享内存；之后使用时，server与client可以互相向共享内存中读和写。两个程序都具有如下目录结构：</p>\n<p><img src=\"/images/20190731shrmm/07.png\" alt=\"07\"></p>\n<p>两个程序的区别是在main.cpp和CMakeLists.txt中。</p>\n<h2 id=\"CKX-h\"><a href=\"#CKX-h\" class=\"headerlink\" title=\"CKX.h\"></a>CKX.h</h2><p>该头文件只是定义一个数据类，用来向内存中写入姓名和年龄。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span>  __CKX_H_</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span>  __CKX_H_</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> NAME_LEN  20</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ckx</span> &#123;</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"keyword\">char</span> name[NAME_LEN];</span><br><span class=\"line\">  <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">  ckx() &#123;&#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">// __CKX_H_</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CShareMemory-h\"><a href=\"#CShareMemory-h\" class=\"headerlink\" title=\"CShareMemory.h\"></a>CShareMemory.h</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span>  __CSHAREMEMORY_H_</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span>  __CSHAREMEMORY_H_</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>  <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>  <span class=\"meta-string\">&lt;sys/ipc.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>  <span class=\"meta-string\">&lt;sys/shm.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CShareMemory</span> &#123;</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span>:</span><br><span class=\"line\">  CShareMemory() &#123;addr = <span class=\"literal\">NULL</span>; shmid=<span class=\"number\">0</span>; <span class=\"built_in\">size</span>=<span class=\"number\">0</span>;&#125;;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">create_ipc</span><span class=\"params\">(<span class=\"keyword\">int</span> key_id, <span class=\"keyword\">int</span> ipc_size)</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">get_ipc</span><span class=\"params\">(<span class=\"keyword\">int</span> key_id, <span class=\"keyword\">int</span> ipc_size)</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">destroy_sharememory</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">close_shm</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">get_address</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"> <span class=\"keyword\">private</span>:</span><br><span class=\"line\">  <span class=\"keyword\">int</span> shmid;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> <span class=\"built_in\">size</span>;</span><br><span class=\"line\">  <span class=\"keyword\">void</span>* addr;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sharememory</span><span class=\"params\">(<span class=\"keyword\">int</span> key_id, <span class=\"keyword\">int</span> ipc_size, <span class=\"keyword\">int</span> flag)</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">// __CSHAREMEMORY_H_</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CShareMemory-cpp\"><a href=\"#CShareMemory-cpp\" class=\"headerlink\" title=\"CShareMemory.cpp\"></a>CShareMemory.cpp</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/shm.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"CShareMemory.h\"</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">CShareMemory::sharememory</span><span class=\"params\">(<span class=\"keyword\">int</span> key_id, <span class=\"keyword\">int</span> ipc_size, <span class=\"keyword\">int</span> flag)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">key_t</span> key = ftok(<span class=\"string\">\"/tmp\"</span>, key_id);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (key &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"get key error\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  shmid = shmget(key, ipc_size, flag);</span><br><span class=\"line\">  addr = shmat(shmid, (<span class=\"keyword\">void</span> *)<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (shmid &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"get shmid error\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> shmid;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">CShareMemory::create_ipc</span><span class=\"params\">(<span class=\"keyword\">int</span> key_id, <span class=\"keyword\">int</span> ipc_size)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sharememory(key_id, ipc_size, IPC_CREAT|IPC_EXCL|<span class=\"number\">0666</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">CShareMemory::get_ipc</span><span class=\"params\">(<span class=\"keyword\">int</span> key_id, <span class=\"keyword\">int</span> ipc_size)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sharememory(key_id, ipc_size, IPC_CREAT|<span class=\"number\">0666</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">CShareMemory::destroy_sharememory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> shmctl(shmid, IPC_RMID, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  free the share memory</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;long-description&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &lt;ReturnValue&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">CShareMemory::close_shm</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> rtn;</span><br><span class=\"line\">    rtn = shmdt(addr);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rtn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief get address of share memory</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;long-description&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &lt;ReturnValue&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">CShareMemory::get_address</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (addr == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">void</span>*) addr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Server的main-cpp\"><a href=\"#Server的main-cpp\" class=\"headerlink\" title=\"Server的main.cpp\"></a>Server的main.cpp</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/shm.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"CKX.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"CShareMemory.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> key = <span class=\"number\">66</span>;</span><br><span class=\"line\">  ckx *p2 = <span class=\"keyword\">new</span> ckx();</span><br><span class=\"line\">  CShareMemory shmm;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> id = shmm.create_ipc(key, <span class=\"keyword\">sizeof</span>(*p2));</span><br><span class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"sizeof *p2 is: \"</span> &lt;&lt; <span class=\"keyword\">sizeof</span>(*p2) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"id = \"</span> &lt;&lt; id &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (id &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Create sharememory error!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"\\n\\n1.input data to sharememory\\n2.get sharememory data\\n3.destroy sharememory\\ninput select:\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; i;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i &gt; <span class=\"number\">3</span> || i &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Input error!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    id = shmm.get_ipc(key, <span class=\"keyword\">sizeof</span>(*p2));</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"id = \"</span> &lt;&lt; id &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(id &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Get sharememory error!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p2 = (ckx *)shmat(id, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p2 &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Get sharememory address error!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">      p2 = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (i) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">1</span>: &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> name[NAME_LEN];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> age = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Input name:\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tfflush(<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\tgets(name);</span><br><span class=\"line\">\t<span class=\"built_in\">strcpy</span>(p2-&gt;name, name);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Input age: \"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; age;</span><br><span class=\"line\">\tp2-&gt;age = age;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Write success!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">2</span>: &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"name: \"</span> &lt;&lt; p2-&gt;name &lt;&lt; <span class=\"string\">\"\\t\"</span> &lt;&lt; <span class=\"string\">\"age: \"</span> &lt;&lt; p2-&gt;age &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">3</span>: &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(shmm.destroy_sharememory() == <span class=\"number\">-1</span>)</span><br><span class=\"line\">\t  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"-1\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tid = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(shmm.close_shm() == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"shmdt error!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(id == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Server的CMakeLists-txt\"><a href=\"#Server的CMakeLists-txt\" class=\"headerlink\" title=\"Server的CMakeLists.txt\"></a>Server的CMakeLists.txt</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake_minimum_required(VERSION <span class=\"number\">3.1</span><span class=\"number\">.0</span>)</span><br><span class=\"line\">project(shrmmTestServer)</span><br><span class=\"line\"><span class=\"built_in\">set</span> (CMAKE_CXX_STANDARD <span class=\"number\">11</span>)</span><br><span class=\"line\">include_directories(<span class=\"string\">\"./include/\"</span>)</span><br><span class=\"line\">add_executable(shrmmTestServer main.cpp ./src/CShareMemory.cpp)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Client的main-cpp\"><a href=\"#Client的main-cpp\" class=\"headerlink\" title=\"Client的main.cpp\"></a>Client的main.cpp</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/shm.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"CKX.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"CShareMemory.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> key = <span class=\"number\">66</span>;</span><br><span class=\"line\">  ckx *p2 = <span class=\"keyword\">new</span> ckx();</span><br><span class=\"line\">  CShareMemory shmm;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> id = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"sizeof *p2 is: \"</span> &lt;&lt; <span class=\"keyword\">sizeof</span>(*p2) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"id = \"</span> &lt;&lt; id &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (id &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Create sharememory error!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"\\n\\n1.input data to sharememory\\n2.get sharememory data\\n3.destroy sharememory\\ninput select:\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; i;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i &gt; <span class=\"number\">3</span> || i &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Input error!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    id = shmm.get_ipc(key, <span class=\"keyword\">sizeof</span>(*p2));</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"id = \"</span> &lt;&lt; id &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(id &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Get sharememory error!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p2 = (ckx *)shmat(id, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p2 &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Get sharememory address error!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">      p2 = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (i) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">1</span>: &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> name[NAME_LEN];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> age = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Input name:\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tfflush(<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\tgets(name);</span><br><span class=\"line\">\t<span class=\"built_in\">strcpy</span>(p2-&gt;name, name);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Input age: \"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; age;</span><br><span class=\"line\">\tp2-&gt;age = age;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Write success!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">2</span>: &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"name: \"</span> &lt;&lt; p2-&gt;name &lt;&lt; <span class=\"string\">\"\\t\"</span> &lt;&lt; <span class=\"string\">\"age: \"</span> &lt;&lt; p2-&gt;age &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">3</span>: &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(shmm.destroy_sharememory() == <span class=\"number\">-1</span>)</span><br><span class=\"line\">\t  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"-1\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tid = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(shmm.close_shm() == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"shmdt error!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(id == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Server的CMakeLists-txt-1\"><a href=\"#Server的CMakeLists-txt-1\" class=\"headerlink\" title=\"Server的CMakeLists.txt\"></a>Server的CMakeLists.txt</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake_minimum_required(VERSION <span class=\"number\">3.1</span><span class=\"number\">.0</span>)</span><br><span class=\"line\">project(shrmmTestClient)</span><br><span class=\"line\"><span class=\"built_in\">set</span> (CMAKE_CXX_STANDARD <span class=\"number\">11</span>)</span><br><span class=\"line\">include_directories(<span class=\"string\">\"./include/\"</span>)</span><br><span class=\"line\">add_executable(shrmmTestClient main.cpp ./src/CShareMemory.cpp)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"程序运行结果\"><a href=\"#程序运行结果\" class=\"headerlink\" title=\"程序运行结果\"></a>程序运行结果</h2><p>1.从server中输入名字和年龄存储到共享内存中，并从client中读取：</p>\n<p><img src=\"/images/20190731shrmm/03.png\" alt=\"03\"><br><img src=\"/images/20190731shrmm/04.png\" alt=\"04\"></p>\n<p>2.从client中输入名字和年龄存储到共享内存中，并从server中读取：</p>\n<p><img src=\"/images/20190731shrmm/05.png\" alt=\"05\"><br><img src=\"s/images/20190731shrmm/06.png\" alt=\"06\"></p>\n<blockquote>\n<p>Note：自己创建build文件夹并进行编译！</p>\n</blockquote>\n<blockquote>\n<p>参考链接<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NjY0MTY3L2FydGljbGUvZGV0YWlscy84MTI3NzA5Ng==\" title=\"https://blog.csdn.net/qq_27664167/article/details/81277096\">Linux下共享内存编程(共享存储空间)<i class=\"fa fa-external-link\"></i></span></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>开发环境：Ubuntu16.04 LTS。 </p>\n</blockquote>","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>共享存储允许两个或多个进程共享一个给定的存储区，是进程间通信最快的一种方式。不要同时对共享存储空间进行写操作。通常，可以将信号量用于同步共享存储访问。</p>\n<p>最简单的共享内存的使用流程如下：</p>\n<ol>\n<li><p>ftok函数生成键值</p>\n</li>\n<li><p>shmget函数创建共享内存空间</p>\n</li>\n<li><p>shmat函数获取第一个可用共享内存空间的地址</p>\n</li>\n<li><p>shmdt函数进行分离（对共享存储段操作结束时的步骤，并不是从系统中删除共享内存和结构）</p>\n</li>\n<li><p>shmctl函数进行删除共享存储空间</p>\n</li>\n</ol>\n<p>上述的五个函数都是系统自带的函数，接下来对它们一一介绍。</p>\n<h1 id=\"系统函数介绍\"><a href=\"#系统函数介绍\" class=\"headerlink\" title=\"系统函数介绍\"></a>系统函数介绍</h1><h2 id=\"ftok函数\"><a href=\"#ftok函数\" class=\"headerlink\" title=\"ftok函数\"></a>ftok函数</h2><p>1.功能：生成键值。每一个共享存储段都有一个对应的键值（key）相关联（消息队列、信号量也同样需要）。</p>\n<p>2.所需头文件：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/ipc.h&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>3.函数原型：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">key_t</span> <span class=\"title\">ftok</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *path ,<span class=\"keyword\">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>path为一个已存在的路径名；id为0~255之间的一个数值，代表项目ID。</p>\n</blockquote>\n<p>4.返回值：成功返回键值（相当于32位的int），出错返回-1。</p>\n<p>5.示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">key_t</span> key = ftok( “/tmp”, <span class=\"number\">66</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"shmget函数\"><a href=\"#shmget函数\" class=\"headerlink\" title=\"shmget函数\"></a>shmget函数</h2><p>1.功能：创建共享存储空间并返回一个共享存储标识符。</p>\n<p>2.所需头文件：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/shm.h&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>3.函数原型：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">shmget</span><span class=\"params\">(<span class=\"keyword\">key_t</span> key, <span class=\"keyword\">size_t</span> <span class=\"built_in\">size</span>,<span class=\"keyword\">int</span> flag)</span></span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>key为ftok生成的键值。<br>size为共享内存的长度，以字节为单位。<br>flag为所需要的操作和权限，可以用来创建一个共享存储空间并返回一个标识符或者获得一个共享标识符。所取值可为IPC_CREAT、IPC_CREAT | IPC_EXCL。<br>flag的值为IPC_CREAT：如果不存在key值的共享存储空间，且权限不为0，则创建共享存储空间，并返回一个共享存储标识符。如果存在，则直接返回共享存储标识符。<br>flag的值为 IPC_CREAT | IPC_EXCL：如果不存在key值的共享存储空间，且权限不为0，则创建共享存储空间，并返回一个共享存储标识符。如果存在，则产生错误。</p>\n</blockquote>\n<p>4.返回值：成功返回共享存储ID，出错返回-1。</p>\n<p>5.示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> id = shmget(key,<span class=\"number\">4096</span>,IPC_CREAT|<span class=\"number\">0666</span>);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>说明：创建一个大小为4096个字节的权限为0666（所有用户可读可写，具体查询linux权限相关内容）的共享存储空间，并返回一个共享存储标识符，如果key值已经存在有共享存储空间了，则直接返回一个共享存储标识符。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> id = shmget(key, <span class=\"number\">4096</span>, IPC_CREAT|IPC_EXCL|<span class=\"number\">0666</span>);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>说明：创建一个大小为4096个字节的权限为0666（所有用户可读可写，具体查询linux权限相关内容）的共享存储空间，并返回一个整形共享存储标识符，如果key值已经存在有共享存储空间了，则出错返回-1。</p>\n</blockquote>\n<h2 id=\"shmat函数\"><a href=\"#shmat函数\" class=\"headerlink\" title=\"shmat函数\"></a>shmat函数</h2><p>1.功能：获取第一个可用共享内存空间的地址。</p>\n<p>2.所需头文件：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/shm.h&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>3.函数原型：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> *<span class=\"title\">shmat</span><span class=\"params\">(<span class=\"keyword\">int</span> shmid, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *addr, <span class=\"keyword\">int</span> flag)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>shmid为shmget生成的共享存储标识符。<br>addr指定共享内存出现在进程内存地址的什么位置，直接指定为NULL让内核自己决定一个合适的地址位置。<br>flag为对数据的操作，如果指定为SHM_RDONLY则以只读方式连接此段，其他值为读写方式连接此段。<br>翻阅linux下shm.c文件得到#define SHM_RDONLY      010000  // read-only access 。<br>flag的值为 IPC_CREAT | IPC_EXCL：如果不存在key值的共享存储空间，且权限不为0，则创建共享存储空间，并返回一个共享存储标识符。如果存在，则产生错误。</p>\n</blockquote>\n<p>4.返回值：成功返回指向共享存储段的指针；错误返回-1（打印出指针的值为全F）。</p>\n<p>5.示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> *addr  = shmat(id, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>);      <span class=\"comment\">//返回第一个可用的共享内存地址的指针的值给addr</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"shmdt函数\"><a href=\"#shmdt函数\" class=\"headerlink\" title=\"shmdt函数\"></a>shmdt函数</h2><p>1.功能：当不需要对此共享内存进行操作时候，调用shmdt函数进行分离，不是删除此共享存储空间哟。</p>\n<p>2.所需头文件：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/shm.h&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>3.函数原型：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">shmdt</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *addr)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>addr为shmat函数返回的地址指针。</p>\n</blockquote>\n<p>4.返回值：成功返回0；错误返回-1。</p>\n<p>5.示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> ret = shmdt(addr);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"shmctl函数\"><a href=\"#shmctl函数\" class=\"headerlink\" title=\"shmctl函数\"></a>shmctl函数</h2><p>1.功能：对共享内存进行控制。最简单的操作就是删除共享存储空间了，也可以获取和改变共享内存的状态。</p>\n<p>2.所需头文件：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/shm.h&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>3.函数原型：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">shmctl</span><span class=\"params\">(<span class=\"keyword\">int</span> shmid, <span class=\"keyword\">int</span> cmd, struct shmid_ds *buf)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>shmid就是shmget函数返回的共享存储标识符。<br>cmd有三个:IPC_RMID——删除共享内存；<br>         IPC_STAT——得到共享内存的状态，把共享内存的shmid_ds结构复制到buf中；<br>         IPC_SET——改变共享内存的状态，把buf所指的shmid_ds结构中的uid、gid、mode复制到共享内存的shmid_ds结构内。（内核为每个共享存储段维护着一个结构，结构名为shmid_ds，这里就不讲啦，里面存放着共享内存的大小，pid，存放时<br>         间等一些参数）<br>buf就是结构体shmid_ds。</p>\n</blockquote>\n<p>4.返回值：成功返回0；错误返回-1。</p>\n<p>5.示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> ret = shmctl(id, IPC_RMID,<span class=\"literal\">NULL</span>);    <span class=\"comment\">//删除id号的共享存储空间</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Linux共享内存的查看方法\"><a href=\"#Linux共享内存的查看方法\" class=\"headerlink\" title=\"Linux共享内存的查看方法\"></a>Linux共享内存的查看方法</h1><p>1.使用<code>ipcs -m</code>命令可以查看当前系统所有的共享内存空间信息，如下图所示。</p>\n<p><img src=\"/images/20190731shrmm/01.png\" alt=\"01\"></p>\n<p>2.如果程序创建了一个共享内存段，但没有被正确销毁，可能在下次打开程序时出现错误，这时可使用<code>ipcrm -m shmid</code>命令先删除共享内存段。例如要删除上图中的最后一块共享内存，可使用命令<code>ipcrm -m 6455308</code>，删除后的效果如下图所示。</p>\n<p><img src=\"/images/20190731shrmm/02.png\" alt=\"02\"></p>\n<p>3.在Linux下，如果你申请24字节大小的共享存储空间，系统还是会默认给你分配一页的大小，但你还是只能使用这一页上24字节的空间。使用<code>getconf PAGE_SIZE</code>命令就能显示出一页的大小。</p>\n<h1 id=\"共享内存使用示例程序\"><a href=\"#共享内存使用示例程序\" class=\"headerlink\" title=\"共享内存使用示例程序\"></a>共享内存使用示例程序</h1><h2 id=\"整体介绍\"><a href=\"#整体介绍\" class=\"headerlink\" title=\"整体介绍\"></a>整体介绍</h2><p>本例采用两个独立程序(server与client)来进行共享内存测试。首次打开程序时，先用server开辟一段共享内存，再用client连接到该共享内存；之后使用时，server与client可以互相向共享内存中读和写。两个程序都具有如下目录结构：</p>\n<p><img src=\"/images/20190731shrmm/07.png\" alt=\"07\"></p>\n<p>两个程序的区别是在main.cpp和CMakeLists.txt中。</p>\n<h2 id=\"CKX-h\"><a href=\"#CKX-h\" class=\"headerlink\" title=\"CKX.h\"></a>CKX.h</h2><p>该头文件只是定义一个数据类，用来向内存中写入姓名和年龄。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span>  __CKX_H_</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span>  __CKX_H_</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> NAME_LEN  20</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ckx</span> &#123;</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"keyword\">char</span> name[NAME_LEN];</span><br><span class=\"line\">  <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">  ckx() &#123;&#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">// __CKX_H_</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CShareMemory-h\"><a href=\"#CShareMemory-h\" class=\"headerlink\" title=\"CShareMemory.h\"></a>CShareMemory.h</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span>  __CSHAREMEMORY_H_</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span>  __CSHAREMEMORY_H_</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>  <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>  <span class=\"meta-string\">&lt;sys/ipc.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>  <span class=\"meta-string\">&lt;sys/shm.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CShareMemory</span> &#123;</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span>:</span><br><span class=\"line\">  CShareMemory() &#123;addr = <span class=\"literal\">NULL</span>; shmid=<span class=\"number\">0</span>; <span class=\"built_in\">size</span>=<span class=\"number\">0</span>;&#125;;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">create_ipc</span><span class=\"params\">(<span class=\"keyword\">int</span> key_id, <span class=\"keyword\">int</span> ipc_size)</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">get_ipc</span><span class=\"params\">(<span class=\"keyword\">int</span> key_id, <span class=\"keyword\">int</span> ipc_size)</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">destroy_sharememory</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">close_shm</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">get_address</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"> <span class=\"keyword\">private</span>:</span><br><span class=\"line\">  <span class=\"keyword\">int</span> shmid;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> <span class=\"built_in\">size</span>;</span><br><span class=\"line\">  <span class=\"keyword\">void</span>* addr;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sharememory</span><span class=\"params\">(<span class=\"keyword\">int</span> key_id, <span class=\"keyword\">int</span> ipc_size, <span class=\"keyword\">int</span> flag)</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">// __CSHAREMEMORY_H_</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CShareMemory-cpp\"><a href=\"#CShareMemory-cpp\" class=\"headerlink\" title=\"CShareMemory.cpp\"></a>CShareMemory.cpp</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/shm.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"CShareMemory.h\"</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">CShareMemory::sharememory</span><span class=\"params\">(<span class=\"keyword\">int</span> key_id, <span class=\"keyword\">int</span> ipc_size, <span class=\"keyword\">int</span> flag)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">key_t</span> key = ftok(<span class=\"string\">\"/tmp\"</span>, key_id);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (key &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"get key error\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  shmid = shmget(key, ipc_size, flag);</span><br><span class=\"line\">  addr = shmat(shmid, (<span class=\"keyword\">void</span> *)<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (shmid &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"get shmid error\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> shmid;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">CShareMemory::create_ipc</span><span class=\"params\">(<span class=\"keyword\">int</span> key_id, <span class=\"keyword\">int</span> ipc_size)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sharememory(key_id, ipc_size, IPC_CREAT|IPC_EXCL|<span class=\"number\">0666</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">CShareMemory::get_ipc</span><span class=\"params\">(<span class=\"keyword\">int</span> key_id, <span class=\"keyword\">int</span> ipc_size)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sharememory(key_id, ipc_size, IPC_CREAT|<span class=\"number\">0666</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">CShareMemory::destroy_sharememory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> shmctl(shmid, IPC_RMID, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  free the share memory</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;long-description&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &lt;ReturnValue&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">CShareMemory::close_shm</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> rtn;</span><br><span class=\"line\">    rtn = shmdt(addr);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rtn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief get address of share memory</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;long-description&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &lt;ReturnValue&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">CShareMemory::get_address</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (addr == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">void</span>*) addr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Server的main-cpp\"><a href=\"#Server的main-cpp\" class=\"headerlink\" title=\"Server的main.cpp\"></a>Server的main.cpp</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/shm.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"CKX.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"CShareMemory.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> key = <span class=\"number\">66</span>;</span><br><span class=\"line\">  ckx *p2 = <span class=\"keyword\">new</span> ckx();</span><br><span class=\"line\">  CShareMemory shmm;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> id = shmm.create_ipc(key, <span class=\"keyword\">sizeof</span>(*p2));</span><br><span class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"sizeof *p2 is: \"</span> &lt;&lt; <span class=\"keyword\">sizeof</span>(*p2) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"id = \"</span> &lt;&lt; id &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (id &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Create sharememory error!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"\\n\\n1.input data to sharememory\\n2.get sharememory data\\n3.destroy sharememory\\ninput select:\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; i;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i &gt; <span class=\"number\">3</span> || i &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Input error!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    id = shmm.get_ipc(key, <span class=\"keyword\">sizeof</span>(*p2));</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"id = \"</span> &lt;&lt; id &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(id &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Get sharememory error!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p2 = (ckx *)shmat(id, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p2 &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Get sharememory address error!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">      p2 = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (i) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">1</span>: &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> name[NAME_LEN];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> age = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Input name:\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tfflush(<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\tgets(name);</span><br><span class=\"line\">\t<span class=\"built_in\">strcpy</span>(p2-&gt;name, name);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Input age: \"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; age;</span><br><span class=\"line\">\tp2-&gt;age = age;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Write success!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">2</span>: &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"name: \"</span> &lt;&lt; p2-&gt;name &lt;&lt; <span class=\"string\">\"\\t\"</span> &lt;&lt; <span class=\"string\">\"age: \"</span> &lt;&lt; p2-&gt;age &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">3</span>: &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(shmm.destroy_sharememory() == <span class=\"number\">-1</span>)</span><br><span class=\"line\">\t  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"-1\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tid = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(shmm.close_shm() == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"shmdt error!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(id == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Server的CMakeLists-txt\"><a href=\"#Server的CMakeLists-txt\" class=\"headerlink\" title=\"Server的CMakeLists.txt\"></a>Server的CMakeLists.txt</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake_minimum_required(VERSION <span class=\"number\">3.1</span><span class=\"number\">.0</span>)</span><br><span class=\"line\">project(shrmmTestServer)</span><br><span class=\"line\"><span class=\"built_in\">set</span> (CMAKE_CXX_STANDARD <span class=\"number\">11</span>)</span><br><span class=\"line\">include_directories(<span class=\"string\">\"./include/\"</span>)</span><br><span class=\"line\">add_executable(shrmmTestServer main.cpp ./src/CShareMemory.cpp)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Client的main-cpp\"><a href=\"#Client的main-cpp\" class=\"headerlink\" title=\"Client的main.cpp\"></a>Client的main.cpp</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/shm.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"CKX.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"CShareMemory.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> key = <span class=\"number\">66</span>;</span><br><span class=\"line\">  ckx *p2 = <span class=\"keyword\">new</span> ckx();</span><br><span class=\"line\">  CShareMemory shmm;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> id = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"sizeof *p2 is: \"</span> &lt;&lt; <span class=\"keyword\">sizeof</span>(*p2) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"id = \"</span> &lt;&lt; id &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (id &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Create sharememory error!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"\\n\\n1.input data to sharememory\\n2.get sharememory data\\n3.destroy sharememory\\ninput select:\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; i;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i &gt; <span class=\"number\">3</span> || i &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Input error!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    id = shmm.get_ipc(key, <span class=\"keyword\">sizeof</span>(*p2));</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"id = \"</span> &lt;&lt; id &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(id &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Get sharememory error!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p2 = (ckx *)shmat(id, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p2 &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Get sharememory address error!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">      p2 = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (i) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">1</span>: &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> name[NAME_LEN];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> age = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Input name:\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tfflush(<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\tgets(name);</span><br><span class=\"line\">\t<span class=\"built_in\">strcpy</span>(p2-&gt;name, name);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Input age: \"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; age;</span><br><span class=\"line\">\tp2-&gt;age = age;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Write success!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">2</span>: &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"name: \"</span> &lt;&lt; p2-&gt;name &lt;&lt; <span class=\"string\">\"\\t\"</span> &lt;&lt; <span class=\"string\">\"age: \"</span> &lt;&lt; p2-&gt;age &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">3</span>: &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(shmm.destroy_sharememory() == <span class=\"number\">-1</span>)</span><br><span class=\"line\">\t  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"-1\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tid = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(shmm.close_shm() == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"shmdt error!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(id == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Server的CMakeLists-txt-1\"><a href=\"#Server的CMakeLists-txt-1\" class=\"headerlink\" title=\"Server的CMakeLists.txt\"></a>Server的CMakeLists.txt</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake_minimum_required(VERSION <span class=\"number\">3.1</span><span class=\"number\">.0</span>)</span><br><span class=\"line\">project(shrmmTestClient)</span><br><span class=\"line\"><span class=\"built_in\">set</span> (CMAKE_CXX_STANDARD <span class=\"number\">11</span>)</span><br><span class=\"line\">include_directories(<span class=\"string\">\"./include/\"</span>)</span><br><span class=\"line\">add_executable(shrmmTestClient main.cpp ./src/CShareMemory.cpp)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"程序运行结果\"><a href=\"#程序运行结果\" class=\"headerlink\" title=\"程序运行结果\"></a>程序运行结果</h2><p>1.从server中输入名字和年龄存储到共享内存中，并从client中读取：</p>\n<p><img src=\"/images/20190731shrmm/03.png\" alt=\"03\"><br><img src=\"/images/20190731shrmm/04.png\" alt=\"04\"></p>\n<p>2.从client中输入名字和年龄存储到共享内存中，并从server中读取：</p>\n<p><img src=\"/images/20190731shrmm/05.png\" alt=\"05\"><br><img src=\"s/images/20190731shrmm/06.png\" alt=\"06\"></p>\n<blockquote>\n<p>Note：自己创建build文件夹并进行编译！</p>\n</blockquote>\n<blockquote>\n<p>参考链接<a href=\"https://blog.csdn.net/qq_27664167/article/details/81277096\" target=\"_blank\" rel=\"noopener\">Linux下共享内存编程(共享存储空间)</a></p>\n</blockquote>","popularPost_tmp_postPath":true,"eyeCatchImage":"/images/20190731shrmm/01.png","popularPost_tmp_gaData":{"updated":"Wed Jan 29 2020 21:57:52 GMT+0800 (China Standard Time)","title":"Linux下共享内存的使用方法","path":"archives/10600.html","eyeCatchImage":"/images/20190731shrmm/01.png","excerpt":"介绍共享内存的使用方法。","date":{"_isAMomentObject":true,"_i":"2019-07-31T11:00:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2019-07-31T11:00:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"工科生的基本功 > 快乐码农","tags":["Library","Linux","C++"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":8823},{"title":"VMware下Ubuntu的磁盘扩容问题","description":"介绍使用Gparted工具为Ubuntu扩容","date":"2019-07-31T21:30:00.000Z","abbrlink":48591,"_content":"\n> 本文中的环境为Ubuntu16.04LTS + VMware10 + gparted-live-1.0.0-3.\n\n<!-- more -->\n\n# 前言\n\n由于刚开始使用虚拟机时，随便分配了一块硬盘大小，至今发现虚拟机下的Ubuntu硬盘空间告急，因此需要在不损失原有硬盘文件的情况下进行扩容。在VMware10中对虚拟机进行扩容主要分为两部分：\n\n1. 在VMware中进行设置，修改预设磁盘大小；\n\n2. 将额外划分出来的磁盘与原虚拟机中Ubuntu的磁盘进行合并(本文介绍)或添加。\n\n> 在进行扩容前，需要下载好gparted-live-1.0.0-3.iso文件，注意这不是在Ubuntu的Terminal中用apt-get来下载。文件下载链接[请点这里](https://sourceforge.net/projects/gparted/files/)。(该网页下载速度缓慢，可能需要开启VPN或者另寻他处)\n\n# 扩容方法\n\n1.首先将下载好的gparted-live.iso文件装载到虚拟机的虚拟光驱中，如下图所示。这是由于在Ubuntu正常开启状态时，磁盘处于mount状态，无法扩容。因此，需要采用类似用U盘安装系统那样来启动系统进行磁盘扩容。\n\n![01.png]( /images/20190731VMware/01.png)\n\n2.点击：虚拟机 --> 设置，对硬盘进行扩容，如下所示，要从“实用工具”的下拉列表中选择“扩展”，等待扩展完成(笔者是从60G扩展到70G的，但是前面几张图是后补的，所以直接显示是70G)。\n\n![02.png]( /images/20190731VMware/02.png)\n![03.png]( /images/20190731VMware/03.png)\n![04.png]( /images/20190731VMware/04.png)\n\n3.打开虚拟机，在下面画面出现时快速按下 ESC 键。\n\n![05.png]( /images/20190731VMware/05.png)\n\n出现 Boot Menu，从中选择 CD-ROM Drive，如下所示。\n\n![07.png]( /images/20190731VMware/07.png)\n\n4.CD启动的就是GParted Live，如下所示：\n\n![08.png]( /images/20190731VMware/08.png)\n\n选择第一个，弹出下面的画面：\n\n![09.png]( /images/20190731VMware/09.png)\n\n直接点回车即可，接下来进入语言选择。\n\n![10.png]( /images/20190731VMware/10.png)\n\n在上图的圆圈处输入`26`，选择中文。稍后出现下面的画面，并输入`0`。\n\n![11.png]( /images/20190731VMware/11.png)\n\n5.之后即可正常进入CD启动的系统，如没有自动进入下面画面，请在桌面点击`GParted`，进入。\n\n![12.png]( /images/20190731VMware/12.png)\n\n从上图可以看到，已经使用57.99G，有10G未分配，还有2G是用来做swap区的。依次将第一个下面的`extended`和`linux-swap`都删除，可以得到下面的图片。\n\n![13.png]( /images/20190731VMware/13.png)\n\n从上图可以看到，未分配的空间已经从10G变成了12G。接下来，就准备对sda1进行扩容。右键点击，选择调整大小，留下2G空间作swap，如下图所示。\n\n![14.png]( /images/20190731VMware/14.png)\n\n扩容后的效果如下图所示。\n\n![15.png]( /images/20190731VMware/15.png)\n\n从上图中，可以看到sda1已经由原来的58G变为68G，说明扩容成功。还剩下2G，需要分配为`linux-swap`。在未分配的区域右键选择新建，将其创建为`扩展分区`，如下图所示。\n\n![16.png]( /images/20190731VMware/16.png)\n\n创建好后的效果如下图所示。\n\n![17.png]( /images/20190731VMware/17.png)\n\n再从上图的未分配磁盘处右键选择新建，将其创建为`逻辑分区`，文件系统选为`linux-swap`，如下图所示。\n\n![18.png]( /images/20190731VMware/18.png)\n\n创建好后的效果如下图所示。\n\n![19.png]( /images/20190731VMware/19.png)\n\n接下来，按下对勾，完成扩容操作。\n\n![20.png]( /images/20190731VMware/20.png)\n\n6.扩容完成后的效果如下图所示，在下图中，点击圈出来的底部区域，可返回桌面，选择退出。\n\n![21.png]( /images/20190731VMware/21.png)\n![22.png]( /images/20190731VMware/22.png)\n![23.png]( /images/20190731VMware/23.png)\n\n此时，可点击虚拟机 --> 设置，将CD/DVD的启动挂载取消掉，如下图所示。\n\n![24.png]( /images/20190731VMware/24.png)\n\n在GParted退出时出现的页面直接点击回车即可。\n\n![25.png]( /images/20190731VMware/25.png)\n\n扩容完成后的效果如下图所示。\n\n![26.png]( /images/20190731VMware/26.png)\n\n# ubuntu16.04开机等待1分30秒(1min30s)解决方法\n\n在扩容后，笔者开启Ubuntu启动出现了需要等待1min30s的情况，参照[ubuntu16.04开机等待1分30秒(1min30s)解决方法](https://jingyan.baidu.com/article/63acb44ac9c05b61fdc17e61.html)进行解决。\n\n> 参考链接[VMware11下对虚拟机Ubuntu14.10系统所在分区sda1进行磁盘扩容](https://www.linuxidc.com/Linux/2015-08/121674.htm)","source":"_posts/2019-07-31-VMwareµÄÏÂUbuntuµÄÀ©ÈÝÎÊÌâ.md","raw":"---\ntitle: VMware下Ubuntu的磁盘扩容问题\ndescription: 介绍使用Gparted工具为Ubuntu扩容\ndate: '2019.07.31.21:30'\ncategories:\n  - 工科生的基本功\n  - 软件技术\ntags:\n  - VMware\n  - Library\nabbrlink: 48591\n---\n\n> 本文中的环境为Ubuntu16.04LTS + VMware10 + gparted-live-1.0.0-3.\n\n<!-- more -->\n\n# 前言\n\n由于刚开始使用虚拟机时，随便分配了一块硬盘大小，至今发现虚拟机下的Ubuntu硬盘空间告急，因此需要在不损失原有硬盘文件的情况下进行扩容。在VMware10中对虚拟机进行扩容主要分为两部分：\n\n1. 在VMware中进行设置，修改预设磁盘大小；\n\n2. 将额外划分出来的磁盘与原虚拟机中Ubuntu的磁盘进行合并(本文介绍)或添加。\n\n> 在进行扩容前，需要下载好gparted-live-1.0.0-3.iso文件，注意这不是在Ubuntu的Terminal中用apt-get来下载。文件下载链接[请点这里](https://sourceforge.net/projects/gparted/files/)。(该网页下载速度缓慢，可能需要开启VPN或者另寻他处)\n\n# 扩容方法\n\n1.首先将下载好的gparted-live.iso文件装载到虚拟机的虚拟光驱中，如下图所示。这是由于在Ubuntu正常开启状态时，磁盘处于mount状态，无法扩容。因此，需要采用类似用U盘安装系统那样来启动系统进行磁盘扩容。\n\n![01.png]( /images/20190731VMware/01.png)\n\n2.点击：虚拟机 --> 设置，对硬盘进行扩容，如下所示，要从“实用工具”的下拉列表中选择“扩展”，等待扩展完成(笔者是从60G扩展到70G的，但是前面几张图是后补的，所以直接显示是70G)。\n\n![02.png]( /images/20190731VMware/02.png)\n![03.png]( /images/20190731VMware/03.png)\n![04.png]( /images/20190731VMware/04.png)\n\n3.打开虚拟机，在下面画面出现时快速按下 ESC 键。\n\n![05.png]( /images/20190731VMware/05.png)\n\n出现 Boot Menu，从中选择 CD-ROM Drive，如下所示。\n\n![07.png]( /images/20190731VMware/07.png)\n\n4.CD启动的就是GParted Live，如下所示：\n\n![08.png]( /images/20190731VMware/08.png)\n\n选择第一个，弹出下面的画面：\n\n![09.png]( /images/20190731VMware/09.png)\n\n直接点回车即可，接下来进入语言选择。\n\n![10.png]( /images/20190731VMware/10.png)\n\n在上图的圆圈处输入`26`，选择中文。稍后出现下面的画面，并输入`0`。\n\n![11.png]( /images/20190731VMware/11.png)\n\n5.之后即可正常进入CD启动的系统，如没有自动进入下面画面，请在桌面点击`GParted`，进入。\n\n![12.png]( /images/20190731VMware/12.png)\n\n从上图可以看到，已经使用57.99G，有10G未分配，还有2G是用来做swap区的。依次将第一个下面的`extended`和`linux-swap`都删除，可以得到下面的图片。\n\n![13.png]( /images/20190731VMware/13.png)\n\n从上图可以看到，未分配的空间已经从10G变成了12G。接下来，就准备对sda1进行扩容。右键点击，选择调整大小，留下2G空间作swap，如下图所示。\n\n![14.png]( /images/20190731VMware/14.png)\n\n扩容后的效果如下图所示。\n\n![15.png]( /images/20190731VMware/15.png)\n\n从上图中，可以看到sda1已经由原来的58G变为68G，说明扩容成功。还剩下2G，需要分配为`linux-swap`。在未分配的区域右键选择新建，将其创建为`扩展分区`，如下图所示。\n\n![16.png]( /images/20190731VMware/16.png)\n\n创建好后的效果如下图所示。\n\n![17.png]( /images/20190731VMware/17.png)\n\n再从上图的未分配磁盘处右键选择新建，将其创建为`逻辑分区`，文件系统选为`linux-swap`，如下图所示。\n\n![18.png]( /images/20190731VMware/18.png)\n\n创建好后的效果如下图所示。\n\n![19.png]( /images/20190731VMware/19.png)\n\n接下来，按下对勾，完成扩容操作。\n\n![20.png]( /images/20190731VMware/20.png)\n\n6.扩容完成后的效果如下图所示，在下图中，点击圈出来的底部区域，可返回桌面，选择退出。\n\n![21.png]( /images/20190731VMware/21.png)\n![22.png]( /images/20190731VMware/22.png)\n![23.png]( /images/20190731VMware/23.png)\n\n此时，可点击虚拟机 --> 设置，将CD/DVD的启动挂载取消掉，如下图所示。\n\n![24.png]( /images/20190731VMware/24.png)\n\n在GParted退出时出现的页面直接点击回车即可。\n\n![25.png]( /images/20190731VMware/25.png)\n\n扩容完成后的效果如下图所示。\n\n![26.png]( /images/20190731VMware/26.png)\n\n# ubuntu16.04开机等待1分30秒(1min30s)解决方法\n\n在扩容后，笔者开启Ubuntu启动出现了需要等待1min30s的情况，参照[ubuntu16.04开机等待1分30秒(1min30s)解决方法](https://jingyan.baidu.com/article/63acb44ac9c05b61fdc17e61.html)进行解决。\n\n> 参考链接[VMware11下对虚拟机Ubuntu14.10系统所在分区sda1进行磁盘扩容](https://www.linuxidc.com/Linux/2015-08/121674.htm)","slug":"2019-07-31-VMwareµÄÏÂUbuntuµÄÀ©ÈÝÎÊÌâ","published":1,"updated":"2020-01-29T13:57:52.772Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck60spy9t001mda5538w3guxj","content":"<blockquote>\n<p>本文中的环境为Ubuntu16.04LTS + VMware10 + gparted-live-1.0.0-3.</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>由于刚开始使用虚拟机时，随便分配了一块硬盘大小，至今发现虚拟机下的Ubuntu硬盘空间告急，因此需要在不损失原有硬盘文件的情况下进行扩容。在VMware10中对虚拟机进行扩容主要分为两部分：</p>\n<ol>\n<li><p>在VMware中进行设置，修改预设磁盘大小；</p>\n</li>\n<li><p>将额外划分出来的磁盘与原虚拟机中Ubuntu的磁盘进行合并(本文介绍)或添加。</p>\n</li>\n</ol>\n<blockquote>\n<p>在进行扩容前，需要下载好gparted-live-1.0.0-3.iso文件，注意这不是在Ubuntu的Terminal中用apt-get来下载。文件下载链接<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zb3VyY2Vmb3JnZS5uZXQvcHJvamVjdHMvZ3BhcnRlZC9maWxlcy8=\" title=\"https://sourceforge.net/projects/gparted/files/\">请点这里<i class=\"fa fa-external-link\"></i></span>。(该网页下载速度缓慢，可能需要开启VPN或者另寻他处)</p>\n</blockquote>\n<h1 id=\"扩容方法\"><a href=\"#扩容方法\" class=\"headerlink\" title=\"扩容方法\"></a>扩容方法</h1><p>1.首先将下载好的gparted-live.iso文件装载到虚拟机的虚拟光驱中，如下图所示。这是由于在Ubuntu正常开启状态时，磁盘处于mount状态，无法扩容。因此，需要采用类似用U盘安装系统那样来启动系统进行磁盘扩容。</p>\n<p><img src=\"/images/20190731VMware/01.png\" alt=\"01.png\"></p>\n<p>2.点击：虚拟机 –&gt; 设置，对硬盘进行扩容，如下所示，要从“实用工具”的下拉列表中选择“扩展”，等待扩展完成(笔者是从60G扩展到70G的，但是前面几张图是后补的，所以直接显示是70G)。</p>\n<p><img src=\"/images/20190731VMware/02.png\" alt=\"02.png\"><br><img src=\"/images/20190731VMware/03.png\" alt=\"03.png\"><br><img src=\"/images/20190731VMware/04.png\" alt=\"04.png\"></p>\n<p>3.打开虚拟机，在下面画面出现时快速按下 ESC 键。</p>\n<p><img src=\"/images/20190731VMware/05.png\" alt=\"05.png\"></p>\n<p>出现 Boot Menu，从中选择 CD-ROM Drive，如下所示。</p>\n<p><img src=\"/images/20190731VMware/07.png\" alt=\"07.png\"></p>\n<p>4.CD启动的就是GParted Live，如下所示：</p>\n<p><img src=\"/images/20190731VMware/08.png\" alt=\"08.png\"></p>\n<p>选择第一个，弹出下面的画面：</p>\n<p><img src=\"/images/20190731VMware/09.png\" alt=\"09.png\"></p>\n<p>直接点回车即可，接下来进入语言选择。</p>\n<p><img src=\"/images/20190731VMware/10.png\" alt=\"10.png\"></p>\n<p>在上图的圆圈处输入<code>26</code>，选择中文。稍后出现下面的画面，并输入<code>0</code>。</p>\n<p><img src=\"/images/20190731VMware/11.png\" alt=\"11.png\"></p>\n<p>5.之后即可正常进入CD启动的系统，如没有自动进入下面画面，请在桌面点击<code>GParted</code>，进入。</p>\n<p><img src=\"/images/20190731VMware/12.png\" alt=\"12.png\"></p>\n<p>从上图可以看到，已经使用57.99G，有10G未分配，还有2G是用来做swap区的。依次将第一个下面的<code>extended</code>和<code>linux-swap</code>都删除，可以得到下面的图片。</p>\n<p><img src=\"/images/20190731VMware/13.png\" alt=\"13.png\"></p>\n<p>从上图可以看到，未分配的空间已经从10G变成了12G。接下来，就准备对sda1进行扩容。右键点击，选择调整大小，留下2G空间作swap，如下图所示。</p>\n<p><img src=\"/images/20190731VMware/14.png\" alt=\"14.png\"></p>\n<p>扩容后的效果如下图所示。</p>\n<p><img src=\"/images/20190731VMware/15.png\" alt=\"15.png\"></p>\n<p>从上图中，可以看到sda1已经由原来的58G变为68G，说明扩容成功。还剩下2G，需要分配为<code>linux-swap</code>。在未分配的区域右键选择新建，将其创建为<code>扩展分区</code>，如下图所示。</p>\n<p><img src=\"/images/20190731VMware/16.png\" alt=\"16.png\"></p>\n<p>创建好后的效果如下图所示。</p>\n<p><img src=\"/images/20190731VMware/17.png\" alt=\"17.png\"></p>\n<p>再从上图的未分配磁盘处右键选择新建，将其创建为<code>逻辑分区</code>，文件系统选为<code>linux-swap</code>，如下图所示。</p>\n<p><img src=\"/images/20190731VMware/18.png\" alt=\"18.png\"></p>\n<p>创建好后的效果如下图所示。</p>\n<p><img src=\"/images/20190731VMware/19.png\" alt=\"19.png\"></p>\n<p>接下来，按下对勾，完成扩容操作。</p>\n<p><img src=\"/images/20190731VMware/20.png\" alt=\"20.png\"></p>\n<p>6.扩容完成后的效果如下图所示，在下图中，点击圈出来的底部区域，可返回桌面，选择退出。</p>\n<p><img src=\"/images/20190731VMware/21.png\" alt=\"21.png\"><br><img src=\"/images/20190731VMware/22.png\" alt=\"22.png\"><br><img src=\"/images/20190731VMware/23.png\" alt=\"23.png\"></p>\n<p>此时，可点击虚拟机 –&gt; 设置，将CD/DVD的启动挂载取消掉，如下图所示。</p>\n<p><img src=\"/images/20190731VMware/24.png\" alt=\"24.png\"></p>\n<p>在GParted退出时出现的页面直接点击回车即可。</p>\n<p><img src=\"/images/20190731VMware/25.png\" alt=\"25.png\"></p>\n<p>扩容完成后的效果如下图所示。</p>\n<p><img src=\"/images/20190731VMware/26.png\" alt=\"26.png\"></p>\n<h1 id=\"ubuntu16-04开机等待1分30秒-1min30s-解决方法\"><a href=\"#ubuntu16-04开机等待1分30秒-1min30s-解决方法\" class=\"headerlink\" title=\"ubuntu16.04开机等待1分30秒(1min30s)解决方法\"></a>ubuntu16.04开机等待1分30秒(1min30s)解决方法</h1><p>在扩容后，笔者开启Ubuntu启动出现了需要等待1min30s的情况，参照<span class=\"exturl\" data-url=\"aHR0cHM6Ly9qaW5neWFuLmJhaWR1LmNvbS9hcnRpY2xlLzYzYWNiNDRhYzljMDViNjFmZGMxN2U2MS5odG1s\" title=\"https://jingyan.baidu.com/article/63acb44ac9c05b61fdc17e61.html\">ubuntu16.04开机等待1分30秒(1min30s)解决方法<i class=\"fa fa-external-link\"></i></span>进行解决。</p>\n<blockquote>\n<p>参考链接<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGludXhpZGMuY29tL0xpbnV4LzIwMTUtMDgvMTIxNjc0Lmh0bQ==\" title=\"https://www.linuxidc.com/Linux/2015-08/121674.htm\">VMware11下对虚拟机Ubuntu14.10系统所在分区sda1进行磁盘扩容<i class=\"fa fa-external-link\"></i></span></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>本文中的环境为Ubuntu16.04LTS + VMware10 + gparted-live-1.0.0-3.</p>\n</blockquote>","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>由于刚开始使用虚拟机时，随便分配了一块硬盘大小，至今发现虚拟机下的Ubuntu硬盘空间告急，因此需要在不损失原有硬盘文件的情况下进行扩容。在VMware10中对虚拟机进行扩容主要分为两部分：</p>\n<ol>\n<li><p>在VMware中进行设置，修改预设磁盘大小；</p>\n</li>\n<li><p>将额外划分出来的磁盘与原虚拟机中Ubuntu的磁盘进行合并(本文介绍)或添加。</p>\n</li>\n</ol>\n<blockquote>\n<p>在进行扩容前，需要下载好gparted-live-1.0.0-3.iso文件，注意这不是在Ubuntu的Terminal中用apt-get来下载。文件下载链接<a href=\"https://sourceforge.net/projects/gparted/files/\" target=\"_blank\" rel=\"noopener\">请点这里</a>。(该网页下载速度缓慢，可能需要开启VPN或者另寻他处)</p>\n</blockquote>\n<h1 id=\"扩容方法\"><a href=\"#扩容方法\" class=\"headerlink\" title=\"扩容方法\"></a>扩容方法</h1><p>1.首先将下载好的gparted-live.iso文件装载到虚拟机的虚拟光驱中，如下图所示。这是由于在Ubuntu正常开启状态时，磁盘处于mount状态，无法扩容。因此，需要采用类似用U盘安装系统那样来启动系统进行磁盘扩容。</p>\n<p><img src=\"/images/20190731VMware/01.png\" alt=\"01.png\"></p>\n<p>2.点击：虚拟机 –&gt; 设置，对硬盘进行扩容，如下所示，要从“实用工具”的下拉列表中选择“扩展”，等待扩展完成(笔者是从60G扩展到70G的，但是前面几张图是后补的，所以直接显示是70G)。</p>\n<p><img src=\"/images/20190731VMware/02.png\" alt=\"02.png\"><br><img src=\"/images/20190731VMware/03.png\" alt=\"03.png\"><br><img src=\"/images/20190731VMware/04.png\" alt=\"04.png\"></p>\n<p>3.打开虚拟机，在下面画面出现时快速按下 ESC 键。</p>\n<p><img src=\"/images/20190731VMware/05.png\" alt=\"05.png\"></p>\n<p>出现 Boot Menu，从中选择 CD-ROM Drive，如下所示。</p>\n<p><img src=\"/images/20190731VMware/07.png\" alt=\"07.png\"></p>\n<p>4.CD启动的就是GParted Live，如下所示：</p>\n<p><img src=\"/images/20190731VMware/08.png\" alt=\"08.png\"></p>\n<p>选择第一个，弹出下面的画面：</p>\n<p><img src=\"/images/20190731VMware/09.png\" alt=\"09.png\"></p>\n<p>直接点回车即可，接下来进入语言选择。</p>\n<p><img src=\"/images/20190731VMware/10.png\" alt=\"10.png\"></p>\n<p>在上图的圆圈处输入<code>26</code>，选择中文。稍后出现下面的画面，并输入<code>0</code>。</p>\n<p><img src=\"/images/20190731VMware/11.png\" alt=\"11.png\"></p>\n<p>5.之后即可正常进入CD启动的系统，如没有自动进入下面画面，请在桌面点击<code>GParted</code>，进入。</p>\n<p><img src=\"/images/20190731VMware/12.png\" alt=\"12.png\"></p>\n<p>从上图可以看到，已经使用57.99G，有10G未分配，还有2G是用来做swap区的。依次将第一个下面的<code>extended</code>和<code>linux-swap</code>都删除，可以得到下面的图片。</p>\n<p><img src=\"/images/20190731VMware/13.png\" alt=\"13.png\"></p>\n<p>从上图可以看到，未分配的空间已经从10G变成了12G。接下来，就准备对sda1进行扩容。右键点击，选择调整大小，留下2G空间作swap，如下图所示。</p>\n<p><img src=\"/images/20190731VMware/14.png\" alt=\"14.png\"></p>\n<p>扩容后的效果如下图所示。</p>\n<p><img src=\"/images/20190731VMware/15.png\" alt=\"15.png\"></p>\n<p>从上图中，可以看到sda1已经由原来的58G变为68G，说明扩容成功。还剩下2G，需要分配为<code>linux-swap</code>。在未分配的区域右键选择新建，将其创建为<code>扩展分区</code>，如下图所示。</p>\n<p><img src=\"/images/20190731VMware/16.png\" alt=\"16.png\"></p>\n<p>创建好后的效果如下图所示。</p>\n<p><img src=\"/images/20190731VMware/17.png\" alt=\"17.png\"></p>\n<p>再从上图的未分配磁盘处右键选择新建，将其创建为<code>逻辑分区</code>，文件系统选为<code>linux-swap</code>，如下图所示。</p>\n<p><img src=\"/images/20190731VMware/18.png\" alt=\"18.png\"></p>\n<p>创建好后的效果如下图所示。</p>\n<p><img src=\"/images/20190731VMware/19.png\" alt=\"19.png\"></p>\n<p>接下来，按下对勾，完成扩容操作。</p>\n<p><img src=\"/images/20190731VMware/20.png\" alt=\"20.png\"></p>\n<p>6.扩容完成后的效果如下图所示，在下图中，点击圈出来的底部区域，可返回桌面，选择退出。</p>\n<p><img src=\"/images/20190731VMware/21.png\" alt=\"21.png\"><br><img src=\"/images/20190731VMware/22.png\" alt=\"22.png\"><br><img src=\"/images/20190731VMware/23.png\" alt=\"23.png\"></p>\n<p>此时，可点击虚拟机 –&gt; 设置，将CD/DVD的启动挂载取消掉，如下图所示。</p>\n<p><img src=\"/images/20190731VMware/24.png\" alt=\"24.png\"></p>\n<p>在GParted退出时出现的页面直接点击回车即可。</p>\n<p><img src=\"/images/20190731VMware/25.png\" alt=\"25.png\"></p>\n<p>扩容完成后的效果如下图所示。</p>\n<p><img src=\"/images/20190731VMware/26.png\" alt=\"26.png\"></p>\n<h1 id=\"ubuntu16-04开机等待1分30秒-1min30s-解决方法\"><a href=\"#ubuntu16-04开机等待1分30秒-1min30s-解决方法\" class=\"headerlink\" title=\"ubuntu16.04开机等待1分30秒(1min30s)解决方法\"></a>ubuntu16.04开机等待1分30秒(1min30s)解决方法</h1><p>在扩容后，笔者开启Ubuntu启动出现了需要等待1min30s的情况，参照<a href=\"https://jingyan.baidu.com/article/63acb44ac9c05b61fdc17e61.html\" target=\"_blank\" rel=\"noopener\">ubuntu16.04开机等待1分30秒(1min30s)解决方法</a>进行解决。</p>\n<blockquote>\n<p>参考链接<a href=\"https://www.linuxidc.com/Linux/2015-08/121674.htm\" target=\"_blank\" rel=\"noopener\">VMware11下对虚拟机Ubuntu14.10系统所在分区sda1进行磁盘扩容</a></p>\n</blockquote>","popularPost_tmp_postPath":true,"eyeCatchImage":"/images/20190731VMware/01.png","popularPost_tmp_gaData":{"updated":"Wed Jan 29 2020 21:57:52 GMT+0800 (China Standard Time)","title":"VMware下Ubuntu的磁盘扩容问题","path":"archives/48591.html","eyeCatchImage":"/images/20190731VMware/01.png","excerpt":"介绍使用Gparted工具为Ubuntu扩容","date":{"_isAMomentObject":true,"_i":"2019-07-31T21:30:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2019-07-31T21:30:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"工科生的基本功 > 软件技术","tags":["Library","VMware"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1350},{"title":"ROS(kinetic)有用指令集","description":"介绍ROS的kinetic版本有用的一些指令集","date":"2019-08-03T16:30:00.000Z","abbrlink":25595,"_content":"\n> 本文中的环境为Ubuntu16.04LTS + ROS(kinetic).\n\n<!-- more -->\n\n# 前言\n\n由于从ROS的官网上的教程并没有实时更新，上面混杂了一些旧版本的东西，看起来有些麻烦，而且有的介绍过于繁琐，因此本篇博客旨在介绍笔者使用版本的精简指令集。关于指令的详细介绍，还需从官网上查看相关内容。\n\n# 指令介绍\n\n## ROS安装指令\n\n在执行下面的指令前，请注意先将源换位内地源，推荐清华源。\n\n```py\nsudo sh -c 'echo \"deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main\" > /etc/apt/sources.list.d/ros-latest.list'\nsudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key 0xB01FA116\nsudo apt-get update\t#如果更新失败提示GPT error，输入sudo apt-key adv --recv-keys --keyserver keyserver.ubuntu.com F42ED6FBAB17C654\nsudo apt-get install ros-kinetic-desktop-full\nsudo rosdep init\nrosdep update\necho \"source /opt/ros/kinetic/setup.bash\" >> ~/.bashrc\nsource ~/.bashrc\nsudo apt install python-rosinstall python-rosinstall-generator python-wstool build-essential\n```\n\n## UR5的仿真环境安装与使用\n\n```c++\nsudo apt-get install ros-kinetic-universal-robot\nroslaunch ur_gazebo ur5.launch\t\nroslaunch ur5_moveit_config ur5_moveit_planning_execution.launch sim:=true\nroslaunch ur5_moveit_config moveit_rviz.launch config:=true\n```\n\n## ROS文件系统介绍\n\n```c++\nsudo apt-get install ros-kinetic-ros-tutorials\t\t//安装ros-tutorials程序包\nrospack find roscpp\t\t\t\t\t\t\t\t\t//rospack find [包名称]  rospack (/rospack)允许你获取软件包的有关信息。在本教程中，我们只涉及到rospack中find参数选项，该选项可以返回软件包的路径信息。\nroscd roscpp\t\t\t\t\t\t\t\t\t\t//roscd [本地包名称[/子目录]]   直接切换工作目录到某个软件包或者软件包集当中\npwd\t\t\t\t\t\t\t\t\t\t\t\t\t//输出当前工作目录\necho $ROS_PACKAGE_PATH\t\t\t\t\t\t\t\t//查看ROS_PACKAGE_PATH\nroscd log\t\t\t\t\t\t\t\t\t\t\t//切换到ROS保存日记文件的目录下。如果你没有执行过任何ROS程序，系统会报错说该目录不存在。\nrosls roscpp_tutorials\t\t\t\t\t\t\t\t//rosls [本地包名称[/子目录]] 直接按软件包的名称而不是绝对路径来罗列目录\n```\n\n## 使用catkin创建工作空间\n\n```c++\nsource /opt/ros/kinetic/setup.bash\t\t\t\t\t//sourced your environment\nmkdir -p ~/catkin_ws/src\ncd ~/catkin_ws/\ncatkin_make\nsource devel/setup.bash\necho $ROS_PACKAGE_PATH \t\t\t\t\t\t\t\t//确认环境变量包含了目录\n```\n\n## 创建ROS程序包\n\n```c++\ncd ~/catkin_ws/src\ncatkin_create_pkg beginner_tutorials std_msgs rospy roscpp \t\t//使用catkin_create_pkg命令来创建一个名为'beginner_tutorials'的新程序包，这个程序包依赖于std_msgs、roscpp和rospy\nrospack depends1 beginner_tutorials \t\t\t\t\t\t\t//使用rospack命令来查看一级依赖包\nrospack depends beginner_tutorials\t\t\t\t\t\t\t\t//使用rospack可以递归检测出所有的依赖包\n```\n> 本节还介绍了.xml文件的书写方法\n\n## 编译ROS程序包\n\n```c++\nsource /opt/ros/kinetic/setup.bash\t\t\t\t\t//先source你的环境配置(setup)文件\ncd catkin工作空间\ncatkin_make\t\t\t\t\t\t\t\t\t\t\t//编译\ncatkin_make --source my_src\t\t\t\t\t\t\t//编译存放在了my_src中，而非在默认工作空间中（~/catkin_ws/src)的源代码\n```\n\n## 理解ROS节点\n\n```c++\nsudo apt-get install ros-kinetic-ros-tutorials\t\t//安装龟龟模拟器\nroscore\t\t\t\t\t\t\t\t\t\t\t\t//运行所有ROS程序前首先要运行的命令\nrosnode list\t\t\t\t\t\t\t\t\t\t//列出活跃的节点，本例为/rosout\nrosnode info /rosout \t\t\t\t\t\t\t\t//返回特定节点的信息\nrosrun turtlesim turtlesim_node\t\t\t\t\t\t//打开新终端，运行turtlesim。    rosrun [package_name] [node_name]\nrosnode list\t\t\t\t\t\t\t\t\t\t//打开新终端，查看节点：/rosout  /turtlesim\nrosrun turtlesim turtlesim_node __name:=my_turtle   //关闭原来的turtlesim，打开新终端运行。改变节点名称\nrosnode list \t\t\t\t\t\t\t\t\t\t//查看新的节点名称：/rosout /my_turtle\nrosnode ping my_turtle\t\t\t\t\t\t\t\t//使用另一个节点来ping该节点\n```\n\n## 理解ROS话题\n\n```c++\nroscore \t\t\t\t\t\t\t//新开一个终端，打开ros\nrosrun turtlesim turtlesim_node\t\t//新开一个终端。这是接受消息的节点\nrosrun turtlesim turtle_teleop_key\t//新开一个终端，通过键盘来控制龟龟运动。这也是发布消息的节点\nrosrun rqt_graph rqt_graph\t\t\t//新开一个终端，创建一个显示当前系统运行情况的动态图形\nrostopic -h\t\t\t\t\t\t\t//新开一个终端，查看rostopic的子命令\nrostopic echo /turtle1/cmd_vel\t\t//你可能看不到任何东西因为现在还没有数据发布到该话题上。接下来我们通过按下方向键使turtle_teleop_key节点发布数据。可以返回rqt_graph中刷新查看\nrostopic list -v \t\t\t\t\t//查看有关所发布和订阅的话题及其类型的详细信息\nrostopic type /turtle1/cmd_vel\t\t//查看发布在某个话题上的消息类型，会看到：geometry_msgs/Twist\nrosmsg show geometry_msgs/Twist\t\t//查看消息的详细情况。根据该结果可以知道turtlesim节点所期望的消息类型(可看到包含linear和angular两个值)，接下来我们就可以给turtle发布命令了\nrostopic pub -1 /turtle1/cmd_vel geometry_msgs/Twist -- '[2.0, 0.0, 0.0]' '[0.0, 0.0, 1.8]'\n\t\t\t\t\t\t\t\t\t//rostopic pub可以把数据发布到当前某个正在广播的话题上。用法:rostopic pub [topic] [msg_type] [args]\n\t\t\t\t\t\t\t\t\t//以上命令会发送一条消息给turtlesim，告诉它以2.0大小的线速度和1.8大小的角速度开始移动。\n\t\t\t\t\t\t\t\t\t//-1: （单个破折号）这个参数选项使rostopic发布一条消息后马上退出。\n\t\t\t\t\t\t\t\t\t///turtle1/cmd_vel: 消息所发布到的话题名称\n\t\t\t\t\t\t\t\t\t//geometry_msgs/Twist: 所发布消息类型\n\t\t\t\t\t\t\t\t\t//--: 双破折号）这会告诉命令选项解析器接下来的参数部分都不是命令选项。这在参数里面包含有破折号-（比如负号）时是必须要添加的\n\t\t\t\t\t\t\t\t\t//'[2.0, 0.0, 0.0]' '[0.0, 0.0, 1.8]': 正如之前提到的，在一个geometry_msgs/Twist消息里面包含有两个浮点型元素：linear和angular。\n\t\t\t\t\t\t\t\t\t//在本例中，'[2.0, 0.0, 0.0]'是linear的值，'[0.0, 0.0, 1.8]'是angular的值。这些参数其实是按照YAML语法格式编写的，这在YAML文档 (/ROS/YAMLCommandLine)中有更多的描述。\nrostopic pub /turtle1/cmd_vel geometry_msgs/Twist -r 1 -- '[2.0, 0.0, 0.0]' '[0.0, 0.0, 1.8]'\n\t\t\t\t\t\t\t\t\t//这条命令以1Hz的频率发布速度命令到速度话题上。使用rostopic pub -r命令来发布一个稳定的命令流\nrostopic hz /turtle1/pose\t\t\t//rostopic hz命令可以用来查看数据发布的频率。\trostopic hz [topic]\t\nrostopic type /turtle1/pose | rosmsg show\n\t\t\t\t\t\t\t\t\t//结合rostopic type和rosmsg show命令来获取关于某个话题的更深层次的信息\t\n\t\t\t\t\t\t\t\t\t//可以看到pose下有五个信息: x y theta linear_velocity angular_velocity\nrosrun rqt_plot rqt_plot\t\t\t//使用rqt_plot命令来绘制正在发布到/turtle1/pose话题上的数据变化图形\t\n\t\t\t\t\t\t\t\t\t//这会弹出一个新窗口，在窗口左上角的一个文本框里面你可以添加需要绘制的话题。在里面输入/turtle1/pose/x后之前处于禁用状态的加号按钮将会被使能变亮。按一下该按钮，并\n\t\t\t\t\t\t\t\t\t//对/turtle1/pose/y重复相同的过程。现在你会在图形中看到turtle的x-y位置坐标图。\n\t\t\t\t\t\t\t\t\t//按下减号按钮会显示一组菜单让你隐藏图形中指定的话题。现在隐藏掉你刚才添加的话题并添加/turtle1/pose/theta\t\t\t\t\t\t\t\t\t\t\t\n```\n\n## 理解ROS服务和参数\n\n在小乌龟仍然启动的基础上：\n\n```c++\nrosservice list\t\t\t\t\t\t//输出可用服务的信息\nrosservice call\t\t\t\t\t\t//调用带参数的服务\nrosservice type \t\t\t\t\t//输出服务类型\nrosservice find \t\t\t\t\t//依据类型寻找服务find services by service type \nrosservice uri \t\t\t\t\t\t//输出服务的ROSRPC uri\t\t\nrosservice type clear\t\t\t\t//查看clear服务类型，clear是rosservice list中的一种服务类型。rosservice type [service]\nrosservice call clear\t\t\t\t//代用clear服务，该服务清除了turtlesim_node的背景上的轨迹。rosservice call [service] [args]\nrosservice type spawn| rossrv show \t//查看再生（spawn）服务的信息\nrosservice call spawn 2 2 0.2 \"\" \t//调用再生服务，在给定的位置和角度生成一只新的乌龟。名字参数是可选的，这里我们不设具体的名字，让turtlesim自动创建一个。\n```\n\n```c++\nrosparam set \t\t\t\t\t\t//设置参数\nrosparam get \t\t\t\t\t\t//获取参数\nrosparam load \t\t\t\t\t\t//从文件读取参数\nrosparam dump \t\t\t\t\t\t//向文件中写入参数\nrosparam delete \t\t\t\t\t//删除参数\nrosparam list \t\t\t\t\t\t//列出节点在服务器上的参数名\nrosparam set background_r 150\t\t//修改背景颜色的红色通道。\trosparam set [param_name]\nrosservice call clear\t\t\t\t//上述指令修改了参数的值，现在我们调用清除服务使得修改后的参数生效\nrosparam get background_g\t\t\t//获取背景的绿色通道的值。 rosparam get [param_name]\nrosparam get /\t\t\t\t\t\t//显示参数服务器上的所有内容\nrosparam dump params.yaml \t\t\t//将所有的参数写入params.yaml文件。 rosparam dump [file_name]\nrosparam load params.yaml copy\t\t//将yaml文件重载入新的命名空间，比如说copy空间。 rosparam load [file_name] [namespace]\nrosparam get copy/background_b\t\t//获取copy空间的蓝色背景参数\n```\n\n## 使用 rqt_console 和 roslaunch\n\n```c++\nsudo apt-get install ros-kinetic-rqt ros-kinetic-rqt-common-plugins ros-kinetic-turtlesim\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t//预先安装需要的程序包，若安装，请忽略\nrosrun rqt_console rqt_console\t\t\t\t\t\t\t//新终端中运行。 rqt_console属于ROS日志框架(logging framework)的一部分，用来显示节点的输出信息\nrosrun rqt_logger_level rqt_logger_level\t\t\t\t//新终端中运行。 rqt_logger_level允许我们修改节点运行时输出信息的日志等级（logger levels）（包括 DEBUG、WARN、INFO和ERROR）。\nrosrun turtlesim turtlesim_node\t\t\t\t\t\t\t//新终端中运行。启动turtlesim\nrostopic pub /turtle1/cmd_vel geometry_msgs/Twist -r 1 -- '[2.0, 0.0, 0.0]' '[0.0, 0.0, 0.0]'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t//小龟龟动起来再查看rqt_console中的输出\nroscd beginner_tutorials\t\t\t\t\t\t\t\t//打开之前创建的beginner_tutorials包，如果打不开，有两种办法解决：\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t//1.输入绝对路径：cd ~/catkin_ws/src/beginner_tutorials\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t//2.设置当前终端环境路径：export ROS_PACKAGE_PATH=~/catkin_ws/src:$ROS_PACKAGE_PATH。 成功后再输入：roscd beginner_tutorials\t\nmkdir launch && cd launch \t\t\t\t\t\t\t\t//创建并打开launch文件夹\t\t\t\t\t\t\t\t\t\t\t\n```\n\n新建一个空文件，命名为`turtlemimic.launch`，并在其中写入：\n\n```c++\n<launch>\n\n\t<group ns=\"turtlesim1\">\n \t\t<node pkg=\"turtlesim\" name=\"sim\" type=\"turtlesim_node\"/>\n \t</group>\n\n\t<group ns=\"turtlesim2\">\n \t\t<node pkg=\"turtlesim\" name=\"sim\" type=\"turtlesim_node\"/>\n \t</group>\n\n \t<node pkg=\"turtlesim\" name=\"mimic\" type=\"mimic\">\n\t <remap from=\"input\" to=\"turtlesim1/turtle1\"/>\n\t <remap from=\"output\" to=\"turtlesim2/turtle1\"/>\n \t</node>\n\n</launch>\n```\n\n> 在3~9行我们创建了两个节点分组并以'命名空间（namespace)'标签来区分，其中一个名为turtulesim1，另一个名为turtlesim2，两个组里面都使用相同的turtlesim节点并命名为'sim'。这样可以让我们同时启动两个turtlesim模拟器而不会产生命名冲突。在11~14行我们启动模仿节点，并将所有话题的输入和输出分别重命名为turtlesim1和turtlesim2，这样就会使turtlesim2模仿turtlesim1。第1行和第16行分别表示luanch文件的开始标签和结束标签。\n\n```c++\nroslaunch beginner_tutorials turtlemimic.launch\t\t\t//通过roslaunch命令启动launch文件，从而启动多个节点\nrostopic pub /turtlesim1/turtle1/cmd_vel geometry_msgs/Twist -r 1 -- '[2.0, 0.0, 0.0]' '[0.0, 0.0, -1.8]'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t//在一个新终端中使用rostopic命令发送速度设定消息\n```\n\n## 使用rosed编辑ROS中的文件\n\n如果习惯使用emacs，需要先将emacs设为默认编辑器，如果习惯使用vim，需要安装vim。这里以设置emacs为例。\n\n```c++\nemacs .bashrc\t\t\t\t//新开一个终端。在.bashrc文件的最后一行写入：export EDITOR='emacs -nw'\necho $EDITOR\t\t\t\t//打开一个新终端，看是否定义了EDITOR。注意：.bashrc文件的改变，只会在新的终端才有效。已经打开的终端不受环境变量的影响。正常情况下回输出:emacs -nw\nrosed roscpp Logger.msg \t//rosed可以直接通过package名来获取到待编辑的文件而无需指定该文件的存储路径了. rosed [package_name] [filename]\n```\n\n## 创建ROS消息和ROS服务\n\n### 使用ROSmsg\n#### 创建一个rosmsg\n```c++\ncd ~/catkin_ws/src/beginner_tutorials\t\t\t//打开之前创建的package\nmkdir msg \t\t\t\t\t\t\t\t\t\t//创建msg文件夹\necho \"int64 num\" > msg/Num.msg \t\t\t\t\t//写入到Num.msg文件中\n```\n\n确保msg文件被转为C++，Python和其他语言的源代码。查看package.xml, 确保它包含以下两条语句。若没有，手动添加。\n\n```c++\n<build_depend>message_generation</build_depend>\n<exec_depend>message_runtime</exec_depend>\n```\n\n#### 修改./beginner_tutorials/CMakeLists.txt:\n\n1.寻找find_package，向其中添加message_generation。\n\n```c++\nfind_package(catkin REQUIRED COMPONENTS \n\t         roscpp \n\t         rospy \n\t         std_msgs \n\t         message_generation\n)\n```\n\n2.寻找catkin_package，设置运行依赖。\n\n```c++\ncatkin_package(\n#  INCLUDE_DIRS include\n#  LIBRARIES beginner_tutorials\n#  CATKIN_DEPENDS roscpp rospy std_msgs\n#  DEPENDS system_lib\n  CATKIN_DEPENDS message_runtime\n)\n```\n\n3.将add_message_files代码块去掉注释，并用自己的Num.msg代替Messag1.msg，如下：\n\n```c++\nadd_message_files(\n   FILES\n   Num.msg\n)\n```\n\n4.取消generate_messages()的注释，如下：\n\n```c++\ngenerate_messages(\n   DEPENDENCIES\n   std_msgs\n)\n```\n\n#### 使用rosmsg\n\n```c++\nrosmsg show beginner_tutorials/Num \t\t\t\t//通过rosmsg show命令，检查ROS是否能够识消息。正确情况下会输出：int64 num。\n\t\t\t\t\t\t\t\t\t\t\t\t//如果不正常，需要设置path，输入指令：export ROS_PACKAGE_PATH=~/catkin_ws/src:$ROS_PACKAGE_PATH。再次输入show命令。\n```\n\n### 使用ROSsrv\n\n#### 创建一个srv\n\n```c++\nroscd beginner_tutorials\nmkdir srv\nroscp rospy_tutorials AddTwoInts.srv srv/AddTwoInts.srv\n\t\t\t\t\t\t\t\t\t\t\t\t//roscp [package_name] [file_to_copy_path] [copy_path]\n\t\t\t\t\t\t\t\t\t\t\t\t//roscp是一个很实用的命令行工具，它实现了将文件从一个package复制到另外一个package的功能。\n```\n\n同样，需要确保srv文件被转换为C++和其他语言的源代码。\n\n#### 修改CMakeLists.txt:\n\n1.和ROSmsg一样添加对message_generation的依赖。(message_generation 对msg和srv都起作用)\n\n2.将add_message_files代码块去掉注释，并添加自己的srv文件，如下：\n\n```c++\nadd_service_files(\n   FILES\n   AddTwoInts.srv\n)\n```\n\n3.取消generate_messages()的注释，同ROSmsg，如下：\n\n#### 使用ROSsrv\n\n```c++\nrossrv show beginner_tutorials/AddTwoInts \t\t//通过rosmsg show命令，检查ROS是否能够识该服务。 rossrv show <service type>。跟rosmsg类似, 你也可以不指定具体的package名来查找服务文件\n```\n\n### 新开一个终端，打开工作空间并编译：\n\n```c++\ncd catkin_ws\ncatkin_make\n```\n\n所有在msg路径下的.msg文件都将转换为ROS所支持语言的源代码。生成的C++头文件将会放置在~/catkin_ws/devel/include/beginner_tutorials。\n\n## 编写简单的消息发布器和订阅器 (C++)\n\n创建一个发布器节点(\"talker\")，它将不断的在ROS网络中广播消息。创建一个接收器节点(\"listener\")，它来接收ROS网络中的广播消息。\n\n### ./beginner_tutorials/src/talker.cpp\n\n> 为了减少篇幅，将源码中的大段英文注释删除。\n\n```c++\n#include \"ros/ros.h\"\t\t\t\t\t//ros/ros.h 是一个实用的头文件，它引用了 ROS 系统中大部分常用的头文件。\n#include \"std_msgs/String.h\"\t\t\t//这引用了 std_msgs/String 消息, 它存放在 std_msgs package 里，是由 String.msg 文件自动生成的头文件。\n\n#include <sstream>\n\n/**\n * This tutorial demonstrates simple sending of messages over the ROS system.\n */\nint main(int argc, char **argv)\n{\n\n  ros::init(argc, argv, \"talker\");\t\t//初始化 ROS 。它允许 ROS 通过命令行进行名称重映射——然而这并不是现在讨论的重点。在这里，我们也可以指定节点的名称——运行过程中，节点的名称必须唯一。\n\t\t\t\t\t\t\t\t\t\t//这里的名称必须是一个 base name ，也就是说，名称内不能包含 / 等符号。\n\n  ros::NodeHandle n;\t\t\t\t\t//为这个进程的节点创建一个句柄。第一个创建的 NodeHandle 会为节点进行初始化，最后一个销毁的 NodeHandle 则会释放该节点所占用的所有资源。\n\n\n  /**\n   *告诉 master 我们将要在 chatter（话题名） 上发布 std_msgs/String 消息类型的消息。这样 master 就会告诉所有订阅了 chatter *话题的节点，将要有数据发布。第二个参数是发布序列的大小。如果我们发布的消息的频率太高，缓冲区中的消息在大于 1000 个的时候就会开始丢弃先前发布的消息。\n\n   *NodeHandle::advertise() 返回一个 ros::Publisher 对象,它有两个作用： 1) 它有一个 publish() 成员函数可以让你在topic上发布消息； 2) 如果消息类型不对,它会拒绝发布。\n   */\n  ros::Publisher chatter_pub = n.advertise<std_msgs::String>(\"chatter\", 1000);\n\n  ros::Rate loop_rate(10);\t\t\t\t//ros::Rate 对象可以允许你指定自循环的频率。它会追踪记录自上一次调用 Rate::sleep() 后时间的流逝，并休眠直到一个频率周期的时间。这个例子中，我们让它以 10Hz 的频率运行。\n\n  int count = 0;\n  while (ros::ok())\t\t\t\t\t\t//roscpp 会默认生成一个 SIGINT 句柄，它负责处理 Ctrl-C 键盘操作——使得 ros::ok() 返回 false。\n  {\n    std_msgs::String msg;\t\t\t\t//使用一个由 msg file 文件产生的『消息自适应』类在 ROS 网络中广播消息。现在我们使用标准的String消息，它只有一个数据成员 \"data\"。\n\n    std::stringstream ss;\n    ss << \"hello world \" << count;\n    msg.data = ss.str();\n\n    ROS_INFO(\"%s\", msg.data.c_str());\t//ROS_INFO 和其他类似的函数可以用来代替 printf/cout 等函数。\n\n    chatter_pub.publish(msg);\t\t\t//向所有订阅 chatter 话题的节点发送消息。\n\n    ros::spinOnce();\t\t\t\t\t//在这个例子中并不是一定要调用 ros::spinOnce()，因为我们不接受回调。然而，如果你的程序里包含其他回调函数，最好在这里加上 \n    \t\t\t\t\t\t\t\t\t//ros::spinOnce()这一语句，否则你的回调函数就永远也不会被调用了。\t\t\t\t\n\n    loop_rate.sleep();\t\t\t\t\t//调用 ros::Rate 对象来休眠一段时间以使得发布频率为 10Hz。\n    ++count;\n  }\n\n\n  return 0;\n}\n```\n\n### ./beginner_tutorials/src/listener.cpp\n\n```c++\n#include \"ros/ros.h\"\n#include \"std_msgs/String.h\"\n\n/**\n * This tutorial demonstrates simple receipt of messages over the ROS system.\n */\nvoid chatterCallback(const std_msgs::String::ConstPtr& msg)\t\t\t\t//这是一个回调函数，当接收到 chatter 话题的时候就会被调用。消息是以 boost shared_ptr 指针的形式传输，这就意味着你可以存储它而又不需要复制数据。\n{\n  ROS_INFO(\"I heard: [%s]\", msg->data.c_str());\n}\n\nint main(int argc, char **argv)\n{\n\n  ros::init(argc, argv, \"listener\");\n\n  ros::NodeHandle n;\n\n  /**\n   * 告诉 master 我们要订阅 chatter 话题上的消息。当有消息发布到这个话题时，ROS 就会调用 chatterCallback() 函数。第二个参数是队列大小，以防我们处理消息的速度不够快，当缓存达到 1000 \n   * 条消息后，再有新的消息到来就将开始丢弃先前接收的消息。\n   *\n   * NodeHandle::subscribe() 返回 ros::Subscriber 对象,你必须让它处于活动状态直到你不再想订阅该消息。当这个对象销毁时，它将自动退订 chatter 话题的消息。\n   *\n   * 有各种不同的 NodeHandle::subscribe() 函数，允许你指定类的成员函数，甚至是 Boost.Function 对象可以调用的任何数据类型。\n   */\n  ros::Subscriber sub = n.subscribe(\"chatter\", 1000, chatterCallback);\n\n  /**\n   * ros::spin() 进入自循环，可以尽可能快的调用消息回调函数。如果没有消息到达，它不会占用很多 CPU，所以不用担心。一旦 ros::ok() 返回 false，ros::spin() 就会立刻跳出自循环。\n   * 这有可能是 ros::shutdown() 被调用，或者是用户按下了 Ctrl-C，使得 master 告诉节点要终止运行。也有可能是节点被人为关闭的。\n   */\n  ros::spin();\n\n  return 0;\n}\n```\n\n下边，我们来总结一下:\n\n- 初始化ROS系统\n- 订阅 chatter 话题\n- 进入自循环，等待消息的到达\n- 当消息到达，调用 chatterCallback() 函数\n\n### ./beginner_tutorials/CMakeLists.txt\n\n```py\ncmake_minimum_required(VERSION 2.8.3)\nproject(beginner_tutorials)\n\n## Find catkin and any catkin packages\nfind_package(catkin REQUIRED COMPONENTS roscpp rospy std_msgs genmsg)\n\n## Declare ROS messages and services\nadd_message_files(FILES Num.msg)\nadd_service_files(FILES AddTwoInts.srv)\n\n## Generate added messages and services\ngenerate_messages(DEPENDENCIES std_msgs)\n\n## Declare a catkin package\ncatkin_package()\n\n## Build talker and listener\ninclude_directories(include ${catkin_INCLUDE_DIRS})\n\nadd_executable(talker src/talker.cpp)\ntarget_link_libraries(talker ${catkin_LIBRARIES})\nadd_dependencies(talker beginner_tutorials_generate_messages_cpp)\n\nadd_executable(listener src/listener.cpp)\ntarget_link_libraries(listener ${catkin_LIBRARIES})\nadd_dependencies(listener beginner_tutorials_generate_messages_cpp)\n```\n\n### 测试\n\n在工作空间目录下进行编译，并运行。\n\n```c++\nroscore\t\t\t\t\t\t\t\t\t//新开一个终端\ncd catkin_ws\t\t\t\t\t\t\t//新开一个终端\ncatkin_make\nsource ./devel/setup.bash       \t\t//在运行你自己的程序前，已经source了catkin工作空间下的setup.sh文件\nrosrun beginner_tutorials talker \t\t//启动发布器\n\ncd catkin_ws\t\t\t\t\t\t\t//新开一个终端，并打开工作空间\nsource ./devel/setup.bash       \t\t//在运行你自己的程序前，已经source了catkin工作空间下的setup.sh文件\nrosrun beginner_tutorials listener \t\t//启动订阅器\n```\n\n## 编写简单的服务器和客户端(C++)\n\n### ./beginner_tutorials/src/add_two_ints_server.cpp\n\n```c++\n#include \"ros/ros.h\"\n#include \"beginner_tutorials/AddTwoInts.h\"\t\t\t\t\t\t\t\t//beginner_tutorials/AddTwoInts.h是由编译系统自动根据我们先前创建的srv文件生成的对应该srv文件的头文件。\n\n/**\n  * 这个函数提供两个int值求和的服务，int值从request里面获取，而返回数据装入response内，这些数据类型都定义在srv文件内部，函数返回一个boolean值。\n  * 两个int值进行相加，并存入response。然后一些关于request和response的信息被记录下来。最后，service完成计算后返回true值。\n  */\nbool add(beginner_tutorials::AddTwoInts::Request  &req,\n         beginner_tutorials::AddTwoInts::Response &res)\n{\n  res.sum = req.a + req.b;\n  ROS_INFO(\"request: x=%ld, y=%ld\", (long int)req.a, (long int)req.b);\n  ROS_INFO(\"sending back response: [%ld]\", (long int)res.sum);\n  return true;\n}\n\nint main(int argc, char **argv)\n{\n  ros::init(argc, argv, \"add_two_ints_server\");\n  ros::NodeHandle n;\n\n  ros::ServiceServer service = n.advertiseService(\"add_two_ints\", add);\t//建立service，并在ROS内发布出来。\n  ROS_INFO(\"Ready to add two ints.\");\n  ros::spin();\n\n  return 0;\n}\n```\n\n### ./beginner_tutorials/src/add_two_ints_client.cpp\n\n```c++\n#include \"ros/ros.h\"\n#include \"beginner_tutorials/AddTwoInts.h\"\n#include <cstdlib>\n\nint main(int argc, char **argv)\n{\n  ros::init(argc, argv, \"add_two_ints_client\");\n  if (argc != 3)\n  {\n    ROS_INFO(\"usage: add_two_ints_client X Y\");\n    return 1;\n  }\n\n  ros::NodeHandle n;\n  ros::ServiceClient client = n.serviceClient<beginner_tutorials::AddTwoInts>(\"add_two_ints\");\t\t//这段代码为add_two_ints service创建一个client。ros::ServiceClient 对象待会用来调用service。\n  beginner_tutorials::AddTwoInts srv;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//这里，我们实例化一个由ROS编译系统自动生成的service类，并给其request成员赋值。\n  srv.request.a = atoll(argv[1]);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// 一个service类包含两个成员request和response。同时也包括两个类定义Request和Response。\n  srv.request.b = atoll(argv[2]);\n\n  /**\n   * 这段代码是在调用service。由于service的调用是模态过程（调用的时候占用进程阻止其他代码的执行），一旦调用完成，将返回调用结果。\n   * 如果service调用成功，call()函数将返回true，srv.response里面的值将是合法的值。\n   * 如果调用失败，call()函数将返回false，srv.response里面的值将是非法的。 \n   */\n  if (client.call(srv))\n  {\n    ROS_INFO(\"Sum: %ld\", (long int)srv.response.sum);\n  }\n  else\n  {\n    ROS_ERROR(\"Failed to call service add_two_ints\");\n    return 1;\n  }\n\n  return 0;\n}\n```\n\n### ./beginner_tutorials/CMakeLists.txt\n\n在上一节的CMakeLists.txt后添加：\n\n```py\nadd_executable(add_two_ints_server src/add_two_ints_server.cpp)\ntarget_link_libraries(add_two_ints_server ${catkin_LIBRARIES})\nadd_dependencies(add_two_ints_server beginner_tutorials_gencpp)\n\nadd_executable(add_two_ints_client src/add_two_ints_client.cpp)\ntarget_link_libraries(add_two_ints_client ${catkin_LIBRARIES})\nadd_dependencies(add_two_ints_client beginner_tutorials_gencpp)\n```\n\n### 测试\n\n在工作空间目录下进行编译，并运行。\n\n```c++\nroscore\t\t\t\t\t\t\t\t\t\t\t\t//新开一个终端\ncd catkin_ws\t\t\t\t\t\t\t\t\t\t//新开一个终端\ncatkin_make\nsource ./devel/setup.bash       \t\t\t\t\t//在运行你自己的程序前，已经source了catkin工作空间下的setup.sh文件\nrosrun beginner_tutorials add_two_ints_server \t\t//启动服务器\n\ncd catkin_ws\t\t\t\t\t\t\t\t\t\t//新开一个终端，并打开工作空间\nsource ./devel/setup.bash       \t\t\t\t\t//在运行你自己的程序前，已经source了catkin工作空间下的setup.sh文件\nrosrun beginner_tutorials add_two_ints_client 1 3 \t//启动客户端\n```\n","source":"_posts/2019-08-03-ROSÓÐÓÃÖ¸Áî¼¯.md","raw":"---\ntitle: ROS(kinetic)有用指令集\ndescription: 介绍ROS的kinetic版本有用的一些指令集\ndate: '2019.08.03.16:30'\ncategories:\n  - 机器人控制\ntags:\n  - 机器人\n  - ROS\n  - Library\nabbrlink: 25595\n---\n\n> 本文中的环境为Ubuntu16.04LTS + ROS(kinetic).\n\n<!-- more -->\n\n# 前言\n\n由于从ROS的官网上的教程并没有实时更新，上面混杂了一些旧版本的东西，看起来有些麻烦，而且有的介绍过于繁琐，因此本篇博客旨在介绍笔者使用版本的精简指令集。关于指令的详细介绍，还需从官网上查看相关内容。\n\n# 指令介绍\n\n## ROS安装指令\n\n在执行下面的指令前，请注意先将源换位内地源，推荐清华源。\n\n```py\nsudo sh -c 'echo \"deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main\" > /etc/apt/sources.list.d/ros-latest.list'\nsudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key 0xB01FA116\nsudo apt-get update\t#如果更新失败提示GPT error，输入sudo apt-key adv --recv-keys --keyserver keyserver.ubuntu.com F42ED6FBAB17C654\nsudo apt-get install ros-kinetic-desktop-full\nsudo rosdep init\nrosdep update\necho \"source /opt/ros/kinetic/setup.bash\" >> ~/.bashrc\nsource ~/.bashrc\nsudo apt install python-rosinstall python-rosinstall-generator python-wstool build-essential\n```\n\n## UR5的仿真环境安装与使用\n\n```c++\nsudo apt-get install ros-kinetic-universal-robot\nroslaunch ur_gazebo ur5.launch\t\nroslaunch ur5_moveit_config ur5_moveit_planning_execution.launch sim:=true\nroslaunch ur5_moveit_config moveit_rviz.launch config:=true\n```\n\n## ROS文件系统介绍\n\n```c++\nsudo apt-get install ros-kinetic-ros-tutorials\t\t//安装ros-tutorials程序包\nrospack find roscpp\t\t\t\t\t\t\t\t\t//rospack find [包名称]  rospack (/rospack)允许你获取软件包的有关信息。在本教程中，我们只涉及到rospack中find参数选项，该选项可以返回软件包的路径信息。\nroscd roscpp\t\t\t\t\t\t\t\t\t\t//roscd [本地包名称[/子目录]]   直接切换工作目录到某个软件包或者软件包集当中\npwd\t\t\t\t\t\t\t\t\t\t\t\t\t//输出当前工作目录\necho $ROS_PACKAGE_PATH\t\t\t\t\t\t\t\t//查看ROS_PACKAGE_PATH\nroscd log\t\t\t\t\t\t\t\t\t\t\t//切换到ROS保存日记文件的目录下。如果你没有执行过任何ROS程序，系统会报错说该目录不存在。\nrosls roscpp_tutorials\t\t\t\t\t\t\t\t//rosls [本地包名称[/子目录]] 直接按软件包的名称而不是绝对路径来罗列目录\n```\n\n## 使用catkin创建工作空间\n\n```c++\nsource /opt/ros/kinetic/setup.bash\t\t\t\t\t//sourced your environment\nmkdir -p ~/catkin_ws/src\ncd ~/catkin_ws/\ncatkin_make\nsource devel/setup.bash\necho $ROS_PACKAGE_PATH \t\t\t\t\t\t\t\t//确认环境变量包含了目录\n```\n\n## 创建ROS程序包\n\n```c++\ncd ~/catkin_ws/src\ncatkin_create_pkg beginner_tutorials std_msgs rospy roscpp \t\t//使用catkin_create_pkg命令来创建一个名为'beginner_tutorials'的新程序包，这个程序包依赖于std_msgs、roscpp和rospy\nrospack depends1 beginner_tutorials \t\t\t\t\t\t\t//使用rospack命令来查看一级依赖包\nrospack depends beginner_tutorials\t\t\t\t\t\t\t\t//使用rospack可以递归检测出所有的依赖包\n```\n> 本节还介绍了.xml文件的书写方法\n\n## 编译ROS程序包\n\n```c++\nsource /opt/ros/kinetic/setup.bash\t\t\t\t\t//先source你的环境配置(setup)文件\ncd catkin工作空间\ncatkin_make\t\t\t\t\t\t\t\t\t\t\t//编译\ncatkin_make --source my_src\t\t\t\t\t\t\t//编译存放在了my_src中，而非在默认工作空间中（~/catkin_ws/src)的源代码\n```\n\n## 理解ROS节点\n\n```c++\nsudo apt-get install ros-kinetic-ros-tutorials\t\t//安装龟龟模拟器\nroscore\t\t\t\t\t\t\t\t\t\t\t\t//运行所有ROS程序前首先要运行的命令\nrosnode list\t\t\t\t\t\t\t\t\t\t//列出活跃的节点，本例为/rosout\nrosnode info /rosout \t\t\t\t\t\t\t\t//返回特定节点的信息\nrosrun turtlesim turtlesim_node\t\t\t\t\t\t//打开新终端，运行turtlesim。    rosrun [package_name] [node_name]\nrosnode list\t\t\t\t\t\t\t\t\t\t//打开新终端，查看节点：/rosout  /turtlesim\nrosrun turtlesim turtlesim_node __name:=my_turtle   //关闭原来的turtlesim，打开新终端运行。改变节点名称\nrosnode list \t\t\t\t\t\t\t\t\t\t//查看新的节点名称：/rosout /my_turtle\nrosnode ping my_turtle\t\t\t\t\t\t\t\t//使用另一个节点来ping该节点\n```\n\n## 理解ROS话题\n\n```c++\nroscore \t\t\t\t\t\t\t//新开一个终端，打开ros\nrosrun turtlesim turtlesim_node\t\t//新开一个终端。这是接受消息的节点\nrosrun turtlesim turtle_teleop_key\t//新开一个终端，通过键盘来控制龟龟运动。这也是发布消息的节点\nrosrun rqt_graph rqt_graph\t\t\t//新开一个终端，创建一个显示当前系统运行情况的动态图形\nrostopic -h\t\t\t\t\t\t\t//新开一个终端，查看rostopic的子命令\nrostopic echo /turtle1/cmd_vel\t\t//你可能看不到任何东西因为现在还没有数据发布到该话题上。接下来我们通过按下方向键使turtle_teleop_key节点发布数据。可以返回rqt_graph中刷新查看\nrostopic list -v \t\t\t\t\t//查看有关所发布和订阅的话题及其类型的详细信息\nrostopic type /turtle1/cmd_vel\t\t//查看发布在某个话题上的消息类型，会看到：geometry_msgs/Twist\nrosmsg show geometry_msgs/Twist\t\t//查看消息的详细情况。根据该结果可以知道turtlesim节点所期望的消息类型(可看到包含linear和angular两个值)，接下来我们就可以给turtle发布命令了\nrostopic pub -1 /turtle1/cmd_vel geometry_msgs/Twist -- '[2.0, 0.0, 0.0]' '[0.0, 0.0, 1.8]'\n\t\t\t\t\t\t\t\t\t//rostopic pub可以把数据发布到当前某个正在广播的话题上。用法:rostopic pub [topic] [msg_type] [args]\n\t\t\t\t\t\t\t\t\t//以上命令会发送一条消息给turtlesim，告诉它以2.0大小的线速度和1.8大小的角速度开始移动。\n\t\t\t\t\t\t\t\t\t//-1: （单个破折号）这个参数选项使rostopic发布一条消息后马上退出。\n\t\t\t\t\t\t\t\t\t///turtle1/cmd_vel: 消息所发布到的话题名称\n\t\t\t\t\t\t\t\t\t//geometry_msgs/Twist: 所发布消息类型\n\t\t\t\t\t\t\t\t\t//--: 双破折号）这会告诉命令选项解析器接下来的参数部分都不是命令选项。这在参数里面包含有破折号-（比如负号）时是必须要添加的\n\t\t\t\t\t\t\t\t\t//'[2.0, 0.0, 0.0]' '[0.0, 0.0, 1.8]': 正如之前提到的，在一个geometry_msgs/Twist消息里面包含有两个浮点型元素：linear和angular。\n\t\t\t\t\t\t\t\t\t//在本例中，'[2.0, 0.0, 0.0]'是linear的值，'[0.0, 0.0, 1.8]'是angular的值。这些参数其实是按照YAML语法格式编写的，这在YAML文档 (/ROS/YAMLCommandLine)中有更多的描述。\nrostopic pub /turtle1/cmd_vel geometry_msgs/Twist -r 1 -- '[2.0, 0.0, 0.0]' '[0.0, 0.0, 1.8]'\n\t\t\t\t\t\t\t\t\t//这条命令以1Hz的频率发布速度命令到速度话题上。使用rostopic pub -r命令来发布一个稳定的命令流\nrostopic hz /turtle1/pose\t\t\t//rostopic hz命令可以用来查看数据发布的频率。\trostopic hz [topic]\t\nrostopic type /turtle1/pose | rosmsg show\n\t\t\t\t\t\t\t\t\t//结合rostopic type和rosmsg show命令来获取关于某个话题的更深层次的信息\t\n\t\t\t\t\t\t\t\t\t//可以看到pose下有五个信息: x y theta linear_velocity angular_velocity\nrosrun rqt_plot rqt_plot\t\t\t//使用rqt_plot命令来绘制正在发布到/turtle1/pose话题上的数据变化图形\t\n\t\t\t\t\t\t\t\t\t//这会弹出一个新窗口，在窗口左上角的一个文本框里面你可以添加需要绘制的话题。在里面输入/turtle1/pose/x后之前处于禁用状态的加号按钮将会被使能变亮。按一下该按钮，并\n\t\t\t\t\t\t\t\t\t//对/turtle1/pose/y重复相同的过程。现在你会在图形中看到turtle的x-y位置坐标图。\n\t\t\t\t\t\t\t\t\t//按下减号按钮会显示一组菜单让你隐藏图形中指定的话题。现在隐藏掉你刚才添加的话题并添加/turtle1/pose/theta\t\t\t\t\t\t\t\t\t\t\t\n```\n\n## 理解ROS服务和参数\n\n在小乌龟仍然启动的基础上：\n\n```c++\nrosservice list\t\t\t\t\t\t//输出可用服务的信息\nrosservice call\t\t\t\t\t\t//调用带参数的服务\nrosservice type \t\t\t\t\t//输出服务类型\nrosservice find \t\t\t\t\t//依据类型寻找服务find services by service type \nrosservice uri \t\t\t\t\t\t//输出服务的ROSRPC uri\t\t\nrosservice type clear\t\t\t\t//查看clear服务类型，clear是rosservice list中的一种服务类型。rosservice type [service]\nrosservice call clear\t\t\t\t//代用clear服务，该服务清除了turtlesim_node的背景上的轨迹。rosservice call [service] [args]\nrosservice type spawn| rossrv show \t//查看再生（spawn）服务的信息\nrosservice call spawn 2 2 0.2 \"\" \t//调用再生服务，在给定的位置和角度生成一只新的乌龟。名字参数是可选的，这里我们不设具体的名字，让turtlesim自动创建一个。\n```\n\n```c++\nrosparam set \t\t\t\t\t\t//设置参数\nrosparam get \t\t\t\t\t\t//获取参数\nrosparam load \t\t\t\t\t\t//从文件读取参数\nrosparam dump \t\t\t\t\t\t//向文件中写入参数\nrosparam delete \t\t\t\t\t//删除参数\nrosparam list \t\t\t\t\t\t//列出节点在服务器上的参数名\nrosparam set background_r 150\t\t//修改背景颜色的红色通道。\trosparam set [param_name]\nrosservice call clear\t\t\t\t//上述指令修改了参数的值，现在我们调用清除服务使得修改后的参数生效\nrosparam get background_g\t\t\t//获取背景的绿色通道的值。 rosparam get [param_name]\nrosparam get /\t\t\t\t\t\t//显示参数服务器上的所有内容\nrosparam dump params.yaml \t\t\t//将所有的参数写入params.yaml文件。 rosparam dump [file_name]\nrosparam load params.yaml copy\t\t//将yaml文件重载入新的命名空间，比如说copy空间。 rosparam load [file_name] [namespace]\nrosparam get copy/background_b\t\t//获取copy空间的蓝色背景参数\n```\n\n## 使用 rqt_console 和 roslaunch\n\n```c++\nsudo apt-get install ros-kinetic-rqt ros-kinetic-rqt-common-plugins ros-kinetic-turtlesim\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t//预先安装需要的程序包，若安装，请忽略\nrosrun rqt_console rqt_console\t\t\t\t\t\t\t//新终端中运行。 rqt_console属于ROS日志框架(logging framework)的一部分，用来显示节点的输出信息\nrosrun rqt_logger_level rqt_logger_level\t\t\t\t//新终端中运行。 rqt_logger_level允许我们修改节点运行时输出信息的日志等级（logger levels）（包括 DEBUG、WARN、INFO和ERROR）。\nrosrun turtlesim turtlesim_node\t\t\t\t\t\t\t//新终端中运行。启动turtlesim\nrostopic pub /turtle1/cmd_vel geometry_msgs/Twist -r 1 -- '[2.0, 0.0, 0.0]' '[0.0, 0.0, 0.0]'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t//小龟龟动起来再查看rqt_console中的输出\nroscd beginner_tutorials\t\t\t\t\t\t\t\t//打开之前创建的beginner_tutorials包，如果打不开，有两种办法解决：\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t//1.输入绝对路径：cd ~/catkin_ws/src/beginner_tutorials\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t//2.设置当前终端环境路径：export ROS_PACKAGE_PATH=~/catkin_ws/src:$ROS_PACKAGE_PATH。 成功后再输入：roscd beginner_tutorials\t\nmkdir launch && cd launch \t\t\t\t\t\t\t\t//创建并打开launch文件夹\t\t\t\t\t\t\t\t\t\t\t\n```\n\n新建一个空文件，命名为`turtlemimic.launch`，并在其中写入：\n\n```c++\n<launch>\n\n\t<group ns=\"turtlesim1\">\n \t\t<node pkg=\"turtlesim\" name=\"sim\" type=\"turtlesim_node\"/>\n \t</group>\n\n\t<group ns=\"turtlesim2\">\n \t\t<node pkg=\"turtlesim\" name=\"sim\" type=\"turtlesim_node\"/>\n \t</group>\n\n \t<node pkg=\"turtlesim\" name=\"mimic\" type=\"mimic\">\n\t <remap from=\"input\" to=\"turtlesim1/turtle1\"/>\n\t <remap from=\"output\" to=\"turtlesim2/turtle1\"/>\n \t</node>\n\n</launch>\n```\n\n> 在3~9行我们创建了两个节点分组并以'命名空间（namespace)'标签来区分，其中一个名为turtulesim1，另一个名为turtlesim2，两个组里面都使用相同的turtlesim节点并命名为'sim'。这样可以让我们同时启动两个turtlesim模拟器而不会产生命名冲突。在11~14行我们启动模仿节点，并将所有话题的输入和输出分别重命名为turtlesim1和turtlesim2，这样就会使turtlesim2模仿turtlesim1。第1行和第16行分别表示luanch文件的开始标签和结束标签。\n\n```c++\nroslaunch beginner_tutorials turtlemimic.launch\t\t\t//通过roslaunch命令启动launch文件，从而启动多个节点\nrostopic pub /turtlesim1/turtle1/cmd_vel geometry_msgs/Twist -r 1 -- '[2.0, 0.0, 0.0]' '[0.0, 0.0, -1.8]'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t//在一个新终端中使用rostopic命令发送速度设定消息\n```\n\n## 使用rosed编辑ROS中的文件\n\n如果习惯使用emacs，需要先将emacs设为默认编辑器，如果习惯使用vim，需要安装vim。这里以设置emacs为例。\n\n```c++\nemacs .bashrc\t\t\t\t//新开一个终端。在.bashrc文件的最后一行写入：export EDITOR='emacs -nw'\necho $EDITOR\t\t\t\t//打开一个新终端，看是否定义了EDITOR。注意：.bashrc文件的改变，只会在新的终端才有效。已经打开的终端不受环境变量的影响。正常情况下回输出:emacs -nw\nrosed roscpp Logger.msg \t//rosed可以直接通过package名来获取到待编辑的文件而无需指定该文件的存储路径了. rosed [package_name] [filename]\n```\n\n## 创建ROS消息和ROS服务\n\n### 使用ROSmsg\n#### 创建一个rosmsg\n```c++\ncd ~/catkin_ws/src/beginner_tutorials\t\t\t//打开之前创建的package\nmkdir msg \t\t\t\t\t\t\t\t\t\t//创建msg文件夹\necho \"int64 num\" > msg/Num.msg \t\t\t\t\t//写入到Num.msg文件中\n```\n\n确保msg文件被转为C++，Python和其他语言的源代码。查看package.xml, 确保它包含以下两条语句。若没有，手动添加。\n\n```c++\n<build_depend>message_generation</build_depend>\n<exec_depend>message_runtime</exec_depend>\n```\n\n#### 修改./beginner_tutorials/CMakeLists.txt:\n\n1.寻找find_package，向其中添加message_generation。\n\n```c++\nfind_package(catkin REQUIRED COMPONENTS \n\t         roscpp \n\t         rospy \n\t         std_msgs \n\t         message_generation\n)\n```\n\n2.寻找catkin_package，设置运行依赖。\n\n```c++\ncatkin_package(\n#  INCLUDE_DIRS include\n#  LIBRARIES beginner_tutorials\n#  CATKIN_DEPENDS roscpp rospy std_msgs\n#  DEPENDS system_lib\n  CATKIN_DEPENDS message_runtime\n)\n```\n\n3.将add_message_files代码块去掉注释，并用自己的Num.msg代替Messag1.msg，如下：\n\n```c++\nadd_message_files(\n   FILES\n   Num.msg\n)\n```\n\n4.取消generate_messages()的注释，如下：\n\n```c++\ngenerate_messages(\n   DEPENDENCIES\n   std_msgs\n)\n```\n\n#### 使用rosmsg\n\n```c++\nrosmsg show beginner_tutorials/Num \t\t\t\t//通过rosmsg show命令，检查ROS是否能够识消息。正确情况下会输出：int64 num。\n\t\t\t\t\t\t\t\t\t\t\t\t//如果不正常，需要设置path，输入指令：export ROS_PACKAGE_PATH=~/catkin_ws/src:$ROS_PACKAGE_PATH。再次输入show命令。\n```\n\n### 使用ROSsrv\n\n#### 创建一个srv\n\n```c++\nroscd beginner_tutorials\nmkdir srv\nroscp rospy_tutorials AddTwoInts.srv srv/AddTwoInts.srv\n\t\t\t\t\t\t\t\t\t\t\t\t//roscp [package_name] [file_to_copy_path] [copy_path]\n\t\t\t\t\t\t\t\t\t\t\t\t//roscp是一个很实用的命令行工具，它实现了将文件从一个package复制到另外一个package的功能。\n```\n\n同样，需要确保srv文件被转换为C++和其他语言的源代码。\n\n#### 修改CMakeLists.txt:\n\n1.和ROSmsg一样添加对message_generation的依赖。(message_generation 对msg和srv都起作用)\n\n2.将add_message_files代码块去掉注释，并添加自己的srv文件，如下：\n\n```c++\nadd_service_files(\n   FILES\n   AddTwoInts.srv\n)\n```\n\n3.取消generate_messages()的注释，同ROSmsg，如下：\n\n#### 使用ROSsrv\n\n```c++\nrossrv show beginner_tutorials/AddTwoInts \t\t//通过rosmsg show命令，检查ROS是否能够识该服务。 rossrv show <service type>。跟rosmsg类似, 你也可以不指定具体的package名来查找服务文件\n```\n\n### 新开一个终端，打开工作空间并编译：\n\n```c++\ncd catkin_ws\ncatkin_make\n```\n\n所有在msg路径下的.msg文件都将转换为ROS所支持语言的源代码。生成的C++头文件将会放置在~/catkin_ws/devel/include/beginner_tutorials。\n\n## 编写简单的消息发布器和订阅器 (C++)\n\n创建一个发布器节点(\"talker\")，它将不断的在ROS网络中广播消息。创建一个接收器节点(\"listener\")，它来接收ROS网络中的广播消息。\n\n### ./beginner_tutorials/src/talker.cpp\n\n> 为了减少篇幅，将源码中的大段英文注释删除。\n\n```c++\n#include \"ros/ros.h\"\t\t\t\t\t//ros/ros.h 是一个实用的头文件，它引用了 ROS 系统中大部分常用的头文件。\n#include \"std_msgs/String.h\"\t\t\t//这引用了 std_msgs/String 消息, 它存放在 std_msgs package 里，是由 String.msg 文件自动生成的头文件。\n\n#include <sstream>\n\n/**\n * This tutorial demonstrates simple sending of messages over the ROS system.\n */\nint main(int argc, char **argv)\n{\n\n  ros::init(argc, argv, \"talker\");\t\t//初始化 ROS 。它允许 ROS 通过命令行进行名称重映射——然而这并不是现在讨论的重点。在这里，我们也可以指定节点的名称——运行过程中，节点的名称必须唯一。\n\t\t\t\t\t\t\t\t\t\t//这里的名称必须是一个 base name ，也就是说，名称内不能包含 / 等符号。\n\n  ros::NodeHandle n;\t\t\t\t\t//为这个进程的节点创建一个句柄。第一个创建的 NodeHandle 会为节点进行初始化，最后一个销毁的 NodeHandle 则会释放该节点所占用的所有资源。\n\n\n  /**\n   *告诉 master 我们将要在 chatter（话题名） 上发布 std_msgs/String 消息类型的消息。这样 master 就会告诉所有订阅了 chatter *话题的节点，将要有数据发布。第二个参数是发布序列的大小。如果我们发布的消息的频率太高，缓冲区中的消息在大于 1000 个的时候就会开始丢弃先前发布的消息。\n\n   *NodeHandle::advertise() 返回一个 ros::Publisher 对象,它有两个作用： 1) 它有一个 publish() 成员函数可以让你在topic上发布消息； 2) 如果消息类型不对,它会拒绝发布。\n   */\n  ros::Publisher chatter_pub = n.advertise<std_msgs::String>(\"chatter\", 1000);\n\n  ros::Rate loop_rate(10);\t\t\t\t//ros::Rate 对象可以允许你指定自循环的频率。它会追踪记录自上一次调用 Rate::sleep() 后时间的流逝，并休眠直到一个频率周期的时间。这个例子中，我们让它以 10Hz 的频率运行。\n\n  int count = 0;\n  while (ros::ok())\t\t\t\t\t\t//roscpp 会默认生成一个 SIGINT 句柄，它负责处理 Ctrl-C 键盘操作——使得 ros::ok() 返回 false。\n  {\n    std_msgs::String msg;\t\t\t\t//使用一个由 msg file 文件产生的『消息自适应』类在 ROS 网络中广播消息。现在我们使用标准的String消息，它只有一个数据成员 \"data\"。\n\n    std::stringstream ss;\n    ss << \"hello world \" << count;\n    msg.data = ss.str();\n\n    ROS_INFO(\"%s\", msg.data.c_str());\t//ROS_INFO 和其他类似的函数可以用来代替 printf/cout 等函数。\n\n    chatter_pub.publish(msg);\t\t\t//向所有订阅 chatter 话题的节点发送消息。\n\n    ros::spinOnce();\t\t\t\t\t//在这个例子中并不是一定要调用 ros::spinOnce()，因为我们不接受回调。然而，如果你的程序里包含其他回调函数，最好在这里加上 \n    \t\t\t\t\t\t\t\t\t//ros::spinOnce()这一语句，否则你的回调函数就永远也不会被调用了。\t\t\t\t\n\n    loop_rate.sleep();\t\t\t\t\t//调用 ros::Rate 对象来休眠一段时间以使得发布频率为 10Hz。\n    ++count;\n  }\n\n\n  return 0;\n}\n```\n\n### ./beginner_tutorials/src/listener.cpp\n\n```c++\n#include \"ros/ros.h\"\n#include \"std_msgs/String.h\"\n\n/**\n * This tutorial demonstrates simple receipt of messages over the ROS system.\n */\nvoid chatterCallback(const std_msgs::String::ConstPtr& msg)\t\t\t\t//这是一个回调函数，当接收到 chatter 话题的时候就会被调用。消息是以 boost shared_ptr 指针的形式传输，这就意味着你可以存储它而又不需要复制数据。\n{\n  ROS_INFO(\"I heard: [%s]\", msg->data.c_str());\n}\n\nint main(int argc, char **argv)\n{\n\n  ros::init(argc, argv, \"listener\");\n\n  ros::NodeHandle n;\n\n  /**\n   * 告诉 master 我们要订阅 chatter 话题上的消息。当有消息发布到这个话题时，ROS 就会调用 chatterCallback() 函数。第二个参数是队列大小，以防我们处理消息的速度不够快，当缓存达到 1000 \n   * 条消息后，再有新的消息到来就将开始丢弃先前接收的消息。\n   *\n   * NodeHandle::subscribe() 返回 ros::Subscriber 对象,你必须让它处于活动状态直到你不再想订阅该消息。当这个对象销毁时，它将自动退订 chatter 话题的消息。\n   *\n   * 有各种不同的 NodeHandle::subscribe() 函数，允许你指定类的成员函数，甚至是 Boost.Function 对象可以调用的任何数据类型。\n   */\n  ros::Subscriber sub = n.subscribe(\"chatter\", 1000, chatterCallback);\n\n  /**\n   * ros::spin() 进入自循环，可以尽可能快的调用消息回调函数。如果没有消息到达，它不会占用很多 CPU，所以不用担心。一旦 ros::ok() 返回 false，ros::spin() 就会立刻跳出自循环。\n   * 这有可能是 ros::shutdown() 被调用，或者是用户按下了 Ctrl-C，使得 master 告诉节点要终止运行。也有可能是节点被人为关闭的。\n   */\n  ros::spin();\n\n  return 0;\n}\n```\n\n下边，我们来总结一下:\n\n- 初始化ROS系统\n- 订阅 chatter 话题\n- 进入自循环，等待消息的到达\n- 当消息到达，调用 chatterCallback() 函数\n\n### ./beginner_tutorials/CMakeLists.txt\n\n```py\ncmake_minimum_required(VERSION 2.8.3)\nproject(beginner_tutorials)\n\n## Find catkin and any catkin packages\nfind_package(catkin REQUIRED COMPONENTS roscpp rospy std_msgs genmsg)\n\n## Declare ROS messages and services\nadd_message_files(FILES Num.msg)\nadd_service_files(FILES AddTwoInts.srv)\n\n## Generate added messages and services\ngenerate_messages(DEPENDENCIES std_msgs)\n\n## Declare a catkin package\ncatkin_package()\n\n## Build talker and listener\ninclude_directories(include ${catkin_INCLUDE_DIRS})\n\nadd_executable(talker src/talker.cpp)\ntarget_link_libraries(talker ${catkin_LIBRARIES})\nadd_dependencies(talker beginner_tutorials_generate_messages_cpp)\n\nadd_executable(listener src/listener.cpp)\ntarget_link_libraries(listener ${catkin_LIBRARIES})\nadd_dependencies(listener beginner_tutorials_generate_messages_cpp)\n```\n\n### 测试\n\n在工作空间目录下进行编译，并运行。\n\n```c++\nroscore\t\t\t\t\t\t\t\t\t//新开一个终端\ncd catkin_ws\t\t\t\t\t\t\t//新开一个终端\ncatkin_make\nsource ./devel/setup.bash       \t\t//在运行你自己的程序前，已经source了catkin工作空间下的setup.sh文件\nrosrun beginner_tutorials talker \t\t//启动发布器\n\ncd catkin_ws\t\t\t\t\t\t\t//新开一个终端，并打开工作空间\nsource ./devel/setup.bash       \t\t//在运行你自己的程序前，已经source了catkin工作空间下的setup.sh文件\nrosrun beginner_tutorials listener \t\t//启动订阅器\n```\n\n## 编写简单的服务器和客户端(C++)\n\n### ./beginner_tutorials/src/add_two_ints_server.cpp\n\n```c++\n#include \"ros/ros.h\"\n#include \"beginner_tutorials/AddTwoInts.h\"\t\t\t\t\t\t\t\t//beginner_tutorials/AddTwoInts.h是由编译系统自动根据我们先前创建的srv文件生成的对应该srv文件的头文件。\n\n/**\n  * 这个函数提供两个int值求和的服务，int值从request里面获取，而返回数据装入response内，这些数据类型都定义在srv文件内部，函数返回一个boolean值。\n  * 两个int值进行相加，并存入response。然后一些关于request和response的信息被记录下来。最后，service完成计算后返回true值。\n  */\nbool add(beginner_tutorials::AddTwoInts::Request  &req,\n         beginner_tutorials::AddTwoInts::Response &res)\n{\n  res.sum = req.a + req.b;\n  ROS_INFO(\"request: x=%ld, y=%ld\", (long int)req.a, (long int)req.b);\n  ROS_INFO(\"sending back response: [%ld]\", (long int)res.sum);\n  return true;\n}\n\nint main(int argc, char **argv)\n{\n  ros::init(argc, argv, \"add_two_ints_server\");\n  ros::NodeHandle n;\n\n  ros::ServiceServer service = n.advertiseService(\"add_two_ints\", add);\t//建立service，并在ROS内发布出来。\n  ROS_INFO(\"Ready to add two ints.\");\n  ros::spin();\n\n  return 0;\n}\n```\n\n### ./beginner_tutorials/src/add_two_ints_client.cpp\n\n```c++\n#include \"ros/ros.h\"\n#include \"beginner_tutorials/AddTwoInts.h\"\n#include <cstdlib>\n\nint main(int argc, char **argv)\n{\n  ros::init(argc, argv, \"add_two_ints_client\");\n  if (argc != 3)\n  {\n    ROS_INFO(\"usage: add_two_ints_client X Y\");\n    return 1;\n  }\n\n  ros::NodeHandle n;\n  ros::ServiceClient client = n.serviceClient<beginner_tutorials::AddTwoInts>(\"add_two_ints\");\t\t//这段代码为add_two_ints service创建一个client。ros::ServiceClient 对象待会用来调用service。\n  beginner_tutorials::AddTwoInts srv;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//这里，我们实例化一个由ROS编译系统自动生成的service类，并给其request成员赋值。\n  srv.request.a = atoll(argv[1]);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// 一个service类包含两个成员request和response。同时也包括两个类定义Request和Response。\n  srv.request.b = atoll(argv[2]);\n\n  /**\n   * 这段代码是在调用service。由于service的调用是模态过程（调用的时候占用进程阻止其他代码的执行），一旦调用完成，将返回调用结果。\n   * 如果service调用成功，call()函数将返回true，srv.response里面的值将是合法的值。\n   * 如果调用失败，call()函数将返回false，srv.response里面的值将是非法的。 \n   */\n  if (client.call(srv))\n  {\n    ROS_INFO(\"Sum: %ld\", (long int)srv.response.sum);\n  }\n  else\n  {\n    ROS_ERROR(\"Failed to call service add_two_ints\");\n    return 1;\n  }\n\n  return 0;\n}\n```\n\n### ./beginner_tutorials/CMakeLists.txt\n\n在上一节的CMakeLists.txt后添加：\n\n```py\nadd_executable(add_two_ints_server src/add_two_ints_server.cpp)\ntarget_link_libraries(add_two_ints_server ${catkin_LIBRARIES})\nadd_dependencies(add_two_ints_server beginner_tutorials_gencpp)\n\nadd_executable(add_two_ints_client src/add_two_ints_client.cpp)\ntarget_link_libraries(add_two_ints_client ${catkin_LIBRARIES})\nadd_dependencies(add_two_ints_client beginner_tutorials_gencpp)\n```\n\n### 测试\n\n在工作空间目录下进行编译，并运行。\n\n```c++\nroscore\t\t\t\t\t\t\t\t\t\t\t\t//新开一个终端\ncd catkin_ws\t\t\t\t\t\t\t\t\t\t//新开一个终端\ncatkin_make\nsource ./devel/setup.bash       \t\t\t\t\t//在运行你自己的程序前，已经source了catkin工作空间下的setup.sh文件\nrosrun beginner_tutorials add_two_ints_server \t\t//启动服务器\n\ncd catkin_ws\t\t\t\t\t\t\t\t\t\t//新开一个终端，并打开工作空间\nsource ./devel/setup.bash       \t\t\t\t\t//在运行你自己的程序前，已经source了catkin工作空间下的setup.sh文件\nrosrun beginner_tutorials add_two_ints_client 1 3 \t//启动客户端\n```\n","slug":"2019-08-03-ROSÓÐÓÃÖ¸Áî¼¯","published":1,"updated":"2020-01-29T13:57:52.772Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck60spy9v001pda55esi592fx","content":"<blockquote>\n<p>本文中的环境为Ubuntu16.04LTS + ROS(kinetic).</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>由于从ROS的官网上的教程并没有实时更新，上面混杂了一些旧版本的东西，看起来有些麻烦，而且有的介绍过于繁琐，因此本篇博客旨在介绍笔者使用版本的精简指令集。关于指令的详细介绍，还需从官网上查看相关内容。</p>\n<h1 id=\"指令介绍\"><a href=\"#指令介绍\" class=\"headerlink\" title=\"指令介绍\"></a>指令介绍</h1><h2 id=\"ROS安装指令\"><a href=\"#ROS安装指令\" class=\"headerlink\" title=\"ROS安装指令\"></a>ROS安装指令</h2><p>在执行下面的指令前，请注意先将源换位内地源，推荐清华源。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo sh -c <span class=\"string\">'echo \"deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main\" &gt; /etc/apt/sources.list.d/ros-latest.list'</span></span><br><span class=\"line\">sudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:<span class=\"number\">80</span> --recv-key <span class=\"number\">0xB01FA116</span></span><br><span class=\"line\">sudo apt-get update\t<span class=\"comment\">#如果更新失败提示GPT error，输入sudo apt-key adv --recv-keys --keyserver keyserver.ubuntu.com F42ED6FBAB17C654</span></span><br><span class=\"line\">sudo apt-get install ros-kinetic-desktop-full</span><br><span class=\"line\">sudo rosdep init</span><br><span class=\"line\">rosdep update</span><br><span class=\"line\">echo <span class=\"string\">\"source /opt/ros/kinetic/setup.bash\"</span> &gt;&gt; ~/.bashrc</span><br><span class=\"line\">source ~/.bashrc</span><br><span class=\"line\">sudo apt install python-rosinstall python-rosinstall-generator python-wstool build-essential</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"UR5的仿真环境安装与使用\"><a href=\"#UR5的仿真环境安装与使用\" class=\"headerlink\" title=\"UR5的仿真环境安装与使用\"></a>UR5的仿真环境安装与使用</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> install ros-kinetic-universal-robot</span><br><span class=\"line\">roslaunch ur_gazebo ur5.launch\t</span><br><span class=\"line\">roslaunch ur5_moveit_config ur5_moveit_planning_execution.launch sim:=<span class=\"literal\">true</span></span><br><span class=\"line\">roslaunch ur5_moveit_config moveit_rviz.launch <span class=\"built_in\">config</span>:=<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ROS文件系统介绍\"><a href=\"#ROS文件系统介绍\" class=\"headerlink\" title=\"ROS文件系统介绍\"></a>ROS文件系统介绍</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> install ros-kinetic-ros-tutorials\t\t<span class=\"comment\">//安装ros-tutorials程序包</span></span><br><span class=\"line\">rospack <span class=\"built_in\">find</span> roscpp\t\t\t\t\t\t\t\t\t<span class=\"comment\">//rospack find [包名称]  rospack (/rospack)允许你获取软件包的有关信息。在本教程中，我们只涉及到rospack中find参数选项，该选项可以返回软件包的路径信息。</span></span><br><span class=\"line\">roscd roscpp\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//roscd [本地包名称[/子目录]]   直接切换工作目录到某个软件包或者软件包集当中</span></span><br><span class=\"line\">pwd\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//输出当前工作目录</span></span><br><span class=\"line\">echo $ROS_PACKAGE_PATH\t\t\t\t\t\t\t\t<span class=\"comment\">//查看ROS_PACKAGE_PATH</span></span><br><span class=\"line\">roscd <span class=\"built_in\">log</span>\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//切换到ROS保存日记文件的目录下。如果你没有执行过任何ROS程序，系统会报错说该目录不存在。</span></span><br><span class=\"line\">rosls roscpp_tutorials\t\t\t\t\t\t\t\t<span class=\"comment\">//rosls [本地包名称[/子目录]] 直接按软件包的名称而不是绝对路径来罗列目录</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用catkin创建工作空间\"><a href=\"#使用catkin创建工作空间\" class=\"headerlink\" title=\"使用catkin创建工作空间\"></a>使用catkin创建工作空间</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /opt/ros/kinetic/<span class=\"built_in\">setup</span>.bash\t\t\t\t\t<span class=\"comment\">//sourced your environment</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p ~/catkin_ws/src</span><br><span class=\"line\">cd ~/catkin_ws/</span><br><span class=\"line\">catkin_make</span><br><span class=\"line\">source devel/<span class=\"built_in\">setup</span>.bash</span><br><span class=\"line\">echo $ROS_PACKAGE_PATH \t\t\t\t\t\t\t\t<span class=\"comment\">//确认环境变量包含了目录</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建ROS程序包\"><a href=\"#创建ROS程序包\" class=\"headerlink\" title=\"创建ROS程序包\"></a>创建ROS程序包</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/catkin_ws/src</span><br><span class=\"line\">catkin_create_pkg beginner_tutorials std_msgs rospy roscpp \t\t<span class=\"comment\">//使用catkin_create_pkg命令来创建一个名为'beginner_tutorials'的新程序包，这个程序包依赖于std_msgs、roscpp和rospy</span></span><br><span class=\"line\">rospack depends1 beginner_tutorials \t\t\t\t\t\t\t<span class=\"comment\">//使用rospack命令来查看一级依赖包</span></span><br><span class=\"line\">rospack depends beginner_tutorials\t\t\t\t\t\t\t\t<span class=\"comment\">//使用rospack可以递归检测出所有的依赖包</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>本节还介绍了.xml文件的书写方法</p>\n</blockquote>\n<h2 id=\"编译ROS程序包\"><a href=\"#编译ROS程序包\" class=\"headerlink\" title=\"编译ROS程序包\"></a>编译ROS程序包</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /opt/ros/kinetic/<span class=\"built_in\">setup</span>.bash\t\t\t\t\t<span class=\"comment\">//先source你的环境配置(setup)文件</span></span><br><span class=\"line\">cd catkin工作空间</span><br><span class=\"line\">catkin_make\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//编译</span></span><br><span class=\"line\">catkin_make --source my_src\t\t\t\t\t\t\t<span class=\"comment\">//编译存放在了my_src中，而非在默认工作空间中（~/catkin_ws/src)的源代码</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"理解ROS节点\"><a href=\"#理解ROS节点\" class=\"headerlink\" title=\"理解ROS节点\"></a>理解ROS节点</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> install ros-kinetic-ros-tutorials\t\t<span class=\"comment\">//安装龟龟模拟器</span></span><br><span class=\"line\">roscore\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//运行所有ROS程序前首先要运行的命令</span></span><br><span class=\"line\">rosnode <span class=\"built_in\">list</span>\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//列出活跃的节点，本例为/rosout</span></span><br><span class=\"line\">rosnode info /rosout \t\t\t\t\t\t\t\t<span class=\"comment\">//返回特定节点的信息</span></span><br><span class=\"line\">rosrun turtlesim turtlesim_node\t\t\t\t\t\t<span class=\"comment\">//打开新终端，运行turtlesim。    rosrun [package_name] [node_name]</span></span><br><span class=\"line\">rosnode <span class=\"built_in\">list</span>\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//打开新终端，查看节点：/rosout  /turtlesim</span></span><br><span class=\"line\">rosrun turtlesim turtlesim_node __name:=my_turtle   <span class=\"comment\">//关闭原来的turtlesim，打开新终端运行。改变节点名称</span></span><br><span class=\"line\">rosnode <span class=\"built_in\">list</span> \t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//查看新的节点名称：/rosout /my_turtle</span></span><br><span class=\"line\">rosnode ping my_turtle\t\t\t\t\t\t\t\t<span class=\"comment\">//使用另一个节点来ping该节点</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"理解ROS话题\"><a href=\"#理解ROS话题\" class=\"headerlink\" title=\"理解ROS话题\"></a>理解ROS话题</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">roscore \t\t\t\t\t\t\t<span class=\"comment\">//新开一个终端，打开ros</span></span><br><span class=\"line\">rosrun turtlesim turtlesim_node\t\t<span class=\"comment\">//新开一个终端。这是接受消息的节点</span></span><br><span class=\"line\">rosrun turtlesim turtle_teleop_key\t<span class=\"comment\">//新开一个终端，通过键盘来控制龟龟运动。这也是发布消息的节点</span></span><br><span class=\"line\">rosrun rqt_graph rqt_graph\t\t\t<span class=\"comment\">//新开一个终端，创建一个显示当前系统运行情况的动态图形</span></span><br><span class=\"line\">rostopic -h\t\t\t\t\t\t\t<span class=\"comment\">//新开一个终端，查看rostopic的子命令</span></span><br><span class=\"line\">rostopic echo /turtle1/cmd_vel\t\t<span class=\"comment\">//你可能看不到任何东西因为现在还没有数据发布到该话题上。接下来我们通过按下方向键使turtle_teleop_key节点发布数据。可以返回rqt_graph中刷新查看</span></span><br><span class=\"line\">rostopic <span class=\"built_in\">list</span> -v \t\t\t\t\t<span class=\"comment\">//查看有关所发布和订阅的话题及其类型的详细信息</span></span><br><span class=\"line\">rostopic type /turtle1/cmd_vel\t\t<span class=\"comment\">//查看发布在某个话题上的消息类型，会看到：geometry_msgs/Twist</span></span><br><span class=\"line\">rosmsg show geometry_msgs/Twist\t\t<span class=\"comment\">//查看消息的详细情况。根据该结果可以知道turtlesim节点所期望的消息类型(可看到包含linear和angular两个值)，接下来我们就可以给turtle发布命令了</span></span><br><span class=\"line\">rostopic pub -1 /turtle1/cmd_vel geometry_msgs/Twist -- '[2.0, 0.0, 0.0]' '[0.0, 0.0, 1.8]'</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"comment\">//rostopic pub可以把数据发布到当前某个正在广播的话题上。用法:rostopic pub [topic] [msg_type] [args]</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"comment\">//以上命令会发送一条消息给turtlesim，告诉它以2.0大小的线速度和1.8大小的角速度开始移动。</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"comment\">//-1: （单个破折号）这个参数选项使rostopic发布一条消息后马上退出。</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"comment\">///turtle1/cmd_vel: 消息所发布到的话题名称</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"comment\">//geometry_msgs/Twist: 所发布消息类型</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"comment\">//--: 双破折号）这会告诉命令选项解析器接下来的参数部分都不是命令选项。这在参数里面包含有破折号-（比如负号）时是必须要添加的</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"comment\">//'[2.0, 0.0, 0.0]' '[0.0, 0.0, 1.8]': 正如之前提到的，在一个geometry_msgs/Twist消息里面包含有两个浮点型元素：linear和angular。</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"comment\">//在本例中，'[2.0, 0.0, 0.0]'是linear的值，'[0.0, 0.0, 1.8]'是angular的值。这些参数其实是按照YAML语法格式编写的，这在YAML文档 (/ROS/YAMLCommandLine)中有更多的描述。</span></span><br><span class=\"line\">rostopic pub /turtle1/cmd_vel geometry_msgs/Twist -r 1 -- '[2.0, 0.0, 0.0]' '[0.0, 0.0, 1.8]'</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"comment\">//这条命令以1Hz的频率发布速度命令到速度话题上。使用rostopic pub -r命令来发布一个稳定的命令流</span></span><br><span class=\"line\">rostopic hz /turtle1/pose\t\t\t<span class=\"comment\">//rostopic hz命令可以用来查看数据发布的频率。\trostopic hz [topic]\t</span></span><br><span class=\"line\">rostopic type /turtle1/pose | rosmsg show</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"comment\">//结合rostopic type和rosmsg show命令来获取关于某个话题的更深层次的信息\t</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"comment\">//可以看到pose下有五个信息: x y theta linear_velocity angular_velocity</span></span><br><span class=\"line\">rosrun rqt_plot rqt_plot\t\t\t<span class=\"comment\">//使用rqt_plot命令来绘制正在发布到/turtle1/pose话题上的数据变化图形\t</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"comment\">//这会弹出一个新窗口，在窗口左上角的一个文本框里面你可以添加需要绘制的话题。在里面输入/turtle1/pose/x后之前处于禁用状态的加号按钮将会被使能变亮。按一下该按钮，并</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"comment\">//对/turtle1/pose/y重复相同的过程。现在你会在图形中看到turtle的x-y位置坐标图。</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"comment\">//按下减号按钮会显示一组菜单让你隐藏图形中指定的话题。现在隐藏掉你刚才添加的话题并添加/turtle1/pose/theta</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"理解ROS服务和参数\"><a href=\"#理解ROS服务和参数\" class=\"headerlink\" title=\"理解ROS服务和参数\"></a>理解ROS服务和参数</h2><p>在小乌龟仍然启动的基础上：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rosservice <span class=\"built_in\">list</span>\t\t\t\t\t\t<span class=\"comment\">//输出可用服务的信息</span></span><br><span class=\"line\">rosservice call\t\t\t\t\t\t<span class=\"comment\">//调用带参数的服务</span></span><br><span class=\"line\">rosservice type \t\t\t\t\t<span class=\"comment\">//输出服务类型</span></span><br><span class=\"line\">rosservice <span class=\"built_in\">find</span> \t\t\t\t\t<span class=\"comment\">//依据类型寻找服务find services by service type </span></span><br><span class=\"line\">rosservice uri \t\t\t\t\t\t<span class=\"comment\">//输出服务的ROSRPC uri\t\t</span></span><br><span class=\"line\">rosservice type <span class=\"built_in\">clear</span>\t\t\t\t<span class=\"comment\">//查看clear服务类型，clear是rosservice list中的一种服务类型。rosservice type [service]</span></span><br><span class=\"line\">rosservice call <span class=\"built_in\">clear</span>\t\t\t\t<span class=\"comment\">//代用clear服务，该服务清除了turtlesim_node的背景上的轨迹。rosservice call [service] [args]</span></span><br><span class=\"line\">rosservice type spawn| rossrv show \t<span class=\"comment\">//查看再生（spawn）服务的信息</span></span><br><span class=\"line\">rosservice call spawn <span class=\"number\">2</span> <span class=\"number\">2</span> <span class=\"number\">0.2</span> <span class=\"string\">\"\"</span> \t<span class=\"comment\">//调用再生服务，在给定的位置和角度生成一只新的乌龟。名字参数是可选的，这里我们不设具体的名字，让turtlesim自动创建一个。</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rosparam <span class=\"built_in\">set</span> \t\t\t\t\t\t<span class=\"comment\">//设置参数</span></span><br><span class=\"line\">rosparam <span class=\"built_in\">get</span> \t\t\t\t\t\t<span class=\"comment\">//获取参数</span></span><br><span class=\"line\">rosparam load \t\t\t\t\t\t<span class=\"comment\">//从文件读取参数</span></span><br><span class=\"line\">rosparam dump \t\t\t\t\t\t<span class=\"comment\">//向文件中写入参数</span></span><br><span class=\"line\">rosparam <span class=\"keyword\">delete</span> \t\t\t\t\t<span class=\"comment\">//删除参数</span></span><br><span class=\"line\">rosparam <span class=\"built_in\">list</span> \t\t\t\t\t\t<span class=\"comment\">//列出节点在服务器上的参数名</span></span><br><span class=\"line\">rosparam <span class=\"built_in\">set</span> background_r <span class=\"number\">150</span>\t\t<span class=\"comment\">//修改背景颜色的红色通道。\trosparam set [param_name]</span></span><br><span class=\"line\">rosservice call <span class=\"built_in\">clear</span>\t\t\t\t<span class=\"comment\">//上述指令修改了参数的值，现在我们调用清除服务使得修改后的参数生效</span></span><br><span class=\"line\">rosparam <span class=\"built_in\">get</span> background_g\t\t\t<span class=\"comment\">//获取背景的绿色通道的值。 rosparam get [param_name]</span></span><br><span class=\"line\">rosparam <span class=\"built_in\">get</span> /\t\t\t\t\t\t<span class=\"comment\">//显示参数服务器上的所有内容</span></span><br><span class=\"line\">rosparam dump params.yaml \t\t\t<span class=\"comment\">//将所有的参数写入params.yaml文件。 rosparam dump [file_name]</span></span><br><span class=\"line\">rosparam load params.yaml copy\t\t<span class=\"comment\">//将yaml文件重载入新的命名空间，比如说copy空间。 rosparam load [file_name] [namespace]</span></span><br><span class=\"line\">rosparam <span class=\"built_in\">get</span> copy/background_b\t\t<span class=\"comment\">//获取copy空间的蓝色背景参数</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用-rqt-console-和-roslaunch\"><a href=\"#使用-rqt-console-和-roslaunch\" class=\"headerlink\" title=\"使用 rqt_console 和 roslaunch\"></a>使用 rqt_console 和 roslaunch</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> install ros-kinetic-rqt ros-kinetic-rqt-common-plugins ros-kinetic-turtlesim</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//预先安装需要的程序包，若安装，请忽略</span></span><br><span class=\"line\">rosrun rqt_console rqt_console\t\t\t\t\t\t\t<span class=\"comment\">//新终端中运行。 rqt_console属于ROS日志框架(logging framework)的一部分，用来显示节点的输出信息</span></span><br><span class=\"line\">rosrun rqt_logger_level rqt_logger_level\t\t\t\t<span class=\"comment\">//新终端中运行。 rqt_logger_level允许我们修改节点运行时输出信息的日志等级（logger levels）（包括 DEBUG、WARN、INFO和ERROR）。</span></span><br><span class=\"line\">rosrun turtlesim turtlesim_node\t\t\t\t\t\t\t<span class=\"comment\">//新终端中运行。启动turtlesim</span></span><br><span class=\"line\">rostopic pub /turtle1/cmd_vel geometry_msgs/Twist -r 1 -- '[2.0, 0.0, 0.0]' '[0.0, 0.0, 0.0]'</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//小龟龟动起来再查看rqt_console中的输出</span></span><br><span class=\"line\">roscd beginner_tutorials\t\t\t\t\t\t\t\t<span class=\"comment\">//打开之前创建的beginner_tutorials包，如果打不开，有两种办法解决：</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//1.输入绝对路径：cd ~/catkin_ws/src/beginner_tutorials\t</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//2.设置当前终端环境路径：export ROS_PACKAGE_PATH=~/catkin_ws/src:$ROS_PACKAGE_PATH。 成功后再输入：roscd beginner_tutorials\t</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> launch &amp;&amp; cd launch \t\t\t\t\t\t\t\t<span class=\"comment\">//创建并打开launch文件夹</span></span><br></pre></td></tr></table></figure>\n\n<p>新建一个空文件，命名为<code>turtlemimic.launch</code>，并在其中写入：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;launch&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;group ns=<span class=\"string\">\"turtlesim1\"</span>&gt;</span><br><span class=\"line\"> \t\t&lt;node pkg=<span class=\"string\">\"turtlesim\"</span> name=<span class=\"string\">\"sim\"</span> type=<span class=\"string\">\"turtlesim_node\"</span>/&gt;</span><br><span class=\"line\"> \t&lt;/group&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;group ns=<span class=\"string\">\"turtlesim2\"</span>&gt;</span><br><span class=\"line\"> \t\t&lt;node pkg=<span class=\"string\">\"turtlesim\"</span> name=<span class=\"string\">\"sim\"</span> type=<span class=\"string\">\"turtlesim_node\"</span>/&gt;</span><br><span class=\"line\"> \t&lt;/group&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"> \t&lt;node pkg=<span class=\"string\">\"turtlesim\"</span> name=<span class=\"string\">\"mimic\"</span> type=<span class=\"string\">\"mimic\"</span>&gt;</span><br><span class=\"line\">\t &lt;remap from=<span class=\"string\">\"input\"</span> to=<span class=\"string\">\"turtlesim1/turtle1\"</span>/&gt;</span><br><span class=\"line\">\t &lt;remap from=<span class=\"string\">\"output\"</span> to=<span class=\"string\">\"turtlesim2/turtle1\"</span>/&gt;</span><br><span class=\"line\"> \t&lt;/node&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/launch&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在3<del>9行我们创建了两个节点分组并以’命名空间（namespace)’标签来区分，其中一个名为turtulesim1，另一个名为turtlesim2，两个组里面都使用相同的turtlesim节点并命名为’sim’。这样可以让我们同时启动两个turtlesim模拟器而不会产生命名冲突。在11</del>14行我们启动模仿节点，并将所有话题的输入和输出分别重命名为turtlesim1和turtlesim2，这样就会使turtlesim2模仿turtlesim1。第1行和第16行分别表示luanch文件的开始标签和结束标签。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">roslaunch beginner_tutorials turtlemimic.launch\t\t\t<span class=\"comment\">//通过roslaunch命令启动launch文件，从而启动多个节点</span></span><br><span class=\"line\">rostopic pub /turtlesim1/turtle1/cmd_vel geometry_msgs/Twist -r 1 -- '[2.0, 0.0, 0.0]' '[0.0, 0.0, -1.8]'</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//在一个新终端中使用rostopic命令发送速度设定消息</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用rosed编辑ROS中的文件\"><a href=\"#使用rosed编辑ROS中的文件\" class=\"headerlink\" title=\"使用rosed编辑ROS中的文件\"></a>使用rosed编辑ROS中的文件</h2><p>如果习惯使用emacs，需要先将emacs设为默认编辑器，如果习惯使用vim，需要安装vim。这里以设置emacs为例。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">emacs .bashrc\t\t\t\t<span class=\"comment\">//新开一个终端。在.bashrc文件的最后一行写入：export EDITOR='emacs -nw'</span></span><br><span class=\"line\">echo $EDITOR\t\t\t\t<span class=\"comment\">//打开一个新终端，看是否定义了EDITOR。注意：.bashrc文件的改变，只会在新的终端才有效。已经打开的终端不受环境变量的影响。正常情况下回输出:emacs -nw</span></span><br><span class=\"line\">rosed roscpp Logger.msg \t<span class=\"comment\">//rosed可以直接通过package名来获取到待编辑的文件而无需指定该文件的存储路径了. rosed [package_name] [filename]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建ROS消息和ROS服务\"><a href=\"#创建ROS消息和ROS服务\" class=\"headerlink\" title=\"创建ROS消息和ROS服务\"></a>创建ROS消息和ROS服务</h2><h3 id=\"使用ROSmsg\"><a href=\"#使用ROSmsg\" class=\"headerlink\" title=\"使用ROSmsg\"></a>使用ROSmsg</h3><h4 id=\"创建一个rosmsg\"><a href=\"#创建一个rosmsg\" class=\"headerlink\" title=\"创建一个rosmsg\"></a>创建一个rosmsg</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/catkin_ws/src/beginner_tutorials\t\t\t<span class=\"comment\">//打开之前创建的package</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> msg \t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//创建msg文件夹</span></span><br><span class=\"line\">echo <span class=\"string\">\"int64 num\"</span> &gt; msg/Num.msg \t\t\t\t\t<span class=\"comment\">//写入到Num.msg文件中</span></span><br></pre></td></tr></table></figure>\n\n<p>确保msg文件被转为C++，Python和其他语言的源代码。查看package.xml, 确保它包含以下两条语句。若没有，手动添加。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;build_depend&gt;message_generation&lt;/build_depend&gt;</span><br><span class=\"line\">&lt;exec_depend&gt;message_runtime&lt;/exec_depend&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改-beginner-tutorials-CMakeLists-txt\"><a href=\"#修改-beginner-tutorials-CMakeLists-txt\" class=\"headerlink\" title=\"修改./beginner_tutorials/CMakeLists.txt:\"></a>修改./beginner_tutorials/CMakeLists.txt:</h4><p>1.寻找find_package，向其中添加message_generation。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find_package(catkin REQUIRED COMPONENTS </span><br><span class=\"line\">\t         roscpp </span><br><span class=\"line\">\t         rospy </span><br><span class=\"line\">\t         std_msgs </span><br><span class=\"line\">\t         message_generation</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>2.寻找catkin_package，设置运行依赖。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">catkin_package(</span><br><span class=\"line\">#  INCLUDE_DIRS include</span><br><span class=\"line\">#  LIBRARIES beginner_tutorials</span><br><span class=\"line\">#  CATKIN_DEPENDS roscpp rospy std_msgs</span><br><span class=\"line\">#  DEPENDS system_lib</span><br><span class=\"line\">  CATKIN_DEPENDS message_runtime</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>3.将add_message_files代码块去掉注释，并用自己的Num.msg代替Messag1.msg，如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add_message_files(</span><br><span class=\"line\">   FILES</span><br><span class=\"line\">   Num.msg</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>4.取消generate_messages()的注释，如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">generate_messages(</span><br><span class=\"line\">   DEPENDENCIES</span><br><span class=\"line\">   std_msgs</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用rosmsg\"><a href=\"#使用rosmsg\" class=\"headerlink\" title=\"使用rosmsg\"></a>使用rosmsg</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rosmsg show beginner_tutorials/Num \t\t\t\t<span class=\"comment\">//通过rosmsg show命令，检查ROS是否能够识消息。正确情况下会输出：int64 num。</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//如果不正常，需要设置path，输入指令：export ROS_PACKAGE_PATH=~/catkin_ws/src:$ROS_PACKAGE_PATH。再次输入show命令。</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用ROSsrv\"><a href=\"#使用ROSsrv\" class=\"headerlink\" title=\"使用ROSsrv\"></a>使用ROSsrv</h3><h4 id=\"创建一个srv\"><a href=\"#创建一个srv\" class=\"headerlink\" title=\"创建一个srv\"></a>创建一个srv</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">roscd beginner_tutorials</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> srv</span><br><span class=\"line\">roscp rospy_tutorials AddTwoInts.srv srv/AddTwoInts.srv</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//roscp [package_name] [file_to_copy_path] [copy_path]</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//roscp是一个很实用的命令行工具，它实现了将文件从一个package复制到另外一个package的功能。</span></span><br></pre></td></tr></table></figure>\n\n<p>同样，需要确保srv文件被转换为C++和其他语言的源代码。</p>\n<h4 id=\"修改CMakeLists-txt\"><a href=\"#修改CMakeLists-txt\" class=\"headerlink\" title=\"修改CMakeLists.txt:\"></a>修改CMakeLists.txt:</h4><p>1.和ROSmsg一样添加对message_generation的依赖。(message_generation 对msg和srv都起作用)</p>\n<p>2.将add_message_files代码块去掉注释，并添加自己的srv文件，如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add_service_files(</span><br><span class=\"line\">   FILES</span><br><span class=\"line\">   AddTwoInts.srv</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>3.取消generate_messages()的注释，同ROSmsg，如下：</p>\n<h4 id=\"使用ROSsrv-1\"><a href=\"#使用ROSsrv-1\" class=\"headerlink\" title=\"使用ROSsrv\"></a>使用ROSsrv</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rossrv show beginner_tutorials/AddTwoInts \t\t<span class=\"comment\">//通过rosmsg show命令，检查ROS是否能够识该服务。 rossrv show &lt;service type&gt;。跟rosmsg类似, 你也可以不指定具体的package名来查找服务文件</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"新开一个终端，打开工作空间并编译：\"><a href=\"#新开一个终端，打开工作空间并编译：\" class=\"headerlink\" title=\"新开一个终端，打开工作空间并编译：\"></a>新开一个终端，打开工作空间并编译：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd catkin_ws</span><br><span class=\"line\">catkin_make</span><br></pre></td></tr></table></figure>\n\n<p>所有在msg路径下的.msg文件都将转换为ROS所支持语言的源代码。生成的C++头文件将会放置在~/catkin_ws/devel/include/beginner_tutorials。</p>\n<h2 id=\"编写简单的消息发布器和订阅器-C\"><a href=\"#编写简单的消息发布器和订阅器-C\" class=\"headerlink\" title=\"编写简单的消息发布器和订阅器 (C++)\"></a>编写简单的消息发布器和订阅器 (C++)</h2><p>创建一个发布器节点(“talker”)，它将不断的在ROS网络中广播消息。创建一个接收器节点(“listener”)，它来接收ROS网络中的广播消息。</p>\n<h3 id=\"beginner-tutorials-src-talker-cpp\"><a href=\"#beginner-tutorials-src-talker-cpp\" class=\"headerlink\" title=\"./beginner_tutorials/src/talker.cpp\"></a>./beginner_tutorials/src/talker.cpp</h3><blockquote>\n<p>为了减少篇幅，将源码中的大段英文注释删除。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"ros/ros.h\"</span>\t\t\t\t\t<span class=\"comment\">//ros/ros.h 是一个实用的头文件，它引用了 ROS 系统中大部分常用的头文件。</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"std_msgs/String.h\"</span>\t\t\t<span class=\"comment\">//这引用了 std_msgs/String 消息, 它存放在 std_msgs package 里，是由 String.msg 文件自动生成的头文件。</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sstream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * This tutorial demonstrates simple sending of messages over the ROS system.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  ros::init(argc, argv, <span class=\"string\">\"talker\"</span>);\t\t<span class=\"comment\">//初始化 ROS 。它允许 ROS 通过命令行进行名称重映射——然而这并不是现在讨论的重点。在这里，我们也可以指定节点的名称——运行过程中，节点的名称必须唯一。</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//这里的名称必须是一个 base name ，也就是说，名称内不能包含 / 等符号。</span></span><br><span class=\"line\"></span><br><span class=\"line\">  ros::NodeHandle n;\t\t\t\t\t<span class=\"comment\">//为这个进程的节点创建一个句柄。第一个创建的 NodeHandle 会为节点进行初始化，最后一个销毁的 NodeHandle 则会释放该节点所占用的所有资源。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   *告诉 master 我们将要在 chatter（话题名） 上发布 std_msgs/String 消息类型的消息。这样 master 就会告诉所有订阅了 chatter *话题的节点，将要有数据发布。第二个参数是发布序列的大小。如果我们发布的消息的频率太高，缓冲区中的消息在大于 1000 个的时候就会开始丢弃先前发布的消息。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">   *NodeHandle::advertise() 返回一个 ros::Publisher 对象,它有两个作用： 1) 它有一个 publish() 成员函数可以让你在topic上发布消息； 2) 如果消息类型不对,它会拒绝发布。</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  ros::Publisher chatter_pub = n.advertise&lt;std_msgs::<span class=\"keyword\">String</span>&gt;(<span class=\"string\">\"chatter\"</span>, <span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\">ros::Rate <span class=\"title\">loop_rate</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;\t\t\t\t<span class=\"comment\">//ros::Rate 对象可以允许你指定自循环的频率。它会追踪记录自上一次调用 Rate::sleep() 后时间的流逝，并休眠直到一个频率周期的时间。这个例子中，我们让它以 10Hz 的频率运行。</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (ros::ok())\t\t\t\t\t\t<span class=\"comment\">//roscpp 会默认生成一个 SIGINT 句柄，它负责处理 Ctrl-C 键盘操作——使得 ros::ok() 返回 false。</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    std_msgs::<span class=\"keyword\">String</span> msg;\t\t\t\t<span class=\"comment\">//使用一个由 msg file 文件产生的『消息自适应』类在 ROS 网络中广播消息。现在我们使用标准的String消息，它只有一个数据成员 \"data\"。</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">stringstream</span> ss;</span><br><span class=\"line\">    ss &lt;&lt; <span class=\"string\">\"hello world \"</span> &lt;&lt; count;</span><br><span class=\"line\">    msg.data = ss.str();</span><br><span class=\"line\"></span><br><span class=\"line\">    ROS_INFO(<span class=\"string\">\"%s\"</span>, msg.data.c_str());\t<span class=\"comment\">//ROS_INFO 和其他类似的函数可以用来代替 printf/cout 等函数。</span></span><br><span class=\"line\"></span><br><span class=\"line\">    chatter_pub.publish(msg);\t\t\t<span class=\"comment\">//向所有订阅 chatter 话题的节点发送消息。</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ros::spinOnce();\t\t\t\t\t<span class=\"comment\">//在这个例子中并不是一定要调用 ros::spinOnce()，因为我们不接受回调。然而，如果你的程序里包含其他回调函数，最好在这里加上 </span></span><br><span class=\"line\">    \t\t\t\t\t\t\t\t\t<span class=\"comment\">//ros::spinOnce()这一语句，否则你的回调函数就永远也不会被调用了。\t\t\t\t</span></span><br><span class=\"line\"></span><br><span class=\"line\">    loop_rate.sleep();\t\t\t\t\t<span class=\"comment\">//调用 ros::Rate 对象来休眠一段时间以使得发布频率为 10Hz。</span></span><br><span class=\"line\">    ++count;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"beginner-tutorials-src-listener-cpp\"><a href=\"#beginner-tutorials-src-listener-cpp\" class=\"headerlink\" title=\"./beginner_tutorials/src/listener.cpp\"></a>./beginner_tutorials/src/listener.cpp</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"ros/ros.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"std_msgs/String.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * This tutorial demonstrates simple receipt of messages over the ROS system.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">chatterCallback</span><span class=\"params\">(<span class=\"keyword\">const</span> std_msgs::<span class=\"keyword\">String</span>::ConstPtr&amp; msg)</span>\t\t\t\t<span class=\"comment\">//这是一个回调函数，当接收到 chatter 话题的时候就会被调用。消息是以 boost shared_ptr 指针的形式传输，这就意味着你可以存储它而又不需要复制数据。</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  ROS_INFO(<span class=\"string\">\"I heard: [%s]\"</span>, msg-&gt;data.c_str());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  ros::init(argc, argv, <span class=\"string\">\"listener\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  ros::NodeHandle n;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 告诉 master 我们要订阅 chatter 话题上的消息。当有消息发布到这个话题时，ROS 就会调用 chatterCallback() 函数。第二个参数是队列大小，以防我们处理消息的速度不够快，当缓存达到 1000 </span></span><br><span class=\"line\"><span class=\"comment\">   * 条消息后，再有新的消息到来就将开始丢弃先前接收的消息。</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * NodeHandle::subscribe() 返回 ros::Subscriber 对象,你必须让它处于活动状态直到你不再想订阅该消息。当这个对象销毁时，它将自动退订 chatter 话题的消息。</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * 有各种不同的 NodeHandle::subscribe() 函数，允许你指定类的成员函数，甚至是 Boost.Function 对象可以调用的任何数据类型。</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  ros::Subscriber sub = n.subscribe(<span class=\"string\">\"chatter\"</span>, <span class=\"number\">1000</span>, chatterCallback);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * ros::spin() 进入自循环，可以尽可能快的调用消息回调函数。如果没有消息到达，它不会占用很多 CPU，所以不用担心。一旦 ros::ok() 返回 false，ros::spin() 就会立刻跳出自循环。</span></span><br><span class=\"line\"><span class=\"comment\">   * 这有可能是 ros::shutdown() 被调用，或者是用户按下了 Ctrl-C，使得 master 告诉节点要终止运行。也有可能是节点被人为关闭的。</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  ros::spin();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下边，我们来总结一下:</p>\n<ul>\n<li>初始化ROS系统</li>\n<li>订阅 chatter 话题</li>\n<li>进入自循环，等待消息的到达</li>\n<li>当消息到达，调用 chatterCallback() 函数</li>\n</ul>\n<h3 id=\"beginner-tutorials-CMakeLists-txt\"><a href=\"#beginner-tutorials-CMakeLists-txt\" class=\"headerlink\" title=\"./beginner_tutorials/CMakeLists.txt\"></a>./beginner_tutorials/CMakeLists.txt</h3><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake_minimum_required(VERSION <span class=\"number\">2.8</span><span class=\"number\">.3</span>)</span><br><span class=\"line\">project(beginner_tutorials)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Find catkin and any catkin packages</span></span><br><span class=\"line\">find_package(catkin REQUIRED COMPONENTS roscpp rospy std_msgs genmsg)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Declare ROS messages and services</span></span><br><span class=\"line\">add_message_files(FILES Num.msg)</span><br><span class=\"line\">add_service_files(FILES AddTwoInts.srv)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Generate added messages and services</span></span><br><span class=\"line\">generate_messages(DEPENDENCIES std_msgs)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Declare a catkin package</span></span><br><span class=\"line\">catkin_package()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Build talker and listener</span></span><br><span class=\"line\">include_directories(include $&#123;catkin_INCLUDE_DIRS&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">add_executable(talker src/talker.cpp)</span><br><span class=\"line\">target_link_libraries(talker $&#123;catkin_LIBRARIES&#125;)</span><br><span class=\"line\">add_dependencies(talker beginner_tutorials_generate_messages_cpp)</span><br><span class=\"line\"></span><br><span class=\"line\">add_executable(listener src/listener.cpp)</span><br><span class=\"line\">target_link_libraries(listener $&#123;catkin_LIBRARIES&#125;)</span><br><span class=\"line\">add_dependencies(listener beginner_tutorials_generate_messages_cpp)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>在工作空间目录下进行编译，并运行。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">roscore\t\t\t\t\t\t\t\t\t<span class=\"comment\">//新开一个终端</span></span><br><span class=\"line\">cd catkin_ws\t\t\t\t\t\t\t<span class=\"comment\">//新开一个终端</span></span><br><span class=\"line\">catkin_make</span><br><span class=\"line\">source ./devel/<span class=\"built_in\">setup</span>.bash       \t\t<span class=\"comment\">//在运行你自己的程序前，已经source了catkin工作空间下的setup.sh文件</span></span><br><span class=\"line\">rosrun beginner_tutorials talker \t\t<span class=\"comment\">//启动发布器</span></span><br><span class=\"line\"></span><br><span class=\"line\">cd catkin_ws\t\t\t\t\t\t\t<span class=\"comment\">//新开一个终端，并打开工作空间</span></span><br><span class=\"line\">source ./devel/<span class=\"built_in\">setup</span>.bash       \t\t<span class=\"comment\">//在运行你自己的程序前，已经source了catkin工作空间下的setup.sh文件</span></span><br><span class=\"line\">rosrun beginner_tutorials listener \t\t<span class=\"comment\">//启动订阅器</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编写简单的服务器和客户端-C\"><a href=\"#编写简单的服务器和客户端-C\" class=\"headerlink\" title=\"编写简单的服务器和客户端(C++)\"></a>编写简单的服务器和客户端(C++)</h2><h3 id=\"beginner-tutorials-src-add-two-ints-server-cpp\"><a href=\"#beginner-tutorials-src-add-two-ints-server-cpp\" class=\"headerlink\" title=\"./beginner_tutorials/src/add_two_ints_server.cpp\"></a>./beginner_tutorials/src/add_two_ints_server.cpp</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"ros/ros.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"beginner_tutorials/AddTwoInts.h\"</span>\t\t\t\t\t\t\t\t<span class=\"comment\">//beginner_tutorials/AddTwoInts.h是由编译系统自动根据我们先前创建的srv文件生成的对应该srv文件的头文件。</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 这个函数提供两个int值求和的服务，int值从request里面获取，而返回数据装入response内，这些数据类型都定义在srv文件内部，函数返回一个boolean值。</span></span><br><span class=\"line\"><span class=\"comment\">  * 两个int值进行相加，并存入response。然后一些关于request和response的信息被记录下来。最后，service完成计算后返回true值。</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">add</span><span class=\"params\">(beginner_tutorials::AddTwoInts::Request  &amp;req,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">         beginner_tutorials::AddTwoInts::Response &amp;res)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  res.sum = req.a + req.b;</span><br><span class=\"line\">  ROS_INFO(<span class=\"string\">\"request: x=%ld, y=%ld\"</span>, (<span class=\"keyword\">long</span> <span class=\"keyword\">int</span>)req.a, (<span class=\"keyword\">long</span> <span class=\"keyword\">int</span>)req.b);</span><br><span class=\"line\">  ROS_INFO(<span class=\"string\">\"sending back response: [%ld]\"</span>, (<span class=\"keyword\">long</span> <span class=\"keyword\">int</span>)res.sum);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  ros::init(argc, argv, <span class=\"string\">\"add_two_ints_server\"</span>);</span><br><span class=\"line\">  ros::NodeHandle n;</span><br><span class=\"line\"></span><br><span class=\"line\">  ros::ServiceServer service = n.advertiseService(<span class=\"string\">\"add_two_ints\"</span>, add);\t<span class=\"comment\">//建立service，并在ROS内发布出来。</span></span><br><span class=\"line\">  ROS_INFO(<span class=\"string\">\"Ready to add two ints.\"</span>);</span><br><span class=\"line\">  ros::spin();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"beginner-tutorials-src-add-two-ints-client-cpp\"><a href=\"#beginner-tutorials-src-add-two-ints-client-cpp\" class=\"headerlink\" title=\"./beginner_tutorials/src/add_two_ints_client.cpp\"></a>./beginner_tutorials/src/add_two_ints_client.cpp</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"ros/ros.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"beginner_tutorials/AddTwoInts.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  ros::init(argc, argv, <span class=\"string\">\"add_two_ints_client\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (argc != <span class=\"number\">3</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    ROS_INFO(<span class=\"string\">\"usage: add_two_ints_client X Y\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ros::NodeHandle n;</span><br><span class=\"line\">  ros::ServiceClient client = n.serviceClient&lt;beginner_tutorials::AddTwoInts&gt;(<span class=\"string\">\"add_two_ints\"</span>);\t\t<span class=\"comment\">//这段代码为add_two_ints service创建一个client。ros::ServiceClient 对象待会用来调用service。</span></span><br><span class=\"line\">  beginner_tutorials::AddTwoInts srv;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//这里，我们实例化一个由ROS编译系统自动生成的service类，并给其request成员赋值。</span></span><br><span class=\"line\">  srv.request.a = atoll(argv[<span class=\"number\">1</span>]);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// 一个service类包含两个成员request和response。同时也包括两个类定义Request和Response。</span></span><br><span class=\"line\">  srv.request.b = atoll(argv[<span class=\"number\">2</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 这段代码是在调用service。由于service的调用是模态过程（调用的时候占用进程阻止其他代码的执行），一旦调用完成，将返回调用结果。</span></span><br><span class=\"line\"><span class=\"comment\">   * 如果service调用成功，call()函数将返回true，srv.response里面的值将是合法的值。</span></span><br><span class=\"line\"><span class=\"comment\">   * 如果调用失败，call()函数将返回false，srv.response里面的值将是非法的。 </span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (client.call(srv))</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    ROS_INFO(<span class=\"string\">\"Sum: %ld\"</span>, (<span class=\"keyword\">long</span> <span class=\"keyword\">int</span>)srv.response.sum);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    ROS_ERROR(<span class=\"string\">\"Failed to call service add_two_ints\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"beginner-tutorials-CMakeLists-txt-1\"><a href=\"#beginner-tutorials-CMakeLists-txt-1\" class=\"headerlink\" title=\"./beginner_tutorials/CMakeLists.txt\"></a>./beginner_tutorials/CMakeLists.txt</h3><p>在上一节的CMakeLists.txt后添加：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add_executable(add_two_ints_server src/add_two_ints_server.cpp)</span><br><span class=\"line\">target_link_libraries(add_two_ints_server $&#123;catkin_LIBRARIES&#125;)</span><br><span class=\"line\">add_dependencies(add_two_ints_server beginner_tutorials_gencpp)</span><br><span class=\"line\"></span><br><span class=\"line\">add_executable(add_two_ints_client src/add_two_ints_client.cpp)</span><br><span class=\"line\">target_link_libraries(add_two_ints_client $&#123;catkin_LIBRARIES&#125;)</span><br><span class=\"line\">add_dependencies(add_two_ints_client beginner_tutorials_gencpp)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试-1\"><a href=\"#测试-1\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>在工作空间目录下进行编译，并运行。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">roscore\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//新开一个终端</span></span><br><span class=\"line\">cd catkin_ws\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//新开一个终端</span></span><br><span class=\"line\">catkin_make</span><br><span class=\"line\">source ./devel/<span class=\"built_in\">setup</span>.bash       \t\t\t\t\t<span class=\"comment\">//在运行你自己的程序前，已经source了catkin工作空间下的setup.sh文件</span></span><br><span class=\"line\">rosrun beginner_tutorials add_two_ints_server \t\t<span class=\"comment\">//启动服务器</span></span><br><span class=\"line\"></span><br><span class=\"line\">cd catkin_ws\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//新开一个终端，并打开工作空间</span></span><br><span class=\"line\">source ./devel/<span class=\"built_in\">setup</span>.bash       \t\t\t\t\t<span class=\"comment\">//在运行你自己的程序前，已经source了catkin工作空间下的setup.sh文件</span></span><br><span class=\"line\">rosrun beginner_tutorials add_two_ints_client <span class=\"number\">1</span> <span class=\"number\">3</span> \t<span class=\"comment\">//启动客户端</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>本文中的环境为Ubuntu16.04LTS + ROS(kinetic).</p>\n</blockquote>","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>由于从ROS的官网上的教程并没有实时更新，上面混杂了一些旧版本的东西，看起来有些麻烦，而且有的介绍过于繁琐，因此本篇博客旨在介绍笔者使用版本的精简指令集。关于指令的详细介绍，还需从官网上查看相关内容。</p>\n<h1 id=\"指令介绍\"><a href=\"#指令介绍\" class=\"headerlink\" title=\"指令介绍\"></a>指令介绍</h1><h2 id=\"ROS安装指令\"><a href=\"#ROS安装指令\" class=\"headerlink\" title=\"ROS安装指令\"></a>ROS安装指令</h2><p>在执行下面的指令前，请注意先将源换位内地源，推荐清华源。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo sh -c <span class=\"string\">'echo \"deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main\" &gt; /etc/apt/sources.list.d/ros-latest.list'</span></span><br><span class=\"line\">sudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:<span class=\"number\">80</span> --recv-key <span class=\"number\">0xB01FA116</span></span><br><span class=\"line\">sudo apt-get update\t<span class=\"comment\">#如果更新失败提示GPT error，输入sudo apt-key adv --recv-keys --keyserver keyserver.ubuntu.com F42ED6FBAB17C654</span></span><br><span class=\"line\">sudo apt-get install ros-kinetic-desktop-full</span><br><span class=\"line\">sudo rosdep init</span><br><span class=\"line\">rosdep update</span><br><span class=\"line\">echo <span class=\"string\">\"source /opt/ros/kinetic/setup.bash\"</span> &gt;&gt; ~/.bashrc</span><br><span class=\"line\">source ~/.bashrc</span><br><span class=\"line\">sudo apt install python-rosinstall python-rosinstall-generator python-wstool build-essential</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"UR5的仿真环境安装与使用\"><a href=\"#UR5的仿真环境安装与使用\" class=\"headerlink\" title=\"UR5的仿真环境安装与使用\"></a>UR5的仿真环境安装与使用</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> install ros-kinetic-universal-robot</span><br><span class=\"line\">roslaunch ur_gazebo ur5.launch\t</span><br><span class=\"line\">roslaunch ur5_moveit_config ur5_moveit_planning_execution.launch sim:=<span class=\"literal\">true</span></span><br><span class=\"line\">roslaunch ur5_moveit_config moveit_rviz.launch <span class=\"built_in\">config</span>:=<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ROS文件系统介绍\"><a href=\"#ROS文件系统介绍\" class=\"headerlink\" title=\"ROS文件系统介绍\"></a>ROS文件系统介绍</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> install ros-kinetic-ros-tutorials\t\t<span class=\"comment\">//安装ros-tutorials程序包</span></span><br><span class=\"line\">rospack <span class=\"built_in\">find</span> roscpp\t\t\t\t\t\t\t\t\t<span class=\"comment\">//rospack find [包名称]  rospack (/rospack)允许你获取软件包的有关信息。在本教程中，我们只涉及到rospack中find参数选项，该选项可以返回软件包的路径信息。</span></span><br><span class=\"line\">roscd roscpp\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//roscd [本地包名称[/子目录]]   直接切换工作目录到某个软件包或者软件包集当中</span></span><br><span class=\"line\">pwd\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//输出当前工作目录</span></span><br><span class=\"line\">echo $ROS_PACKAGE_PATH\t\t\t\t\t\t\t\t<span class=\"comment\">//查看ROS_PACKAGE_PATH</span></span><br><span class=\"line\">roscd <span class=\"built_in\">log</span>\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//切换到ROS保存日记文件的目录下。如果你没有执行过任何ROS程序，系统会报错说该目录不存在。</span></span><br><span class=\"line\">rosls roscpp_tutorials\t\t\t\t\t\t\t\t<span class=\"comment\">//rosls [本地包名称[/子目录]] 直接按软件包的名称而不是绝对路径来罗列目录</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用catkin创建工作空间\"><a href=\"#使用catkin创建工作空间\" class=\"headerlink\" title=\"使用catkin创建工作空间\"></a>使用catkin创建工作空间</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /opt/ros/kinetic/<span class=\"built_in\">setup</span>.bash\t\t\t\t\t<span class=\"comment\">//sourced your environment</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p ~/catkin_ws/src</span><br><span class=\"line\">cd ~/catkin_ws/</span><br><span class=\"line\">catkin_make</span><br><span class=\"line\">source devel/<span class=\"built_in\">setup</span>.bash</span><br><span class=\"line\">echo $ROS_PACKAGE_PATH \t\t\t\t\t\t\t\t<span class=\"comment\">//确认环境变量包含了目录</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建ROS程序包\"><a href=\"#创建ROS程序包\" class=\"headerlink\" title=\"创建ROS程序包\"></a>创建ROS程序包</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/catkin_ws/src</span><br><span class=\"line\">catkin_create_pkg beginner_tutorials std_msgs rospy roscpp \t\t<span class=\"comment\">//使用catkin_create_pkg命令来创建一个名为'beginner_tutorials'的新程序包，这个程序包依赖于std_msgs、roscpp和rospy</span></span><br><span class=\"line\">rospack depends1 beginner_tutorials \t\t\t\t\t\t\t<span class=\"comment\">//使用rospack命令来查看一级依赖包</span></span><br><span class=\"line\">rospack depends beginner_tutorials\t\t\t\t\t\t\t\t<span class=\"comment\">//使用rospack可以递归检测出所有的依赖包</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>本节还介绍了.xml文件的书写方法</p>\n</blockquote>\n<h2 id=\"编译ROS程序包\"><a href=\"#编译ROS程序包\" class=\"headerlink\" title=\"编译ROS程序包\"></a>编译ROS程序包</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /opt/ros/kinetic/<span class=\"built_in\">setup</span>.bash\t\t\t\t\t<span class=\"comment\">//先source你的环境配置(setup)文件</span></span><br><span class=\"line\">cd catkin工作空间</span><br><span class=\"line\">catkin_make\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//编译</span></span><br><span class=\"line\">catkin_make --source my_src\t\t\t\t\t\t\t<span class=\"comment\">//编译存放在了my_src中，而非在默认工作空间中（~/catkin_ws/src)的源代码</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"理解ROS节点\"><a href=\"#理解ROS节点\" class=\"headerlink\" title=\"理解ROS节点\"></a>理解ROS节点</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> install ros-kinetic-ros-tutorials\t\t<span class=\"comment\">//安装龟龟模拟器</span></span><br><span class=\"line\">roscore\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//运行所有ROS程序前首先要运行的命令</span></span><br><span class=\"line\">rosnode <span class=\"built_in\">list</span>\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//列出活跃的节点，本例为/rosout</span></span><br><span class=\"line\">rosnode info /rosout \t\t\t\t\t\t\t\t<span class=\"comment\">//返回特定节点的信息</span></span><br><span class=\"line\">rosrun turtlesim turtlesim_node\t\t\t\t\t\t<span class=\"comment\">//打开新终端，运行turtlesim。    rosrun [package_name] [node_name]</span></span><br><span class=\"line\">rosnode <span class=\"built_in\">list</span>\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//打开新终端，查看节点：/rosout  /turtlesim</span></span><br><span class=\"line\">rosrun turtlesim turtlesim_node __name:=my_turtle   <span class=\"comment\">//关闭原来的turtlesim，打开新终端运行。改变节点名称</span></span><br><span class=\"line\">rosnode <span class=\"built_in\">list</span> \t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//查看新的节点名称：/rosout /my_turtle</span></span><br><span class=\"line\">rosnode ping my_turtle\t\t\t\t\t\t\t\t<span class=\"comment\">//使用另一个节点来ping该节点</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"理解ROS话题\"><a href=\"#理解ROS话题\" class=\"headerlink\" title=\"理解ROS话题\"></a>理解ROS话题</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">roscore \t\t\t\t\t\t\t<span class=\"comment\">//新开一个终端，打开ros</span></span><br><span class=\"line\">rosrun turtlesim turtlesim_node\t\t<span class=\"comment\">//新开一个终端。这是接受消息的节点</span></span><br><span class=\"line\">rosrun turtlesim turtle_teleop_key\t<span class=\"comment\">//新开一个终端，通过键盘来控制龟龟运动。这也是发布消息的节点</span></span><br><span class=\"line\">rosrun rqt_graph rqt_graph\t\t\t<span class=\"comment\">//新开一个终端，创建一个显示当前系统运行情况的动态图形</span></span><br><span class=\"line\">rostopic -h\t\t\t\t\t\t\t<span class=\"comment\">//新开一个终端，查看rostopic的子命令</span></span><br><span class=\"line\">rostopic echo /turtle1/cmd_vel\t\t<span class=\"comment\">//你可能看不到任何东西因为现在还没有数据发布到该话题上。接下来我们通过按下方向键使turtle_teleop_key节点发布数据。可以返回rqt_graph中刷新查看</span></span><br><span class=\"line\">rostopic <span class=\"built_in\">list</span> -v \t\t\t\t\t<span class=\"comment\">//查看有关所发布和订阅的话题及其类型的详细信息</span></span><br><span class=\"line\">rostopic type /turtle1/cmd_vel\t\t<span class=\"comment\">//查看发布在某个话题上的消息类型，会看到：geometry_msgs/Twist</span></span><br><span class=\"line\">rosmsg show geometry_msgs/Twist\t\t<span class=\"comment\">//查看消息的详细情况。根据该结果可以知道turtlesim节点所期望的消息类型(可看到包含linear和angular两个值)，接下来我们就可以给turtle发布命令了</span></span><br><span class=\"line\">rostopic pub -1 /turtle1/cmd_vel geometry_msgs/Twist -- '[2.0, 0.0, 0.0]' '[0.0, 0.0, 1.8]'</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"comment\">//rostopic pub可以把数据发布到当前某个正在广播的话题上。用法:rostopic pub [topic] [msg_type] [args]</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"comment\">//以上命令会发送一条消息给turtlesim，告诉它以2.0大小的线速度和1.8大小的角速度开始移动。</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"comment\">//-1: （单个破折号）这个参数选项使rostopic发布一条消息后马上退出。</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"comment\">///turtle1/cmd_vel: 消息所发布到的话题名称</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"comment\">//geometry_msgs/Twist: 所发布消息类型</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"comment\">//--: 双破折号）这会告诉命令选项解析器接下来的参数部分都不是命令选项。这在参数里面包含有破折号-（比如负号）时是必须要添加的</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"comment\">//'[2.0, 0.0, 0.0]' '[0.0, 0.0, 1.8]': 正如之前提到的，在一个geometry_msgs/Twist消息里面包含有两个浮点型元素：linear和angular。</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"comment\">//在本例中，'[2.0, 0.0, 0.0]'是linear的值，'[0.0, 0.0, 1.8]'是angular的值。这些参数其实是按照YAML语法格式编写的，这在YAML文档 (/ROS/YAMLCommandLine)中有更多的描述。</span></span><br><span class=\"line\">rostopic pub /turtle1/cmd_vel geometry_msgs/Twist -r 1 -- '[2.0, 0.0, 0.0]' '[0.0, 0.0, 1.8]'</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"comment\">//这条命令以1Hz的频率发布速度命令到速度话题上。使用rostopic pub -r命令来发布一个稳定的命令流</span></span><br><span class=\"line\">rostopic hz /turtle1/pose\t\t\t<span class=\"comment\">//rostopic hz命令可以用来查看数据发布的频率。\trostopic hz [topic]\t</span></span><br><span class=\"line\">rostopic type /turtle1/pose | rosmsg show</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"comment\">//结合rostopic type和rosmsg show命令来获取关于某个话题的更深层次的信息\t</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"comment\">//可以看到pose下有五个信息: x y theta linear_velocity angular_velocity</span></span><br><span class=\"line\">rosrun rqt_plot rqt_plot\t\t\t<span class=\"comment\">//使用rqt_plot命令来绘制正在发布到/turtle1/pose话题上的数据变化图形\t</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"comment\">//这会弹出一个新窗口，在窗口左上角的一个文本框里面你可以添加需要绘制的话题。在里面输入/turtle1/pose/x后之前处于禁用状态的加号按钮将会被使能变亮。按一下该按钮，并</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"comment\">//对/turtle1/pose/y重复相同的过程。现在你会在图形中看到turtle的x-y位置坐标图。</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"comment\">//按下减号按钮会显示一组菜单让你隐藏图形中指定的话题。现在隐藏掉你刚才添加的话题并添加/turtle1/pose/theta</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"理解ROS服务和参数\"><a href=\"#理解ROS服务和参数\" class=\"headerlink\" title=\"理解ROS服务和参数\"></a>理解ROS服务和参数</h2><p>在小乌龟仍然启动的基础上：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rosservice <span class=\"built_in\">list</span>\t\t\t\t\t\t<span class=\"comment\">//输出可用服务的信息</span></span><br><span class=\"line\">rosservice call\t\t\t\t\t\t<span class=\"comment\">//调用带参数的服务</span></span><br><span class=\"line\">rosservice type \t\t\t\t\t<span class=\"comment\">//输出服务类型</span></span><br><span class=\"line\">rosservice <span class=\"built_in\">find</span> \t\t\t\t\t<span class=\"comment\">//依据类型寻找服务find services by service type </span></span><br><span class=\"line\">rosservice uri \t\t\t\t\t\t<span class=\"comment\">//输出服务的ROSRPC uri\t\t</span></span><br><span class=\"line\">rosservice type <span class=\"built_in\">clear</span>\t\t\t\t<span class=\"comment\">//查看clear服务类型，clear是rosservice list中的一种服务类型。rosservice type [service]</span></span><br><span class=\"line\">rosservice call <span class=\"built_in\">clear</span>\t\t\t\t<span class=\"comment\">//代用clear服务，该服务清除了turtlesim_node的背景上的轨迹。rosservice call [service] [args]</span></span><br><span class=\"line\">rosservice type spawn| rossrv show \t<span class=\"comment\">//查看再生（spawn）服务的信息</span></span><br><span class=\"line\">rosservice call spawn <span class=\"number\">2</span> <span class=\"number\">2</span> <span class=\"number\">0.2</span> <span class=\"string\">\"\"</span> \t<span class=\"comment\">//调用再生服务，在给定的位置和角度生成一只新的乌龟。名字参数是可选的，这里我们不设具体的名字，让turtlesim自动创建一个。</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rosparam <span class=\"built_in\">set</span> \t\t\t\t\t\t<span class=\"comment\">//设置参数</span></span><br><span class=\"line\">rosparam <span class=\"built_in\">get</span> \t\t\t\t\t\t<span class=\"comment\">//获取参数</span></span><br><span class=\"line\">rosparam load \t\t\t\t\t\t<span class=\"comment\">//从文件读取参数</span></span><br><span class=\"line\">rosparam dump \t\t\t\t\t\t<span class=\"comment\">//向文件中写入参数</span></span><br><span class=\"line\">rosparam <span class=\"keyword\">delete</span> \t\t\t\t\t<span class=\"comment\">//删除参数</span></span><br><span class=\"line\">rosparam <span class=\"built_in\">list</span> \t\t\t\t\t\t<span class=\"comment\">//列出节点在服务器上的参数名</span></span><br><span class=\"line\">rosparam <span class=\"built_in\">set</span> background_r <span class=\"number\">150</span>\t\t<span class=\"comment\">//修改背景颜色的红色通道。\trosparam set [param_name]</span></span><br><span class=\"line\">rosservice call <span class=\"built_in\">clear</span>\t\t\t\t<span class=\"comment\">//上述指令修改了参数的值，现在我们调用清除服务使得修改后的参数生效</span></span><br><span class=\"line\">rosparam <span class=\"built_in\">get</span> background_g\t\t\t<span class=\"comment\">//获取背景的绿色通道的值。 rosparam get [param_name]</span></span><br><span class=\"line\">rosparam <span class=\"built_in\">get</span> /\t\t\t\t\t\t<span class=\"comment\">//显示参数服务器上的所有内容</span></span><br><span class=\"line\">rosparam dump params.yaml \t\t\t<span class=\"comment\">//将所有的参数写入params.yaml文件。 rosparam dump [file_name]</span></span><br><span class=\"line\">rosparam load params.yaml copy\t\t<span class=\"comment\">//将yaml文件重载入新的命名空间，比如说copy空间。 rosparam load [file_name] [namespace]</span></span><br><span class=\"line\">rosparam <span class=\"built_in\">get</span> copy/background_b\t\t<span class=\"comment\">//获取copy空间的蓝色背景参数</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用-rqt-console-和-roslaunch\"><a href=\"#使用-rqt-console-和-roslaunch\" class=\"headerlink\" title=\"使用 rqt_console 和 roslaunch\"></a>使用 rqt_console 和 roslaunch</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> install ros-kinetic-rqt ros-kinetic-rqt-common-plugins ros-kinetic-turtlesim</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//预先安装需要的程序包，若安装，请忽略</span></span><br><span class=\"line\">rosrun rqt_console rqt_console\t\t\t\t\t\t\t<span class=\"comment\">//新终端中运行。 rqt_console属于ROS日志框架(logging framework)的一部分，用来显示节点的输出信息</span></span><br><span class=\"line\">rosrun rqt_logger_level rqt_logger_level\t\t\t\t<span class=\"comment\">//新终端中运行。 rqt_logger_level允许我们修改节点运行时输出信息的日志等级（logger levels）（包括 DEBUG、WARN、INFO和ERROR）。</span></span><br><span class=\"line\">rosrun turtlesim turtlesim_node\t\t\t\t\t\t\t<span class=\"comment\">//新终端中运行。启动turtlesim</span></span><br><span class=\"line\">rostopic pub /turtle1/cmd_vel geometry_msgs/Twist -r 1 -- '[2.0, 0.0, 0.0]' '[0.0, 0.0, 0.0]'</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//小龟龟动起来再查看rqt_console中的输出</span></span><br><span class=\"line\">roscd beginner_tutorials\t\t\t\t\t\t\t\t<span class=\"comment\">//打开之前创建的beginner_tutorials包，如果打不开，有两种办法解决：</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//1.输入绝对路径：cd ~/catkin_ws/src/beginner_tutorials\t</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//2.设置当前终端环境路径：export ROS_PACKAGE_PATH=~/catkin_ws/src:$ROS_PACKAGE_PATH。 成功后再输入：roscd beginner_tutorials\t</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> launch &amp;&amp; cd launch \t\t\t\t\t\t\t\t<span class=\"comment\">//创建并打开launch文件夹</span></span><br></pre></td></tr></table></figure>\n\n<p>新建一个空文件，命名为<code>turtlemimic.launch</code>，并在其中写入：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;launch&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;group ns=<span class=\"string\">\"turtlesim1\"</span>&gt;</span><br><span class=\"line\"> \t\t&lt;node pkg=<span class=\"string\">\"turtlesim\"</span> name=<span class=\"string\">\"sim\"</span> type=<span class=\"string\">\"turtlesim_node\"</span>/&gt;</span><br><span class=\"line\"> \t&lt;/group&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;group ns=<span class=\"string\">\"turtlesim2\"</span>&gt;</span><br><span class=\"line\"> \t\t&lt;node pkg=<span class=\"string\">\"turtlesim\"</span> name=<span class=\"string\">\"sim\"</span> type=<span class=\"string\">\"turtlesim_node\"</span>/&gt;</span><br><span class=\"line\"> \t&lt;/group&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"> \t&lt;node pkg=<span class=\"string\">\"turtlesim\"</span> name=<span class=\"string\">\"mimic\"</span> type=<span class=\"string\">\"mimic\"</span>&gt;</span><br><span class=\"line\">\t &lt;remap from=<span class=\"string\">\"input\"</span> to=<span class=\"string\">\"turtlesim1/turtle1\"</span>/&gt;</span><br><span class=\"line\">\t &lt;remap from=<span class=\"string\">\"output\"</span> to=<span class=\"string\">\"turtlesim2/turtle1\"</span>/&gt;</span><br><span class=\"line\"> \t&lt;/node&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/launch&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在3<del>9行我们创建了两个节点分组并以’命名空间（namespace)’标签来区分，其中一个名为turtulesim1，另一个名为turtlesim2，两个组里面都使用相同的turtlesim节点并命名为’sim’。这样可以让我们同时启动两个turtlesim模拟器而不会产生命名冲突。在11</del>14行我们启动模仿节点，并将所有话题的输入和输出分别重命名为turtlesim1和turtlesim2，这样就会使turtlesim2模仿turtlesim1。第1行和第16行分别表示luanch文件的开始标签和结束标签。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">roslaunch beginner_tutorials turtlemimic.launch\t\t\t<span class=\"comment\">//通过roslaunch命令启动launch文件，从而启动多个节点</span></span><br><span class=\"line\">rostopic pub /turtlesim1/turtle1/cmd_vel geometry_msgs/Twist -r 1 -- '[2.0, 0.0, 0.0]' '[0.0, 0.0, -1.8]'</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//在一个新终端中使用rostopic命令发送速度设定消息</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用rosed编辑ROS中的文件\"><a href=\"#使用rosed编辑ROS中的文件\" class=\"headerlink\" title=\"使用rosed编辑ROS中的文件\"></a>使用rosed编辑ROS中的文件</h2><p>如果习惯使用emacs，需要先将emacs设为默认编辑器，如果习惯使用vim，需要安装vim。这里以设置emacs为例。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">emacs .bashrc\t\t\t\t<span class=\"comment\">//新开一个终端。在.bashrc文件的最后一行写入：export EDITOR='emacs -nw'</span></span><br><span class=\"line\">echo $EDITOR\t\t\t\t<span class=\"comment\">//打开一个新终端，看是否定义了EDITOR。注意：.bashrc文件的改变，只会在新的终端才有效。已经打开的终端不受环境变量的影响。正常情况下回输出:emacs -nw</span></span><br><span class=\"line\">rosed roscpp Logger.msg \t<span class=\"comment\">//rosed可以直接通过package名来获取到待编辑的文件而无需指定该文件的存储路径了. rosed [package_name] [filename]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建ROS消息和ROS服务\"><a href=\"#创建ROS消息和ROS服务\" class=\"headerlink\" title=\"创建ROS消息和ROS服务\"></a>创建ROS消息和ROS服务</h2><h3 id=\"使用ROSmsg\"><a href=\"#使用ROSmsg\" class=\"headerlink\" title=\"使用ROSmsg\"></a>使用ROSmsg</h3><h4 id=\"创建一个rosmsg\"><a href=\"#创建一个rosmsg\" class=\"headerlink\" title=\"创建一个rosmsg\"></a>创建一个rosmsg</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/catkin_ws/src/beginner_tutorials\t\t\t<span class=\"comment\">//打开之前创建的package</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> msg \t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//创建msg文件夹</span></span><br><span class=\"line\">echo <span class=\"string\">\"int64 num\"</span> &gt; msg/Num.msg \t\t\t\t\t<span class=\"comment\">//写入到Num.msg文件中</span></span><br></pre></td></tr></table></figure>\n\n<p>确保msg文件被转为C++，Python和其他语言的源代码。查看package.xml, 确保它包含以下两条语句。若没有，手动添加。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;build_depend&gt;message_generation&lt;/build_depend&gt;</span><br><span class=\"line\">&lt;exec_depend&gt;message_runtime&lt;/exec_depend&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改-beginner-tutorials-CMakeLists-txt\"><a href=\"#修改-beginner-tutorials-CMakeLists-txt\" class=\"headerlink\" title=\"修改./beginner_tutorials/CMakeLists.txt:\"></a>修改./beginner_tutorials/CMakeLists.txt:</h4><p>1.寻找find_package，向其中添加message_generation。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find_package(catkin REQUIRED COMPONENTS </span><br><span class=\"line\">\t         roscpp </span><br><span class=\"line\">\t         rospy </span><br><span class=\"line\">\t         std_msgs </span><br><span class=\"line\">\t         message_generation</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>2.寻找catkin_package，设置运行依赖。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">catkin_package(</span><br><span class=\"line\">#  INCLUDE_DIRS include</span><br><span class=\"line\">#  LIBRARIES beginner_tutorials</span><br><span class=\"line\">#  CATKIN_DEPENDS roscpp rospy std_msgs</span><br><span class=\"line\">#  DEPENDS system_lib</span><br><span class=\"line\">  CATKIN_DEPENDS message_runtime</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>3.将add_message_files代码块去掉注释，并用自己的Num.msg代替Messag1.msg，如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add_message_files(</span><br><span class=\"line\">   FILES</span><br><span class=\"line\">   Num.msg</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>4.取消generate_messages()的注释，如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">generate_messages(</span><br><span class=\"line\">   DEPENDENCIES</span><br><span class=\"line\">   std_msgs</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用rosmsg\"><a href=\"#使用rosmsg\" class=\"headerlink\" title=\"使用rosmsg\"></a>使用rosmsg</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rosmsg show beginner_tutorials/Num \t\t\t\t<span class=\"comment\">//通过rosmsg show命令，检查ROS是否能够识消息。正确情况下会输出：int64 num。</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//如果不正常，需要设置path，输入指令：export ROS_PACKAGE_PATH=~/catkin_ws/src:$ROS_PACKAGE_PATH。再次输入show命令。</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用ROSsrv\"><a href=\"#使用ROSsrv\" class=\"headerlink\" title=\"使用ROSsrv\"></a>使用ROSsrv</h3><h4 id=\"创建一个srv\"><a href=\"#创建一个srv\" class=\"headerlink\" title=\"创建一个srv\"></a>创建一个srv</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">roscd beginner_tutorials</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> srv</span><br><span class=\"line\">roscp rospy_tutorials AddTwoInts.srv srv/AddTwoInts.srv</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//roscp [package_name] [file_to_copy_path] [copy_path]</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//roscp是一个很实用的命令行工具，它实现了将文件从一个package复制到另外一个package的功能。</span></span><br></pre></td></tr></table></figure>\n\n<p>同样，需要确保srv文件被转换为C++和其他语言的源代码。</p>\n<h4 id=\"修改CMakeLists-txt\"><a href=\"#修改CMakeLists-txt\" class=\"headerlink\" title=\"修改CMakeLists.txt:\"></a>修改CMakeLists.txt:</h4><p>1.和ROSmsg一样添加对message_generation的依赖。(message_generation 对msg和srv都起作用)</p>\n<p>2.将add_message_files代码块去掉注释，并添加自己的srv文件，如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add_service_files(</span><br><span class=\"line\">   FILES</span><br><span class=\"line\">   AddTwoInts.srv</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>3.取消generate_messages()的注释，同ROSmsg，如下：</p>\n<h4 id=\"使用ROSsrv-1\"><a href=\"#使用ROSsrv-1\" class=\"headerlink\" title=\"使用ROSsrv\"></a>使用ROSsrv</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rossrv show beginner_tutorials/AddTwoInts \t\t<span class=\"comment\">//通过rosmsg show命令，检查ROS是否能够识该服务。 rossrv show &lt;service type&gt;。跟rosmsg类似, 你也可以不指定具体的package名来查找服务文件</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"新开一个终端，打开工作空间并编译：\"><a href=\"#新开一个终端，打开工作空间并编译：\" class=\"headerlink\" title=\"新开一个终端，打开工作空间并编译：\"></a>新开一个终端，打开工作空间并编译：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd catkin_ws</span><br><span class=\"line\">catkin_make</span><br></pre></td></tr></table></figure>\n\n<p>所有在msg路径下的.msg文件都将转换为ROS所支持语言的源代码。生成的C++头文件将会放置在~/catkin_ws/devel/include/beginner_tutorials。</p>\n<h2 id=\"编写简单的消息发布器和订阅器-C\"><a href=\"#编写简单的消息发布器和订阅器-C\" class=\"headerlink\" title=\"编写简单的消息发布器和订阅器 (C++)\"></a>编写简单的消息发布器和订阅器 (C++)</h2><p>创建一个发布器节点(“talker”)，它将不断的在ROS网络中广播消息。创建一个接收器节点(“listener”)，它来接收ROS网络中的广播消息。</p>\n<h3 id=\"beginner-tutorials-src-talker-cpp\"><a href=\"#beginner-tutorials-src-talker-cpp\" class=\"headerlink\" title=\"./beginner_tutorials/src/talker.cpp\"></a>./beginner_tutorials/src/talker.cpp</h3><blockquote>\n<p>为了减少篇幅，将源码中的大段英文注释删除。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"ros/ros.h\"</span>\t\t\t\t\t<span class=\"comment\">//ros/ros.h 是一个实用的头文件，它引用了 ROS 系统中大部分常用的头文件。</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"std_msgs/String.h\"</span>\t\t\t<span class=\"comment\">//这引用了 std_msgs/String 消息, 它存放在 std_msgs package 里，是由 String.msg 文件自动生成的头文件。</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sstream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * This tutorial demonstrates simple sending of messages over the ROS system.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  ros::init(argc, argv, <span class=\"string\">\"talker\"</span>);\t\t<span class=\"comment\">//初始化 ROS 。它允许 ROS 通过命令行进行名称重映射——然而这并不是现在讨论的重点。在这里，我们也可以指定节点的名称——运行过程中，节点的名称必须唯一。</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//这里的名称必须是一个 base name ，也就是说，名称内不能包含 / 等符号。</span></span><br><span class=\"line\"></span><br><span class=\"line\">  ros::NodeHandle n;\t\t\t\t\t<span class=\"comment\">//为这个进程的节点创建一个句柄。第一个创建的 NodeHandle 会为节点进行初始化，最后一个销毁的 NodeHandle 则会释放该节点所占用的所有资源。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   *告诉 master 我们将要在 chatter（话题名） 上发布 std_msgs/String 消息类型的消息。这样 master 就会告诉所有订阅了 chatter *话题的节点，将要有数据发布。第二个参数是发布序列的大小。如果我们发布的消息的频率太高，缓冲区中的消息在大于 1000 个的时候就会开始丢弃先前发布的消息。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">   *NodeHandle::advertise() 返回一个 ros::Publisher 对象,它有两个作用： 1) 它有一个 publish() 成员函数可以让你在topic上发布消息； 2) 如果消息类型不对,它会拒绝发布。</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  ros::Publisher chatter_pub = n.advertise&lt;std_msgs::<span class=\"keyword\">String</span>&gt;(<span class=\"string\">\"chatter\"</span>, <span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\">ros::Rate <span class=\"title\">loop_rate</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;\t\t\t\t<span class=\"comment\">//ros::Rate 对象可以允许你指定自循环的频率。它会追踪记录自上一次调用 Rate::sleep() 后时间的流逝，并休眠直到一个频率周期的时间。这个例子中，我们让它以 10Hz 的频率运行。</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (ros::ok())\t\t\t\t\t\t<span class=\"comment\">//roscpp 会默认生成一个 SIGINT 句柄，它负责处理 Ctrl-C 键盘操作——使得 ros::ok() 返回 false。</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    std_msgs::<span class=\"keyword\">String</span> msg;\t\t\t\t<span class=\"comment\">//使用一个由 msg file 文件产生的『消息自适应』类在 ROS 网络中广播消息。现在我们使用标准的String消息，它只有一个数据成员 \"data\"。</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">stringstream</span> ss;</span><br><span class=\"line\">    ss &lt;&lt; <span class=\"string\">\"hello world \"</span> &lt;&lt; count;</span><br><span class=\"line\">    msg.data = ss.str();</span><br><span class=\"line\"></span><br><span class=\"line\">    ROS_INFO(<span class=\"string\">\"%s\"</span>, msg.data.c_str());\t<span class=\"comment\">//ROS_INFO 和其他类似的函数可以用来代替 printf/cout 等函数。</span></span><br><span class=\"line\"></span><br><span class=\"line\">    chatter_pub.publish(msg);\t\t\t<span class=\"comment\">//向所有订阅 chatter 话题的节点发送消息。</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ros::spinOnce();\t\t\t\t\t<span class=\"comment\">//在这个例子中并不是一定要调用 ros::spinOnce()，因为我们不接受回调。然而，如果你的程序里包含其他回调函数，最好在这里加上 </span></span><br><span class=\"line\">    \t\t\t\t\t\t\t\t\t<span class=\"comment\">//ros::spinOnce()这一语句，否则你的回调函数就永远也不会被调用了。\t\t\t\t</span></span><br><span class=\"line\"></span><br><span class=\"line\">    loop_rate.sleep();\t\t\t\t\t<span class=\"comment\">//调用 ros::Rate 对象来休眠一段时间以使得发布频率为 10Hz。</span></span><br><span class=\"line\">    ++count;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"beginner-tutorials-src-listener-cpp\"><a href=\"#beginner-tutorials-src-listener-cpp\" class=\"headerlink\" title=\"./beginner_tutorials/src/listener.cpp\"></a>./beginner_tutorials/src/listener.cpp</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"ros/ros.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"std_msgs/String.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * This tutorial demonstrates simple receipt of messages over the ROS system.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">chatterCallback</span><span class=\"params\">(<span class=\"keyword\">const</span> std_msgs::<span class=\"keyword\">String</span>::ConstPtr&amp; msg)</span>\t\t\t\t<span class=\"comment\">//这是一个回调函数，当接收到 chatter 话题的时候就会被调用。消息是以 boost shared_ptr 指针的形式传输，这就意味着你可以存储它而又不需要复制数据。</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  ROS_INFO(<span class=\"string\">\"I heard: [%s]\"</span>, msg-&gt;data.c_str());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  ros::init(argc, argv, <span class=\"string\">\"listener\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  ros::NodeHandle n;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 告诉 master 我们要订阅 chatter 话题上的消息。当有消息发布到这个话题时，ROS 就会调用 chatterCallback() 函数。第二个参数是队列大小，以防我们处理消息的速度不够快，当缓存达到 1000 </span></span><br><span class=\"line\"><span class=\"comment\">   * 条消息后，再有新的消息到来就将开始丢弃先前接收的消息。</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * NodeHandle::subscribe() 返回 ros::Subscriber 对象,你必须让它处于活动状态直到你不再想订阅该消息。当这个对象销毁时，它将自动退订 chatter 话题的消息。</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * 有各种不同的 NodeHandle::subscribe() 函数，允许你指定类的成员函数，甚至是 Boost.Function 对象可以调用的任何数据类型。</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  ros::Subscriber sub = n.subscribe(<span class=\"string\">\"chatter\"</span>, <span class=\"number\">1000</span>, chatterCallback);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * ros::spin() 进入自循环，可以尽可能快的调用消息回调函数。如果没有消息到达，它不会占用很多 CPU，所以不用担心。一旦 ros::ok() 返回 false，ros::spin() 就会立刻跳出自循环。</span></span><br><span class=\"line\"><span class=\"comment\">   * 这有可能是 ros::shutdown() 被调用，或者是用户按下了 Ctrl-C，使得 master 告诉节点要终止运行。也有可能是节点被人为关闭的。</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  ros::spin();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下边，我们来总结一下:</p>\n<ul>\n<li>初始化ROS系统</li>\n<li>订阅 chatter 话题</li>\n<li>进入自循环，等待消息的到达</li>\n<li>当消息到达，调用 chatterCallback() 函数</li>\n</ul>\n<h3 id=\"beginner-tutorials-CMakeLists-txt\"><a href=\"#beginner-tutorials-CMakeLists-txt\" class=\"headerlink\" title=\"./beginner_tutorials/CMakeLists.txt\"></a>./beginner_tutorials/CMakeLists.txt</h3><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake_minimum_required(VERSION <span class=\"number\">2.8</span><span class=\"number\">.3</span>)</span><br><span class=\"line\">project(beginner_tutorials)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Find catkin and any catkin packages</span></span><br><span class=\"line\">find_package(catkin REQUIRED COMPONENTS roscpp rospy std_msgs genmsg)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Declare ROS messages and services</span></span><br><span class=\"line\">add_message_files(FILES Num.msg)</span><br><span class=\"line\">add_service_files(FILES AddTwoInts.srv)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Generate added messages and services</span></span><br><span class=\"line\">generate_messages(DEPENDENCIES std_msgs)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Declare a catkin package</span></span><br><span class=\"line\">catkin_package()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Build talker and listener</span></span><br><span class=\"line\">include_directories(include $&#123;catkin_INCLUDE_DIRS&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">add_executable(talker src/talker.cpp)</span><br><span class=\"line\">target_link_libraries(talker $&#123;catkin_LIBRARIES&#125;)</span><br><span class=\"line\">add_dependencies(talker beginner_tutorials_generate_messages_cpp)</span><br><span class=\"line\"></span><br><span class=\"line\">add_executable(listener src/listener.cpp)</span><br><span class=\"line\">target_link_libraries(listener $&#123;catkin_LIBRARIES&#125;)</span><br><span class=\"line\">add_dependencies(listener beginner_tutorials_generate_messages_cpp)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>在工作空间目录下进行编译，并运行。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">roscore\t\t\t\t\t\t\t\t\t<span class=\"comment\">//新开一个终端</span></span><br><span class=\"line\">cd catkin_ws\t\t\t\t\t\t\t<span class=\"comment\">//新开一个终端</span></span><br><span class=\"line\">catkin_make</span><br><span class=\"line\">source ./devel/<span class=\"built_in\">setup</span>.bash       \t\t<span class=\"comment\">//在运行你自己的程序前，已经source了catkin工作空间下的setup.sh文件</span></span><br><span class=\"line\">rosrun beginner_tutorials talker \t\t<span class=\"comment\">//启动发布器</span></span><br><span class=\"line\"></span><br><span class=\"line\">cd catkin_ws\t\t\t\t\t\t\t<span class=\"comment\">//新开一个终端，并打开工作空间</span></span><br><span class=\"line\">source ./devel/<span class=\"built_in\">setup</span>.bash       \t\t<span class=\"comment\">//在运行你自己的程序前，已经source了catkin工作空间下的setup.sh文件</span></span><br><span class=\"line\">rosrun beginner_tutorials listener \t\t<span class=\"comment\">//启动订阅器</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编写简单的服务器和客户端-C\"><a href=\"#编写简单的服务器和客户端-C\" class=\"headerlink\" title=\"编写简单的服务器和客户端(C++)\"></a>编写简单的服务器和客户端(C++)</h2><h3 id=\"beginner-tutorials-src-add-two-ints-server-cpp\"><a href=\"#beginner-tutorials-src-add-two-ints-server-cpp\" class=\"headerlink\" title=\"./beginner_tutorials/src/add_two_ints_server.cpp\"></a>./beginner_tutorials/src/add_two_ints_server.cpp</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"ros/ros.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"beginner_tutorials/AddTwoInts.h\"</span>\t\t\t\t\t\t\t\t<span class=\"comment\">//beginner_tutorials/AddTwoInts.h是由编译系统自动根据我们先前创建的srv文件生成的对应该srv文件的头文件。</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 这个函数提供两个int值求和的服务，int值从request里面获取，而返回数据装入response内，这些数据类型都定义在srv文件内部，函数返回一个boolean值。</span></span><br><span class=\"line\"><span class=\"comment\">  * 两个int值进行相加，并存入response。然后一些关于request和response的信息被记录下来。最后，service完成计算后返回true值。</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">add</span><span class=\"params\">(beginner_tutorials::AddTwoInts::Request  &amp;req,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">         beginner_tutorials::AddTwoInts::Response &amp;res)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  res.sum = req.a + req.b;</span><br><span class=\"line\">  ROS_INFO(<span class=\"string\">\"request: x=%ld, y=%ld\"</span>, (<span class=\"keyword\">long</span> <span class=\"keyword\">int</span>)req.a, (<span class=\"keyword\">long</span> <span class=\"keyword\">int</span>)req.b);</span><br><span class=\"line\">  ROS_INFO(<span class=\"string\">\"sending back response: [%ld]\"</span>, (<span class=\"keyword\">long</span> <span class=\"keyword\">int</span>)res.sum);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  ros::init(argc, argv, <span class=\"string\">\"add_two_ints_server\"</span>);</span><br><span class=\"line\">  ros::NodeHandle n;</span><br><span class=\"line\"></span><br><span class=\"line\">  ros::ServiceServer service = n.advertiseService(<span class=\"string\">\"add_two_ints\"</span>, add);\t<span class=\"comment\">//建立service，并在ROS内发布出来。</span></span><br><span class=\"line\">  ROS_INFO(<span class=\"string\">\"Ready to add two ints.\"</span>);</span><br><span class=\"line\">  ros::spin();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"beginner-tutorials-src-add-two-ints-client-cpp\"><a href=\"#beginner-tutorials-src-add-two-ints-client-cpp\" class=\"headerlink\" title=\"./beginner_tutorials/src/add_two_ints_client.cpp\"></a>./beginner_tutorials/src/add_two_ints_client.cpp</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"ros/ros.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"beginner_tutorials/AddTwoInts.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  ros::init(argc, argv, <span class=\"string\">\"add_two_ints_client\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (argc != <span class=\"number\">3</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    ROS_INFO(<span class=\"string\">\"usage: add_two_ints_client X Y\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ros::NodeHandle n;</span><br><span class=\"line\">  ros::ServiceClient client = n.serviceClient&lt;beginner_tutorials::AddTwoInts&gt;(<span class=\"string\">\"add_two_ints\"</span>);\t\t<span class=\"comment\">//这段代码为add_two_ints service创建一个client。ros::ServiceClient 对象待会用来调用service。</span></span><br><span class=\"line\">  beginner_tutorials::AddTwoInts srv;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//这里，我们实例化一个由ROS编译系统自动生成的service类，并给其request成员赋值。</span></span><br><span class=\"line\">  srv.request.a = atoll(argv[<span class=\"number\">1</span>]);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// 一个service类包含两个成员request和response。同时也包括两个类定义Request和Response。</span></span><br><span class=\"line\">  srv.request.b = atoll(argv[<span class=\"number\">2</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 这段代码是在调用service。由于service的调用是模态过程（调用的时候占用进程阻止其他代码的执行），一旦调用完成，将返回调用结果。</span></span><br><span class=\"line\"><span class=\"comment\">   * 如果service调用成功，call()函数将返回true，srv.response里面的值将是合法的值。</span></span><br><span class=\"line\"><span class=\"comment\">   * 如果调用失败，call()函数将返回false，srv.response里面的值将是非法的。 </span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (client.call(srv))</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    ROS_INFO(<span class=\"string\">\"Sum: %ld\"</span>, (<span class=\"keyword\">long</span> <span class=\"keyword\">int</span>)srv.response.sum);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    ROS_ERROR(<span class=\"string\">\"Failed to call service add_two_ints\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"beginner-tutorials-CMakeLists-txt-1\"><a href=\"#beginner-tutorials-CMakeLists-txt-1\" class=\"headerlink\" title=\"./beginner_tutorials/CMakeLists.txt\"></a>./beginner_tutorials/CMakeLists.txt</h3><p>在上一节的CMakeLists.txt后添加：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add_executable(add_two_ints_server src/add_two_ints_server.cpp)</span><br><span class=\"line\">target_link_libraries(add_two_ints_server $&#123;catkin_LIBRARIES&#125;)</span><br><span class=\"line\">add_dependencies(add_two_ints_server beginner_tutorials_gencpp)</span><br><span class=\"line\"></span><br><span class=\"line\">add_executable(add_two_ints_client src/add_two_ints_client.cpp)</span><br><span class=\"line\">target_link_libraries(add_two_ints_client $&#123;catkin_LIBRARIES&#125;)</span><br><span class=\"line\">add_dependencies(add_two_ints_client beginner_tutorials_gencpp)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试-1\"><a href=\"#测试-1\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>在工作空间目录下进行编译，并运行。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">roscore\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//新开一个终端</span></span><br><span class=\"line\">cd catkin_ws\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//新开一个终端</span></span><br><span class=\"line\">catkin_make</span><br><span class=\"line\">source ./devel/<span class=\"built_in\">setup</span>.bash       \t\t\t\t\t<span class=\"comment\">//在运行你自己的程序前，已经source了catkin工作空间下的setup.sh文件</span></span><br><span class=\"line\">rosrun beginner_tutorials add_two_ints_server \t\t<span class=\"comment\">//启动服务器</span></span><br><span class=\"line\"></span><br><span class=\"line\">cd catkin_ws\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//新开一个终端，并打开工作空间</span></span><br><span class=\"line\">source ./devel/<span class=\"built_in\">setup</span>.bash       \t\t\t\t\t<span class=\"comment\">//在运行你自己的程序前，已经source了catkin工作空间下的setup.sh文件</span></span><br><span class=\"line\">rosrun beginner_tutorials add_two_ints_client <span class=\"number\">1</span> <span class=\"number\">3</span> \t<span class=\"comment\">//启动客户端</span></span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Jan 29 2020 21:57:52 GMT+0800 (China Standard Time)","title":"ROS(kinetic)有用指令集","path":"archives/25595.html","eyeCatchImage":null,"excerpt":"介绍ROS的kinetic版本有用的一些指令集","date":{"_isAMomentObject":true,"_i":"2019-08-03T16:30:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2019-08-03T16:30:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"机器人控制","tags":["Library","机器人","ROS"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":15883},{"title":"Linux下OpenCV库的安装","description":"介绍OpenCV库的安装方法。","date":"2019-08-05T11:00:00.000Z","abbrlink":56535,"_content":"\n> 开发环境：Ubuntu16.04 LTS、 OpenCV3.4.1。 \n\n<!-- more -->\n\n# 前言\n\nOpenCV 是一个开源的计算机视觉库，可以从 http://opencv.org 获取。OpenCV包含的模块以及组成结构参见：http://c.biancheng.net/view/1101.html。\n\n# OpenCV库的安装\n\n## 下载安装包\n\n官网下载sources版本(For Linux)：http://opencv.org/releases.html。\n\n解压，并进入解压后的目录：\n\n```c++\nunzip opencv-3.4.1.zip \t\t\t//解压安装包，也可以右键解压\ncd opencv-3.4.1\t\t\t\t//打开安装包存放路径\n```\n\n## 安装过程\n\n在Terminal中，打开安装包存放路径，执行下列语句进行安装。\n\n```c++\nsudo apt-get install build-essential libgtk2.0-dev libavcodec-dev libavformat-dev libjpeg.dev libtiff4.dev libswscale-dev libjasper-dev\n\t\t\t\t\t//上述指令是为了安装依赖库\nmkdir build && cd build \t\t//打开编译目录并进入\ncmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local ..\t\n\t\t\t\t\t//编译目录\n\t\t\t\t\t//或者cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D WITH_TBB=ON -D BUILD_NEW_PYTHON_SUPPORT=ON -D WITH_V4L=ON -D WITH_QT=ON -D WITH_OPENGL=ON ..\nmake -j$(nproc)\t\t\t\t//编译\nsudo make install \t\t\t//安装\nsudo /bin/bash -c 'echo \"/usr/local/lib\" > /etc/ld.so.conf.d/opencv.conf'\t\n\t\t\t\t\t//环境配置添加库路径\nsudo ldconfig\t\t\t\t//更新系统库\nsudo gedit /etc/bash.bashrc \t\t//配置bash，打开后在末尾添加下面两句：\n\t\t\t\t\t//PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib/pkgconfig  \n\t\t\t\t\t//export PKG_CONFIG_PATH  \n\t\t\t\t\t//保存并退出\nsudo -s \nsource /etc/bash.bashrc\t\t\t//激活配置\nsudo updatedb  \t\t\t\t//更新database\n```\n\n> 参考链接：[官网安装(英文版)](https://docs.opencv.org/master/d7/d9f/tutorial_linux_install.html).\n>          [Ubuntu16.04安装Opencv3.4.1教程](https://www.cnblogs.com/Shuqing-cxw/p/9195303.html).\n>          [sudo: source: command not found](https://blog.csdn.net/ezbuy/article/details/80570189).\n\n# 测试\n\n自己新建一个文件夹，用来存放工程文件，目录如下：\n\n![01.png]( /images/20190805OpenCV/01.png)\n\n> 其中，lena.jpg由自己保存一张图片并以该名字命名，与.cpp存放于同级目录。\n\n## CMakeLists.txt\n\n```c++\ncmake_minimum_required(VERSION 2.8)\n\nproject( DisplayImage )\n\nfind_package( OpenCV REQUIRED )\n\nadd_executable( opencv_test opencv_test.cpp )\n\ntarget_link_libraries( opencv_test ${OpenCV_LIBS} )\n```\n\n## opencv_test.cpp\n\n```c++\n#include <iostream>\n#include <opencv2/opencv.hpp>\n\nusing namespace cv;\nusing namespace std;\n\nint main(int argc, char** argv) {\n    if ( argc != 2 ) {\n\tcout << \"Need to load a picture...\" << endl;\n\treturn -1;\n    }\n    Mat image;\n    image = imread(argv[1], 1);\n    if ( image.empty() ) {\n\tcout <<\"No image data!\" << endl;\n\treturn -1;\n    }\n    namedWindow(\"Display Image\", WINDOW_AUTOSIZE);\n    imshow(\"Display Image\", image);\n    waitKey(0);\n    return 0;\n}\n```\n\n## 结果\n\n在build文件夹中编译，运行程序：\n\n```c++\ncd build\ncmake ..\t\t\t\t\t\t\nmake\n./opencv_test ../lena.jpg\t\t//运行可执行程序，并输入图片名作为参数。其中../表示上一级目录，./表示本级目录下的可执行程序。\n```\n\n执行上述程序后，可看到自己保存的图片lena.jpg。\n","source":"_posts/2019-08-05-LinuxÏÂOpenCV¿âµÄ°²×°.md","raw":"---\ntitle: Linux下OpenCV库的安装\ndescription: 介绍OpenCV库的安装方法。\ndate: '2019.08.05.11:00'\ncategories:\n  - 工科生的基本功\n  - 快乐码农\ntags:\n  - Linux\n  - OpenCV\n  - C++\n  - Library\nabbrlink: 56535\n---\n\n> 开发环境：Ubuntu16.04 LTS、 OpenCV3.4.1。 \n\n<!-- more -->\n\n# 前言\n\nOpenCV 是一个开源的计算机视觉库，可以从 http://opencv.org 获取。OpenCV包含的模块以及组成结构参见：http://c.biancheng.net/view/1101.html。\n\n# OpenCV库的安装\n\n## 下载安装包\n\n官网下载sources版本(For Linux)：http://opencv.org/releases.html。\n\n解压，并进入解压后的目录：\n\n```c++\nunzip opencv-3.4.1.zip \t\t\t//解压安装包，也可以右键解压\ncd opencv-3.4.1\t\t\t\t//打开安装包存放路径\n```\n\n## 安装过程\n\n在Terminal中，打开安装包存放路径，执行下列语句进行安装。\n\n```c++\nsudo apt-get install build-essential libgtk2.0-dev libavcodec-dev libavformat-dev libjpeg.dev libtiff4.dev libswscale-dev libjasper-dev\n\t\t\t\t\t//上述指令是为了安装依赖库\nmkdir build && cd build \t\t//打开编译目录并进入\ncmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local ..\t\n\t\t\t\t\t//编译目录\n\t\t\t\t\t//或者cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D WITH_TBB=ON -D BUILD_NEW_PYTHON_SUPPORT=ON -D WITH_V4L=ON -D WITH_QT=ON -D WITH_OPENGL=ON ..\nmake -j$(nproc)\t\t\t\t//编译\nsudo make install \t\t\t//安装\nsudo /bin/bash -c 'echo \"/usr/local/lib\" > /etc/ld.so.conf.d/opencv.conf'\t\n\t\t\t\t\t//环境配置添加库路径\nsudo ldconfig\t\t\t\t//更新系统库\nsudo gedit /etc/bash.bashrc \t\t//配置bash，打开后在末尾添加下面两句：\n\t\t\t\t\t//PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib/pkgconfig  \n\t\t\t\t\t//export PKG_CONFIG_PATH  \n\t\t\t\t\t//保存并退出\nsudo -s \nsource /etc/bash.bashrc\t\t\t//激活配置\nsudo updatedb  \t\t\t\t//更新database\n```\n\n> 参考链接：[官网安装(英文版)](https://docs.opencv.org/master/d7/d9f/tutorial_linux_install.html).\n>          [Ubuntu16.04安装Opencv3.4.1教程](https://www.cnblogs.com/Shuqing-cxw/p/9195303.html).\n>          [sudo: source: command not found](https://blog.csdn.net/ezbuy/article/details/80570189).\n\n# 测试\n\n自己新建一个文件夹，用来存放工程文件，目录如下：\n\n![01.png]( /images/20190805OpenCV/01.png)\n\n> 其中，lena.jpg由自己保存一张图片并以该名字命名，与.cpp存放于同级目录。\n\n## CMakeLists.txt\n\n```c++\ncmake_minimum_required(VERSION 2.8)\n\nproject( DisplayImage )\n\nfind_package( OpenCV REQUIRED )\n\nadd_executable( opencv_test opencv_test.cpp )\n\ntarget_link_libraries( opencv_test ${OpenCV_LIBS} )\n```\n\n## opencv_test.cpp\n\n```c++\n#include <iostream>\n#include <opencv2/opencv.hpp>\n\nusing namespace cv;\nusing namespace std;\n\nint main(int argc, char** argv) {\n    if ( argc != 2 ) {\n\tcout << \"Need to load a picture...\" << endl;\n\treturn -1;\n    }\n    Mat image;\n    image = imread(argv[1], 1);\n    if ( image.empty() ) {\n\tcout <<\"No image data!\" << endl;\n\treturn -1;\n    }\n    namedWindow(\"Display Image\", WINDOW_AUTOSIZE);\n    imshow(\"Display Image\", image);\n    waitKey(0);\n    return 0;\n}\n```\n\n## 结果\n\n在build文件夹中编译，运行程序：\n\n```c++\ncd build\ncmake ..\t\t\t\t\t\t\nmake\n./opencv_test ../lena.jpg\t\t//运行可执行程序，并输入图片名作为参数。其中../表示上一级目录，./表示本级目录下的可执行程序。\n```\n\n执行上述程序后，可看到自己保存的图片lena.jpg。\n","slug":"2019-08-05-LinuxÏÂOpenCV¿âµÄ°²×°","published":1,"updated":"2020-01-29T13:57:52.772Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck60spy9x001tda5546a01zd1","content":"<blockquote>\n<p>开发环境：Ubuntu16.04 LTS、 OpenCV3.4.1。 </p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>OpenCV 是一个开源的计算机视觉库，可以从 <span class=\"exturl\" data-url=\"aHR0cDovL29wZW5jdi5vcmc=\" title=\"http://opencv.org\">http://opencv.org<i class=\"fa fa-external-link\"></i></span> 获取。OpenCV包含的模块以及组成结构参见：<span class=\"exturl\" data-url=\"aHR0cDovL2MuYmlhbmNoZW5nLm5ldC92aWV3LzExMDEuaHRtbOOAgg==\" title=\"http://c.biancheng.net/view/1101.html。\">http://c.biancheng.net/view/1101.html。<i class=\"fa fa-external-link\"></i></span></p>\n<h1 id=\"OpenCV库的安装\"><a href=\"#OpenCV库的安装\" class=\"headerlink\" title=\"OpenCV库的安装\"></a>OpenCV库的安装</h1><h2 id=\"下载安装包\"><a href=\"#下载安装包\" class=\"headerlink\" title=\"下载安装包\"></a>下载安装包</h2><p>官网下载sources版本(For Linux)：<span class=\"exturl\" data-url=\"aHR0cDovL29wZW5jdi5vcmcvcmVsZWFzZXMuaHRtbOOAgg==\" title=\"http://opencv.org/releases.html。\">http://opencv.org/releases.html。<i class=\"fa fa-external-link\"></i></span></p>\n<p>解压，并进入解压后的目录：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unzip opencv<span class=\"number\">-3.4</span><span class=\"number\">.1</span>.zip \t\t\t<span class=\"comment\">//解压安装包，也可以右键解压</span></span><br><span class=\"line\">cd opencv<span class=\"number\">-3.4</span><span class=\"number\">.1</span>\t\t\t\t<span class=\"comment\">//打开安装包存放路径</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装过程\"><a href=\"#安装过程\" class=\"headerlink\" title=\"安装过程\"></a>安装过程</h2><p>在Terminal中，打开安装包存放路径，执行下列语句进行安装。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> install build-essential libgtk2<span class=\"number\">.0</span>-dev libavcodec-dev libavformat-dev libjpeg.dev libtiff4.dev libswscale-dev libjasper-dev</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//上述指令是为了安装依赖库</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> build &amp;&amp; cd build \t\t<span class=\"comment\">//打开编译目录并进入</span></span><br><span class=\"line\">cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local ..\t</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//编译目录</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//或者cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D WITH_TBB=ON -D BUILD_NEW_PYTHON_SUPPORT=ON -D WITH_V4L=ON -D WITH_QT=ON -D WITH_OPENGL=ON ..</span></span><br><span class=\"line\">make -j$(nproc)\t\t\t\t<span class=\"comment\">//编译</span></span><br><span class=\"line\">sudo make install \t\t\t<span class=\"comment\">//安装</span></span><br><span class=\"line\">sudo /bin/bash -c 'echo \"/usr/local/lib\" &gt; /etc/ld.so.conf.d/opencv.conf'\t</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//环境配置添加库路径</span></span><br><span class=\"line\">sudo ldconfig\t\t\t\t<span class=\"comment\">//更新系统库</span></span><br><span class=\"line\">sudo gedit /etc/bash.bashrc \t\t<span class=\"comment\">//配置bash，打开后在末尾添加下面两句：</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib/pkgconfig  </span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//export PKG_CONFIG_PATH  </span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//保存并退出</span></span><br><span class=\"line\">sudo -s </span><br><span class=\"line\">source /etc/bash.bashrc\t\t\t<span class=\"comment\">//激活配置</span></span><br><span class=\"line\">sudo updatedb  \t\t\t\t<span class=\"comment\">//更新database</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>参考链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm9wZW5jdi5vcmcvbWFzdGVyL2Q3L2Q5Zi90dXRvcmlhbF9saW51eF9pbnN0YWxsLmh0bWw=\" title=\"https://docs.opencv.org/master/d7/d9f/tutorial_linux_install.html\">官网安装(英文版)<i class=\"fa fa-external-link\"></i></span>.<br>         <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vU2h1cWluZy1jeHcvcC85MTk1MzAzLmh0bWw=\" title=\"https://www.cnblogs.com/Shuqing-cxw/p/9195303.html\">Ubuntu16.04安装Opencv3.4.1教程<i class=\"fa fa-external-link\"></i></span>.<br>         <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2V6YnV5L2FydGljbGUvZGV0YWlscy84MDU3MDE4OQ==\" title=\"https://blog.csdn.net/ezbuy/article/details/80570189\">sudo: source: command not found<i class=\"fa fa-external-link\"></i></span>.</p>\n</blockquote>\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><p>自己新建一个文件夹，用来存放工程文件，目录如下：</p>\n<p><img src=\"/images/20190805OpenCV/01.png\" alt=\"01.png\"></p>\n<blockquote>\n<p>其中，lena.jpg由自己保存一张图片并以该名字命名，与.cpp存放于同级目录。</p>\n</blockquote>\n<h2 id=\"CMakeLists-txt\"><a href=\"#CMakeLists-txt\" class=\"headerlink\" title=\"CMakeLists.txt\"></a>CMakeLists.txt</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake_minimum_required(VERSION <span class=\"number\">2.8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">project( DisplayImage )</span><br><span class=\"line\"></span><br><span class=\"line\">find_package( OpenCV REQUIRED )</span><br><span class=\"line\"></span><br><span class=\"line\">add_executable( opencv_test opencv_test.cpp )</span><br><span class=\"line\"></span><br><span class=\"line\">target_link_libraries( opencv_test $&#123;OpenCV_LIBS&#125; )</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"opencv-test-cpp\"><a href=\"#opencv-test-cpp\" class=\"headerlink\" title=\"opencv_test.cpp\"></a>opencv_test.cpp</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> cv;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>** argv)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( argc != <span class=\"number\">2</span> ) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Need to load a picture...\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Mat <span class=\"built_in\">image</span>;</span><br><span class=\"line\">    <span class=\"built_in\">image</span> = imread(argv[<span class=\"number\">1</span>], <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"built_in\">image</span>.empty() ) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt;<span class=\"string\">\"No image data!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    namedWindow(<span class=\"string\">\"Display Image\"</span>, WINDOW_AUTOSIZE);</span><br><span class=\"line\">    imshow(<span class=\"string\">\"Display Image\"</span>, <span class=\"built_in\">image</span>);</span><br><span class=\"line\">    waitKey(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p>在build文件夹中编译，运行程序：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd build</span><br><span class=\"line\">cmake ..\t\t\t\t\t\t</span><br><span class=\"line\">make</span><br><span class=\"line\">./opencv_test ../lena.jpg\t\t<span class=\"comment\">//运行可执行程序，并输入图片名作为参数。其中../表示上一级目录，./表示本级目录下的可执行程序。</span></span><br></pre></td></tr></table></figure>\n\n<p>执行上述程序后，可看到自己保存的图片lena.jpg。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>开发环境：Ubuntu16.04 LTS、 OpenCV3.4.1。 </p>\n</blockquote>","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>OpenCV 是一个开源的计算机视觉库，可以从 <a href=\"http://opencv.org\" target=\"_blank\" rel=\"noopener\">http://opencv.org</a> 获取。OpenCV包含的模块以及组成结构参见：<a href=\"http://c.biancheng.net/view/1101.html。\" target=\"_blank\" rel=\"noopener\">http://c.biancheng.net/view/1101.html。</a></p>\n<h1 id=\"OpenCV库的安装\"><a href=\"#OpenCV库的安装\" class=\"headerlink\" title=\"OpenCV库的安装\"></a>OpenCV库的安装</h1><h2 id=\"下载安装包\"><a href=\"#下载安装包\" class=\"headerlink\" title=\"下载安装包\"></a>下载安装包</h2><p>官网下载sources版本(For Linux)：<a href=\"http://opencv.org/releases.html。\" target=\"_blank\" rel=\"noopener\">http://opencv.org/releases.html。</a></p>\n<p>解压，并进入解压后的目录：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unzip opencv<span class=\"number\">-3.4</span><span class=\"number\">.1</span>.zip \t\t\t<span class=\"comment\">//解压安装包，也可以右键解压</span></span><br><span class=\"line\">cd opencv<span class=\"number\">-3.4</span><span class=\"number\">.1</span>\t\t\t\t<span class=\"comment\">//打开安装包存放路径</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装过程\"><a href=\"#安装过程\" class=\"headerlink\" title=\"安装过程\"></a>安装过程</h2><p>在Terminal中，打开安装包存放路径，执行下列语句进行安装。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> install build-essential libgtk2<span class=\"number\">.0</span>-dev libavcodec-dev libavformat-dev libjpeg.dev libtiff4.dev libswscale-dev libjasper-dev</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//上述指令是为了安装依赖库</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> build &amp;&amp; cd build \t\t<span class=\"comment\">//打开编译目录并进入</span></span><br><span class=\"line\">cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local ..\t</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//编译目录</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//或者cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D WITH_TBB=ON -D BUILD_NEW_PYTHON_SUPPORT=ON -D WITH_V4L=ON -D WITH_QT=ON -D WITH_OPENGL=ON ..</span></span><br><span class=\"line\">make -j$(nproc)\t\t\t\t<span class=\"comment\">//编译</span></span><br><span class=\"line\">sudo make install \t\t\t<span class=\"comment\">//安装</span></span><br><span class=\"line\">sudo /bin/bash -c 'echo \"/usr/local/lib\" &gt; /etc/ld.so.conf.d/opencv.conf'\t</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//环境配置添加库路径</span></span><br><span class=\"line\">sudo ldconfig\t\t\t\t<span class=\"comment\">//更新系统库</span></span><br><span class=\"line\">sudo gedit /etc/bash.bashrc \t\t<span class=\"comment\">//配置bash，打开后在末尾添加下面两句：</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib/pkgconfig  </span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//export PKG_CONFIG_PATH  </span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//保存并退出</span></span><br><span class=\"line\">sudo -s </span><br><span class=\"line\">source /etc/bash.bashrc\t\t\t<span class=\"comment\">//激活配置</span></span><br><span class=\"line\">sudo updatedb  \t\t\t\t<span class=\"comment\">//更新database</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>参考链接：<a href=\"https://docs.opencv.org/master/d7/d9f/tutorial_linux_install.html\" target=\"_blank\" rel=\"noopener\">官网安装(英文版)</a>.<br>         <a href=\"https://www.cnblogs.com/Shuqing-cxw/p/9195303.html\" target=\"_blank\" rel=\"noopener\">Ubuntu16.04安装Opencv3.4.1教程</a>.<br>         <a href=\"https://blog.csdn.net/ezbuy/article/details/80570189\" target=\"_blank\" rel=\"noopener\">sudo: source: command not found</a>.</p>\n</blockquote>\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><p>自己新建一个文件夹，用来存放工程文件，目录如下：</p>\n<p><img src=\"/images/20190805OpenCV/01.png\" alt=\"01.png\"></p>\n<blockquote>\n<p>其中，lena.jpg由自己保存一张图片并以该名字命名，与.cpp存放于同级目录。</p>\n</blockquote>\n<h2 id=\"CMakeLists-txt\"><a href=\"#CMakeLists-txt\" class=\"headerlink\" title=\"CMakeLists.txt\"></a>CMakeLists.txt</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake_minimum_required(VERSION <span class=\"number\">2.8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">project( DisplayImage )</span><br><span class=\"line\"></span><br><span class=\"line\">find_package( OpenCV REQUIRED )</span><br><span class=\"line\"></span><br><span class=\"line\">add_executable( opencv_test opencv_test.cpp )</span><br><span class=\"line\"></span><br><span class=\"line\">target_link_libraries( opencv_test $&#123;OpenCV_LIBS&#125; )</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"opencv-test-cpp\"><a href=\"#opencv-test-cpp\" class=\"headerlink\" title=\"opencv_test.cpp\"></a>opencv_test.cpp</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> cv;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>** argv)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( argc != <span class=\"number\">2</span> ) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Need to load a picture...\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Mat <span class=\"built_in\">image</span>;</span><br><span class=\"line\">    <span class=\"built_in\">image</span> = imread(argv[<span class=\"number\">1</span>], <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"built_in\">image</span>.empty() ) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt;<span class=\"string\">\"No image data!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    namedWindow(<span class=\"string\">\"Display Image\"</span>, WINDOW_AUTOSIZE);</span><br><span class=\"line\">    imshow(<span class=\"string\">\"Display Image\"</span>, <span class=\"built_in\">image</span>);</span><br><span class=\"line\">    waitKey(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p>在build文件夹中编译，运行程序：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd build</span><br><span class=\"line\">cmake ..\t\t\t\t\t\t</span><br><span class=\"line\">make</span><br><span class=\"line\">./opencv_test ../lena.jpg\t\t<span class=\"comment\">//运行可执行程序，并输入图片名作为参数。其中../表示上一级目录，./表示本级目录下的可执行程序。</span></span><br></pre></td></tr></table></figure>\n\n<p>执行上述程序后，可看到自己保存的图片lena.jpg。</p>","popularPost_tmp_postPath":true,"eyeCatchImage":"/images/20190805OpenCV/01.png","popularPost_tmp_gaData":{"updated":"Wed Jan 29 2020 21:57:52 GMT+0800 (China Standard Time)","title":"Linux下OpenCV库的安装","path":"archives/56535.html","eyeCatchImage":"/images/20190805OpenCV/01.png","excerpt":"介绍OpenCV库的安装方法。","date":{"_isAMomentObject":true,"_i":"2019-08-05T11:00:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2019-08-05T11:00:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"工科生的基本功 > 快乐码农","tags":["Library","Linux","C++","OpenCV"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":2027},{"title":"2019世界机器人大会参观总结","description":"2019年世界机器人大会观看小感。","date":"2019-08-23T11:00:00.000Z","abbrlink":16667,"_content":"\n> 2019年8月23日于北京亦庄参观世界机器人大会。 \n\n<!-- more -->\n\n# 前言\n\n本文主要记录在参观2019年世界机器人大会时的一些感受。\n\n# 机械臂篇\n\n在A展厅，主要看了各公司的机械臂，就从工业机器人和协作机器人两个角度来讲好了。工业机器人方面，展会中的大型工业机器人，如KUKA、安川的大型机械臂，\n运行非常稳定，也很流畅，说明国外在工业机械臂这个方面做的确实很成熟。格力用机械臂来演奏交响乐，别有一番风味，而且格力也开始自己制造机器人用的电机和\n驱动器。虽然不知道性能怎么样，但是作为国内的大厂，最起码说明已经在做这些东西，已经在朝这个方向前进。KEBA用四台机械臂做物料分拣，基本可以确定物料\n能被全部被分拣到，速度也很快，但是动起来架子有点晃动。\n\n协作机器人方面，有两种实现力控的方式。一种是，通过在工业机器人末端增加一个力传感器，再将力信号反馈到机器人进行解算，从而实现力控；另一种就是，通过\n在各关节装力传感器来实现。毫无疑问。后者的精度会比前者高很多，同时，成本也会高很多。协作机器人的应用方面，比较好的也是在做物料的分拣以及通过视觉伺服\n来做抓取。还有一个就是和移动平台相结合，可以用来做厂房的安全巡视，这方面做的比较好的是京东数科，用移动平台加UR，在UR末端装一个摄像头来查看厂房设备情况。\n\n# 其他机器人篇\n\n仿狗形机器人，在展会中看到了宇树科技的Laika狗和Alien狗，上交的六足机器狗(一前两后或两前一后做运动)，以及航天科技(或者是航天科工？)的油动大狗。宇树科技\n的狗形机器人确实已经做的很好了，当三只狗形机器人一起在地面行走时，确实有一种《黑镜(子弹头)》的即视感。还有一只萌萌的迷你机器狗。油动大狗应该是最初为了\n军队行军驮运重物而研制的，但是油动的声音太大了。剩下的狗形机器人，主要是用来做巡视方面的工作。除此外，暂没有特别好的应用场景。当然，做这种用途的，除了\n狗形机器人，就是移动的车形机器人了。移动车形机器人的另一个用途，或者说研究方向是，用来做无人送货小车，京东美团都有在做。\n\n还有一些仿鸟形、仿鱼形的仿生机器人，没有过多区研究。\n\n# 研究热点篇\n\n对于机械臂方向，主要的困境还是算法。因为大家都用的是差不多的硬件，那么采用什么样的算法能让机械臂抖动更小是大家目前亟待解决的一个问题。对于移动平台方向，\n从二维平面到三维空间的建模是一个问题，slam的精度等也是一些问题。虽然不要求要精确到几毫米，但是如果非常不精确，会导致机械臂无法完成相应的任务。\n","source":"_posts/2019-08-23-2019ÊÀ½ç»úÆ÷ÈË´ó»á²Î¹Û×Ü½á.md","raw":"---\ntitle: 2019世界机器人大会参观总结\ndescription: 2019年世界机器人大会观看小感。\ndate: '2019.08.23.11:00'\ncategories:\n  - 茶余裨谈\ntags:\n  - 机器人\n  - Library\nabbrlink: 16667\n---\n\n> 2019年8月23日于北京亦庄参观世界机器人大会。 \n\n<!-- more -->\n\n# 前言\n\n本文主要记录在参观2019年世界机器人大会时的一些感受。\n\n# 机械臂篇\n\n在A展厅，主要看了各公司的机械臂，就从工业机器人和协作机器人两个角度来讲好了。工业机器人方面，展会中的大型工业机器人，如KUKA、安川的大型机械臂，\n运行非常稳定，也很流畅，说明国外在工业机械臂这个方面做的确实很成熟。格力用机械臂来演奏交响乐，别有一番风味，而且格力也开始自己制造机器人用的电机和\n驱动器。虽然不知道性能怎么样，但是作为国内的大厂，最起码说明已经在做这些东西，已经在朝这个方向前进。KEBA用四台机械臂做物料分拣，基本可以确定物料\n能被全部被分拣到，速度也很快，但是动起来架子有点晃动。\n\n协作机器人方面，有两种实现力控的方式。一种是，通过在工业机器人末端增加一个力传感器，再将力信号反馈到机器人进行解算，从而实现力控；另一种就是，通过\n在各关节装力传感器来实现。毫无疑问。后者的精度会比前者高很多，同时，成本也会高很多。协作机器人的应用方面，比较好的也是在做物料的分拣以及通过视觉伺服\n来做抓取。还有一个就是和移动平台相结合，可以用来做厂房的安全巡视，这方面做的比较好的是京东数科，用移动平台加UR，在UR末端装一个摄像头来查看厂房设备情况。\n\n# 其他机器人篇\n\n仿狗形机器人，在展会中看到了宇树科技的Laika狗和Alien狗，上交的六足机器狗(一前两后或两前一后做运动)，以及航天科技(或者是航天科工？)的油动大狗。宇树科技\n的狗形机器人确实已经做的很好了，当三只狗形机器人一起在地面行走时，确实有一种《黑镜(子弹头)》的即视感。还有一只萌萌的迷你机器狗。油动大狗应该是最初为了\n军队行军驮运重物而研制的，但是油动的声音太大了。剩下的狗形机器人，主要是用来做巡视方面的工作。除此外，暂没有特别好的应用场景。当然，做这种用途的，除了\n狗形机器人，就是移动的车形机器人了。移动车形机器人的另一个用途，或者说研究方向是，用来做无人送货小车，京东美团都有在做。\n\n还有一些仿鸟形、仿鱼形的仿生机器人，没有过多区研究。\n\n# 研究热点篇\n\n对于机械臂方向，主要的困境还是算法。因为大家都用的是差不多的硬件，那么采用什么样的算法能让机械臂抖动更小是大家目前亟待解决的一个问题。对于移动平台方向，\n从二维平面到三维空间的建模是一个问题，slam的精度等也是一些问题。虽然不要求要精确到几毫米，但是如果非常不精确，会导致机械臂无法完成相应的任务。\n","slug":"2019-08-23-2019ÊÀ½ç»úÆ÷ÈË´ó»á²Î¹Û×Ü½á","published":1,"updated":"2020-01-29T13:57:52.772Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck60spy9y001wda555tt1bakb","content":"<blockquote>\n<p>2019年8月23日于北京亦庄参观世界机器人大会。 </p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>本文主要记录在参观2019年世界机器人大会时的一些感受。</p>\n<h1 id=\"机械臂篇\"><a href=\"#机械臂篇\" class=\"headerlink\" title=\"机械臂篇\"></a>机械臂篇</h1><p>在A展厅，主要看了各公司的机械臂，就从工业机器人和协作机器人两个角度来讲好了。工业机器人方面，展会中的大型工业机器人，如KUKA、安川的大型机械臂，<br>运行非常稳定，也很流畅，说明国外在工业机械臂这个方面做的确实很成熟。格力用机械臂来演奏交响乐，别有一番风味，而且格力也开始自己制造机器人用的电机和<br>驱动器。虽然不知道性能怎么样，但是作为国内的大厂，最起码说明已经在做这些东西，已经在朝这个方向前进。KEBA用四台机械臂做物料分拣，基本可以确定物料<br>能被全部被分拣到，速度也很快，但是动起来架子有点晃动。</p>\n<p>协作机器人方面，有两种实现力控的方式。一种是，通过在工业机器人末端增加一个力传感器，再将力信号反馈到机器人进行解算，从而实现力控；另一种就是，通过<br>在各关节装力传感器来实现。毫无疑问。后者的精度会比前者高很多，同时，成本也会高很多。协作机器人的应用方面，比较好的也是在做物料的分拣以及通过视觉伺服<br>来做抓取。还有一个就是和移动平台相结合，可以用来做厂房的安全巡视，这方面做的比较好的是京东数科，用移动平台加UR，在UR末端装一个摄像头来查看厂房设备情况。</p>\n<h1 id=\"其他机器人篇\"><a href=\"#其他机器人篇\" class=\"headerlink\" title=\"其他机器人篇\"></a>其他机器人篇</h1><p>仿狗形机器人，在展会中看到了宇树科技的Laika狗和Alien狗，上交的六足机器狗(一前两后或两前一后做运动)，以及航天科技(或者是航天科工？)的油动大狗。宇树科技<br>的狗形机器人确实已经做的很好了，当三只狗形机器人一起在地面行走时，确实有一种《黑镜(子弹头)》的即视感。还有一只萌萌的迷你机器狗。油动大狗应该是最初为了<br>军队行军驮运重物而研制的，但是油动的声音太大了。剩下的狗形机器人，主要是用来做巡视方面的工作。除此外，暂没有特别好的应用场景。当然，做这种用途的，除了<br>狗形机器人，就是移动的车形机器人了。移动车形机器人的另一个用途，或者说研究方向是，用来做无人送货小车，京东美团都有在做。</p>\n<p>还有一些仿鸟形、仿鱼形的仿生机器人，没有过多区研究。</p>\n<h1 id=\"研究热点篇\"><a href=\"#研究热点篇\" class=\"headerlink\" title=\"研究热点篇\"></a>研究热点篇</h1><p>对于机械臂方向，主要的困境还是算法。因为大家都用的是差不多的硬件，那么采用什么样的算法能让机械臂抖动更小是大家目前亟待解决的一个问题。对于移动平台方向，<br>从二维平面到三维空间的建模是一个问题，slam的精度等也是一些问题。虽然不要求要精确到几毫米，但是如果非常不精确，会导致机械臂无法完成相应的任务。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>2019年8月23日于北京亦庄参观世界机器人大会。 </p>\n</blockquote>","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>本文主要记录在参观2019年世界机器人大会时的一些感受。</p>\n<h1 id=\"机械臂篇\"><a href=\"#机械臂篇\" class=\"headerlink\" title=\"机械臂篇\"></a>机械臂篇</h1><p>在A展厅，主要看了各公司的机械臂，就从工业机器人和协作机器人两个角度来讲好了。工业机器人方面，展会中的大型工业机器人，如KUKA、安川的大型机械臂，<br>运行非常稳定，也很流畅，说明国外在工业机械臂这个方面做的确实很成熟。格力用机械臂来演奏交响乐，别有一番风味，而且格力也开始自己制造机器人用的电机和<br>驱动器。虽然不知道性能怎么样，但是作为国内的大厂，最起码说明已经在做这些东西，已经在朝这个方向前进。KEBA用四台机械臂做物料分拣，基本可以确定物料<br>能被全部被分拣到，速度也很快，但是动起来架子有点晃动。</p>\n<p>协作机器人方面，有两种实现力控的方式。一种是，通过在工业机器人末端增加一个力传感器，再将力信号反馈到机器人进行解算，从而实现力控；另一种就是，通过<br>在各关节装力传感器来实现。毫无疑问。后者的精度会比前者高很多，同时，成本也会高很多。协作机器人的应用方面，比较好的也是在做物料的分拣以及通过视觉伺服<br>来做抓取。还有一个就是和移动平台相结合，可以用来做厂房的安全巡视，这方面做的比较好的是京东数科，用移动平台加UR，在UR末端装一个摄像头来查看厂房设备情况。</p>\n<h1 id=\"其他机器人篇\"><a href=\"#其他机器人篇\" class=\"headerlink\" title=\"其他机器人篇\"></a>其他机器人篇</h1><p>仿狗形机器人，在展会中看到了宇树科技的Laika狗和Alien狗，上交的六足机器狗(一前两后或两前一后做运动)，以及航天科技(或者是航天科工？)的油动大狗。宇树科技<br>的狗形机器人确实已经做的很好了，当三只狗形机器人一起在地面行走时，确实有一种《黑镜(子弹头)》的即视感。还有一只萌萌的迷你机器狗。油动大狗应该是最初为了<br>军队行军驮运重物而研制的，但是油动的声音太大了。剩下的狗形机器人，主要是用来做巡视方面的工作。除此外，暂没有特别好的应用场景。当然，做这种用途的，除了<br>狗形机器人，就是移动的车形机器人了。移动车形机器人的另一个用途，或者说研究方向是，用来做无人送货小车，京东美团都有在做。</p>\n<p>还有一些仿鸟形、仿鱼形的仿生机器人，没有过多区研究。</p>\n<h1 id=\"研究热点篇\"><a href=\"#研究热点篇\" class=\"headerlink\" title=\"研究热点篇\"></a>研究热点篇</h1><p>对于机械臂方向，主要的困境还是算法。因为大家都用的是差不多的硬件，那么采用什么样的算法能让机械臂抖动更小是大家目前亟待解决的一个问题。对于移动平台方向，<br>从二维平面到三维空间的建模是一个问题，slam的精度等也是一些问题。虽然不要求要精确到几毫米，但是如果非常不精确，会导致机械臂无法完成相应的任务。</p>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Jan 29 2020 21:57:52 GMT+0800 (China Standard Time)","title":"2019世界机器人大会参观总结","path":"archives/16667.html","eyeCatchImage":null,"excerpt":"2019年世界机器人大会观看小感。","date":{"_isAMomentObject":true,"_i":"2019-08-23T11:00:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2019-08-23T11:00:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"茶余裨谈","tags":["Library","机器人"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1011},{"title":"C++中作用域符号的使用","description":"介绍作用域符号::使用方法。","date":"2019-08-31T16:00:00.000Z","abbrlink":30969,"_content":"\n> 开发环境：Microsoft VS2017。\n\n<!-- more -->\n\n# 前言\n\n::运算符，是作用域运算符，是C++语言中优先级最高的运算符。该运算符的用法主要有包括以下三个方面：\n\n1. 代码块的作用域。\n2. 类的静态成员访问。\n3. 命名空间成员访问。\n\n# 代码块的作用域\n\n在函数内如果有一个与全局变量重名的变量，可以用 ::a 的形式访问（a是全局变量名）。示例如下：\n\n```c++\n#include <iostream>\nusing namespace std;\nint a = 1;\n\nint main()\n{\t\n\tint a = 2;\n\tcout << \"这个a是局部变量： a = \" << a << endl;\n\tcout << \"这个a是全局变量： a = \" << ::a << endl;\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n程序运行结果如下：\n![01]( /images/20190831/01.png)\n\n# 类的静态成员访问\n\n## 类的静态成员变量访问\n\n1. 静态成员变量属于整个类所有。因为静态成员变量并不属于某个对象，所以我们可以通过类名来直接访问公有静态成员变量。也可以通过对象名访问公有成员变量。\n\n2. 静态成员变量的特性与全局变量相同。静态成员变量实际在类外单独分配空间，在程序内部存储于全局数据区；静态成员变量的生命期为程序运行期，不依赖于任何对象。\n\n3. 在定义时直接通过static关键字修饰。静态成员变量需要在类外进行赋值，不能在构造函数中进行赋值。\n\n### pch.h\n\n```c++\n#ifndef PCH_H\n#define PCH_H\n\nclass MyClass\n{\npublic:\n\tMyClass();\n\t~MyClass();\n\tint a;\n\tstatic int b;\n\tstatic int funcTest();\nprivate:\n\n};\n\n#endif //PCH_H\n```\n\n### pch.cpp\n\n```c++\n#include \"pch.h\"\n#include <iostream>\nusing namespace std;\n\nint MyClass::funcTest() {\n\tcout << \"这是MyClass类中的一个静态函数\" << endl;\n\treturn 1;\n}\n\nMyClass::MyClass()\n{\n}\n\nMyClass::~MyClass()\n{\n}\n```\n\n### main.cpp\n\n```c++\n#include \"pch.h\"\n#include <iostream>\nusing namespace std;\nint a = 1;\n\nint MyClass::b = 3;\n\nint main()\n{\t\n\tint a = 2;\n\tcout << \"这个a是局部变量： a = \" << a << endl;\n\tcout << \"这个a是全局变量： a = \" << ::a << endl;\n\tMyClass obj;\n\t//int MyClass::b = 3;\t\t//error!\n\tcout << \"直接调用类中的静态成员变量MyClass::b： b = \" << MyClass::b << endl;\n\tcout << \"通过类定义的对象来访问静态成员变量：   b = \" << obj.b << endl;\n\tobj.b = a;\n\tcout << \"通过类定义的对象来  修改  静态成员变量的值： b = \" << obj.b << endl;\n\tcout << \"直接调用类中的静态成员变量MyClass::b： b = \" << MyClass::b << endl;\t\n\tMyClass::b = ::a;\n\tcout << \"通过类定义的对象来访问静态成员变量的值： b = \" << obj.b << endl;\n\tcout << \"直接调用类中的静态成员变量MyClass::b： b = \" << MyClass::b << endl;\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n说明：\n\n1.Q：第6行的程序为什么要在全局声明？\n\n  A：静态成员变量是在类外进行初始化的，静态成员变量一定要类外进行声明。这是因为声明描述了如何分配内存，但并不分配内存。这是因为静态类成员是单独存储的，而不是对象的组成部分，所以不是在创建类对象时被定义的，因此不能在类中进行初始化，否则每创建一个对象都会初始化静态成员了。\n\n2.注意使用::来改变作用域会同时改变掉类定义的对象中的该静态成员变量值。\n\n### 程序运行结果\n![02]( /images/20190831/02.png)\n\n## 类的静态成员函数访问\n\n静态成员函数是类中的特殊的成员函数。属于属于整个类所有。因为静态成员函数并不属于某个对象，所以我们可以通过类名来直接访问公有静态成员函数。也可以通过对象名访问公有成员函数。\n\n### main.cpp\n\npch.h和pch.cpp同上节。\n\n```c++\n#include \"pch.h\"\n#include <iostream>\nusing namespace std;\nint a = 1;\n\nint MyClass::b = 3;\n\nint main()\n{\t\n\tMyClass obj;\n\tcout << \"\\n通过作用域直接访问静态成员函数：\" << endl;\n\tMyClass::funcTest();\n\tcout << \"\\n通过类定义的对象访问静态成员函数：\" << endl;\n\tobj.funcTest();\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n > 注意：在静态函数中不能访问非静态成员变量，例如在上述funcTest()函数中，是不能直接调用类中的成员变量a的，但是可以直接访问类中的静态成员变量b。\n\n### 程序运行结果\n![03]( /images/20190831/03.png)\n\n# 命名空间成员访问\n\n访问命名空间中的成员时，要用 namespace_name::member_name 的方式访问。当然，也可以用 using 关键字省去命名空间名和作用域运算符。如上节的`main.cpp`程序中，给出第3行的程序，在接下来的程序中直接使用`cout`即可，如果没有该声明，则需要写为`std::cout`才可以。\n\n# 参考\n[C++的运算符（一）—— ::（作用域运算符）](https://blog.csdn.net/weixin_41461277/article/details/85117624?utm_source=app)\n\n[对象和类——类的静态成员](https://blog.csdn.net/small_prince_/article/details/80492500?utm_source=app)","source":"_posts/2019-08-31-C++ÖÐ×÷ÓÃÓò·ûºÅµÄÊ¹ÓÃ.md","raw":"---\ntitle: C++中作用域符号的使用\ndescription: '介绍作用域符号::使用方法。'\ndate: '2019.08.31.16:00'\ncategories:\n  - 工科生的基本功\n  - 快乐码农\ntags:\n  - C++\n  - Library\nabbrlink: 30969\n---\n\n> 开发环境：Microsoft VS2017。\n\n<!-- more -->\n\n# 前言\n\n::运算符，是作用域运算符，是C++语言中优先级最高的运算符。该运算符的用法主要有包括以下三个方面：\n\n1. 代码块的作用域。\n2. 类的静态成员访问。\n3. 命名空间成员访问。\n\n# 代码块的作用域\n\n在函数内如果有一个与全局变量重名的变量，可以用 ::a 的形式访问（a是全局变量名）。示例如下：\n\n```c++\n#include <iostream>\nusing namespace std;\nint a = 1;\n\nint main()\n{\t\n\tint a = 2;\n\tcout << \"这个a是局部变量： a = \" << a << endl;\n\tcout << \"这个a是全局变量： a = \" << ::a << endl;\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n程序运行结果如下：\n![01]( /images/20190831/01.png)\n\n# 类的静态成员访问\n\n## 类的静态成员变量访问\n\n1. 静态成员变量属于整个类所有。因为静态成员变量并不属于某个对象，所以我们可以通过类名来直接访问公有静态成员变量。也可以通过对象名访问公有成员变量。\n\n2. 静态成员变量的特性与全局变量相同。静态成员变量实际在类外单独分配空间，在程序内部存储于全局数据区；静态成员变量的生命期为程序运行期，不依赖于任何对象。\n\n3. 在定义时直接通过static关键字修饰。静态成员变量需要在类外进行赋值，不能在构造函数中进行赋值。\n\n### pch.h\n\n```c++\n#ifndef PCH_H\n#define PCH_H\n\nclass MyClass\n{\npublic:\n\tMyClass();\n\t~MyClass();\n\tint a;\n\tstatic int b;\n\tstatic int funcTest();\nprivate:\n\n};\n\n#endif //PCH_H\n```\n\n### pch.cpp\n\n```c++\n#include \"pch.h\"\n#include <iostream>\nusing namespace std;\n\nint MyClass::funcTest() {\n\tcout << \"这是MyClass类中的一个静态函数\" << endl;\n\treturn 1;\n}\n\nMyClass::MyClass()\n{\n}\n\nMyClass::~MyClass()\n{\n}\n```\n\n### main.cpp\n\n```c++\n#include \"pch.h\"\n#include <iostream>\nusing namespace std;\nint a = 1;\n\nint MyClass::b = 3;\n\nint main()\n{\t\n\tint a = 2;\n\tcout << \"这个a是局部变量： a = \" << a << endl;\n\tcout << \"这个a是全局变量： a = \" << ::a << endl;\n\tMyClass obj;\n\t//int MyClass::b = 3;\t\t//error!\n\tcout << \"直接调用类中的静态成员变量MyClass::b： b = \" << MyClass::b << endl;\n\tcout << \"通过类定义的对象来访问静态成员变量：   b = \" << obj.b << endl;\n\tobj.b = a;\n\tcout << \"通过类定义的对象来  修改  静态成员变量的值： b = \" << obj.b << endl;\n\tcout << \"直接调用类中的静态成员变量MyClass::b： b = \" << MyClass::b << endl;\t\n\tMyClass::b = ::a;\n\tcout << \"通过类定义的对象来访问静态成员变量的值： b = \" << obj.b << endl;\n\tcout << \"直接调用类中的静态成员变量MyClass::b： b = \" << MyClass::b << endl;\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n说明：\n\n1.Q：第6行的程序为什么要在全局声明？\n\n  A：静态成员变量是在类外进行初始化的，静态成员变量一定要类外进行声明。这是因为声明描述了如何分配内存，但并不分配内存。这是因为静态类成员是单独存储的，而不是对象的组成部分，所以不是在创建类对象时被定义的，因此不能在类中进行初始化，否则每创建一个对象都会初始化静态成员了。\n\n2.注意使用::来改变作用域会同时改变掉类定义的对象中的该静态成员变量值。\n\n### 程序运行结果\n![02]( /images/20190831/02.png)\n\n## 类的静态成员函数访问\n\n静态成员函数是类中的特殊的成员函数。属于属于整个类所有。因为静态成员函数并不属于某个对象，所以我们可以通过类名来直接访问公有静态成员函数。也可以通过对象名访问公有成员函数。\n\n### main.cpp\n\npch.h和pch.cpp同上节。\n\n```c++\n#include \"pch.h\"\n#include <iostream>\nusing namespace std;\nint a = 1;\n\nint MyClass::b = 3;\n\nint main()\n{\t\n\tMyClass obj;\n\tcout << \"\\n通过作用域直接访问静态成员函数：\" << endl;\n\tMyClass::funcTest();\n\tcout << \"\\n通过类定义的对象访问静态成员函数：\" << endl;\n\tobj.funcTest();\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n > 注意：在静态函数中不能访问非静态成员变量，例如在上述funcTest()函数中，是不能直接调用类中的成员变量a的，但是可以直接访问类中的静态成员变量b。\n\n### 程序运行结果\n![03]( /images/20190831/03.png)\n\n# 命名空间成员访问\n\n访问命名空间中的成员时，要用 namespace_name::member_name 的方式访问。当然，也可以用 using 关键字省去命名空间名和作用域运算符。如上节的`main.cpp`程序中，给出第3行的程序，在接下来的程序中直接使用`cout`即可，如果没有该声明，则需要写为`std::cout`才可以。\n\n# 参考\n[C++的运算符（一）—— ::（作用域运算符）](https://blog.csdn.net/weixin_41461277/article/details/85117624?utm_source=app)\n\n[对象和类——类的静态成员](https://blog.csdn.net/small_prince_/article/details/80492500?utm_source=app)","slug":"2019-08-31-C++ÖÐ×÷ÓÃÓò·ûºÅµÄÊ¹ÓÃ","published":1,"updated":"2020-01-29T13:57:52.772Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck60spya0001zda55bk989xnp","content":"<blockquote>\n<p>开发环境：Microsoft VS2017。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>::运算符，是作用域运算符，是C++语言中优先级最高的运算符。该运算符的用法主要有包括以下三个方面：</p>\n<ol>\n<li>代码块的作用域。</li>\n<li>类的静态成员访问。</li>\n<li>命名空间成员访问。</li>\n</ol>\n<h1 id=\"代码块的作用域\"><a href=\"#代码块的作用域\" class=\"headerlink\" title=\"代码块的作用域\"></a>代码块的作用域</h1><p>在函数内如果有一个与全局变量重名的变量，可以用 ::a 的形式访问（a是全局变量名）。示例如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;\t</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"这个a是局部变量： a = \"</span> &lt;&lt; a &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"这个a是全局变量： a = \"</span> &lt;&lt; ::a &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>程序运行结果如下：<br><img src=\"/images/20190831/01.png\" alt=\"01\"></p>\n<h1 id=\"类的静态成员访问\"><a href=\"#类的静态成员访问\" class=\"headerlink\" title=\"类的静态成员访问\"></a>类的静态成员访问</h1><h2 id=\"类的静态成员变量访问\"><a href=\"#类的静态成员变量访问\" class=\"headerlink\" title=\"类的静态成员变量访问\"></a>类的静态成员变量访问</h2><ol>\n<li><p>静态成员变量属于整个类所有。因为静态成员变量并不属于某个对象，所以我们可以通过类名来直接访问公有静态成员变量。也可以通过对象名访问公有成员变量。</p>\n</li>\n<li><p>静态成员变量的特性与全局变量相同。静态成员变量实际在类外单独分配空间，在程序内部存储于全局数据区；静态成员变量的生命期为程序运行期，不依赖于任何对象。</p>\n</li>\n<li><p>在定义时直接通过static关键字修饰。静态成员变量需要在类外进行赋值，不能在构造函数中进行赋值。</p>\n</li>\n</ol>\n<h3 id=\"pch-h\"><a href=\"#pch-h\" class=\"headerlink\" title=\"pch.h\"></a>pch.h</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> PCH_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PCH_H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tMyClass();</span><br><span class=\"line\">\t~MyClass();</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> b;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">funcTest</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">//PCH_H</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"pch-cpp\"><a href=\"#pch-cpp\" class=\"headerlink\" title=\"pch.cpp\"></a>pch.cpp</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"pch.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">MyClass::funcTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"这是MyClass类中的一个静态函数\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">MyClass::MyClass()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">MyClass::~MyClass()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"main-cpp\"><a href=\"#main-cpp\" class=\"headerlink\" title=\"main.cpp\"></a>main.cpp</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"pch.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> MyClass::b = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;\t</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"这个a是局部变量： a = \"</span> &lt;&lt; a &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"这个a是全局变量： a = \"</span> &lt;&lt; ::a &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tMyClass obj;</span><br><span class=\"line\">\t<span class=\"comment\">//int MyClass::b = 3;\t\t//error!</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"直接调用类中的静态成员变量MyClass::b： b = \"</span> &lt;&lt; MyClass::b &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"通过类定义的对象来访问静态成员变量：   b = \"</span> &lt;&lt; obj.b &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tobj.b = a;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"通过类定义的对象来  修改  静态成员变量的值： b = \"</span> &lt;&lt; obj.b &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"直接调用类中的静态成员变量MyClass::b： b = \"</span> &lt;&lt; MyClass::b &lt;&lt; <span class=\"built_in\">endl</span>;\t</span><br><span class=\"line\">\tMyClass::b = ::a;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"通过类定义的对象来访问静态成员变量的值： b = \"</span> &lt;&lt; obj.b &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"直接调用类中的静态成员变量MyClass::b： b = \"</span> &lt;&lt; MyClass::b &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>说明：</p>\n<p>1.Q：第6行的程序为什么要在全局声明？</p>\n<p>  A：静态成员变量是在类外进行初始化的，静态成员变量一定要类外进行声明。这是因为声明描述了如何分配内存，但并不分配内存。这是因为静态类成员是单独存储的，而不是对象的组成部分，所以不是在创建类对象时被定义的，因此不能在类中进行初始化，否则每创建一个对象都会初始化静态成员了。</p>\n<p>2.注意使用::来改变作用域会同时改变掉类定义的对象中的该静态成员变量值。</p>\n<h3 id=\"程序运行结果\"><a href=\"#程序运行结果\" class=\"headerlink\" title=\"程序运行结果\"></a>程序运行结果</h3><p><img src=\"/images/20190831/02.png\" alt=\"02\"></p>\n<h2 id=\"类的静态成员函数访问\"><a href=\"#类的静态成员函数访问\" class=\"headerlink\" title=\"类的静态成员函数访问\"></a>类的静态成员函数访问</h2><p>静态成员函数是类中的特殊的成员函数。属于属于整个类所有。因为静态成员函数并不属于某个对象，所以我们可以通过类名来直接访问公有静态成员函数。也可以通过对象名访问公有成员函数。</p>\n<h3 id=\"main-cpp-1\"><a href=\"#main-cpp-1\" class=\"headerlink\" title=\"main.cpp\"></a>main.cpp</h3><p>pch.h和pch.cpp同上节。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"pch.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> MyClass::b = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;\t</span><br><span class=\"line\">\tMyClass obj;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"\\n通过作用域直接访问静态成员函数：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tMyClass::funcTest();</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"\\n通过类定义的对象访问静态成员函数：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tobj.funcTest();</span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：在静态函数中不能访问非静态成员变量，例如在上述funcTest()函数中，是不能直接调用类中的成员变量a的，但是可以直接访问类中的静态成员变量b。</p>\n</blockquote>\n<h3 id=\"程序运行结果-1\"><a href=\"#程序运行结果-1\" class=\"headerlink\" title=\"程序运行结果\"></a>程序运行结果</h3><p><img src=\"/images/20190831/03.png\" alt=\"03\"></p>\n<h1 id=\"命名空间成员访问\"><a href=\"#命名空间成员访问\" class=\"headerlink\" title=\"命名空间成员访问\"></a>命名空间成员访问</h1><p>访问命名空间中的成员时，要用 namespace_name::member_name 的方式访问。当然，也可以用 using 关键字省去命名空间名和作用域运算符。如上节的<code>main.cpp</code>程序中，给出第3行的程序，在接下来的程序中直接使用<code>cout</code>即可，如果没有该声明，则需要写为<code>std::cout</code>才可以。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTQ2MTI3Ny9hcnRpY2xlL2RldGFpbHMvODUxMTc2MjQ/dXRtX3NvdXJjZT1hcHA=\" title=\"https://blog.csdn.net/weixin_41461277/article/details/85117624?utm_source=app\">C++的运算符（一）—— ::（作用域运算符）<i class=\"fa fa-external-link\"></i></span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NtYWxsX3ByaW5jZV8vYXJ0aWNsZS9kZXRhaWxzLzgwNDkyNTAwP3V0bV9zb3VyY2U9YXBw\" title=\"https://blog.csdn.net/small_prince_/article/details/80492500?utm_source=app\">对象和类——类的静态成员<i class=\"fa fa-external-link\"></i></span></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>开发环境：Microsoft VS2017。</p>\n</blockquote>","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>::运算符，是作用域运算符，是C++语言中优先级最高的运算符。该运算符的用法主要有包括以下三个方面：</p>\n<ol>\n<li>代码块的作用域。</li>\n<li>类的静态成员访问。</li>\n<li>命名空间成员访问。</li>\n</ol>\n<h1 id=\"代码块的作用域\"><a href=\"#代码块的作用域\" class=\"headerlink\" title=\"代码块的作用域\"></a>代码块的作用域</h1><p>在函数内如果有一个与全局变量重名的变量，可以用 ::a 的形式访问（a是全局变量名）。示例如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;\t</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"这个a是局部变量： a = \"</span> &lt;&lt; a &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"这个a是全局变量： a = \"</span> &lt;&lt; ::a &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>程序运行结果如下：<br><img src=\"/images/20190831/01.png\" alt=\"01\"></p>\n<h1 id=\"类的静态成员访问\"><a href=\"#类的静态成员访问\" class=\"headerlink\" title=\"类的静态成员访问\"></a>类的静态成员访问</h1><h2 id=\"类的静态成员变量访问\"><a href=\"#类的静态成员变量访问\" class=\"headerlink\" title=\"类的静态成员变量访问\"></a>类的静态成员变量访问</h2><ol>\n<li><p>静态成员变量属于整个类所有。因为静态成员变量并不属于某个对象，所以我们可以通过类名来直接访问公有静态成员变量。也可以通过对象名访问公有成员变量。</p>\n</li>\n<li><p>静态成员变量的特性与全局变量相同。静态成员变量实际在类外单独分配空间，在程序内部存储于全局数据区；静态成员变量的生命期为程序运行期，不依赖于任何对象。</p>\n</li>\n<li><p>在定义时直接通过static关键字修饰。静态成员变量需要在类外进行赋值，不能在构造函数中进行赋值。</p>\n</li>\n</ol>\n<h3 id=\"pch-h\"><a href=\"#pch-h\" class=\"headerlink\" title=\"pch.h\"></a>pch.h</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> PCH_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PCH_H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tMyClass();</span><br><span class=\"line\">\t~MyClass();</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> b;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">funcTest</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">//PCH_H</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"pch-cpp\"><a href=\"#pch-cpp\" class=\"headerlink\" title=\"pch.cpp\"></a>pch.cpp</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"pch.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">MyClass::funcTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"这是MyClass类中的一个静态函数\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">MyClass::MyClass()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">MyClass::~MyClass()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"main-cpp\"><a href=\"#main-cpp\" class=\"headerlink\" title=\"main.cpp\"></a>main.cpp</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"pch.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> MyClass::b = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;\t</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"这个a是局部变量： a = \"</span> &lt;&lt; a &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"这个a是全局变量： a = \"</span> &lt;&lt; ::a &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tMyClass obj;</span><br><span class=\"line\">\t<span class=\"comment\">//int MyClass::b = 3;\t\t//error!</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"直接调用类中的静态成员变量MyClass::b： b = \"</span> &lt;&lt; MyClass::b &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"通过类定义的对象来访问静态成员变量：   b = \"</span> &lt;&lt; obj.b &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tobj.b = a;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"通过类定义的对象来  修改  静态成员变量的值： b = \"</span> &lt;&lt; obj.b &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"直接调用类中的静态成员变量MyClass::b： b = \"</span> &lt;&lt; MyClass::b &lt;&lt; <span class=\"built_in\">endl</span>;\t</span><br><span class=\"line\">\tMyClass::b = ::a;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"通过类定义的对象来访问静态成员变量的值： b = \"</span> &lt;&lt; obj.b &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"直接调用类中的静态成员变量MyClass::b： b = \"</span> &lt;&lt; MyClass::b &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>说明：</p>\n<p>1.Q：第6行的程序为什么要在全局声明？</p>\n<p>  A：静态成员变量是在类外进行初始化的，静态成员变量一定要类外进行声明。这是因为声明描述了如何分配内存，但并不分配内存。这是因为静态类成员是单独存储的，而不是对象的组成部分，所以不是在创建类对象时被定义的，因此不能在类中进行初始化，否则每创建一个对象都会初始化静态成员了。</p>\n<p>2.注意使用::来改变作用域会同时改变掉类定义的对象中的该静态成员变量值。</p>\n<h3 id=\"程序运行结果\"><a href=\"#程序运行结果\" class=\"headerlink\" title=\"程序运行结果\"></a>程序运行结果</h3><p><img src=\"/images/20190831/02.png\" alt=\"02\"></p>\n<h2 id=\"类的静态成员函数访问\"><a href=\"#类的静态成员函数访问\" class=\"headerlink\" title=\"类的静态成员函数访问\"></a>类的静态成员函数访问</h2><p>静态成员函数是类中的特殊的成员函数。属于属于整个类所有。因为静态成员函数并不属于某个对象，所以我们可以通过类名来直接访问公有静态成员函数。也可以通过对象名访问公有成员函数。</p>\n<h3 id=\"main-cpp-1\"><a href=\"#main-cpp-1\" class=\"headerlink\" title=\"main.cpp\"></a>main.cpp</h3><p>pch.h和pch.cpp同上节。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"pch.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> MyClass::b = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;\t</span><br><span class=\"line\">\tMyClass obj;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"\\n通过作用域直接访问静态成员函数：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tMyClass::funcTest();</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"\\n通过类定义的对象访问静态成员函数：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tobj.funcTest();</span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：在静态函数中不能访问非静态成员变量，例如在上述funcTest()函数中，是不能直接调用类中的成员变量a的，但是可以直接访问类中的静态成员变量b。</p>\n</blockquote>\n<h3 id=\"程序运行结果-1\"><a href=\"#程序运行结果-1\" class=\"headerlink\" title=\"程序运行结果\"></a>程序运行结果</h3><p><img src=\"/images/20190831/03.png\" alt=\"03\"></p>\n<h1 id=\"命名空间成员访问\"><a href=\"#命名空间成员访问\" class=\"headerlink\" title=\"命名空间成员访问\"></a>命名空间成员访问</h1><p>访问命名空间中的成员时，要用 namespace_name::member_name 的方式访问。当然，也可以用 using 关键字省去命名空间名和作用域运算符。如上节的<code>main.cpp</code>程序中，给出第3行的程序，在接下来的程序中直接使用<code>cout</code>即可，如果没有该声明，则需要写为<code>std::cout</code>才可以。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://blog.csdn.net/weixin_41461277/article/details/85117624?utm_source=app\" target=\"_blank\" rel=\"noopener\">C++的运算符（一）—— ::（作用域运算符）</a></p>\n<p><a href=\"https://blog.csdn.net/small_prince_/article/details/80492500?utm_source=app\" target=\"_blank\" rel=\"noopener\">对象和类——类的静态成员</a></p>","popularPost_tmp_postPath":true,"eyeCatchImage":"/images/20190831/01.png","popularPost_tmp_gaData":{"updated":"Wed Jan 29 2020 21:57:52 GMT+0800 (China Standard Time)","title":"C++中作用域符号的使用","path":"archives/30969.html","eyeCatchImage":"/images/20190831/01.png","excerpt":"介绍作用域符号::使用方法。","date":{"_isAMomentObject":true,"_i":"2019-08-31T16:00:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2019-08-31T16:00:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"工科生的基本功 > 快乐码农","tags":["Library","C++"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":2600},{"title":"Gazebo8的安装","description":"介绍Gazebo8的安装方法","date":"2019-09-09T16:30:00.000Z","abbrlink":35676,"_content":"\n> 本文中的环境为Ubuntu16.04LTS + ROS(kinetic).\n\n<!-- more -->\n\n# 前言\n\n对于kinetic版本的ROS，默认安装Gazebo版本是7。但是现在需要用到版本为8的Gazebo仿真环境。经过一番查找，找到了相应的方法。\n\n# Gazebo7的卸载\n\n查看Gazebo的版本：\n\n```py\ngazebo -v\n``\n\n将gazebo7卸载：\n```py\n$ sudo apt-get remove ros-kinetic-gazebo*\n$ sudo apt-get remove libgazebo*\n$ sudo apt-get remove gazebo*\n```\n\n# Gazebo8的安装\n\n```py\nsudo sh -c 'echo \"deb http://packages.osrfoundation.org/gazebo/ubuntu-stable `lsb_release -cs` main\" > /etc/apt/sources.list.d/gazebo-stable.list'\nwget http://packages.osrfoundation.org/gazebo.key -O - | sudo apt-key add -\nsudo apt-get update\nsudo apt-get install gazebo8 \nsudo apt-get install libgazebo8-dev\nsudo apt-get install ros-kinetic-gazebo8-*\n```\n","source":"_posts/2019-09-09-Gazebo8µÄ°²×°.md","raw":"---\ntitle: Gazebo8的安装\ndescription: 介绍Gazebo8的安装方法\ndate: '2019.09.09.16:30'\ncategories:\n  - 机器人控制\ntags:\n  - 机器人\n  - ROS\n  - Library\nabbrlink: 35676\n---\n\n> 本文中的环境为Ubuntu16.04LTS + ROS(kinetic).\n\n<!-- more -->\n\n# 前言\n\n对于kinetic版本的ROS，默认安装Gazebo版本是7。但是现在需要用到版本为8的Gazebo仿真环境。经过一番查找，找到了相应的方法。\n\n# Gazebo7的卸载\n\n查看Gazebo的版本：\n\n```py\ngazebo -v\n``\n\n将gazebo7卸载：\n```py\n$ sudo apt-get remove ros-kinetic-gazebo*\n$ sudo apt-get remove libgazebo*\n$ sudo apt-get remove gazebo*\n```\n\n# Gazebo8的安装\n\n```py\nsudo sh -c 'echo \"deb http://packages.osrfoundation.org/gazebo/ubuntu-stable `lsb_release -cs` main\" > /etc/apt/sources.list.d/gazebo-stable.list'\nwget http://packages.osrfoundation.org/gazebo.key -O - | sudo apt-key add -\nsudo apt-get update\nsudo apt-get install gazebo8 \nsudo apt-get install libgazebo8-dev\nsudo apt-get install ros-kinetic-gazebo8-*\n```\n","slug":"2019-09-09-Gazebo8µÄ°²×°","published":1,"updated":"2020-01-29T13:57:52.776Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck60spya20023da557wf14ux9","content":"<blockquote>\n<p>本文中的环境为Ubuntu16.04LTS + ROS(kinetic).</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>对于kinetic版本的ROS，默认安装Gazebo版本是7。但是现在需要用到版本为8的Gazebo仿真环境。经过一番查找，找到了相应的方法。</p>\n<h1 id=\"Gazebo7的卸载\"><a href=\"#Gazebo7的卸载\" class=\"headerlink\" title=\"Gazebo7的卸载\"></a>Gazebo7的卸载</h1><p>查看Gazebo的版本：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gazebo -v</span><br><span class=\"line\">``</span><br><span class=\"line\"></span><br><span class=\"line\">将gazebo7卸载：</span><br><span class=\"line\">```py</span><br><span class=\"line\">$ sudo apt-get remove ros-kinetic-gazebo*</span><br><span class=\"line\">$ sudo apt-get remove libgazebo*</span><br><span class=\"line\">$ sudo apt-get remove gazebo*</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Gazebo8的安装\"><a href=\"#Gazebo8的安装\" class=\"headerlink\" title=\"Gazebo8的安装\"></a>Gazebo8的安装</h1><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo sh -c <span class=\"string\">'echo \"deb http://packages.osrfoundation.org/gazebo/ubuntu-stable `lsb_release -cs` main\" &gt; /etc/apt/sources.list.d/gazebo-stable.list'</span></span><br><span class=\"line\">wget http://packages.osrfoundation.org/gazebo.key -O - | sudo apt-key add -</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install gazebo8 </span><br><span class=\"line\">sudo apt-get install libgazebo8-dev</span><br><span class=\"line\">sudo apt-get install ros-kinetic-gazebo8-*</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>本文中的环境为Ubuntu16.04LTS + ROS(kinetic).</p>\n</blockquote>","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>对于kinetic版本的ROS，默认安装Gazebo版本是7。但是现在需要用到版本为8的Gazebo仿真环境。经过一番查找，找到了相应的方法。</p>\n<h1 id=\"Gazebo7的卸载\"><a href=\"#Gazebo7的卸载\" class=\"headerlink\" title=\"Gazebo7的卸载\"></a>Gazebo7的卸载</h1><p>查看Gazebo的版本：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gazebo -v</span><br><span class=\"line\">``</span><br><span class=\"line\"></span><br><span class=\"line\">将gazebo7卸载：</span><br><span class=\"line\">```py</span><br><span class=\"line\">$ sudo apt-get remove ros-kinetic-gazebo*</span><br><span class=\"line\">$ sudo apt-get remove libgazebo*</span><br><span class=\"line\">$ sudo apt-get remove gazebo*</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Gazebo8的安装\"><a href=\"#Gazebo8的安装\" class=\"headerlink\" title=\"Gazebo8的安装\"></a>Gazebo8的安装</h1><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo sh -c <span class=\"string\">'echo \"deb http://packages.osrfoundation.org/gazebo/ubuntu-stable `lsb_release -cs` main\" &gt; /etc/apt/sources.list.d/gazebo-stable.list'</span></span><br><span class=\"line\">wget http://packages.osrfoundation.org/gazebo.key -O - | sudo apt-key add -</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install gazebo8 </span><br><span class=\"line\">sudo apt-get install libgazebo8-dev</span><br><span class=\"line\">sudo apt-get install ros-kinetic-gazebo8-*</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Jan 29 2020 21:57:52 GMT+0800 (China Standard Time)","title":"Gazebo8的安装","path":"archives/35676.html","eyeCatchImage":null,"excerpt":"介绍Gazebo8的安装方法","date":{"_isAMomentObject":true,"_i":"2019-09-09T16:30:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2019-09-09T16:30:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"机器人控制","tags":["Library","机器人","ROS"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":589},{"title":"坐标旋转","description":"介绍坐标旋转的详细过程","date":"2019-10-13T18:30:00.000Z","abbrlink":5096,"_content":"\n> 详细介绍坐标旋转的过程。开发环境： MATLAB 2016b + Robotics Toolbox 10.2.\n\n<!-- more -->\n\n# 前言\n\n坐标旋转是机器人控制、航天器控制中不可缺少的基本功。在与其他同行交流的过程中，因坐标旋转而发生争论，特此将坐标旋转的推导过程记录，以防再发生混乱。\n\n# 坐标旋转的推导过程\n\n首先建立坐标系，假定坐标系$ OX_1Y_1Z_1 $（以下简称1系）由坐标系$ OX_0Y_0Z_0 $（以下简称0系）绕$ Z_0 $轴逆时针旋转$ \\theta $所得(右手旋转方向为正)。略去Z方向，在XY平面的示意图如下（这是由于在三维空间中是绕轴旋转，二维空间中绕点旋转）：\n\n![01.jpg]( /images/20191013/01.jpg)\n\n上图中，P点在0系中的坐标为$ (x_0, y_0) $，在1系中的坐标为$ (x_1, y_1) $。易得：\n\n$$ OA = x_0, OB = y_0 $$\n$$ OC = x_1, OD = y_1 $$\n作$ AM \\bot OC $，根据几何知识，易得：\n\n$$ \\angle AOC = \\angle CPN = \\angle MAN = \\theta  $$\n根据几何知识，易有：\n\n![02]( /images/20191013/02.gif) $ \\tag{1} $\n\n![03]( /images/20191013/03.gif) $ \\tag{2} $\n\n由上式可得：\n\n$$ {y_1} =  - {x_0}\\sin \\theta  + {y_0}\\cos \\theta $$\n$$  \\tag{3}$$\n\n由于绕$Z$轴旋转，因此有：\n\n$$ {z_1} = {z_0} $$\n$$  \\tag{4}$$\n将上述结论式(1)、(3)~(4)整理成矩阵形式，有：\n![04]( /images/20191013/04.gif) $ \\tag{5} $\n\n上式中，$T$的下角标表示参考坐标系，上角标表示旋转后的坐标系。由此可得到从0系绕$Z$轴旋转$\\theta$到1系的旋转矩阵：\n\n![05]( /images/20191013/13.gif) $ \\tag{6} $\n\n同理，可得从0系绕 Y 轴或 X 轴旋转到1系的旋转矩阵为：\n\n![06]( /images/20191013/12.gif) $ \\tag{7} $\n\n式(6)~(7)可以理解为用0系的坐标来得到1系的坐标。\n\n同理，可以得到从1系到0系的旋转$-\\theta$矩阵为：\n\n![07]( /images/20191013/14.gif) $ \\tag{8} $\n\n上式可以理解为用1系的坐标来得到0系。\n\n从式(6)~(8)可以看出：\n\n$$ T_0^1 = (T_1^0)^T $$\n$ \\tag{9} $\n\n值得注意的是，说是旋转矩阵不同，其实最本质的还是在于所求坐标在哪个系的表达方式的问题，如式(10)所示。\n\n![15]( /images/20191013/15.gif) $ \\tag{10} $\n\n因此，与其费尽心思去记容易混淆的坐标旋转矩阵，不如懂得原理之后，每逢遇到旋转矩阵，就在脑海里想象整个的坐标旋转公式，搞明白等式左边的坐标是在哪个坐标系中表示。\n\n# 在航天器和机器人中的坐标旋转\n\n上节讲述了坐标旋转的推导过程，这在航天器和机器人两个领域是常用到的。但两个领域不同之处在于，航天器中往往采用的是用参考坐标系坐标来得到旋转后坐标系坐标的描述方式，机器人中则更习惯采用用旋转后坐标系坐标得到参考坐标系坐标的描述方式。\n\n在经典的《机器人建模和控制》中，给出坐标旋转的定义方式如下图所示：\n\n![08]( /images/20191013/05.jpg)\n![09]( /images/20191013/06.jpg)\n\n> 注意在上图中，作者声明了上角标表示参考坐标系，下角标表示旋转后的坐标系。\n\n在《Robotics Modeling, Planning and Control》中，坐标旋转的描述方式为：\n\n![10]( /images/20191013/07.jpg)\n![11]( /images/20191013/08.jpg)\n![12]( /images/20191013/09.jpg)\n\n从以上的三张图中可以看出，其推导方式与上一节一致，但采用了用旋转后的坐标来得到参考坐标系中的坐标的描述方式。\n\n上述两种描述方式在MTATLAB中均有相应的函数来实现：\n\n![13]( /images/20191013/10.jpg)\n![14]( /images/20191013/11.jpg)\n\n除了上述MATLAB自带的坐标旋转函数外，通过额外安装 Robotics Toolbox，可以更方便地求得坐标旋转的结果，如下图所示。\n\n![16]( /images/20191013/16.jpg)\n\nRobotics Toolbox的下载地址：http://petercorke.com/wordpress/toolboxes/robotics-toolbox\n\n笔者使用MATLAB2016b + RTB-10.2.zip(November 13, 2017)，可以正常安装，其他的安装包存在文件缺失或者与MATLAB版本不匹配的问题。安装方法是将该压缩包解压到MATLAB的安装目录bin下面(或者打开MATLAB后，将解压的安装包直接拷贝到MATLAB的文件浏览器中)，然后打开文件夹，运行文件：rvctools/startup_rvc.m。\n\n关于该工具箱的使用方法，请参考由Cola倾情推荐的[Robotics, vision and control](https://link.springer.com/content/pdf/10.1007%2F978-3-319-54413-7.pdf)。","source":"_posts/2019-10-13-×ø±êÐý×ª.md","raw":"---\ntitle: 坐标旋转\ndescription: 介绍坐标旋转的详细过程\ndate: '2019.10.13.18:30'\ncategories:\n  - 机器人控制\ntags:\n  - 数学基础\n  - MATLAB\n  - Library\nabbrlink: 5096\n---\n\n> 详细介绍坐标旋转的过程。开发环境： MATLAB 2016b + Robotics Toolbox 10.2.\n\n<!-- more -->\n\n# 前言\n\n坐标旋转是机器人控制、航天器控制中不可缺少的基本功。在与其他同行交流的过程中，因坐标旋转而发生争论，特此将坐标旋转的推导过程记录，以防再发生混乱。\n\n# 坐标旋转的推导过程\n\n首先建立坐标系，假定坐标系$ OX_1Y_1Z_1 $（以下简称1系）由坐标系$ OX_0Y_0Z_0 $（以下简称0系）绕$ Z_0 $轴逆时针旋转$ \\theta $所得(右手旋转方向为正)。略去Z方向，在XY平面的示意图如下（这是由于在三维空间中是绕轴旋转，二维空间中绕点旋转）：\n\n![01.jpg]( /images/20191013/01.jpg)\n\n上图中，P点在0系中的坐标为$ (x_0, y_0) $，在1系中的坐标为$ (x_1, y_1) $。易得：\n\n$$ OA = x_0, OB = y_0 $$\n$$ OC = x_1, OD = y_1 $$\n作$ AM \\bot OC $，根据几何知识，易得：\n\n$$ \\angle AOC = \\angle CPN = \\angle MAN = \\theta  $$\n根据几何知识，易有：\n\n![02]( /images/20191013/02.gif) $ \\tag{1} $\n\n![03]( /images/20191013/03.gif) $ \\tag{2} $\n\n由上式可得：\n\n$$ {y_1} =  - {x_0}\\sin \\theta  + {y_0}\\cos \\theta $$\n$$  \\tag{3}$$\n\n由于绕$Z$轴旋转，因此有：\n\n$$ {z_1} = {z_0} $$\n$$  \\tag{4}$$\n将上述结论式(1)、(3)~(4)整理成矩阵形式，有：\n![04]( /images/20191013/04.gif) $ \\tag{5} $\n\n上式中，$T$的下角标表示参考坐标系，上角标表示旋转后的坐标系。由此可得到从0系绕$Z$轴旋转$\\theta$到1系的旋转矩阵：\n\n![05]( /images/20191013/13.gif) $ \\tag{6} $\n\n同理，可得从0系绕 Y 轴或 X 轴旋转到1系的旋转矩阵为：\n\n![06]( /images/20191013/12.gif) $ \\tag{7} $\n\n式(6)~(7)可以理解为用0系的坐标来得到1系的坐标。\n\n同理，可以得到从1系到0系的旋转$-\\theta$矩阵为：\n\n![07]( /images/20191013/14.gif) $ \\tag{8} $\n\n上式可以理解为用1系的坐标来得到0系。\n\n从式(6)~(8)可以看出：\n\n$$ T_0^1 = (T_1^0)^T $$\n$ \\tag{9} $\n\n值得注意的是，说是旋转矩阵不同，其实最本质的还是在于所求坐标在哪个系的表达方式的问题，如式(10)所示。\n\n![15]( /images/20191013/15.gif) $ \\tag{10} $\n\n因此，与其费尽心思去记容易混淆的坐标旋转矩阵，不如懂得原理之后，每逢遇到旋转矩阵，就在脑海里想象整个的坐标旋转公式，搞明白等式左边的坐标是在哪个坐标系中表示。\n\n# 在航天器和机器人中的坐标旋转\n\n上节讲述了坐标旋转的推导过程，这在航天器和机器人两个领域是常用到的。但两个领域不同之处在于，航天器中往往采用的是用参考坐标系坐标来得到旋转后坐标系坐标的描述方式，机器人中则更习惯采用用旋转后坐标系坐标得到参考坐标系坐标的描述方式。\n\n在经典的《机器人建模和控制》中，给出坐标旋转的定义方式如下图所示：\n\n![08]( /images/20191013/05.jpg)\n![09]( /images/20191013/06.jpg)\n\n> 注意在上图中，作者声明了上角标表示参考坐标系，下角标表示旋转后的坐标系。\n\n在《Robotics Modeling, Planning and Control》中，坐标旋转的描述方式为：\n\n![10]( /images/20191013/07.jpg)\n![11]( /images/20191013/08.jpg)\n![12]( /images/20191013/09.jpg)\n\n从以上的三张图中可以看出，其推导方式与上一节一致，但采用了用旋转后的坐标来得到参考坐标系中的坐标的描述方式。\n\n上述两种描述方式在MTATLAB中均有相应的函数来实现：\n\n![13]( /images/20191013/10.jpg)\n![14]( /images/20191013/11.jpg)\n\n除了上述MATLAB自带的坐标旋转函数外，通过额外安装 Robotics Toolbox，可以更方便地求得坐标旋转的结果，如下图所示。\n\n![16]( /images/20191013/16.jpg)\n\nRobotics Toolbox的下载地址：http://petercorke.com/wordpress/toolboxes/robotics-toolbox\n\n笔者使用MATLAB2016b + RTB-10.2.zip(November 13, 2017)，可以正常安装，其他的安装包存在文件缺失或者与MATLAB版本不匹配的问题。安装方法是将该压缩包解压到MATLAB的安装目录bin下面(或者打开MATLAB后，将解压的安装包直接拷贝到MATLAB的文件浏览器中)，然后打开文件夹，运行文件：rvctools/startup_rvc.m。\n\n关于该工具箱的使用方法，请参考由Cola倾情推荐的[Robotics, vision and control](https://link.springer.com/content/pdf/10.1007%2F978-3-319-54413-7.pdf)。","slug":"2019-10-13-×ø±êÐý×ª","published":1,"updated":"2020-01-29T13:57:52.776Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck60spya40027da5559xmbzu5","content":"<blockquote>\n<p>详细介绍坐标旋转的过程。开发环境： MATLAB 2016b + Robotics Toolbox 10.2.</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>坐标旋转是机器人控制、航天器控制中不可缺少的基本功。在与其他同行交流的过程中，因坐标旋转而发生争论，特此将坐标旋转的推导过程记录，以防再发生混乱。</p>\n<h1 id=\"坐标旋转的推导过程\"><a href=\"#坐标旋转的推导过程\" class=\"headerlink\" title=\"坐标旋转的推导过程\"></a>坐标旋转的推导过程</h1><p>首先建立坐标系，假定坐标系$ OX_1Y_1Z_1 $（以下简称1系）由坐标系$ OX_0Y_0Z_0 $（以下简称0系）绕$ Z_0 $轴逆时针旋转$ \\theta $所得(右手旋转方向为正)。略去Z方向，在XY平面的示意图如下（这是由于在三维空间中是绕轴旋转，二维空间中绕点旋转）：</p>\n<p><img src=\"/images/20191013/01.jpg\" alt=\"01.jpg\"></p>\n<p>上图中，P点在0系中的坐标为$ (x_0, y_0) $，在1系中的坐标为$ (x_1, y_1) $。易得：</p>\n<p>$$ OA = x_0, OB = y_0 $$<br>$$ OC = x_1, OD = y_1 $$<br>作$ AM \\bot OC $，根据几何知识，易得：</p>\n<p>$$ \\angle AOC = \\angle CPN = \\angle MAN = \\theta  $$<br>根据几何知识，易有：</p>\n<p><img src=\"/images/20191013/02.gif\" alt=\"02\"> $ \\tag{1} $</p>\n<p><img src=\"/images/20191013/03.gif\" alt=\"03\"> $ \\tag{2} $</p>\n<p>由上式可得：</p>\n<p>$$ {y_1} =  - {x_0}\\sin \\theta  + {y_0}\\cos \\theta $$<br>$$  \\tag{3}$$</p>\n<p>由于绕$Z$轴旋转，因此有：</p>\n<p>$$ {z_1} = {z_0} $$<br>$$  \\tag{4}$$<br>将上述结论式(1)、(3)~(4)整理成矩阵形式，有：<br><img src=\"/images/20191013/04.gif\" alt=\"04\"> $ \\tag{5} $</p>\n<p>上式中，$T$的下角标表示参考坐标系，上角标表示旋转后的坐标系。由此可得到从0系绕$Z$轴旋转$\\theta$到1系的旋转矩阵：</p>\n<p><img src=\"/images/20191013/13.gif\" alt=\"05\"> $ \\tag{6} $</p>\n<p>同理，可得从0系绕 Y 轴或 X 轴旋转到1系的旋转矩阵为：</p>\n<p><img src=\"/images/20191013/12.gif\" alt=\"06\"> $ \\tag{7} $</p>\n<p>式(6)~(7)可以理解为用0系的坐标来得到1系的坐标。</p>\n<p>同理，可以得到从1系到0系的旋转$-\\theta$矩阵为：</p>\n<p><img src=\"/images/20191013/14.gif\" alt=\"07\"> $ \\tag{8} $</p>\n<p>上式可以理解为用1系的坐标来得到0系。</p>\n<p>从式(6)~(8)可以看出：</p>\n<p>$$ T_0^1 = (T_1^0)^T $$<br>$ \\tag{9} $</p>\n<p>值得注意的是，说是旋转矩阵不同，其实最本质的还是在于所求坐标在哪个系的表达方式的问题，如式(10)所示。</p>\n<p><img src=\"/images/20191013/15.gif\" alt=\"15\"> $ \\tag{10} $</p>\n<p>因此，与其费尽心思去记容易混淆的坐标旋转矩阵，不如懂得原理之后，每逢遇到旋转矩阵，就在脑海里想象整个的坐标旋转公式，搞明白等式左边的坐标是在哪个坐标系中表示。</p>\n<h1 id=\"在航天器和机器人中的坐标旋转\"><a href=\"#在航天器和机器人中的坐标旋转\" class=\"headerlink\" title=\"在航天器和机器人中的坐标旋转\"></a>在航天器和机器人中的坐标旋转</h1><p>上节讲述了坐标旋转的推导过程，这在航天器和机器人两个领域是常用到的。但两个领域不同之处在于，航天器中往往采用的是用参考坐标系坐标来得到旋转后坐标系坐标的描述方式，机器人中则更习惯采用用旋转后坐标系坐标得到参考坐标系坐标的描述方式。</p>\n<p>在经典的《机器人建模和控制》中，给出坐标旋转的定义方式如下图所示：</p>\n<p><img src=\"/images/20191013/05.jpg\" alt=\"08\"><br><img src=\"/images/20191013/06.jpg\" alt=\"09\"></p>\n<blockquote>\n<p>注意在上图中，作者声明了上角标表示参考坐标系，下角标表示旋转后的坐标系。</p>\n</blockquote>\n<p>在《Robotics Modeling, Planning and Control》中，坐标旋转的描述方式为：</p>\n<p><img src=\"/images/20191013/07.jpg\" alt=\"10\"><br><img src=\"/images/20191013/08.jpg\" alt=\"11\"><br><img src=\"/images/20191013/09.jpg\" alt=\"12\"></p>\n<p>从以上的三张图中可以看出，其推导方式与上一节一致，但采用了用旋转后的坐标来得到参考坐标系中的坐标的描述方式。</p>\n<p>上述两种描述方式在MTATLAB中均有相应的函数来实现：</p>\n<p><img src=\"/images/20191013/10.jpg\" alt=\"13\"><br><img src=\"/images/20191013/11.jpg\" alt=\"14\"></p>\n<p>除了上述MATLAB自带的坐标旋转函数外，通过额外安装 Robotics Toolbox，可以更方便地求得坐标旋转的结果，如下图所示。</p>\n<p><img src=\"/images/20191013/16.jpg\" alt=\"16\"></p>\n<p>Robotics Toolbox的下载地址：<span class=\"exturl\" data-url=\"aHR0cDovL3BldGVyY29ya2UuY29tL3dvcmRwcmVzcy90b29sYm94ZXMvcm9ib3RpY3MtdG9vbGJveA==\" title=\"http://petercorke.com/wordpress/toolboxes/robotics-toolbox\">http://petercorke.com/wordpress/toolboxes/robotics-toolbox<i class=\"fa fa-external-link\"></i></span></p>\n<p>笔者使用MATLAB2016b + RTB-10.2.zip(November 13, 2017)，可以正常安装，其他的安装包存在文件缺失或者与MATLAB版本不匹配的问题。安装方法是将该压缩包解压到MATLAB的安装目录bin下面(或者打开MATLAB后，将解压的安装包直接拷贝到MATLAB的文件浏览器中)，然后打开文件夹，运行文件：rvctools/startup_rvc.m。</p>\n<p>关于该工具箱的使用方法，请参考由Cola倾情推荐的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnNwcmluZ2VyLmNvbS9jb250ZW50L3BkZi8xMC4xMDA3JTJGOTc4LTMtMzE5LTU0NDEzLTcucGRm\" title=\"https://link.springer.com/content/pdf/10.1007%2F978-3-319-54413-7.pdf\">Robotics, vision and control<i class=\"fa fa-external-link\"></i></span>。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>详细介绍坐标旋转的过程。开发环境： MATLAB 2016b + Robotics Toolbox 10.2.</p>\n</blockquote>","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>坐标旋转是机器人控制、航天器控制中不可缺少的基本功。在与其他同行交流的过程中，因坐标旋转而发生争论，特此将坐标旋转的推导过程记录，以防再发生混乱。</p>\n<h1 id=\"坐标旋转的推导过程\"><a href=\"#坐标旋转的推导过程\" class=\"headerlink\" title=\"坐标旋转的推导过程\"></a>坐标旋转的推导过程</h1><p>首先建立坐标系，假定坐标系$ OX_1Y_1Z_1 $（以下简称1系）由坐标系$ OX_0Y_0Z_0 $（以下简称0系）绕$ Z_0 $轴逆时针旋转$ \\theta $所得(右手旋转方向为正)。略去Z方向，在XY平面的示意图如下（这是由于在三维空间中是绕轴旋转，二维空间中绕点旋转）：</p>\n<p><img src=\"/images/20191013/01.jpg\" alt=\"01.jpg\"></p>\n<p>上图中，P点在0系中的坐标为$ (x_0, y_0) $，在1系中的坐标为$ (x_1, y_1) $。易得：</p>\n<p>$$ OA = x_0, OB = y_0 $$<br>$$ OC = x_1, OD = y_1 $$<br>作$ AM \\bot OC $，根据几何知识，易得：</p>\n<p>$$ \\angle AOC = \\angle CPN = \\angle MAN = \\theta  $$<br>根据几何知识，易有：</p>\n<p><img src=\"/images/20191013/02.gif\" alt=\"02\"> $ \\tag{1} $</p>\n<p><img src=\"/images/20191013/03.gif\" alt=\"03\"> $ \\tag{2} $</p>\n<p>由上式可得：</p>\n<p>$$ {y_1} =  - {x_0}\\sin \\theta  + {y_0}\\cos \\theta $$<br>$$  \\tag{3}$$</p>\n<p>由于绕$Z$轴旋转，因此有：</p>\n<p>$$ {z_1} = {z_0} $$<br>$$  \\tag{4}$$<br>将上述结论式(1)、(3)~(4)整理成矩阵形式，有：<br><img src=\"/images/20191013/04.gif\" alt=\"04\"> $ \\tag{5} $</p>\n<p>上式中，$T$的下角标表示参考坐标系，上角标表示旋转后的坐标系。由此可得到从0系绕$Z$轴旋转$\\theta$到1系的旋转矩阵：</p>\n<p><img src=\"/images/20191013/13.gif\" alt=\"05\"> $ \\tag{6} $</p>\n<p>同理，可得从0系绕 Y 轴或 X 轴旋转到1系的旋转矩阵为：</p>\n<p><img src=\"/images/20191013/12.gif\" alt=\"06\"> $ \\tag{7} $</p>\n<p>式(6)~(7)可以理解为用0系的坐标来得到1系的坐标。</p>\n<p>同理，可以得到从1系到0系的旋转$-\\theta$矩阵为：</p>\n<p><img src=\"/images/20191013/14.gif\" alt=\"07\"> $ \\tag{8} $</p>\n<p>上式可以理解为用1系的坐标来得到0系。</p>\n<p>从式(6)~(8)可以看出：</p>\n<p>$$ T_0^1 = (T_1^0)^T $$<br>$ \\tag{9} $</p>\n<p>值得注意的是，说是旋转矩阵不同，其实最本质的还是在于所求坐标在哪个系的表达方式的问题，如式(10)所示。</p>\n<p><img src=\"/images/20191013/15.gif\" alt=\"15\"> $ \\tag{10} $</p>\n<p>因此，与其费尽心思去记容易混淆的坐标旋转矩阵，不如懂得原理之后，每逢遇到旋转矩阵，就在脑海里想象整个的坐标旋转公式，搞明白等式左边的坐标是在哪个坐标系中表示。</p>\n<h1 id=\"在航天器和机器人中的坐标旋转\"><a href=\"#在航天器和机器人中的坐标旋转\" class=\"headerlink\" title=\"在航天器和机器人中的坐标旋转\"></a>在航天器和机器人中的坐标旋转</h1><p>上节讲述了坐标旋转的推导过程，这在航天器和机器人两个领域是常用到的。但两个领域不同之处在于，航天器中往往采用的是用参考坐标系坐标来得到旋转后坐标系坐标的描述方式，机器人中则更习惯采用用旋转后坐标系坐标得到参考坐标系坐标的描述方式。</p>\n<p>在经典的《机器人建模和控制》中，给出坐标旋转的定义方式如下图所示：</p>\n<p><img src=\"/images/20191013/05.jpg\" alt=\"08\"><br><img src=\"/images/20191013/06.jpg\" alt=\"09\"></p>\n<blockquote>\n<p>注意在上图中，作者声明了上角标表示参考坐标系，下角标表示旋转后的坐标系。</p>\n</blockquote>\n<p>在《Robotics Modeling, Planning and Control》中，坐标旋转的描述方式为：</p>\n<p><img src=\"/images/20191013/07.jpg\" alt=\"10\"><br><img src=\"/images/20191013/08.jpg\" alt=\"11\"><br><img src=\"/images/20191013/09.jpg\" alt=\"12\"></p>\n<p>从以上的三张图中可以看出，其推导方式与上一节一致，但采用了用旋转后的坐标来得到参考坐标系中的坐标的描述方式。</p>\n<p>上述两种描述方式在MTATLAB中均有相应的函数来实现：</p>\n<p><img src=\"/images/20191013/10.jpg\" alt=\"13\"><br><img src=\"/images/20191013/11.jpg\" alt=\"14\"></p>\n<p>除了上述MATLAB自带的坐标旋转函数外，通过额外安装 Robotics Toolbox，可以更方便地求得坐标旋转的结果，如下图所示。</p>\n<p><img src=\"/images/20191013/16.jpg\" alt=\"16\"></p>\n<p>Robotics Toolbox的下载地址：<a href=\"http://petercorke.com/wordpress/toolboxes/robotics-toolbox\" target=\"_blank\" rel=\"noopener\">http://petercorke.com/wordpress/toolboxes/robotics-toolbox</a></p>\n<p>笔者使用MATLAB2016b + RTB-10.2.zip(November 13, 2017)，可以正常安装，其他的安装包存在文件缺失或者与MATLAB版本不匹配的问题。安装方法是将该压缩包解压到MATLAB的安装目录bin下面(或者打开MATLAB后，将解压的安装包直接拷贝到MATLAB的文件浏览器中)，然后打开文件夹，运行文件：rvctools/startup_rvc.m。</p>\n<p>关于该工具箱的使用方法，请参考由Cola倾情推荐的<a href=\"https://link.springer.com/content/pdf/10.1007%2F978-3-319-54413-7.pdf\" target=\"_blank\" rel=\"noopener\">Robotics, vision and control</a>。</p>","popularPost_tmp_postPath":true,"eyeCatchImage":"/images/20191013/01.jpg","popularPost_tmp_gaData":{"updated":"Wed Jan 29 2020 21:57:52 GMT+0800 (China Standard Time)","title":"坐标旋转","path":"archives/5096.html","eyeCatchImage":"/images/20191013/01.jpg","excerpt":"介绍坐标旋转的详细过程","date":{"_isAMomentObject":true,"_i":"2019-10-13T18:30:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2019-10-13T18:30:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"机器人控制","tags":["Library","MATLAB","数学基础"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1666},{"title":"常用的数学基础知识集锦","description":"介绍部分常用的基础数学知识","date":"2019-10-23T18:30:00.000Z","abbrlink":8586,"_content":"<img src=\" /images/20191023/00.png\" width=50% />\n介绍在机器人控制中常用的基础数学知识。(持续更新中....)\n\n<!-- more -->\n\n# 一、前言\n\n泰勒级数、矩阵指数函数、向量的斜对称矩阵、向量叉乘是在机器人控制中常用的基本数学知识，本文对这些知识做一个汇总，为将来的机器人研究做铺垫。为了能正常浏览公式，推荐使用Chrome浏览器，并添加一款名为`TeX All the Things`的插件。在Markdown文本中编写公式的语法参见如下链接：[Markdown文本中编辑数学公式的语法规则](https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference)\n\n通过上述语法规则所编写的大部分公式可以通过浏览器正常观看，但是矩阵除外。为了能正确显示矩阵，可以通过[在线LaTeX公式编辑器](https://www.codecogs.com/latex/eqneditor.php)将公式转为.png(建议分辨率为120)，再插入文中。\n\n\n如果仍然觉得麻烦，可以到我的CSDN查看同步文章，链接如下：\n\n<a href=\"https://blog.csdn.net/ColaInLibrary/article/details/102770706\" class=\"LinkCard\">常用的数学基础知识集锦</a>\n\n# 二、矩阵指数函数及泰勒级数\n\n常用的矩阵指数函数如下所示。\n\n$$e^{\\pmb{A}t} = \\sum_{k=0}^\\infty \\frac{\\pmb{A}^{k} t^k}{k!} = \\pmb{I} + \\pmb{A}^{t} + \\frac{(\\pmb{A}t)^2}{2!} + \\frac{(\\pmb{A}t)^3}{3!} + \\cdots \\tag {2-1} $$\n\n$$\\sin\\pmb{A}{t} = \\sum_{k=0}^\\infty \\frac{(-1)^k \\pmb{A}^{2k+1} t^{2k+1}}{(2k+1)!} \\tag {2-2}$$\n\n$$\\cos\\pmb{A}{t} = \\sum_{k=0}^\\infty \\frac{(-1)^k \\pmb{A}^{2k} t^{2k}}{(2k)!} \\tag {2-3}$$\n\n正弦、余弦函数的泰勒级数展开如式(2-4)~(2-5)所示。\n\n$$\\sin x = \\sum_{k=0}^\\infty \\frac{(-1)^k}{(2k+1)!} x^{2k+1} \\tag {2-4}$$\n\n$$\\cos x = \\sum_{k=0}^\\infty \\frac{(-1)^k}{(2k)!} x^{2k} \\tag {2-5}$$\n<!--![01]( /images/20191023/01.gif)-->\n\n# 三、一阶线性微分方程的解法\n\n给出一个一阶线性微分方程:\n\n$$\\dot{y}(t) = xy(t) \\tag {3-1}$$\n\n即：\n\n$$\\frac{\\mathrm{d} y(t)}{\\mathrm{d}t} = xy(t) \\tag {3-2}$$\n\n将式(3-2)变形，可得：\n\n$$\\frac{1}{y(t)}\\mathrm{d}y(t) = x\\mathrm{d}t \\tag {3-3}$$\n\n对上式两边进行积分：\n\n$$\\int {\\frac{1}{y(t)}\\mathrm{d}y(t)} = \\int {x\\mathrm{d}t}  \\tag {3-4}$$\n\n即：\n\n$$\\ln y(t) = xt + C\\tag {3-5}$$\n\n上式中，$C$是常数，对上式两边取指数，有：\n\n$$y(t) = e^{xt}y(0) \\tag {3-6}$$\n\n式(3-6)中，$y(0)$表示$y(t)$在零时刻的取值。\n\n<!--![02]( /images/20191023/02.gif)-->\n\n# 四、斜对称矩阵的定义及性质\n\n定义向量 $\\pmb\\omega = \n\\begin{bmatrix}\n\\omega_1 & \\omega_2 & \\omega_3 \n\\end{bmatrix}^{\\mathrm T}$ 及其斜对称矩阵(又称为反对称矩阵) $\\pmb{\\bf{\\hat \\omega }}$ 为：\n\n![03.png]( /images/20191023/03.png) $\\tag {4-1}$ \n<!--我是多段注释，为了不把公式源码丢失而存在\n$$\n\\begin{bmatrix}\n0 & -\\omega_3 & \\omega_2 \\\\\n\\omega_3 & 0 & -\\omega_1 \\\\\n\\omega_2 & \\omega_1 & 0 \\\\\n\\end{bmatrix} \\tag {4-1}\n$$\n-->\n\n斜对称矩阵的性质如下：\n\n$$\\pmb{\\bf{\\hat \\omega }}^\\mathrm{T} = -\\pmb{\\bf{\\hat \\omega }} \\tag {4-2}$$\n\n$$\\pmb{A}\\pmb{\\bf{\\hat \\omega }}\\pmb{A}^\\mathrm{T} = (\\pmb{A} \\pmb{\\bf{\\hat \\omega }}^\\mathrm{T}) \\tag {4-3}$$\n\n$$\\pmb{\\bf{\\hat \\omega }}^2 = \\pmb{\\bf{ \\omega }}\\pmb{\\bf{ \\omega }}^\\mathrm{T} - {\\lVert \\pmb\\omega \\rVert}^2 \\pmb{I} \\tag{4-4}$$\n\n$$\\pmb{\\bf{\\hat \\omega }}^3 = -{\\lVert \\pmb\\omega \\rVert}^2 \\pmb{A}\\pmb{\\bf{\\hat \\omega }} \\tag{4-5}$$\n<!--![03]( /images/20191023/03.gif)-->\n\n# 五、向量的叉乘\n\n向量的叉乘，又称为向量积。\n\n## 1.向量积的模长\n\n两个平面向量$\\pmb a$、$\\pmb b$的叉乘记为$\\pmb a \\times\\pmb b$，模长的计算方法如下：\n\n$${\\lvert \\pmb a \\times\\pmb b\\rvert} = {\\lvert \\pmb a\\rvert} \\cdot {\\lvert \\pmb b\\rvert} \\cdot \\sin\\theta \\tag{5-1}$$\n<!--   ![04]( /images/20191023/04.gif)  -->\n\n## 2.向量积的方向\n\n方向为：向量积的方向与这两个向量所在平面垂直，且遵守右手定则。（一个简单的确定满足“右手定则”的结果向量的方向的方法是这样的：若坐标系是满足右手定则的，当右手的四指从 $\\pmb a$ 以不超过180度的转角转向 $\\pmb b$ 时，竖起的大拇指指向是叉乘的方向。）\n\n![05]( /images/20191023/CrossProduct.png ) \n\n在上图中，$\\pmb a \\times\\pmb b$ 的方向是垂直指向屏幕外侧。\n\n## 3.向量积的物理意义\n\n物理意义：向量的叉乘常用来表示平行四边形的面积。从上图可以看出：$\\pmb a \\times\\pmb b$ 表示的是平行四边形面积，$\\pmb a \\times\\pmb c$ 表示的是矩形面积，显然有：\n$$\\pmb a \\times\\pmb b  = \\pmb a \\times\\pmb c \\tag{5-2}$$\n\n这意味着，$\\pmb a$ 与任意以 $\\pmb a$ 所在直线上一点为起点、以 $\\pmb b$ 的终点为终点的向量进行叉乘，得到的结果都是一样的。\n\n## 4.向量积与斜对称矩阵\n\n将二维平面内的向量拓展到三维空间，若$\\pmb a = \n\\begin{bmatrix}\na_1 & a_2 & a_3 \n\\end{bmatrix}^{\\mathrm T}$与$\\pmb b = \n\\begin{bmatrix}\nb_1 & b_2 & b_3 \n\\end{bmatrix}^{\\mathrm T}$进行叉乘，则有如下结果：\n\n![06]( /images/20191023/05.png)$\\tag{5-3}$\n\n上式建立起了向量叉乘与向量斜对称矩阵之间的联系。","source":"_posts/2019-10-23-³£ÓÃµÄÊýÑ§»ù´¡ÖªÊ¶¼¯½õ.md","raw":"---\ntitle: 常用的数学基础知识集锦\ndescription: 介绍部分常用的基础数学知识\ndate: '2019.10.23.18:30'\ncategories:\n  - 工科生的基本功\n  - 基本数学知识\ntags:\n  - 数学基础\n  - Library\nabbrlink: 8586\n---\n<img src=\" /images/20191023/00.png\" width=50% />\n介绍在机器人控制中常用的基础数学知识。(持续更新中....)\n\n<!-- more -->\n\n# 一、前言\n\n泰勒级数、矩阵指数函数、向量的斜对称矩阵、向量叉乘是在机器人控制中常用的基本数学知识，本文对这些知识做一个汇总，为将来的机器人研究做铺垫。为了能正常浏览公式，推荐使用Chrome浏览器，并添加一款名为`TeX All the Things`的插件。在Markdown文本中编写公式的语法参见如下链接：[Markdown文本中编辑数学公式的语法规则](https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference)\n\n通过上述语法规则所编写的大部分公式可以通过浏览器正常观看，但是矩阵除外。为了能正确显示矩阵，可以通过[在线LaTeX公式编辑器](https://www.codecogs.com/latex/eqneditor.php)将公式转为.png(建议分辨率为120)，再插入文中。\n\n\n如果仍然觉得麻烦，可以到我的CSDN查看同步文章，链接如下：\n\n<a href=\"https://blog.csdn.net/ColaInLibrary/article/details/102770706\" class=\"LinkCard\">常用的数学基础知识集锦</a>\n\n# 二、矩阵指数函数及泰勒级数\n\n常用的矩阵指数函数如下所示。\n\n$$e^{\\pmb{A}t} = \\sum_{k=0}^\\infty \\frac{\\pmb{A}^{k} t^k}{k!} = \\pmb{I} + \\pmb{A}^{t} + \\frac{(\\pmb{A}t)^2}{2!} + \\frac{(\\pmb{A}t)^3}{3!} + \\cdots \\tag {2-1} $$\n\n$$\\sin\\pmb{A}{t} = \\sum_{k=0}^\\infty \\frac{(-1)^k \\pmb{A}^{2k+1} t^{2k+1}}{(2k+1)!} \\tag {2-2}$$\n\n$$\\cos\\pmb{A}{t} = \\sum_{k=0}^\\infty \\frac{(-1)^k \\pmb{A}^{2k} t^{2k}}{(2k)!} \\tag {2-3}$$\n\n正弦、余弦函数的泰勒级数展开如式(2-4)~(2-5)所示。\n\n$$\\sin x = \\sum_{k=0}^\\infty \\frac{(-1)^k}{(2k+1)!} x^{2k+1} \\tag {2-4}$$\n\n$$\\cos x = \\sum_{k=0}^\\infty \\frac{(-1)^k}{(2k)!} x^{2k} \\tag {2-5}$$\n<!--![01]( /images/20191023/01.gif)-->\n\n# 三、一阶线性微分方程的解法\n\n给出一个一阶线性微分方程:\n\n$$\\dot{y}(t) = xy(t) \\tag {3-1}$$\n\n即：\n\n$$\\frac{\\mathrm{d} y(t)}{\\mathrm{d}t} = xy(t) \\tag {3-2}$$\n\n将式(3-2)变形，可得：\n\n$$\\frac{1}{y(t)}\\mathrm{d}y(t) = x\\mathrm{d}t \\tag {3-3}$$\n\n对上式两边进行积分：\n\n$$\\int {\\frac{1}{y(t)}\\mathrm{d}y(t)} = \\int {x\\mathrm{d}t}  \\tag {3-4}$$\n\n即：\n\n$$\\ln y(t) = xt + C\\tag {3-5}$$\n\n上式中，$C$是常数，对上式两边取指数，有：\n\n$$y(t) = e^{xt}y(0) \\tag {3-6}$$\n\n式(3-6)中，$y(0)$表示$y(t)$在零时刻的取值。\n\n<!--![02]( /images/20191023/02.gif)-->\n\n# 四、斜对称矩阵的定义及性质\n\n定义向量 $\\pmb\\omega = \n\\begin{bmatrix}\n\\omega_1 & \\omega_2 & \\omega_3 \n\\end{bmatrix}^{\\mathrm T}$ 及其斜对称矩阵(又称为反对称矩阵) $\\pmb{\\bf{\\hat \\omega }}$ 为：\n\n![03.png]( /images/20191023/03.png) $\\tag {4-1}$ \n<!--我是多段注释，为了不把公式源码丢失而存在\n$$\n\\begin{bmatrix}\n0 & -\\omega_3 & \\omega_2 \\\\\n\\omega_3 & 0 & -\\omega_1 \\\\\n\\omega_2 & \\omega_1 & 0 \\\\\n\\end{bmatrix} \\tag {4-1}\n$$\n-->\n\n斜对称矩阵的性质如下：\n\n$$\\pmb{\\bf{\\hat \\omega }}^\\mathrm{T} = -\\pmb{\\bf{\\hat \\omega }} \\tag {4-2}$$\n\n$$\\pmb{A}\\pmb{\\bf{\\hat \\omega }}\\pmb{A}^\\mathrm{T} = (\\pmb{A} \\pmb{\\bf{\\hat \\omega }}^\\mathrm{T}) \\tag {4-3}$$\n\n$$\\pmb{\\bf{\\hat \\omega }}^2 = \\pmb{\\bf{ \\omega }}\\pmb{\\bf{ \\omega }}^\\mathrm{T} - {\\lVert \\pmb\\omega \\rVert}^2 \\pmb{I} \\tag{4-4}$$\n\n$$\\pmb{\\bf{\\hat \\omega }}^3 = -{\\lVert \\pmb\\omega \\rVert}^2 \\pmb{A}\\pmb{\\bf{\\hat \\omega }} \\tag{4-5}$$\n<!--![03]( /images/20191023/03.gif)-->\n\n# 五、向量的叉乘\n\n向量的叉乘，又称为向量积。\n\n## 1.向量积的模长\n\n两个平面向量$\\pmb a$、$\\pmb b$的叉乘记为$\\pmb a \\times\\pmb b$，模长的计算方法如下：\n\n$${\\lvert \\pmb a \\times\\pmb b\\rvert} = {\\lvert \\pmb a\\rvert} \\cdot {\\lvert \\pmb b\\rvert} \\cdot \\sin\\theta \\tag{5-1}$$\n<!--   ![04]( /images/20191023/04.gif)  -->\n\n## 2.向量积的方向\n\n方向为：向量积的方向与这两个向量所在平面垂直，且遵守右手定则。（一个简单的确定满足“右手定则”的结果向量的方向的方法是这样的：若坐标系是满足右手定则的，当右手的四指从 $\\pmb a$ 以不超过180度的转角转向 $\\pmb b$ 时，竖起的大拇指指向是叉乘的方向。）\n\n![05]( /images/20191023/CrossProduct.png ) \n\n在上图中，$\\pmb a \\times\\pmb b$ 的方向是垂直指向屏幕外侧。\n\n## 3.向量积的物理意义\n\n物理意义：向量的叉乘常用来表示平行四边形的面积。从上图可以看出：$\\pmb a \\times\\pmb b$ 表示的是平行四边形面积，$\\pmb a \\times\\pmb c$ 表示的是矩形面积，显然有：\n$$\\pmb a \\times\\pmb b  = \\pmb a \\times\\pmb c \\tag{5-2}$$\n\n这意味着，$\\pmb a$ 与任意以 $\\pmb a$ 所在直线上一点为起点、以 $\\pmb b$ 的终点为终点的向量进行叉乘，得到的结果都是一样的。\n\n## 4.向量积与斜对称矩阵\n\n将二维平面内的向量拓展到三维空间，若$\\pmb a = \n\\begin{bmatrix}\na_1 & a_2 & a_3 \n\\end{bmatrix}^{\\mathrm T}$与$\\pmb b = \n\\begin{bmatrix}\nb_1 & b_2 & b_3 \n\\end{bmatrix}^{\\mathrm T}$进行叉乘，则有如下结果：\n\n![06]( /images/20191023/05.png)$\\tag{5-3}$\n\n上式建立起了向量叉乘与向量斜对称矩阵之间的联系。","slug":"2019-10-23-³£ÓÃµÄÊýÑ§»ù´¡ÖªÊ¶¼¯½õ","published":1,"updated":"2020-01-29T13:57:52.776Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck60spya6002ada55fufggmhv","content":"<img src=\" /images/20191023/00.png\" width=50% />\n介绍在机器人控制中常用的基础数学知识。(持续更新中....)\n\n<a id=\"more\"></a>\n\n<h1 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h1><p>泰勒级数、矩阵指数函数、向量的斜对称矩阵、向量叉乘是在机器人控制中常用的基本数学知识，本文对这些知识做一个汇总，为将来的机器人研究做铺垫。为了能正常浏览公式，推荐使用Chrome浏览器，并添加一款名为<code>TeX All the Things</code>的插件。在Markdown文本中编写公式的语法参见如下链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tYXRoLm1ldGEuc3RhY2tleGNoYW5nZS5jb20vcXVlc3Rpb25zLzUwMjAvbWF0aGpheC1iYXNpYy10dXRvcmlhbC1hbmQtcXVpY2stcmVmZXJlbmNl\" title=\"https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\">Markdown文本中编辑数学公式的语法规则<i class=\"fa fa-external-link\"></i></span></p>\n<p>通过上述语法规则所编写的大部分公式可以通过浏览器正常观看，但是矩阵除外。为了能正确显示矩阵，可以通过<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY29kZWNvZ3MuY29tL2xhdGV4L2VxbmVkaXRvci5waHA=\" title=\"https://www.codecogs.com/latex/eqneditor.php\">在线LaTeX公式编辑器<i class=\"fa fa-external-link\"></i></span>将公式转为.png(建议分辨率为120)，再插入文中。</p>\n<p>如果仍然觉得麻烦，可以到我的CSDN查看同步文章，链接如下：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NvbGFJbkxpYnJhcnkvYXJ0aWNsZS9kZXRhaWxzLzEwMjc3MDcwNg==\" title=\"https://blog.csdn.net/ColaInLibrary/article/details/102770706\">常用的数学基础知识集锦<i class=\"fa fa-external-link\"></i></span></p>\n<h1 id=\"二、矩阵指数函数及泰勒级数\"><a href=\"#二、矩阵指数函数及泰勒级数\" class=\"headerlink\" title=\"二、矩阵指数函数及泰勒级数\"></a>二、矩阵指数函数及泰勒级数</h1><p>常用的矩阵指数函数如下所示。</p>\n<p>$$e^{\\pmb{A}t} = \\sum_{k=0}^\\infty \\frac{\\pmb{A}^{k} t^k}{k!} = \\pmb{I} + \\pmb{A}^{t} + \\frac{(\\pmb{A}t)^2}{2!} + \\frac{(\\pmb{A}t)^3}{3!} + \\cdots \\tag {2-1} $$</p>\n<p>$$\\sin\\pmb{A}{t} = \\sum_{k=0}^\\infty \\frac{(-1)^k \\pmb{A}^{2k+1} t^{2k+1}}{(2k+1)!} \\tag {2-2}$$</p>\n<p>$$\\cos\\pmb{A}{t} = \\sum_{k=0}^\\infty \\frac{(-1)^k \\pmb{A}^{2k} t^{2k}}{(2k)!} \\tag {2-3}$$</p>\n<p>正弦、余弦函数的泰勒级数展开如式(2-4)~(2-5)所示。</p>\n<p>$$\\sin x = \\sum_{k=0}^\\infty \\frac{(-1)^k}{(2k+1)!} x^{2k+1} \\tag {2-4}$$</p>\n<p>$$\\cos x = \\sum_{k=0}^\\infty \\frac{(-1)^k}{(2k)!} x^{2k} \\tag {2-5}$$</p>\n<!--![01]( /images/20191023/01.gif)-->\n\n<h1 id=\"三、一阶线性微分方程的解法\"><a href=\"#三、一阶线性微分方程的解法\" class=\"headerlink\" title=\"三、一阶线性微分方程的解法\"></a>三、一阶线性微分方程的解法</h1><p>给出一个一阶线性微分方程:</p>\n<p>$$\\dot{y}(t) = xy(t) \\tag {3-1}$$</p>\n<p>即：</p>\n<p>$$\\frac{\\mathrm{d} y(t)}{\\mathrm{d}t} = xy(t) \\tag {3-2}$$</p>\n<p>将式(3-2)变形，可得：</p>\n<p>$$\\frac{1}{y(t)}\\mathrm{d}y(t) = x\\mathrm{d}t \\tag {3-3}$$</p>\n<p>对上式两边进行积分：</p>\n<p>$$\\int {\\frac{1}{y(t)}\\mathrm{d}y(t)} = \\int {x\\mathrm{d}t}  \\tag {3-4}$$</p>\n<p>即：</p>\n<p>$$\\ln y(t) = xt + C\\tag {3-5}$$</p>\n<p>上式中，$C$是常数，对上式两边取指数，有：</p>\n<p>$$y(t) = e^{xt}y(0) \\tag {3-6}$$</p>\n<p>式(3-6)中，$y(0)$表示$y(t)$在零时刻的取值。</p>\n<!--![02]( /images/20191023/02.gif)-->\n\n<h1 id=\"四、斜对称矩阵的定义及性质\"><a href=\"#四、斜对称矩阵的定义及性质\" class=\"headerlink\" title=\"四、斜对称矩阵的定义及性质\"></a>四、斜对称矩阵的定义及性质</h1><p>定义向量 $\\pmb\\omega =<br>\\begin{bmatrix}<br>\\omega_1 &amp; \\omega_2 &amp; \\omega_3<br>\\end{bmatrix}^{\\mathrm T}$ 及其斜对称矩阵(又称为反对称矩阵) $\\pmb{\\bf{\\hat \\omega }}$ 为：</p>\n<p><img src=\"/images/20191023/03.png\" alt=\"03.png\"> $\\tag {4-1}$ </p>\n<!--我是多段注释，为了不把公式源码丢失而存在\n$$\n\\begin{bmatrix}\n0 & -\\omega_3 & \\omega_2 \\\\\n\\omega_3 & 0 & -\\omega_1 \\\\\n\\omega_2 & \\omega_1 & 0 \\\\\n\\end{bmatrix} \\tag {4-1}\n$$\n-->\n\n<p>斜对称矩阵的性质如下：</p>\n<p>$$\\pmb{\\bf{\\hat \\omega }}^\\mathrm{T} = -\\pmb{\\bf{\\hat \\omega }} \\tag {4-2}$$</p>\n<p>$$\\pmb{A}\\pmb{\\bf{\\hat \\omega }}\\pmb{A}^\\mathrm{T} = (\\pmb{A} \\pmb{\\bf{\\hat \\omega }}^\\mathrm{T}) \\tag {4-3}$$</p>\n<p>$$\\pmb{\\bf{\\hat \\omega }}^2 = \\pmb{\\bf{ \\omega }}\\pmb{\\bf{ \\omega }}^\\mathrm{T} - {\\lVert \\pmb\\omega \\rVert}^2 \\pmb{I} \\tag{4-4}$$</p>\n<p>$$\\pmb{\\bf{\\hat \\omega }}^3 = -{\\lVert \\pmb\\omega \\rVert}^2 \\pmb{A}\\pmb{\\bf{\\hat \\omega }} \\tag{4-5}$$</p>\n<!--![03]( /images/20191023/03.gif)-->\n\n<h1 id=\"五、向量的叉乘\"><a href=\"#五、向量的叉乘\" class=\"headerlink\" title=\"五、向量的叉乘\"></a>五、向量的叉乘</h1><p>向量的叉乘，又称为向量积。</p>\n<h2 id=\"1-向量积的模长\"><a href=\"#1-向量积的模长\" class=\"headerlink\" title=\"1.向量积的模长\"></a>1.向量积的模长</h2><p>两个平面向量$\\pmb a$、$\\pmb b$的叉乘记为$\\pmb a \\times\\pmb b$，模长的计算方法如下：</p>\n<p>$${\\lvert \\pmb a \\times\\pmb b\\rvert} = {\\lvert \\pmb a\\rvert} \\cdot {\\lvert \\pmb b\\rvert} \\cdot \\sin\\theta \\tag{5-1}$$</p>\n<!--   ![04]( /images/20191023/04.gif)  -->\n\n<h2 id=\"2-向量积的方向\"><a href=\"#2-向量积的方向\" class=\"headerlink\" title=\"2.向量积的方向\"></a>2.向量积的方向</h2><p>方向为：向量积的方向与这两个向量所在平面垂直，且遵守右手定则。（一个简单的确定满足“右手定则”的结果向量的方向的方法是这样的：若坐标系是满足右手定则的，当右手的四指从 $\\pmb a$ 以不超过180度的转角转向 $\\pmb b$ 时，竖起的大拇指指向是叉乘的方向。）</p>\n<p><img src=\"/images/20191023/CrossProduct.png\" alt=\"05\"> </p>\n<p>在上图中，$\\pmb a \\times\\pmb b$ 的方向是垂直指向屏幕外侧。</p>\n<h2 id=\"3-向量积的物理意义\"><a href=\"#3-向量积的物理意义\" class=\"headerlink\" title=\"3.向量积的物理意义\"></a>3.向量积的物理意义</h2><p>物理意义：向量的叉乘常用来表示平行四边形的面积。从上图可以看出：$\\pmb a \\times\\pmb b$ 表示的是平行四边形面积，$\\pmb a \\times\\pmb c$ 表示的是矩形面积，显然有：<br>$$\\pmb a \\times\\pmb b  = \\pmb a \\times\\pmb c \\tag{5-2}$$</p>\n<p>这意味着，$\\pmb a$ 与任意以 $\\pmb a$ 所在直线上一点为起点、以 $\\pmb b$ 的终点为终点的向量进行叉乘，得到的结果都是一样的。</p>\n<h2 id=\"4-向量积与斜对称矩阵\"><a href=\"#4-向量积与斜对称矩阵\" class=\"headerlink\" title=\"4.向量积与斜对称矩阵\"></a>4.向量积与斜对称矩阵</h2><p>将二维平面内的向量拓展到三维空间，若$\\pmb a =<br>\\begin{bmatrix}<br>a_1 &amp; a_2 &amp; a_3<br>\\end{bmatrix}^{\\mathrm T}$与$\\pmb b =<br>\\begin{bmatrix}<br>b_1 &amp; b_2 &amp; b_3<br>\\end{bmatrix}^{\\mathrm T}$进行叉乘，则有如下结果：</p>\n<p><img src=\"/images/20191023/05.png\" alt=\"06\">$\\tag{5-3}$</p>\n<p>上式建立起了向量叉乘与向量斜对称矩阵之间的联系。</p>\n","site":{"data":{}},"excerpt":"<img src=\" /images/20191023/00.png\" width=50% />\n介绍在机器人控制中常用的基础数学知识。(持续更新中....)","more":"<h1 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h1><p>泰勒级数、矩阵指数函数、向量的斜对称矩阵、向量叉乘是在机器人控制中常用的基本数学知识，本文对这些知识做一个汇总，为将来的机器人研究做铺垫。为了能正常浏览公式，推荐使用Chrome浏览器，并添加一款名为<code>TeX All the Things</code>的插件。在Markdown文本中编写公式的语法参见如下链接：<a href=\"https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\" target=\"_blank\" rel=\"noopener\">Markdown文本中编辑数学公式的语法规则</a></p>\n<p>通过上述语法规则所编写的大部分公式可以通过浏览器正常观看，但是矩阵除外。为了能正确显示矩阵，可以通过<a href=\"https://www.codecogs.com/latex/eqneditor.php\" target=\"_blank\" rel=\"noopener\">在线LaTeX公式编辑器</a>将公式转为.png(建议分辨率为120)，再插入文中。</p>\n<p>如果仍然觉得麻烦，可以到我的CSDN查看同步文章，链接如下：</p>\n<p><a href=\"https://blog.csdn.net/ColaInLibrary/article/details/102770706\" target=\"_blank\" rel=\"noopener\" class=\"LinkCard\">常用的数学基础知识集锦</a></p>\n<h1 id=\"二、矩阵指数函数及泰勒级数\"><a href=\"#二、矩阵指数函数及泰勒级数\" class=\"headerlink\" title=\"二、矩阵指数函数及泰勒级数\"></a>二、矩阵指数函数及泰勒级数</h1><p>常用的矩阵指数函数如下所示。</p>\n<p>$$e^{\\pmb{A}t} = \\sum_{k=0}^\\infty \\frac{\\pmb{A}^{k} t^k}{k!} = \\pmb{I} + \\pmb{A}^{t} + \\frac{(\\pmb{A}t)^2}{2!} + \\frac{(\\pmb{A}t)^3}{3!} + \\cdots \\tag {2-1} $$</p>\n<p>$$\\sin\\pmb{A}{t} = \\sum_{k=0}^\\infty \\frac{(-1)^k \\pmb{A}^{2k+1} t^{2k+1}}{(2k+1)!} \\tag {2-2}$$</p>\n<p>$$\\cos\\pmb{A}{t} = \\sum_{k=0}^\\infty \\frac{(-1)^k \\pmb{A}^{2k} t^{2k}}{(2k)!} \\tag {2-3}$$</p>\n<p>正弦、余弦函数的泰勒级数展开如式(2-4)~(2-5)所示。</p>\n<p>$$\\sin x = \\sum_{k=0}^\\infty \\frac{(-1)^k}{(2k+1)!} x^{2k+1} \\tag {2-4}$$</p>\n<p>$$\\cos x = \\sum_{k=0}^\\infty \\frac{(-1)^k}{(2k)!} x^{2k} \\tag {2-5}$$</p>\n<!--![01]( /images/20191023/01.gif)-->\n\n<h1 id=\"三、一阶线性微分方程的解法\"><a href=\"#三、一阶线性微分方程的解法\" class=\"headerlink\" title=\"三、一阶线性微分方程的解法\"></a>三、一阶线性微分方程的解法</h1><p>给出一个一阶线性微分方程:</p>\n<p>$$\\dot{y}(t) = xy(t) \\tag {3-1}$$</p>\n<p>即：</p>\n<p>$$\\frac{\\mathrm{d} y(t)}{\\mathrm{d}t} = xy(t) \\tag {3-2}$$</p>\n<p>将式(3-2)变形，可得：</p>\n<p>$$\\frac{1}{y(t)}\\mathrm{d}y(t) = x\\mathrm{d}t \\tag {3-3}$$</p>\n<p>对上式两边进行积分：</p>\n<p>$$\\int {\\frac{1}{y(t)}\\mathrm{d}y(t)} = \\int {x\\mathrm{d}t}  \\tag {3-4}$$</p>\n<p>即：</p>\n<p>$$\\ln y(t) = xt + C\\tag {3-5}$$</p>\n<p>上式中，$C$是常数，对上式两边取指数，有：</p>\n<p>$$y(t) = e^{xt}y(0) \\tag {3-6}$$</p>\n<p>式(3-6)中，$y(0)$表示$y(t)$在零时刻的取值。</p>\n<!--![02]( /images/20191023/02.gif)-->\n\n<h1 id=\"四、斜对称矩阵的定义及性质\"><a href=\"#四、斜对称矩阵的定义及性质\" class=\"headerlink\" title=\"四、斜对称矩阵的定义及性质\"></a>四、斜对称矩阵的定义及性质</h1><p>定义向量 $\\pmb\\omega =<br>\\begin{bmatrix}<br>\\omega_1 &amp; \\omega_2 &amp; \\omega_3<br>\\end{bmatrix}^{\\mathrm T}$ 及其斜对称矩阵(又称为反对称矩阵) $\\pmb{\\bf{\\hat \\omega }}$ 为：</p>\n<p><img src=\"/images/20191023/03.png\" alt=\"03.png\"> $\\tag {4-1}$ </p>\n<!--我是多段注释，为了不把公式源码丢失而存在\n$$\n\\begin{bmatrix}\n0 & -\\omega_3 & \\omega_2 \\\\\n\\omega_3 & 0 & -\\omega_1 \\\\\n\\omega_2 & \\omega_1 & 0 \\\\\n\\end{bmatrix} \\tag {4-1}\n$$\n-->\n\n<p>斜对称矩阵的性质如下：</p>\n<p>$$\\pmb{\\bf{\\hat \\omega }}^\\mathrm{T} = -\\pmb{\\bf{\\hat \\omega }} \\tag {4-2}$$</p>\n<p>$$\\pmb{A}\\pmb{\\bf{\\hat \\omega }}\\pmb{A}^\\mathrm{T} = (\\pmb{A} \\pmb{\\bf{\\hat \\omega }}^\\mathrm{T}) \\tag {4-3}$$</p>\n<p>$$\\pmb{\\bf{\\hat \\omega }}^2 = \\pmb{\\bf{ \\omega }}\\pmb{\\bf{ \\omega }}^\\mathrm{T} - {\\lVert \\pmb\\omega \\rVert}^2 \\pmb{I} \\tag{4-4}$$</p>\n<p>$$\\pmb{\\bf{\\hat \\omega }}^3 = -{\\lVert \\pmb\\omega \\rVert}^2 \\pmb{A}\\pmb{\\bf{\\hat \\omega }} \\tag{4-5}$$</p>\n<!--![03]( /images/20191023/03.gif)-->\n\n<h1 id=\"五、向量的叉乘\"><a href=\"#五、向量的叉乘\" class=\"headerlink\" title=\"五、向量的叉乘\"></a>五、向量的叉乘</h1><p>向量的叉乘，又称为向量积。</p>\n<h2 id=\"1-向量积的模长\"><a href=\"#1-向量积的模长\" class=\"headerlink\" title=\"1.向量积的模长\"></a>1.向量积的模长</h2><p>两个平面向量$\\pmb a$、$\\pmb b$的叉乘记为$\\pmb a \\times\\pmb b$，模长的计算方法如下：</p>\n<p>$${\\lvert \\pmb a \\times\\pmb b\\rvert} = {\\lvert \\pmb a\\rvert} \\cdot {\\lvert \\pmb b\\rvert} \\cdot \\sin\\theta \\tag{5-1}$$</p>\n<!--   ![04]( /images/20191023/04.gif)  -->\n\n<h2 id=\"2-向量积的方向\"><a href=\"#2-向量积的方向\" class=\"headerlink\" title=\"2.向量积的方向\"></a>2.向量积的方向</h2><p>方向为：向量积的方向与这两个向量所在平面垂直，且遵守右手定则。（一个简单的确定满足“右手定则”的结果向量的方向的方法是这样的：若坐标系是满足右手定则的，当右手的四指从 $\\pmb a$ 以不超过180度的转角转向 $\\pmb b$ 时，竖起的大拇指指向是叉乘的方向。）</p>\n<p><img src=\"/images/20191023/CrossProduct.png\" alt=\"05\"> </p>\n<p>在上图中，$\\pmb a \\times\\pmb b$ 的方向是垂直指向屏幕外侧。</p>\n<h2 id=\"3-向量积的物理意义\"><a href=\"#3-向量积的物理意义\" class=\"headerlink\" title=\"3.向量积的物理意义\"></a>3.向量积的物理意义</h2><p>物理意义：向量的叉乘常用来表示平行四边形的面积。从上图可以看出：$\\pmb a \\times\\pmb b$ 表示的是平行四边形面积，$\\pmb a \\times\\pmb c$ 表示的是矩形面积，显然有：<br>$$\\pmb a \\times\\pmb b  = \\pmb a \\times\\pmb c \\tag{5-2}$$</p>\n<p>这意味着，$\\pmb a$ 与任意以 $\\pmb a$ 所在直线上一点为起点、以 $\\pmb b$ 的终点为终点的向量进行叉乘，得到的结果都是一样的。</p>\n<h2 id=\"4-向量积与斜对称矩阵\"><a href=\"#4-向量积与斜对称矩阵\" class=\"headerlink\" title=\"4.向量积与斜对称矩阵\"></a>4.向量积与斜对称矩阵</h2><p>将二维平面内的向量拓展到三维空间，若$\\pmb a =<br>\\begin{bmatrix}<br>a_1 &amp; a_2 &amp; a_3<br>\\end{bmatrix}^{\\mathrm T}$与$\\pmb b =<br>\\begin{bmatrix}<br>b_1 &amp; b_2 &amp; b_3<br>\\end{bmatrix}^{\\mathrm T}$进行叉乘，则有如下结果：</p>\n<p><img src=\"/images/20191023/05.png\" alt=\"06\">$\\tag{5-3}$</p>\n<p>上式建立起了向量叉乘与向量斜对称矩阵之间的联系。</p>","popularPost_tmp_postPath":true,"eyeCatchImage":" /images/20191023/00.png","popularPost_tmp_gaData":{"updated":"Wed Jan 29 2020 21:57:52 GMT+0800 (China Standard Time)","title":"常用的数学基础知识集锦","path":"archives/8586.html","eyeCatchImage":" /images/20191023/00.png","excerpt":"介绍部分常用的基础数学知识","date":{"_isAMomentObject":true,"_i":"2019-10-23T18:30:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2019-10-23T18:30:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"工科生的基本功 > 基本数学知识","tags":["Library","数学基础"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":2517}],"PostAsset":[],"PostCategory":[{"post_id":"ck60spy97000qda55cz448wdh","category_id":"ck60spy8n0005da55bcp23fc6","_id":"ck60spy9g000wda553ibl7oa5"},{"post_id":"ck60spy97000qda55cz448wdh","category_id":"ck60spy96000oda55e1ev5rbq","_id":"ck60spy9i0010da55b4zp11ue"},{"post_id":"ck60spy8t0009da556v8g560y","category_id":"ck60spy8n0005da55bcp23fc6","_id":"ck60spy9k0013da55czjwanbs"},{"post_id":"ck60spy8t0009da556v8g560y","category_id":"ck60spy96000oda55e1ev5rbq","_id":"ck60spy9m0018da559rh40xvw"},{"post_id":"ck60spy890001da551fuf28p7","category_id":"ck60spy8n0005da55bcp23fc6","_id":"ck60spy9o001bda55cxyofio6"},{"post_id":"ck60spy890001da551fuf28p7","category_id":"ck60spy96000oda55e1ev5rbq","_id":"ck60spy9q001fda557rybcu88"},{"post_id":"ck60spy8v000bda55dqynemow","category_id":"ck60spy8n0005da55bcp23fc6","_id":"ck60spy9s001ida5597ow3dp0"},{"post_id":"ck60spy8v000bda55dqynemow","category_id":"ck60spy96000oda55e1ev5rbq","_id":"ck60spy9u001nda55hkcebtrp"},{"post_id":"ck60spy9l0017da5511ow6fhh","category_id":"ck60spy8n0005da55bcp23fc6","_id":"ck60spy9w001qda558mq3h3rh"},{"post_id":"ck60spy9l0017da5511ow6fhh","category_id":"ck60spy9k0014da55008b8zaf","_id":"ck60spy9y001vda55bl4f15rx"},{"post_id":"ck60spy8z000fda551ipr61ny","category_id":"ck60spy8n0005da55bcp23fc6","_id":"ck60spy9z001xda55c9vp7qgg"},{"post_id":"ck60spy8z000fda551ipr61ny","category_id":"ck60spy9k0014da55008b8zaf","_id":"ck60spya20021da55cvyu47ef"},{"post_id":"ck60spy9n001ada55febc9cfj","category_id":"ck60spy8n0005da55bcp23fc6","_id":"ck60spya30024da557yz4dba6"},{"post_id":"ck60spy9n001ada55febc9cfj","category_id":"ck60spy9k0014da55008b8zaf","_id":"ck60spya50028da553oa49m87"},{"post_id":"ck60spy9p001eda55bspm8671","category_id":"ck60spy8n0005da55bcp23fc6","_id":"ck60spya7002bda5528u8cibk"},{"post_id":"ck60spy9p001eda55bspm8671","category_id":"ck60spy9k0014da55008b8zaf","_id":"ck60spya8002dda55adt9fcvt"},{"post_id":"ck60spy8i0003da55h2be66ea","category_id":"ck60spy8n0005da55bcp23fc6","_id":"ck60spya9002gda550b642n8p"},{"post_id":"ck60spy8i0003da55h2be66ea","category_id":"ck60spy96000oda55e1ev5rbq","_id":"ck60spyaa002jda55atj278l1"},{"post_id":"ck60spy9r001hda5584o08vte","category_id":"ck60spy8n0005da55bcp23fc6","_id":"ck60spyae002mda558xtz14lr"},{"post_id":"ck60spy9r001hda5584o08vte","category_id":"ck60spy9k0014da55008b8zaf","_id":"ck60spyaf002pda55amm4hog2"},{"post_id":"ck60spy91000hda55gmp24axh","category_id":"ck60spy8n0005da55bcp23fc6","_id":"ck60spyag002rda55glzu3je1"},{"post_id":"ck60spy91000hda55gmp24axh","category_id":"ck60spy96000oda55e1ev5rbq","_id":"ck60spyah002tda556q995zba"},{"post_id":"ck60spy9x001tda5546a01zd1","category_id":"ck60spy8n0005da55bcp23fc6","_id":"ck60spyak002vda5572spfch1"},{"post_id":"ck60spy9x001tda5546a01zd1","category_id":"ck60spy9k0014da55008b8zaf","_id":"ck60spyal002yda558p0ydc9t"},{"post_id":"ck60spy94000lda555rwt4sgz","category_id":"ck60spy9w001rda55gosm3at7","_id":"ck60spyam0031da554de6bzyv"},{"post_id":"ck60spy9y001wda555tt1bakb","category_id":"ck60spy9w001rda55gosm3at7","_id":"ck60spyao0034da555xqiay6a"},{"post_id":"ck60spya0001zda55bk989xnp","category_id":"ck60spy8n0005da55bcp23fc6","_id":"ck60spyaq0037da55c0zt6qeu"},{"post_id":"ck60spya0001zda55bk989xnp","category_id":"ck60spy9k0014da55008b8zaf","_id":"ck60spyat003ada551ghn8q59"},{"post_id":"ck60spy8q0007da55eggpfjil","category_id":"ck60spy8n0005da55bcp23fc6","_id":"ck60spyau003dda5576xvbl73"},{"post_id":"ck60spy8q0007da55eggpfjil","category_id":"ck60spy96000oda55e1ev5rbq","_id":"ck60spyav003fda55eu03df1m"},{"post_id":"ck60spy95000nda55c798f8r7","category_id":"ck60spy8n0005da55bcp23fc6","_id":"ck60spyax003jda554ssyc21c"},{"post_id":"ck60spy95000nda55c798f8r7","category_id":"ck60spya40025da55ak8zfycg","_id":"ck60spyax003kda555nlq4zha"},{"post_id":"ck60spy99000rda55dyet2g89","category_id":"ck60spy8n0005da55bcp23fc6","_id":"ck60spyay003nda5584bv2dsd"},{"post_id":"ck60spy99000rda55dyet2g89","category_id":"ck60spy9k0014da55008b8zaf","_id":"ck60spyaz003pda556198c2qj"},{"post_id":"ck60spy9c000uda5561gw8icg","category_id":"ck60spy8n0005da55bcp23fc6","_id":"ck60spyb0003tda55b6iz24uo"},{"post_id":"ck60spy9c000uda5561gw8icg","category_id":"ck60spy9k0014da55008b8zaf","_id":"ck60spyb1003vda5540voh23t"},{"post_id":"ck60spy9f000vda554rf685py","category_id":"ck60spy8n0005da55bcp23fc6","_id":"ck60spyb2003yda55fagi8onm"},{"post_id":"ck60spy9f000vda554rf685py","category_id":"ck60spy9k0014da55008b8zaf","_id":"ck60spyb20040da55cdfe2irr"},{"post_id":"ck60spy9h000zda55gm2t6p6q","category_id":"ck60spy8n0005da55bcp23fc6","_id":"ck60spyb30041da55dyp3hp2h"},{"post_id":"ck60spy9h000zda55gm2t6p6q","category_id":"ck60spya40025da55ak8zfycg","_id":"ck60spyb30044da555a3v71re"},{"post_id":"ck60spy9j0012da555yiu5chl","category_id":"ck60spy8n0005da55bcp23fc6","_id":"ck60spyb40046da555uan0mj1"},{"post_id":"ck60spy9j0012da555yiu5chl","category_id":"ck60spya40025da55ak8zfycg","_id":"ck60spyb50049da5527dc2lkv"},{"post_id":"ck60spy9t001mda5538w3guxj","category_id":"ck60spy8n0005da55bcp23fc6","_id":"ck60spyb5004bda558r2r3cjz"},{"post_id":"ck60spy9t001mda5538w3guxj","category_id":"ck60spya40025da55ak8zfycg","_id":"ck60spyb6004eda558oqbbvhn"},{"post_id":"ck60spy9v001pda55esi592fx","category_id":"ck60spyar0039da556wzo6vye","_id":"ck60spyb6004fda55a8mh2xs1"},{"post_id":"ck60spya20023da557wf14ux9","category_id":"ck60spyar0039da556wzo6vye","_id":"ck60spyb7004ida550sme6v56"},{"post_id":"ck60spya40027da5559xmbzu5","category_id":"ck60spyar0039da556wzo6vye","_id":"ck60spyb8004kda557a24ewdh"},{"post_id":"ck60spya6002ada55fufggmhv","category_id":"ck60spy8n0005da55bcp23fc6","_id":"ck60spyb9004nda55d97tfk4t"},{"post_id":"ck60spya6002ada55fufggmhv","category_id":"ck60spyaz003qda551r5n8yrr","_id":"ck60spyba004pda55ap715j16"}],"PostTag":[{"post_id":"ck60spy8t0009da556v8g560y","tag_id":"ck60spy8p0006da55hdoafhca","_id":"ck60spy8z000eda55badw9se3"},{"post_id":"ck60spy890001da551fuf28p7","tag_id":"ck60spy8p0006da55hdoafhca","_id":"ck60spy91000gda55e7rd39hj"},{"post_id":"ck60spy8v000bda55dqynemow","tag_id":"ck60spy8p0006da55hdoafhca","_id":"ck60spy93000kda556k0sh00x"},{"post_id":"ck60spy8i0003da55h2be66ea","tag_id":"ck60spy8p0006da55hdoafhca","_id":"ck60spy95000mda553ll4efud"},{"post_id":"ck60spy8q0007da55eggpfjil","tag_id":"ck60spy8p0006da55hdoafhca","_id":"ck60spy9i0011da550pob0l2y"},{"post_id":"ck60spy8q0007da55eggpfjil","tag_id":"ck60spy96000pda55ho7e5p20","_id":"ck60spy9k0015da555oih2685"},{"post_id":"ck60spy8q0007da55eggpfjil","tag_id":"ck60spy9b000tda55cu7rbqn1","_id":"ck60spy9m0019da55h3is5ne5"},{"post_id":"ck60spy8z000fda551ipr61ny","tag_id":"ck60spy9h000yda558xwx6e4i","_id":"ck60spy9q001gda551c26c3jd"},{"post_id":"ck60spy8z000fda551ipr61ny","tag_id":"ck60spy9b000tda55cu7rbqn1","_id":"ck60spy9s001kda5502ir1dvl"},{"post_id":"ck60spy91000hda55gmp24axh","tag_id":"ck60spy8p0006da55hdoafhca","_id":"ck60spy9u001oda55192y3z1b"},{"post_id":"ck60spy91000hda55gmp24axh","tag_id":"ck60spy9b000tda55cu7rbqn1","_id":"ck60spy9w001sda55d2sy4oyp"},{"post_id":"ck60spy94000lda555rwt4sgz","tag_id":"ck60spy9t001lda55dii5druh","_id":"ck60spya20022da55ein501wj"},{"post_id":"ck60spy94000lda555rwt4sgz","tag_id":"ck60spy9b000tda55cu7rbqn1","_id":"ck60spya40026da55dmush2wm"},{"post_id":"ck60spy95000nda55c798f8r7","tag_id":"ck60spya10020da5560ha3h6e","_id":"ck60spya9002fda556ama0g5b"},{"post_id":"ck60spy95000nda55c798f8r7","tag_id":"ck60spy9b000tda55cu7rbqn1","_id":"ck60spyaa002ida551a97eb09"},{"post_id":"ck60spy97000qda55cz448wdh","tag_id":"ck60spy8p0006da55hdoafhca","_id":"ck60spyae002lda55772bcocq"},{"post_id":"ck60spy97000qda55cz448wdh","tag_id":"ck60spy9b000tda55cu7rbqn1","_id":"ck60spyaf002oda555z726dfa"},{"post_id":"ck60spy99000rda55dyet2g89","tag_id":"ck60spyaa002kda55eyji9662","_id":"ck60spyak002wda551aelco1o"},{"post_id":"ck60spy99000rda55dyet2g89","tag_id":"ck60spy9b000tda55cu7rbqn1","_id":"ck60spyal002zda552qpddlfy"},{"post_id":"ck60spy9c000uda5561gw8icg","tag_id":"ck60spyah002uda553uqd198y","_id":"ck60spyan0032da558har5b0a"},{"post_id":"ck60spy9c000uda5561gw8icg","tag_id":"ck60spy9b000tda55cu7rbqn1","_id":"ck60spyap0035da55ffbi9la1"},{"post_id":"ck60spy9f000vda554rf685py","tag_id":"ck60spyaa002kda55eyji9662","_id":"ck60spyar0038da559ysic9as"},{"post_id":"ck60spy9f000vda554rf685py","tag_id":"ck60spy9b000tda55cu7rbqn1","_id":"ck60spyat003bda556jzk1xuh"},{"post_id":"ck60spy9h000zda55gm2t6p6q","tag_id":"ck60spyap0036da55dzpidw5k","_id":"ck60spyav003eda55bbqb9bec"},{"post_id":"ck60spy9h000zda55gm2t6p6q","tag_id":"ck60spy9b000tda55cu7rbqn1","_id":"ck60spyaw003hda559df45ly4"},{"post_id":"ck60spy9j0012da555yiu5chl","tag_id":"ck60spyap0036da55dzpidw5k","_id":"ck60spyaz003oda55c7r07nsv"},{"post_id":"ck60spy9j0012da555yiu5chl","tag_id":"ck60spyaa002kda55eyji9662","_id":"ck60spyb0003rda5586b38urg"},{"post_id":"ck60spy9j0012da555yiu5chl","tag_id":"ck60spy9b000tda55cu7rbqn1","_id":"ck60spyb1003uda554kvohjv7"},{"post_id":"ck60spy9l0017da5511ow6fhh","tag_id":"ck60spyah002uda553uqd198y","_id":"ck60spyb1003wda55e5k1bq4y"},{"post_id":"ck60spy9l0017da5511ow6fhh","tag_id":"ck60spy9b000tda55cu7rbqn1","_id":"ck60spyb2003zda5512vjal6y"},{"post_id":"ck60spy9n001ada55febc9cfj","tag_id":"ck60spyah002uda553uqd198y","_id":"ck60spyb30043da55favg3sp9"},{"post_id":"ck60spy9n001ada55febc9cfj","tag_id":"ck60spyb1003xda559dqnddgc","_id":"ck60spyb40045da5538vy7es3"},{"post_id":"ck60spy9n001ada55febc9cfj","tag_id":"ck60spy9b000tda55cu7rbqn1","_id":"ck60spyb40048da559s3e5vhc"},{"post_id":"ck60spy9p001eda55bspm8671","tag_id":"ck60spyaa002kda55eyji9662","_id":"ck60spyb5004ada554p752wpa"},{"post_id":"ck60spy9p001eda55bspm8671","tag_id":"ck60spy9b000tda55cu7rbqn1","_id":"ck60spyb6004dda5513cb4lg3"},{"post_id":"ck60spy9r001hda5584o08vte","tag_id":"ck60spyaa002kda55eyji9662","_id":"ck60spyb7004hda556fwl1d60"},{"post_id":"ck60spy9r001hda5584o08vte","tag_id":"ck60spyah002uda553uqd198y","_id":"ck60spyb8004jda5518dy5qjv"},{"post_id":"ck60spy9r001hda5584o08vte","tag_id":"ck60spy9b000tda55cu7rbqn1","_id":"ck60spyb9004mda550kgk5pz8"},{"post_id":"ck60spy9t001mda5538w3guxj","tag_id":"ck60spya10020da5560ha3h6e","_id":"ck60spyba004oda5520yagu9i"},{"post_id":"ck60spy9t001mda5538w3guxj","tag_id":"ck60spy9b000tda55cu7rbqn1","_id":"ck60spybb004rda550jcw73jt"},{"post_id":"ck60spy9v001pda55esi592fx","tag_id":"ck60spyb8004lda554p10094h","_id":"ck60spybc004tda553vb70snk"},{"post_id":"ck60spy9v001pda55esi592fx","tag_id":"ck60spyba004qda554zgb7kp3","_id":"ck60spybc004uda550o86g339"},{"post_id":"ck60spy9v001pda55esi592fx","tag_id":"ck60spy9b000tda55cu7rbqn1","_id":"ck60spybd004wda555q25cn6c"},{"post_id":"ck60spy9x001tda5546a01zd1","tag_id":"ck60spyaa002kda55eyji9662","_id":"ck60spybf004zda551oma0sjj"},{"post_id":"ck60spy9x001tda5546a01zd1","tag_id":"ck60spybc004vda55ecfc6u2e","_id":"ck60spybg0050da5534sx6t4g"},{"post_id":"ck60spy9x001tda5546a01zd1","tag_id":"ck60spyah002uda553uqd198y","_id":"ck60spybi0052da55hsah6dpm"},{"post_id":"ck60spy9x001tda5546a01zd1","tag_id":"ck60spy9b000tda55cu7rbqn1","_id":"ck60spybj0053da55dyvicphc"},{"post_id":"ck60spy9y001wda555tt1bakb","tag_id":"ck60spyb8004lda554p10094h","_id":"ck60spybk0055da550eycerxd"},{"post_id":"ck60spy9y001wda555tt1bakb","tag_id":"ck60spy9b000tda55cu7rbqn1","_id":"ck60spybk0056da55huykhvbx"},{"post_id":"ck60spya0001zda55bk989xnp","tag_id":"ck60spyah002uda553uqd198y","_id":"ck60spybl0058da55571k0ln1"},{"post_id":"ck60spya0001zda55bk989xnp","tag_id":"ck60spy9b000tda55cu7rbqn1","_id":"ck60spybm0059da55bcqb6a7h"},{"post_id":"ck60spya20023da557wf14ux9","tag_id":"ck60spyb8004lda554p10094h","_id":"ck60spybm005bda5526v39gp2"},{"post_id":"ck60spya20023da557wf14ux9","tag_id":"ck60spyba004qda554zgb7kp3","_id":"ck60spybn005cda550a1ab1as"},{"post_id":"ck60spya20023da557wf14ux9","tag_id":"ck60spy9b000tda55cu7rbqn1","_id":"ck60spybo005eda5507yx542j"},{"post_id":"ck60spya40027da5559xmbzu5","tag_id":"ck60spybm005ada55ezfvhg64","_id":"ck60spybo005fda550u82at3i"},{"post_id":"ck60spya40027da5559xmbzu5","tag_id":"ck60spy9h000yda558xwx6e4i","_id":"ck60spybp005gda55e7870631"},{"post_id":"ck60spya40027da5559xmbzu5","tag_id":"ck60spy9b000tda55cu7rbqn1","_id":"ck60spybp005hda55h1umblv5"},{"post_id":"ck60spya6002ada55fufggmhv","tag_id":"ck60spybm005ada55ezfvhg64","_id":"ck60spybp005ida553abxbsi1"},{"post_id":"ck60spya6002ada55fufggmhv","tag_id":"ck60spy9b000tda55cu7rbqn1","_id":"ck60spybq005jda559p650fr0"}],"Tag":[{"name":"GitHub","_id":"ck60spy8p0006da55hdoafhca"},{"name":"Cola","_id":"ck60spy96000pda55ho7e5p20"},{"name":"Library","_id":"ck60spy9b000tda55cu7rbqn1"},{"name":"MATLAB","_id":"ck60spy9h000yda558xwx6e4i"},{"name":"茶余裨谈","_id":"ck60spy9t001lda55dii5druh"},{"name":"VMware","_id":"ck60spya10020da5560ha3h6e"},{"name":"Linux","_id":"ck60spyaa002kda55eyji9662"},{"name":"C++","_id":"ck60spyah002uda553uqd198y"},{"name":"Windows","_id":"ck60spyap0036da55dzpidw5k"},{"name":"QT","_id":"ck60spyb1003xda559dqnddgc"},{"name":"机器人","_id":"ck60spyb8004lda554p10094h"},{"name":"ROS","_id":"ck60spyba004qda554zgb7kp3"},{"name":"OpenCV","_id":"ck60spybc004vda55ecfc6u2e"},{"name":"数学基础","_id":"ck60spybm005ada55ezfvhg64"}]}}