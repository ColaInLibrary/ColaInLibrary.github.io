<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ROS自定义动态链接库并调用</title>
    <url>/archives/ff2330c4.html</url>
    <content><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>在之前已经给出了创建共享库的方法，但是直接应用到ROS还是有一些问题。因此，本文主要解决ROS中创建及使用共享库的方法。包含以下内容：</p>
<ul>
<li>原汁原味的catkin_make建立共享库以及调用；</li>
<li>使用catkin_simple来简化CMakeLists.txt，实现同样的效果，调试更简单。（推荐使用）</li>
<li>工程源码见：<div class="tag link"><a class="link-card" title="ROS_share_library" href="https://github.com/ColaInLibrary/ros_share_library"><div class="left"><img src="/images/github.png"/></div><div class="right"><p class="text">ROS_share_library</p><p class="url">https://github.com/ColaInLibrary/ros_share_library</p></div></a></div> 
</li>
</ul>
<h1 id="2-创建共享库"><a href="#2-创建共享库" class="headerlink" title="2 创建共享库"></a>2 创建共享库</h1><h2 id="2-1-使用原生-CMakeLists-txt"><a href="#2-1-使用原生-CMakeLists-txt" class="headerlink" title="2.1 使用原生 CMakeLists.txt"></a>2.1 使用原生 CMakeLists.txt</h2><p>首先在工作空间创建包 <code>creating_a_ros_library</code>：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">catkin_create_pkg creating_a_ros_library roscpp std_msgs std_srvs</span><br></pre></td></tr></table></figure><br>然后添加以下文件到工程中，目录如下：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">├── include</span><br><span class="line">│   └── creating_a_ros_library</span><br><span class="line">│       └── example_ros_class.h</span><br><span class="line">├── package.xml</span><br><span class="line">└── src</span><br><span class="line">    ├── example_ros_class.cpp</span><br><span class="line">    └── example_ros_class_test_main.cpp</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>说明：<code>example_ros_class.cpp</code> 是用来创建共享库的文件，而<code>example_ros_class_test_main.cpp</code>则是在本工程中调用共享库的主程序。</p>
</blockquote>
<details class="folding-tag" green><summary> 点击查看`example_ros_class.h`文件内容 </summary>
              <div class='content'>
              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// example_ros_class.h header file //</span></span><br><span class="line"><span class="comment">// wsn; Feb, 2015</span></span><br><span class="line"><span class="comment">// include this file in &quot;example_ros_class.cpp&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// here&#x27;s a good trick--should always do this with header files:</span></span><br><span class="line"><span class="comment">// create a unique mnemonic for this header file, so it will get included if needed,</span></span><br><span class="line"><span class="comment">// but will not get included multiple times</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> EXAMPLE_ROS_CLASS_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EXAMPLE_ROS_CLASS_H_</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//some generically useful stuff to include...</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ros/ros.h&gt;</span> <span class="comment">//ALWAYS need to include this</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//message types used in this example code;  include more message types, as needed</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;std_msgs/Bool.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;std_msgs/Float32.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;std_srvs/Trigger.h&gt;</span> <span class="comment">// uses the &quot;Trigger.srv&quot; message defined in ROS</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// define a class, including a constructor, member variables and member functions</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ExampleRosClass</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ExampleRosClass</span>(ros::NodeHandle* nodehandle); <span class="comment">//&quot;main&quot; will need to instantiate a ROS nodehandle, then pass it to the constructor</span></span><br><span class="line">    <span class="comment">// may choose to define public methods or public variables, if desired</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// put private member data here;  &quot;private&quot; data will only be available to member functions of this class;</span></span><br><span class="line">    ros::NodeHandle nh_; <span class="comment">// we will need this, to pass between &quot;main&quot; and constructor</span></span><br><span class="line">    <span class="comment">// some objects to support subscriber, service, and publisher</span></span><br><span class="line">    ros::Subscriber minimal_subscriber_; <span class="comment">//these will be set up within the class constructor, hiding these ugly details</span></span><br><span class="line">    ros::ServiceServer minimal_service_;</span><br><span class="line">    ros::Publisher  minimal_publisher_;</span><br><span class="line">    </span><br><span class="line">    <span class="type">double</span> val_from_subscriber_; <span class="comment">//example member variable: better than using globals; convenient way to pass data from a subscriber to other member functions</span></span><br><span class="line">    <span class="type">double</span> val_to_remember_; <span class="comment">// member variables will retain their values even as callbacks come and go</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// member methods as well:</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">initializeSubscribers</span><span class="params">()</span></span>; <span class="comment">// we will define some helper methods to encapsulate the gory details of initializing subscribers, publishers and services</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">initializePublishers</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">initializeServices</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">subscriberCallback</span><span class="params">(<span class="type">const</span> std_msgs::Float32&amp; message_holder)</span></span>; <span class="comment">//prototype for callback of example subscriber</span></span><br><span class="line">    <span class="comment">//prototype for callback for example service</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">serviceCallback</span><span class="params">(std_srvs::TriggerRequest&amp; request, std_srvs::TriggerResponse&amp; response)</span></span>;</span><br><span class="line">&#125;; <span class="comment">// note: a class definition requires a semicolon at the end of the definition</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span>  <span class="comment">// this closes the header-include trick...ALWAYS need one of these to match #ifndef</span></span></span><br></pre></td></tr></table></figure>
              </div>
            </details>
<details class="folding-tag" yellow><summary> 点击查看`example_ros_class.cpp`文件内容 </summary>
              <div class='content'>
              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//example_ros_class.cpp:</span></span><br><span class="line"><span class="comment">//wsn, Jan 2016</span></span><br><span class="line"><span class="comment">//illustrates how to use classes to make ROS nodes</span></span><br><span class="line"><span class="comment">// constructor can do the initialization work, including setting up subscribers, publishers and services</span></span><br><span class="line"><span class="comment">// can use member variables to pass data from subscribers to other member functions</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// can test this function manually with terminal commands, e.g. (in separate terminals):</span></span><br><span class="line"><span class="comment">// rosrun example_ros_class example_ros_class</span></span><br><span class="line"><span class="comment">// rostopic echo exampleMinimalPubTopic</span></span><br><span class="line"><span class="comment">// rostopic pub -r 4 exampleMinimalSubTopic std_msgs/Float32 2.0</span></span><br><span class="line"><span class="comment">// rosservice call exampleMinimalService 1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// this header incorporates all the necessary #include files and defines the class &quot;ExampleRosClass&quot;</span></span><br><span class="line"><span class="comment">// #include &lt;creating_a_ros_library/example_ros_class.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;../include/creating_a_ros_library/example_ros_class.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//CONSTRUCTOR:  this will get called whenever an instance of this class is created</span></span><br><span class="line"><span class="comment">// want to put all dirty work of initializations here</span></span><br><span class="line"><span class="comment">// odd syntax: have to pass nodehandle pointer into constructor for constructor to build subscribers, etc</span></span><br><span class="line">ExampleRosClass::<span class="built_in">ExampleRosClass</span>(ros::NodeHandle* nodehandle):<span class="built_in">nh_</span>(*nodehandle)</span><br><span class="line">&#123; <span class="comment">// constructor</span></span><br><span class="line">    <span class="built_in">ROS_INFO</span>(<span class="string">&quot;in class constructor of ExampleRosClass&quot;</span>);</span><br><span class="line">    <span class="built_in">initializeSubscribers</span>(); <span class="comment">// package up the messy work of creating subscribers; do this overhead in constructor</span></span><br><span class="line">    <span class="built_in">initializePublishers</span>();</span><br><span class="line">    <span class="built_in">initializeServices</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//initialize variables here, as needed</span></span><br><span class="line">    val_to_remember_=<span class="number">0.0</span>; </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// can also do tests/waits to make sure all required services, topics, etc are alive</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//member helper function to set up subscribers;</span></span><br><span class="line"><span class="comment">// note odd syntax: &amp;ExampleRosClass::subscriberCallback is a pointer to a member function of ExampleRosClass</span></span><br><span class="line"><span class="comment">// &quot;this&quot; keyword is required, to refer to the current instance of ExampleRosClass</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ExampleRosClass::initializeSubscribers</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">ROS_INFO</span>(<span class="string">&quot;Initializing Subscribers&quot;</span>);</span><br><span class="line">    minimal_subscriber_ = nh_.<span class="built_in">subscribe</span>(<span class="string">&quot;example_class_input_topic&quot;</span>, <span class="number">1</span>, &amp;ExampleRosClass::subscriberCallback,<span class="keyword">this</span>);  </span><br><span class="line">    <span class="comment">// add more subscribers here, as needed</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//member helper function to set up services:</span></span><br><span class="line"><span class="comment">// similar syntax to subscriber, required for setting up services outside of &quot;main()&quot;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ExampleRosClass::initializeServices</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">ROS_INFO</span>(<span class="string">&quot;Initializing Services&quot;</span>);</span><br><span class="line">    minimal_service_ = nh_.<span class="built_in">advertiseService</span>(<span class="string">&quot;example_minimal_service&quot;</span>,</span><br><span class="line">                                                   &amp;ExampleRosClass::serviceCallback,</span><br><span class="line">                                                   <span class="keyword">this</span>);  </span><br><span class="line">    <span class="comment">// add more services here, as needed</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//member helper function to set up publishers;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ExampleRosClass::initializePublishers</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">ROS_INFO</span>(<span class="string">&quot;Initializing Publishers&quot;</span>);</span><br><span class="line">    minimal_publisher_ = nh_.<span class="built_in">advertise</span>&lt;std_msgs::Float32&gt;(<span class="string">&quot;example_class_output_topic&quot;</span>, <span class="number">1</span>, <span class="literal">true</span>); </span><br><span class="line">    <span class="comment">//add more publishers, as needed</span></span><br><span class="line">    <span class="comment">// note: COULD make minimal_publisher_ a public member function, if want to use it within &quot;main()&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// a simple callback function, used by the example subscriber.</span></span><br><span class="line"><span class="comment">// note, though, use of member variables and access to minimal_publisher_ (which is a member method)</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ExampleRosClass::subscriberCallback</span><span class="params">(<span class="type">const</span> std_msgs::Float32&amp; message_holder)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// the real work is done in this callback function</span></span><br><span class="line">    <span class="comment">// it wakes up every time a new message is published on &quot;exampleMinimalSubTopic&quot;</span></span><br><span class="line"></span><br><span class="line">    val_from_subscriber_ = message_holder.data; <span class="comment">// copy the received data into member variable, so ALL member funcs of ExampleRosClass can access it</span></span><br><span class="line">    <span class="built_in">ROS_INFO</span>(<span class="string">&quot;myCallback activated: received value %f&quot;</span>,val_from_subscriber_);</span><br><span class="line">    std_msgs::Float32 output_msg;</span><br><span class="line">    val_to_remember_ += val_from_subscriber_; <span class="comment">//can use a member variable to store values between calls; add incoming value each callback</span></span><br><span class="line">    output_msg.data= val_to_remember_;</span><br><span class="line">    <span class="comment">// demo use of publisher--since publisher object is a member function</span></span><br><span class="line">    minimal_publisher_.<span class="built_in">publish</span>(output_msg); <span class="comment">//output the square of the received value; </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//member function implementation for a service callback function</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ExampleRosClass::serviceCallback</span><span class="params">(std_srvs::TriggerRequest&amp; request, std_srvs::TriggerResponse&amp; response)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">ROS_INFO</span>(<span class="string">&quot;service callback activated&quot;</span>);</span><br><span class="line">    response.success = <span class="literal">true</span>; <span class="comment">// boring, but valid response info</span></span><br><span class="line">    response.message = <span class="string">&quot;here is a response string&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
              </div>
            </details>
<p><code>CMakeLists.txt</code>中需要修改两处：</p>
<ol>
<li>将<code>include_directories()</code>中的<code>include</code>取消注释（大约120行）；</li>
<li>添加以下内容：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">add_library(example_ros_library SHARED src/example_ros_class.cpp)  # 生成的库在devel/lib目录下</span><br><span class="line">add_executable($&#123;PROJECT_NAME&#125; src/example_ros_class_test_main.cpp)</span><br><span class="line">target_link_libraries($&#123;PROJECT_NAME&#125; $&#123;catkin_LIBRARIES&#125; example_ros_library)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<details class="folding-tag" cyan><summary> 点击查看`example_ros_class_test_main.cpp`文件内容 </summary>
              <div class='content'>
              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;creating_a_ros_library/example_ros_class.h&gt;</span>  <span class="comment">// 需要将CMakeLists.txt中的include_directories()中的include前的注释取消掉才能找到</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// ROS set-ups:</span></span><br><span class="line">    ros::<span class="built_in">init</span>(argc, argv, <span class="string">&quot;example_lib_test_main&quot;</span>); <span class="comment">//node name</span></span><br><span class="line"></span><br><span class="line">    ros::NodeHandle nh; <span class="comment">// create a node handle; need to pass this to the class constructor</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">ROS_INFO</span>(<span class="string">&quot;main: instantiating an object of type ExampleRosClass&quot;</span>);</span><br><span class="line">    <span class="function">ExampleRosClass <span class="title">exampleRosClass</span><span class="params">(&amp;nh)</span></span>;  <span class="comment">//instantiate an ExampleRosClass object and pass in pointer to nodehandle for constructor to use</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">ROS_INFO</span>(<span class="string">&quot;main: going into spin; let the callbacks do all the work&quot;</span>);</span><br><span class="line">    ros::<span class="built_in">spin</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
              </div>
            </details>
<p>编译方法：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> catkin_ws</span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure><br>在编译完成后，会在<code>catkin_ws/devel/lib/</code>目录下生成<code>libexample_ros_library.so</code>；在在<code>catkin_ws/devel/lib/creating_a_ros_library/</code>目录下生成<code>creating_a_ros_library</code>可执行文件（node）。</p>
<p>测试：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">roscore</span><br><span class="line"><span class="comment"># open a new terminal</span></span><br><span class="line">rosrun creating_a_ros_library creating_a_ros_library</span><br></pre></td></tr></table></figure><br>输出结果：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[ INFO] [1661084062.326018473]: main: instantiating an object of <span class="built_in">type</span> ExampleRosClass</span><br><span class="line">[ INFO] [1661084062.326405817]: <span class="keyword">in</span> class constructor of ExampleRosClass</span><br><span class="line">[ INFO] [1661084062.326451901]: Initializing Subscribers</span><br><span class="line">[ INFO] [1661084062.327675835]: Initializing Publishers</span><br><span class="line">[ INFO] [1661084062.327898970]: Initializing Services</span><br><span class="line">[ INFO] [1661084062.328322949]: main: going into spin; <span class="built_in">let</span> the callbacks <span class="keyword">do</span> all the work</span><br></pre></td></tr></table></figure></p>
<h2 id="2-2-其他工程调用共享库"><a href="#2-2-其他工程调用共享库" class="headerlink" title="2.2 其他工程调用共享库"></a>2.2 其他工程调用共享库</h2><p>创建一个新包<code>using_a_ros_library</code>用来调用共享库。先说一下思路：直接调用<code>creating_a_ros_library</code>包，但是这里用<code>using_a_ros_library</code>来调用，因此需要将<code>creating_a_ros_library</code>先导出，导出的方法就是，在<code>creating_ros_library/CMakeLists.txt</code>中取消注释.<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">catkin_package(</span><br><span class="line">  # creating_a_ros_library中的这里要取消注释，非常重要！大约106行</span><br><span class="line">  INCLUDE_DIRS include</span><br><span class="line">  # LIBRARIES creating_a_ros_library</span><br><span class="line">  CATKIN_DEPENDS roscpp std_msgs std_srvs</span><br><span class="line">  # DEPENDS system_lib</span><br></pre></td></tr></table></figure><br>再进行编译及生成新包。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/catkin_ws</span><br><span class="line">catkin_make</span><br><span class="line"><span class="built_in">cd</span> ~/catkin_ws/src</span><br><span class="line">catkin_create_pkg using_a_ros_library roscpp std_msgs std_srvs creating_a_ros_library</span><br></pre></td></tr></table></figure></p>
<div class="note danger flat"><p>注意这里直接将包<code>creating_a_ros_library</code>添加进去，就不用在<code>package.xml</code>中再添加依赖项了。</p>
</div>
<p>将上一小节的<code>example_ros_class_test_main.cpp</code>复制到该包中，无需修改。该包的目录如下：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">using_a_ros_library</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">├── include</span><br><span class="line">│   └── using_a_ros_library</span><br><span class="line">├── package.xml</span><br><span class="line">└── src</span><br><span class="line">    └── example_ros_class_test_main.cpp</span><br><span class="line"></span><br><span class="line">3 directories, 3 files</span><br></pre></td></tr></table></figure><br><code>CMakeLists.txt</code>中需要修改的地方：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">catkin_package(</span><br><span class="line">#  INCLUDE_DIRS include</span><br><span class="line">#  LIBRARIES using_a_ros_library</span><br><span class="line">#  取消下一行注释，非常重要！！！大约106行</span><br><span class="line">   CATKIN_DEPENDS creating_a_ros_library roscpp std_msgs std_srvs</span><br><span class="line">#  DEPENDS system_lib</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">add_executable($&#123;PROJECT_NAME&#125; src/example_ros_class_test_main.cpp)</span><br><span class="line">target_link_libraries($&#123;PROJECT_NAME&#125; $&#123;catkin_LIBRARIES&#125; example_ros_library)</span><br></pre></td></tr></table></figure></p>
<p>修改完成后，编译及运行：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/catkin_ws</span><br><span class="line">catkin_make</span><br><span class="line">roscore</span><br><span class="line"><span class="comment"># open a new terminal</span></span><br><span class="line">rosrun using_a_ros_library using_a_ros_library</span><br></pre></td></tr></table></figure><br>输出结果如下：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[ INFO] [1661091625.379485178]: main: instantiating an object of <span class="built_in">type</span> ExampleRosClass</span><br><span class="line">[ INFO] [1661091625.380032496]: <span class="keyword">in</span> class constructor of ExampleRosClass</span><br><span class="line">[ INFO] [1661091625.380056233]: Initializing Subscribers</span><br><span class="line">[ INFO] [1661091625.381107898]: Initializing Publishers</span><br><span class="line">[ INFO] [1661091625.381327092]: Initializing Services</span><br><span class="line">[ INFO] [1661091625.381558026]: main: going into spin; <span class="built_in">let</span> the callbacks <span class="keyword">do</span> all the work</span><br></pre></td></tr></table></figure><br>可以看到结果与上节一致。</p>
<h1 id="3-使用catkin-simple来创建库"><a href="#3-使用catkin-simple来创建库" class="headerlink" title="3 使用catkin_simple来创建库"></a>3 使用catkin_simple来创建库</h1><h2 id="3-1-catkin-simple使用"><a href="#3-1-catkin-simple使用" class="headerlink" title="3.1 catkin_simple使用"></a>3.1 catkin_simple使用</h2><p><code>catkin_simple</code>是ETH为了简化ROS的冗余<code>CMakeLists.txt</code>而开发的工具。关于该工具的说明可以参考：<br><div class="tag link"><a class="link-card" title="catkin_simple" href="https://zhuanlan.zhihu.com/p/344628729"><div class="left"><img src="/images/zhihu.png"/></div><div class="right"><p class="text">catkin_simple</p><p class="url">https://zhuanlan.zhihu.com/p/344628729</p></div></a></div></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> catkin_ws/src</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/wsnewman/learning_ros_external_packages learning_ros_external_packages</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">catkin_make</span><br><span class="line"><span class="built_in">alias</span> cs_create_pkg=<span class="string">&#x27;~/catkin_ws/src/learning_ros_external_packages/cs_create_pkg.py&#x27;</span></span><br></pre></td></tr></table></figure>
<p>上述代码的最后一行会让当前终端识别<code>cs_create_pkg</code>，为了能在所有终端中都能使用，采用以下方法：<br><div class="tip success"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gedit ~/.bashrc</span><br></pre></td></tr></table></figure>
<p>打开上述文件后添加<code>alias cs_create_pkg=&#39;~/catkin_ws/src/learning_ros_external_packages/cs_create_pkg.py&#39;</code>，最后再进行<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></p>
</div></p>
<h2 id="3-2-创建库并调用"><a href="#3-2-创建库并调用" class="headerlink" title="3.2 创建库并调用"></a>3.2 创建库并调用</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cs_create_pkg cs_creating_a_ros_library roscpp std_msgs std_srvs</span><br></pre></td></tr></table></figure>
<p>向工程中添加文件，目录为：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">├── include</span><br><span class="line">│   └── cs_creating_a_ros_library</span><br><span class="line">│       └── example_ros_class.h</span><br><span class="line">├── package.xml</span><br><span class="line">├── README.md</span><br><span class="line">└── src</span><br><span class="line">    ├── example_ros_class.cpp</span><br><span class="line">    └── example_ros_class_test_main.cpp</span><br></pre></td></tr></table></figure><br>其中，<code>example_ros_class.h</code>和 <code>example_ros_class.cpp</code>第2节中的一致，直接复制即可。将2.1节中<code>example_ros_class_test_main.cpp</code>首行修改如下，即调用自己的包。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cs_creating_a_ros_library/example_ros_class.h&gt;</span> </span></span><br></pre></td></tr></table></figure></p>
<details class="folding-tag" blue><summary> 点击查看`CMakeLists.txt`的内容 </summary>
              <div class='content'>
              <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 2.8.3)</span><br><span class="line">project(cs_creating_a_ros_library)</span><br><span class="line"></span><br><span class="line">find_package(catkin_simple REQUIRED)</span><br><span class="line"></span><br><span class="line">#uncomment next line to use OpenCV library</span><br><span class="line">#find_package(OpenCV REQUIRED)</span><br><span class="line"></span><br><span class="line">#uncomment the next 2 lines to use the point-cloud library</span><br><span class="line">#find_package(PCL 1.7 REQUIRED)</span><br><span class="line">#include_directories($&#123;PCL_INCLUDE_DIRS&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#uncomment the following 4 lines to use the Eigen library</span><br><span class="line">#find_package(cmake_modules REQUIRED)</span><br><span class="line">#find_package(Eigen3 REQUIRED)</span><br><span class="line">#include_directories($&#123;EIGEN3_INCLUDE_DIR&#125;)</span><br><span class="line">#add_definitions($&#123;EIGEN_DEFINITIONS&#125;)</span><br><span class="line"></span><br><span class="line">catkin_simple()</span><br><span class="line"></span><br><span class="line"># example boost usage</span><br><span class="line"># find_package(Boost REQUIRED COMPONENTS system thread)</span><br><span class="line"></span><br><span class="line"># C++0x support - not quite the same as final C++11!</span><br><span class="line"># use carefully;  can interfere with point-cloud library</span><br><span class="line"># SET(CMAKE_CXX_FLAGS &quot;$&#123;CMAKE_CXX_FLAGS&#125; -std=c++0x&quot;)</span><br><span class="line"></span><br><span class="line"># Libraries: uncomment the following and edit arguments to create a new library</span><br><span class="line">cs_add_library(cs_example_ros_library src/example_ros_class.cpp)   </span><br><span class="line"></span><br><span class="line"># Executables: uncomment the following and edit arguments to compile new nodes</span><br><span class="line"># may add more of these lines for more nodes from the same package</span><br><span class="line">cs_add_executable(cs_ros_library_test_main src/example_ros_class_test_main.cpp)</span><br><span class="line"></span><br><span class="line">#the following is required, if desire to link a node in this package with a library created in this same package</span><br><span class="line"># edit the arguments to reference the named node and named library within this package</span><br><span class="line">target_link_libraries(cs_ros_library_test_main cs_example_ros_library)</span><br><span class="line"></span><br><span class="line">cs_install()</span><br><span class="line">cs_export()</span><br></pre></td></tr></table></figure>
              </div>
            </details>
<div class="tip warning faa-horizontal animated"><p>值得注意的有：</p>
<ul>
<li>上述代码的<span class='p blue'>catkin_simple()</span>会调用<span class='p blue'>find_package()</span>，并将本文件夹下的<span class='p blue'>include</span> 和 catkin包含的头文件目录<span class='p blue'>include_directories</span>调用，等价于第二节。</li>
<li>值得一提的是，<span class='p blue'>cs_export()</span> 对应到原CMakeLists.txt中的 <span class='p blue'>catkin_package()</span>，所以这里已经直接导出了<span class='p green'>cs_creating_a_ros_library</span>包。</li>
</ul>
</div>
<p>编译：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/catkin_ws</span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure></p>
<p>编译完成后，在<code>~/catkin_ws/devel/lib/</code>目录下生成了<code>libcs_example_ros_library.so</code>，在<code>~/catkin_ws/devel/lib/cs_creating_a_library/</code>目录下生成了<code>cs_ros_library_test_main</code>节点。</p>
<p>测试：<br>执行<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">roscore</span><br><span class="line">rosrun cs_creating_a_ros_library cs_ros_library_test_main</span><br></pre></td></tr></table></figure><br>输出结果如下：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[ INFO] [1661085557.379182902]: main: instantiating an object of <span class="built_in">type</span> ExampleRosClass</span><br><span class="line">[ INFO] [1661085557.379707676]: <span class="keyword">in</span> class constructor of ExampleRosClass</span><br><span class="line">[ INFO] [1661085557.379718645]: Initializing Subscribers</span><br><span class="line">[ INFO] [1661085557.380861942]: Initializing Publishers</span><br><span class="line">[ INFO] [1661085557.381083735]: Initializing Services</span><br><span class="line">[ INFO] [1661085557.381317748]: main: going into spin; <span class="built_in">let</span> the callbacks <span class="keyword">do</span> all the work</span><br></pre></td></tr></table></figure><br>可见，结果与上一节的一致。</p>
<h2 id="3-3-外部工程调用共享库"><a href="#3-3-外部工程调用共享库" class="headerlink" title="3.3 外部工程调用共享库"></a>3.3 外部工程调用共享库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/catkin_ws/src</span><br><span class="line">cs_create_pkg cs_using_a_ros_library roscpp std_msgs std_srvs cs_creating_a_ros_library</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意最后包含了 cs_creating_a_ros_library，这里导致在<code>package.xml</code>中包含了对<code>cs_creating_a_ros_library</code>的依赖，这使得在CMakeLists.txt中无须再通过cs_target_link()来添加已经生成的<code>libcs_example_ros_library.so</code>。</p>
</blockquote>
<p>工程目录：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cs_creating_a_ros_library</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">├── include</span><br><span class="line">├── package.xml</span><br><span class="line">├── README.md</span><br><span class="line">└── src</span><br><span class="line">    └── example_ros_class_test_main.cpp</span><br></pre></td></tr></table></figure><br>直接将 3.2 节的<code>example_ros_class_test_main.cpp</code>复制即可，无需修改。在<code>CMakeLists.txt</code>中，仅需添加<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cs_add_executable(cs_ros_library_extern_test src/example_ros_class_test_main.cpp)</span><br></pre></td></tr></table></figure></p>
<p>编译及测试：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~/catkin_ws</span><br><span class="line">catkin_make</span><br><span class="line">roscore</span><br><span class="line"># open a new terminal</span><br><span class="line">rosrun cs_using_a_ros_library cs_ros_library_extern_test</span><br></pre></td></tr></table></figure></p>
<p>结果如下：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[ INFO] [1661086647.935522480]: main: instantiating an object of <span class="built_in">type</span> ExampleRosClass</span><br><span class="line">[ INFO] [1661086647.936067988]: <span class="keyword">in</span> class constructor of ExampleRosClass</span><br><span class="line">[ INFO] [1661086647.936079118]: Initializing Subscribers</span><br><span class="line">[ INFO] [1661086647.937107125]: Initializing Publishers</span><br><span class="line">[ INFO] [1661086647.937326156]: Initializing Services</span><br><span class="line">[ INFO] [1661086647.937551842]: main: going into spin; <span class="built_in">let</span> the callbacks <span class="keyword">do</span> all the work</span><br></pre></td></tr></table></figure><br>可以看到结果与前述结果一致。</p>
<h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h1><p>本文第2.1节创建了一个动态链接库，并在自己的package中进行了调用；第2.2节创建了一个新pkg来调用2.1节的pkg中的动态链接库。<br>而第3节则简介了<code>catkin_simple</code>，并用气实现了自定义链接库的生成和调用。经过对比，建议使用<code>catkin_simple</code>来管理CMakeLists.txt，确实可以大幅简化，对于不熟悉的开发人员可以提速。</p>
]]></content>
      <categories>
        <category>机器人控制</category>
        <category>ROS学习笔记</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>C++</tag>
        <tag>ROS</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-Butterfly 自定义加载动画</title>
    <url>/archives/5851a8db.html</url>
    <content><![CDATA[<div class="note info disabled"><p>本文在Akiar的基础上进行自定义加载动画的实现，在操作之前，应确保你已经阅读过原文链接：</p>
</div>
<div class="tag link"><a class="link-card" title="Loading Animation" href="https://akilar.top/posts/3d221bf2/"><div class="left"><img src="/images/20220815/favicon.ico"/></div><div class="right"><p class="text">Loading Animation</p><p class="url">https://akilar.top/posts/3d221bf2/</p></div></a></div>
<div class="note warning flat"><p>上述链接给出的教程是针对一个已经写好的<code>.styl</code>文件，但更多的动画是<code>.css</code>格式，因此本文介绍加载<code>.css</code>格式的动画方法。</p>
</div>
<p>[<a href="https://codepen.io/">CodeOpen</a>]提供了很多已有的动画案例，并且能在其上以<code>.pug</code>形式、<code>.styl</code>格式调试（通过齿轮图标进行设置）。将该网站上现有的CSS格式文件导出后，可以用 stylus 转换（参考[<a href="https://blog.csdn.net/lyt_angularjs/article/details/80457099">stylus基础教程</a>]。具体语法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i stylus@latest -g</span><br><span class="line">stylus -C assets/css/index.css  <span class="comment"># 将assets/css/index.css 编译成assets/css/index.styl</span></span><br><span class="line">stylus -c assets/css/index.styl assets/css/index.css  <span class="comment"># 将.styl转换成.css</span></span><br></pre></td></tr></table></figure>
<p>将HTML转换为<code>.pug</code>在[<a href="https://akilar.top/posts/3d221bf2/">Loading Animation</a>]中有介绍，剩余的操作流程与该链接中的一致。</p>
]]></content>
      <categories>
        <category>工科生的基本功</category>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Library</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-Butterfly 多图排版</title>
    <url>/archives/10259deb.html</url>
    <content><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>Butterfly 主题自带的照片墙排版方式可以对多图并排，但是要求预先对图片尺寸设计好，也就是不能自行修改图片尺寸，体验不好；网上流传的各种 html 标签的写法要么不能正常显示，要么不能实现多图并排。笔者在此引入一种可以实现多图并排、并能调整大小的方式。该方式通过构建外挂标签，实现多图并排。因为笔者之前使用 Next 主题样式是比较容易实现多图并排的，因此就从 Next 主题中找出了相关的文件。</p>
<h1 id="2-多图并排的实现方式"><a href="#2-多图并排的实现方式" class="headerlink" title="2 多图并排的实现方式"></a>2 多图并排的实现方式</h1><h2 id="2-1-创建-group-pictures-js"><a href="#2-1-创建-group-pictures-js" class="headerlink" title="2.1 创建 group-pictures.js"></a>2.1 创建 group-pictures.js</h2><p>在<code>themes/butterfly/scripts/tag/</code>目录下创建<code>group-pictures.js</code>文件，并写入：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* global hexo */</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="variable constant_">LAYOUTS</span> = &#123;</span><br><span class="line">  <span class="number">2</span>: &#123;</span><br><span class="line">    <span class="number">1</span>: [<span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">    <span class="number">2</span>: [<span class="number">2</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="number">3</span>: &#123;</span><br><span class="line">    <span class="number">1</span>: [<span class="number">3</span>],</span><br><span class="line">    <span class="number">2</span>: [<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">    <span class="number">3</span>: [<span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="number">4</span>: &#123;</span><br><span class="line">    <span class="number">1</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>],</span><br><span class="line">    <span class="number">2</span>: [<span class="number">1</span>, <span class="number">3</span>],</span><br><span class="line">    <span class="number">3</span>: [<span class="number">2</span>, <span class="number">2</span>],</span><br><span class="line">    <span class="number">4</span>: [<span class="number">3</span>, <span class="number">1</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="number">5</span>: &#123;</span><br><span class="line">    <span class="number">1</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>],</span><br><span class="line">    <span class="number">2</span>: [<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">    <span class="number">3</span>: [<span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    <span class="number">4</span>: [<span class="number">3</span>, <span class="number">2</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="number">6</span>: &#123;</span><br><span class="line">    <span class="number">1</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    <span class="number">2</span>: [<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>],</span><br><span class="line">    <span class="number">3</span>: [<span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>],</span><br><span class="line">    <span class="number">4</span>: [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>],</span><br><span class="line">    <span class="number">5</span>: [<span class="number">3</span>, <span class="number">3</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="number">7</span>: &#123;</span><br><span class="line">    <span class="number">1</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>],</span><br><span class="line">    <span class="number">2</span>: [<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>],</span><br><span class="line">    <span class="number">3</span>: [<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    <span class="number">4</span>: [<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>],</span><br><span class="line">    <span class="number">5</span>: [<span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="number">8</span>: &#123;</span><br><span class="line">    <span class="number">1</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    <span class="number">2</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>],</span><br><span class="line">    <span class="number">3</span>: [<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>],</span><br><span class="line">    <span class="number">4</span>: [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>],</span><br><span class="line">    <span class="number">5</span>: [<span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>],</span><br><span class="line">    <span class="number">6</span>: [<span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    <span class="number">7</span>: [<span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="number">9</span>: &#123;</span><br><span class="line">    <span class="number">1</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>],</span><br><span class="line">    <span class="number">2</span>: [<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    <span class="number">3</span>: [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    <span class="number">4</span>: [<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>],</span><br><span class="line">    <span class="number">5</span>: [<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>],</span><br><span class="line">    <span class="number">6</span>: [<span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>],</span><br><span class="line">    <span class="number">7</span>: [<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="number">10</span>: &#123;</span><br><span class="line">    <span class="number">1</span>: [<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>],</span><br><span class="line">    <span class="number">2</span>: [<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>],</span><br><span class="line">    <span class="number">3</span>: [<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    <span class="number">4</span>: [<span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>],</span><br><span class="line">    <span class="number">5</span>: [<span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    <span class="number">6</span>: [<span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>],</span><br><span class="line">    <span class="number">7</span>: [<span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">groupBy</span>(<span class="params">group, data</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> r = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> count <span class="keyword">of</span> group) &#123;</span><br><span class="line">    r.<span class="title function_">push</span>(data.<span class="title function_">slice</span>(<span class="number">0</span>, count));</span><br><span class="line">    data = data.<span class="title function_">slice</span>(count);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> templates = &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">dispatch</span>: <span class="keyword">function</span>(<span class="params">pictures, group, layout</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> rule = <span class="variable constant_">LAYOUTS</span>[group] ? <span class="variable constant_">LAYOUTS</span>[group][layout] : <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> rule ? <span class="variable language_">this</span>.<span class="title function_">getHTML</span>(<span class="title function_">groupBy</span>(rule, pictures)) : templates.<span class="title function_">defaults</span>(pictures);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Defaults Layout</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * □ □ □</span></span><br><span class="line"><span class="comment">   * □ □ □</span></span><br><span class="line"><span class="comment">   * ...</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> <span class="variable">pictures</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">defaults</span>: <span class="keyword">function</span>(<span class="params">pictures</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable constant_">ROW_SIZE</span> = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">var</span> rows = pictures.<span class="property">length</span> / <span class="variable constant_">ROW_SIZE</span>;</span><br><span class="line">    <span class="keyword">var</span> pictureArr = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; rows; i++) &#123;</span><br><span class="line">      pictureArr.<span class="title function_">push</span>(pictures.<span class="title function_">slice</span>(i * <span class="variable constant_">ROW_SIZE</span>, (i + <span class="number">1</span>) * <span class="variable constant_">ROW_SIZE</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">getHTML</span>(pictureArr);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">getHTML</span>: <span class="keyword">function</span>(<span class="params">rows</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> rowHTML = rows.<span class="title function_">map</span>(<span class="function"><span class="params">row</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`&lt;div class=&quot;group-picture-row&quot;&gt;<span class="subst">$&#123;<span class="variable language_">this</span>.getColumnHTML(row)&#125;</span>&lt;/div&gt;`</span>;</span><br><span class="line">    &#125;).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">`&lt;div class=&quot;group-picture-container&quot;&gt;<span class="subst">$&#123;rowHTML&#125;</span>&lt;/div&gt;`</span>;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">getColumnHTML</span>: <span class="keyword">function</span>(<span class="params">pictures</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> columnWidth = <span class="number">100</span> / pictures.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">var</span> columnStyle = <span class="string">`style=&quot;width: <span class="subst">$&#123;columnWidth&#125;</span>%;&quot;`</span>;</span><br><span class="line">    <span class="keyword">return</span> pictures.<span class="title function_">map</span>(<span class="function"><span class="params">picture</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`&lt;div class=&quot;group-picture-column&quot; <span class="subst">$&#123;columnStyle&#125;</span>&gt;<span class="subst">$&#123;picture&#125;</span>&lt;/div&gt;`</span>;</span><br><span class="line">    &#125;).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">groupPicture</span>(<span class="params">args, content</span>) &#123;</span><br><span class="line">  args = args[<span class="number">0</span>].<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> group = <span class="built_in">parseInt</span>(args[<span class="number">0</span>], <span class="number">10</span>);</span><br><span class="line">  <span class="keyword">var</span> layout = <span class="built_in">parseInt</span>(args[<span class="number">1</span>], <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">  content = hexo.<span class="property">render</span>.<span class="title function_">renderSync</span>(&#123;<span class="attr">text</span>: content, <span class="attr">engine</span>: <span class="string">&#x27;markdown&#x27;</span>&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> pictures = content.<span class="title function_">match</span>(<span class="regexp">/&lt;img[\s\S]*?&gt;/g</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`&lt;div class=&quot;group-picture&quot;&gt;<span class="subst">$&#123;templates.dispatch(pictures, group, layout)&#125;</span>&lt;/div&gt;`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">tag</span>.<span class="title function_">register</span>(<span class="string">&#x27;grouppicture&#x27;</span>, groupPicture, &#123;<span class="attr">ends</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">tag</span>.<span class="title function_">register</span>(<span class="string">&#x27;gp&#x27;</span>, groupPicture, &#123;<span class="attr">ends</span>: <span class="literal">true</span>&#125;);</span><br></pre></td></tr></table></figure><br><div class="note info modern"><p>该文件来自<code>themes/next/scripts/tags/group-pictures.js</code>。</p>
</div></p>
<h2 id="2-2-创建-group-pictures-styl"><a href="#2-2-创建-group-pictures-styl" class="headerlink" title="2.2 创建 group-pictures.styl"></a>2.2 创建 group-pictures.styl</h2><p>在<code>themes/butterfly/source/css/_tags</code>目录下创建<code>group-pictures.styl</code>文件，并写入：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.post-body .group-picture img &#123;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  padding: 0 3px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.group-picture-row &#123;</span><br><span class="line">  margin-bottom: 6px;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.group-picture-column &#123;</span><br><span class="line">  float: left;</span><br><span class="line">  margin-bottom: 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.page-post-detail .post-body .group-picture-column &#123;</span><br><span class="line">  // float: none;</span><br><span class="line">  margin-top: 10px;</span><br><span class="line">  // width: auto !important;</span><br><span class="line">  img &#123; margin: 0 auto; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><div class="note info modern"><p>该文件来自<code>themes/next/source/css/_common/scaffolding/tags/group-pictures.styl</code>。</p>
</div></p>
<h2 id="2-3-使用方法"><a href="#2-3-使用方法" class="headerlink" title="2.3 使用方法"></a>2.3 使用方法</h2><p>更多的使用效果见：<br><div class="tag link"><a class="link-card" title="多图排版issue" href="https://github.com/iissnan/hexo-theme-next/issues/295"><div class="left"><img src="/images/github.png"/></div><div class="right"><p class="text">多图排版issue</p><p class="url">https://github.com/iissnan/hexo-theme-next/issues/295</p></div></a></div></p>
<p>布局格式可参考下图（个别布局顺序有出入）：<br><img src="/images/20220816/layout.png" alt="layout"><br><div class="note warning modern"><p>warning:<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![](<span class="link"></span>)</span><br></pre></td></tr></table></figure><br>在用markdown语法添加本地路径的图片时，注意()内要先写个空格，即<code>( /images/xxx.png)</code>，不然有可能会提示<span class='p red'>Markdown Image Path does not exists!</span>。虽然这个并不影响图片的显示。 </p>
</div></p>
<p>使用模板：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% gp 2-1 %&#125; </span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span> <span class="attr">width</span> = <span class="string">xxx</span> <span class="attr">alt</span>=<span class="string">&quot;box-x&quot;</span> <span class="attr">align</span>=<span class="string">center</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span> <span class="attr">width</span> = <span class="string">xxx</span> <span class="attr">alt</span>=<span class="string">&quot;box-y&quot;</span> <span class="attr">align</span>=<span class="string">center</span> /&gt;</span></span><br><span class="line">&#123;% endgp %&#125;</span><br></pre></td></tr></table></figure><br><div class="note info modern"><p><code>gp 2-1</code> 即2张图按第1种格式排版。</p>
</div></p>
<div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">双图效果</button></li><li class="tab"><button type="button" data-href="#test4-2">实现代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><div class="note primary simple"><p>默认大小，gp 2-2 或者 gp 2-0 </p>
</div>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg" alt="box-x" align=center /></div><div class="group-picture-column" style="width: 50%;"><img src="https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg" alt="box-x" align=center /></div></div></div></div>
<div class="note primary simple"><p>自定义大小并调整位置使双图间无缝隙，gp 2-2 或者 gp 2-0 </p>
</div>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg" width = "250" alt="box-x" align=right /></div><div class="group-picture-column" style="width: 50%;"><img src="https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg" width = "250" alt="box-x" align=left /></div></div></div></div>
<div class="note primary simple"><p>gp 2-1 </p>
</div>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 100%;"><img src="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg" width = 40% align=center /></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 100%;"><img src="https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg" width = 40% align=center /></div></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><div class="note primary simple"><p>默认大小，gp 2-2 或者 gp 2-0 </p>
</div><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% gp 2-0 %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;box-x&quot;</span> <span class="attr">align</span>=<span class="string">center</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;box-x&quot;</span> <span class="attr">align</span>=<span class="string">center</span> /&gt;</span></span><br><span class="line">&#123;% endgp %&#125;</span><br></pre></td></tr></table></figure></p>
<p><div class="note primary simple"><p>自定义大小，gp 2-2 或者 gp 2-0 </p>
</div><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% gp 2-0 %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg&quot;</span> <span class="attr">width</span> = <span class="string">&quot;250&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;box-x&quot;</span> <span class="attr">align</span>=<span class="string">right</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg&quot;</span> <span class="attr">width</span> = <span class="string">&quot;250&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;box-x&quot;</span> <span class="attr">align</span>=<span class="string">left</span> /&gt;</span></span><br><span class="line">&#123;% endgp %&#125;</span><br></pre></td></tr></table></figure></p>
<p><div class="note primary simple"><p>gp 2-1 </p>
</div><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% gp 2-1 %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg&quot;</span> <span class="attr">width</span> = <span class="string">&quot;100&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;box-x&quot;</span>  <span class="attr">align</span>=<span class="string">center</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg&quot;</span> <span class="attr">width</span> = <span class="string">&quot;100&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;box-x&quot;</span>  <span class="attr">align</span>=<span class="string">center</span> /&gt;</span></span><br><span class="line">&#123;% endgp %&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">三图效果</button></li><li class="tab"><button type="button" data-href="#test4-2">实现方式</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><div class="note primary simple"><p>gp 3-1 </p>
</div>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg" alt="box-x" align=center /></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg" width=52% alt="box-x" align=center /></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg" width=52% alt="box-x" align=left /></div></div></div></div>

<div class="note primary simple"><p>gp 3-2 </p>
</div>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 100%;"><img src="https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg" width = 40% alt="box-x" align=center /></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg" width = 40% alt="box-x" align=right /></div><div class="group-picture-column" style="width: 50%;"><img src="https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg" width = 40% alt="box-x" align=left /></div></div></div></div>

<div class="note primary simple"><p>gp 3-3 </p>
</div>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg" width = 40% alt="box-x" align=right /></div><div class="group-picture-column" style="width: 50%;"><img src="https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg" width = 40% alt="box-x" align=left /></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 100%;"><img src="https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg" width = 40% alt="box-x" align=center /></div></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><div class="note primary simple"><p>gp 3-1 </p>
</div><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% gp 3-1 %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;box-x&quot;</span> <span class="attr">align</span>=<span class="string">center</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg&quot;</span> <span class="attr">width</span>=<span class="string">52%</span> <span class="attr">alt</span>=<span class="string">&quot;box-x&quot;</span> <span class="attr">align</span>=<span class="string">center</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg&quot;</span> <span class="attr">width</span>=<span class="string">52%</span> <span class="attr">alt</span>=<span class="string">&quot;box-x&quot;</span> <span class="attr">align</span>=<span class="string">left</span> /&gt;</span></span><br><span class="line">&#123;% endgp %&#125;</span><br></pre></td></tr></table></figure></p>
<p><div class="note primary simple"><p>gp 3-2 </p>
</div><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% gp 3-2 %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg&quot;</span> <span class="attr">width</span> = <span class="string">40%</span> <span class="attr">alt</span>=<span class="string">&quot;box-x&quot;</span> <span class="attr">align</span>=<span class="string">center</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg&quot;</span> <span class="attr">width</span> = <span class="string">40%</span> <span class="attr">alt</span>=<span class="string">&quot;box-x&quot;</span> <span class="attr">align</span>=<span class="string">right</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg&quot;</span> <span class="attr">width</span> = <span class="string">40%</span> <span class="attr">alt</span>=<span class="string">&quot;box-x&quot;</span> <span class="attr">align</span>=<span class="string">left</span> /&gt;</span></span><br><span class="line">&#123;% endgp %&#125;</span><br></pre></td></tr></table></figure></p>
<p><div class="note primary simple"><p>gp 3-3 </p>
</div><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% gp 3-3 %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg&quot;</span> <span class="attr">width</span> = <span class="string">40%</span> <span class="attr">alt</span>=<span class="string">&quot;box-x&quot;</span> <span class="attr">align</span>=<span class="string">right</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg&quot;</span> <span class="attr">width</span> = <span class="string">40%</span> <span class="attr">alt</span>=<span class="string">&quot;box-x&quot;</span> <span class="attr">align</span>=<span class="string">left</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg&quot;</span> <span class="attr">width</span> = <span class="string">40%</span> <span class="attr">alt</span>=<span class="string">&quot;box-x&quot;</span> <span class="attr">align</span>=<span class="string">center</span> /&gt;</span></span><br><span class="line">&#123;% endgp %&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">四图效果</button></li><li class="tab"><button type="button" data-href="#test4-2">实现代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><div class="note primary simple"><p>gp 4-1 </p>
</div>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 100%;"><img src="https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg" width = 40% align=center /></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg" width = 40% align=right /></div><div class="group-picture-column" style="width: 50%;"><img src="https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg" width = 40% align=left /></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 100%;"><img src="https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg" width = 40% align=center/></div></div></div></div>
<div class="note primary simple"><p>gp 4-2 </p>
</div>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 100%;"><img src="https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg" width = 60%align=center /></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg" width = 72% align=center /></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg" width = 72% align=center /></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg" align=center /></div></div></div></div>
<div class="note primary simple"><p>gp 4-3 </p>
</div>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg" width = 40% align=left /></div><div class="group-picture-column" style="width: 50%;"><img src="https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg" width = 40% align=right /></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg" width = 70% align=left /></div><div class="group-picture-column" style="width: 50%;"><img src="https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg" align=center /></div></div></div></div>
<div class="note primary simple"><p>gp 4-4 </p>
</div>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg"  width = 72% align=center /></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg"  width = 72% align=center /></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg" align=center /></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 100%;"><img src="https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg"  width = 50% align=center /></div></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><div class="note primary simple"><p>gp 4-1 </p>
</div>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% gp 4-1 %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg&quot;</span> <span class="attr">width</span> = <span class="string">40%</span> <span class="attr">align</span>=<span class="string">center</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg&quot;</span> <span class="attr">width</span> = <span class="string">40%</span> <span class="attr">align</span>=<span class="string">right</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg&quot;</span> <span class="attr">width</span> = <span class="string">40%</span> <span class="attr">align</span>=<span class="string">left</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg&quot;</span> <span class="attr">width</span> = <span class="string">40%</span> <span class="attr">align</span>=<span class="string">center</span> /&gt;</span></span><br><span class="line">&#123;% endgp %&#125;</span><br></pre></td></tr></table></figure>
<div class="note primary simple"><p>其他格式的代码你一定会自己写啦 </p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
]]></content>
      <categories>
        <category>工科生的基本功</category>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Library</tag>
      </tags>
  </entry>
  <entry>
    <title>外挂标签的使用</title>
    <url>/archives/f301cdf2.html</url>
    <content><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>外挂标签就是让自己的博客更加美观的一种自定义书写方式。关于外挂标签的说明可参考[<a href="https://hexo.io/zh-cn/api/tag">官方链接</a>]。 本文直接给出一个使用案例。</p>
<h1 id="2-添加阿里图标的使用案例"><a href="#2-添加阿里图标的使用案例" class="headerlink" title="2 添加阿里图标的使用案例"></a>2 添加阿里图标的使用案例</h1><p>关于该案例的详细说明可参考：<br><div class="site-card-group"><a class="site-card" href="https://akilar.top/posts/d2ebecef/"><div class="img"><img src="/images/20220815/d2ebecef.webp"/></div><div class="info"><img src="/images/20220815/favicon.ico"/><span class="title">Akilar</span><span class="desc">Iconfont Inject</span></div></a>
<a class="site-card" href="https://akilar.top/posts/e2bf861f/"><div class="img"><img src="/images/20220815/e2bf861f.webp"/></div><div class="info"><img src="/images/20220815/favicon.ico"/><span class="title">Akilar</span><span class="desc">DIY外挂标签的简单写法与应用</span></div></a></div></p>
<p>我这里直接说怎么做。做的步骤有四步：</p>
<ol>
<li>修改<code>themes/_config.yml</code>文件</li>
<li>添加 js 文件</li>
<li>添加 css 文件</li>
<li>使用该标签</li>
</ol>
<h2 id="2-1-修改themes-config-yml文件"><a href="#2-1-修改themes-config-yml文件" class="headerlink" title="2.1 修改themes/_config.yml文件"></a>2.1 修改<code>themes/_config.yml</code>文件</h2><p>该文件的主要目的是将自己写的 js 文件和 css 文件链接起来，找到如下内容：<br><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">inject:</span><br><span class="line">  head:</span><br><span class="line">    - &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/custom.css&quot;&gt;</span><br><span class="line">  bottom:</span><br><span class="line">    - &lt;script async src=&quot;//at.alicdn.com/t/font_2264842_3izu8i5eoc2.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><br>上述代码中<code>head</code>下用来添加css，<code>bottom</code>下用来添加 js。</p>
<h2 id="2-2-添加js文件"><a href="#2-2-添加js文件" class="headerlink" title="2.2 添加js文件"></a>2.2 添加js文件</h2><p>在<code>/themes/butterfly/scripts/tag/</code>目录下添加<code>icon.js</code>文件，然后在该文件内输入：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">iconFont</span>(<span class="params">args</span>) &#123;</span><br><span class="line">  args = args.<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>).<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">  <span class="keyword">let</span> p0 = args[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">let</span> p1 = args[<span class="number">1</span>]?args[<span class="number">1</span>]:<span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`&lt;svg class=&quot;icon&quot; style=&quot;width:<span class="subst">$&#123;p1&#125;</span>em; height:<span class="subst">$&#123;p1&#125;</span>em&quot; aria-hidden=&quot;true&quot;&gt;&lt;use xlink:href=&quot;#<span class="subst">$&#123;p0&#125;</span>&quot;&gt;&lt;/use&gt;&lt;/svg&gt;`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">tag</span>.<span class="title function_">register</span>(<span class="string">&#x27;icon&#x27;</span>,iconFont);</span><br></pre></td></tr></table></figure></p>
<h2 id="2-3-添加css文件"><a href="#2-3-添加css文件" class="headerlink" title="2.3 添加css文件"></a>2.3 添加css文件</h2><p>在<code>themes/butterfly/source/css/</code>目录下新建<code>custom.css</code>文件，再写入：<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">svg<span class="selector-class">.icon</span> &#123;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">1em</span>; <span class="attribute">height</span>: <span class="number">1em</span>;</span><br><span class="line">   <span class="comment">/* width和height定义图标的默认宽度和高度*/</span></span><br><span class="line">   <span class="attribute">vertical-align</span>: -<span class="number">0.15em</span>;</span><br><span class="line">   fill: currentColor;</span><br><span class="line">   <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="2-4-使用外挂标签"><a href="#2-4-使用外挂标签" class="headerlink" title="2.4 使用外挂标签"></a>2.4 使用外挂标签</h2><p><code>hexo clean &amp;&amp; hexo g</code>命令后就可以在博客中写了，示例：<br><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">&#123;% icon icon-ox<span class="emphasis">_chou,3 %&#125;&#123;% icon icon-ox,4 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-tiger_</span>yin,5 %&#125;&#123;% icon icon-tiger,6 %&#125;</span><br></pre></td></tr></table></figure><br>效果如下：</p>
<svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-ox_chou"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-ox"></use></svg>
<svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-tiger_yin"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-tiger"></use></svg>
<h1 id="3-关于外链标签的其他说明"><a href="#3-关于外链标签的其他说明" class="headerlink" title="3 关于外链标签的其他说明"></a>3 关于外链标签的其他说明</h1><p>为了正常使用外挂标签，需要在博客根目录下打开终端，运行：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-butterfly-tag-plugins-plus --save</span><br><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure><br>在<code>/themes/butterfly/_config.yml</code>中添加：<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tag-plugins-plus</span></span><br><span class="line"><span class="comment"># see https://akilar.top/posts/615e2dec/</span></span><br><span class="line"><span class="attr">tag_plugins:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开关</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">5</span> <span class="comment">#过滤器优先权</span></span><br><span class="line">  <span class="attr">issues:</span> <span class="literal">false</span> <span class="comment">#issues标签依赖注入开关</span></span><br><span class="line">  <span class="attr">link:</span></span><br><span class="line">    <span class="attr">placeholder:</span> <span class="string">/img/link.png</span> <span class="comment">#link_card标签默认的图标图片</span></span><br><span class="line">  <span class="attr">CDN:</span></span><br><span class="line">    <span class="attr">anima:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-tag-plugins-plus@latest/lib/assets/font-awesome-animation.min.css</span> <span class="comment">#动画标签anima的依赖</span></span><br><span class="line">    <span class="attr">jquery:</span> <span class="string">https://npm.elemecdn.com/jquery@latest/dist/jquery.min.js</span> <span class="comment">#issues标签依赖</span></span><br><span class="line">    <span class="attr">issues:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-tag-plugins-plus@latest/lib/assets/issues.js</span> <span class="comment">#issues标签依赖</span></span><br><span class="line">    <span class="attr">iconfont:</span> <span class="string">//at.alicdn.com/t/font_2032782_8d5kxvn09md.js</span> <span class="comment">#参看https://akilar.top/posts/d2ebecef/</span></span><br><span class="line">    <span class="attr">carousel:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-tag-plugins-plus@latest/lib/assets/carousel-touch.js</span></span><br><span class="line">    <span class="attr">tag_plugins_css:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-tag-plugins-plus@latest/lib/tag_plugins.css</span></span><br></pre></td></tr></table></figure><br>关于上述代码的解释可参考：</p>
<div class="tag link"><a class="link-card" title="糖果屋：Tag Plugins Plus" href="https://akilar.top/posts/615e2dec/"><div class="left"><img src="/images/20220815/favicon.ico"/></div><div class="right"><p class="text">糖果屋：Tag Plugins Plus</p><p class="url">https://akilar.top/posts/615e2dec/</p></div></a></div>
<p>再挂一个外挂标签的参考链接：<br><div class="tag link"><a class="link-card" title="唐志远の博客" href="https://tzy1997.com/articles/0xiipgum"><div class="left"><img src="https://bu.dusays.com/2022/01/14/21dcbc47444ab.jpg"/></div><div class="right"><p class="text">唐志远の博客</p><p class="url">https://tzy1997.com/articles/0xiipgum</p></div></a></div></p>
<p>修改最后的版权说明（<span class='p red'>可以覆写作者、链接等信息</span>）：<br><div class="tag link"><a class="link-card" title="（二创）Copyright-beautify" href="https://akilar.top/posts/8322f8e6"><div class="left"><img src="/images/20220815/favicon.ico"/></div><div class="right"><p class="text">（二创）Copyright-beautify</p><p class="url">https://akilar.top/posts/8322f8e6</p></div></a></div></p>
]]></content>
      <categories>
        <category>工科生的基本功</category>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Library</tag>
      </tags>
  </entry>
  <entry>
    <title>Pytorch 学习笔记（梯度的求取）</title>
    <url>/archives/c12048c3.html</url>
    <content><![CDATA[<!-- <img src=" /images/20191023/00.png" width=50% /> -->
<p>记录pytorch中 backward() 方法，学习pytorch中求导的方法。</p>
<span id="more"></span>
<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>神经网络求导，一种是针对神经网络参数的求导，一种是针对输入的求导。</p>
<p>标量 $y$ 对向量 $x = [x_1,x_2,\cdots,x_m]^\text{T}$ 求导：</p>
<script type="math/tex; mode=display">
\frac{\partial y}{\partial x} = \begin{bmatrix}
 \frac{\partial y}{\partial x_1}\\
 \frac{\partial y}{\partial x_2}\\
 \vdots \\
 \frac{\partial y}{\partial x_m}
\end{bmatrix}</script><p>向量 $y=[y_1, y_2, \cdots, y_n]^\text{T}$ 对标量 $x$ 求导，有：</p>
<script type="math/tex; mode=display">
\frac{\partial y}{\partial x} = \begin{bmatrix}
 \frac{\partial y_1}{\partial x} & \frac{\partial y_2}{\partial x} & \cdots & \frac{\partial y_n}{\partial x}
\end{bmatrix}</script><p>向量 $y=[y_1, y_2, \cdots, y_n]^\text{T}$ 对向量 $x = [x_1,x_2,\cdots,x_m]^\text{T}$ 求导，有：</p>
<script type="math/tex; mode=display">
\frac{\partial {y}}{\partial {x}}=\begin{bmatrix}
 \frac{\partial y_1}{\partial x} & \frac{\partial y_2}{\partial x} & \cdots & \frac{\partial y_n}{\partial x}
\end{bmatrix}
=\left[\begin{array}{cccc}
\frac{\partial y_{1}}{\partial x_{1}} & \frac{\partial y_{2}}{\partial x_{1}} & \cdots & \frac{\partial y_{n}}{\partial x_{1}} \\
\frac{\partial y_{1}}{\partial x_{2}} & \frac{\partial y_{2}}{\partial x_{2}} & \cdots & \frac{\partial y_{n}}{\partial x_{2}} \\
\vdots & \vdots & \ddots & \vdots \\
\frac{\partial y_{1}}{\partial x_{n}} & \frac{\partial y_{2}}{\partial x_{n}} & \cdots & \frac{\partial y_{n}}{\partial x_{m}}
\end{array}\right]</script><h1 id="2-Tensor再认识"><a href="#2-Tensor再认识" class="headerlink" title="2 Tensor再认识"></a>2 Tensor再认识</h1><p>因为pytorch中所有的计算都可以回归到Tensor上，所以重新认识一下Tensor。 Tensor中通常会记录如下的属性：</p>
<ul>
<li>data: 即存储的数据信息</li>
<li>requires_grad: 设置为 True 则表示该 Tensor 需要求导</li>
<li>grad: 该 Tensor 的梯度值，每次在计算 backward 时需要将前一时刻的梯度清零，否则梯度会一直累加。</li>
<li>grad_fn: 叶子节点通常为 None，只有结果节点的 grad_fn 才有效，用于指示梯度函数时哪种类型。</li>
<li>is_leaf: 用来指示该 Tensor 是否是叶子节点。可以简单认为，自己定义的变量是叶子节点，在此基础上进行的计算则为中间量/最终量，也就是结果节点。</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">x = torch.rand(<span class="number">3</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">y = x**<span class="number">2</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/20220814/01.png" alt="1"></p>
<h1 id="2-梯度计算"><a href="#2-梯度计算" class="headerlink" title="2 梯度计算"></a>2 梯度计算</h1><h2 id="2-1-backward"><a href="#2-1-backward" class="headerlink" title="2.1 backward()"></a>2.1 backward()</h2><p>源码中关于 backward() 的接口定义如下：<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">torch.autograd.backward(tensors, </span><br><span class="line">                        grad_tensors=<span class="literal">None</span>, </span><br><span class="line">                        retain_graph=<span class="literal">None</span>, </span><br><span class="line">                        create_graph=<span class="literal">False</span>, </span><br><span class="line">                        grad_variables=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><br>参数说明：</p>
<ul>
<li>tensor: 用于计算梯度的tensor。也就是说这两种方式是等价的：torch.autograd.backward(z) == z.backward()</li>
<li>grad_tensors: 在计算矩阵的梯度时会用到。他其实也是一个tensor，shape一般需要和前面的tensor保持一致。</li>
<li>retain_graph: 通常在调用一次backward后，pytorch会自动把计算图销毁，所以要想对某个变量重复调用backward，则需要将该参数设置为True</li>
<li>create_graph: 当设置为True的时候可以用来计算更高阶的梯度</li>
<li>grad_variables: 这个官方说法是grad_variables’ is deprecated. Use ‘grad_tensors’ instead.也就是说这个参数后面版本中应该会丢弃，直接使用grad_tensors就好了。</li>
</ul>
<h2 id="2-2-标量的梯度计算"><a href="#2-2-标量的梯度计算" class="headerlink" title="2.2 标量的梯度计算"></a>2.2 标量的梯度计算</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">x = torch.tensor(<span class="number">2.0</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">y = torch.tensor(<span class="number">3.0</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">z = x**<span class="number">3</span>+<span class="number">2</span>*y</span><br><span class="line">z.backward()</span><br><span class="line"><span class="built_in">print</span>(z, x.grad, y.grad)</span><br></pre></td></tr></table></figure>
<p>输出结果：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tensor(14., grad_fn=&lt;AddBackward0&gt;) tensor(12.) tensor(2.)</span><br></pre></td></tr></table></figure><br>不严谨地讲，上述代码定义了一个函数：</p>
<script type="math/tex; mode=display">
z = x^3 + 2y</script><p>对其求梯度，有：</p>
<script type="math/tex; mode=display">
\begin{align*}
\frac{\partial z}{\partial x} &= 3x^2 \\
\frac{\partial z}{\partial y} &= 2
\end{align*}</script><p>因为上述代码中 z 是一个标量，所以调用 backward() 方法后会依据链式法则自动计算出叶子节点(x=2, y=3)的梯度值。简单代入即可验证计算的正确性。</p>
<h2 id="2-3-矩阵的梯度计算"><a href="#2-3-矩阵的梯度计算" class="headerlink" title="2.3 矩阵的梯度计算"></a>2.3 矩阵的梯度计算</h2><p>pytorch不能直接用来求一个矩阵对另一矩阵的导数，会报 <strong>只有对标量输出才能显式计算梯度</strong> 的错误。考虑如下的一个矩阵计算：</p>
<script type="math/tex; mode=display">
\begin{align*}
x&=\begin{bmatrix}
x_1 & x_2 \\
\end{bmatrix},
y=\begin{bmatrix}
y_1 & y_2 \\
y_3 & y_4 \\
\end{bmatrix}\\
z&=xy
=\begin{bmatrix}
x_1 & x_2 \\
\end{bmatrix}\begin{bmatrix}
y_1 & y_2 \\
y_3 & y_4 \\
\end{bmatrix}
=\begin{bmatrix}
x_1y_1 + x_2y_3 & x_1y_2 + x_2y_4 \\
\end{bmatrix}=\begin{bmatrix}
z_1 & z_2 \\
\end{bmatrix}

\end{align*}</script><p>因为 $z$ 不再是一个标量，因此不能直接求导了，而矩阵求导本质上仍为标量求导，只不过结果进行了重新书写，为了后续的计算。为了将这个结果变为标量进行求导，就引入了 <code>grad_tensors</code> 这个变量。例如：<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">x = torch.tensor([<span class="number">2.</span>, <span class="number">1.</span>], requires_grad=<span class="literal">True</span>)</span><br><span class="line">y = torch.tensor([[<span class="number">1.</span>, <span class="number">2.</span>], [<span class="number">3.</span>, <span class="number">4.</span>]], requires_grad=<span class="literal">True</span>)</span><br><span class="line">z = torch.mm(x.view(<span class="number">1</span>, <span class="number">2</span>), y)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;z:<span class="subst">&#123;z&#125;</span>&quot;</span>)</span><br><span class="line">z.backward(torch.Tensor([[<span class="number">1.</span>, <span class="number">0</span>]]), retain_graph=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;x.grad: <span class="subst">&#123;x.grad&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;y.grad: <span class="subst">&#123;y.grad&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><br>输出结果：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">z:tensor([[5., 8.]], grad_fn=&lt;MmBackward0&gt;)</span><br><span class="line">x.grad: tensor([1., 3.])</span><br><span class="line">y.grad: tensor([[2., 0.],</span><br><span class="line">        [1., 0.]])</span><br></pre></td></tr></table></figure></p>
<script type="math/tex; mode=display">
\begin{align*}
x&=\begin{bmatrix}
2 & 1 \\
\end{bmatrix},
y=\begin{bmatrix}
1 & 2 \\
3 & 4 \\
\end{bmatrix}\\
z&=xy=\begin{bmatrix}
5 & 8 \\
\end{bmatrix}        
\end{align*}</script><p>上述代码在对z求梯度的时候，<code>grad_tensors=torch.Tensor([[1., 0]])</code>。它将z变为一个标量，其实际计算过程即：</p>
<script type="math/tex; mode=display">
\begin{bmatrix}
z_1 & z_2 \\
\end{bmatrix}\circ \begin{bmatrix}
1 & 0 \\
\end{bmatrix}=z_1\times1+z_2\times0=z_1</script><p>而</p>
<script type="math/tex; mode=display">
\begin{align*}
\frac{\partial z_1}{\partial x} &= \begin{bmatrix}
y_1 & y_3 \\
\end{bmatrix}= \begin{bmatrix}
1 & 3 \\
\end{bmatrix}\\
\frac{\partial z_1}{\partial y} &= \begin{bmatrix}
x_1 & 0 \\
x_2 & 0
\end{bmatrix}= \begin{bmatrix}
2 & 0 \\
1 & 0
\end{bmatrix}        
\end{align*}</script><p>同理，对于矩阵：</p>
<script type="math/tex; mode=display">
\begin{align*}
x&=\begin{bmatrix}
x_1 & x_2 \\
x_3 & x_4 \\
\end{bmatrix},
y=\begin{bmatrix}
y_1 & y_2 \\
y_3 & y_4 \\
\end{bmatrix}\\
z&=xy
=\begin{bmatrix}
x_1 & x_2 \\
x_3 & x_4 \\
\end{bmatrix}\begin{bmatrix}
y_1 & y_2 \\
y_3 & y_4 \\
\end{bmatrix}
=\begin{bmatrix}
x_1y_1 + x_2y_3 & x_1y_2 + x_2y_4 \\
x_3y_1 + x_4y_3 & x_3y_2 + x_4y_4 \\
\end{bmatrix}=\begin{bmatrix}
z_1 & z_2 \\
z_3 & z_4 \\
\end{bmatrix}

\end{align*}</script><p>选择 <code>grad_tensors=torch.ones_like(x)=[[1, 1], [1, 1]]</code>，则计算过程为：</p>
<script type="math/tex; mode=display">
V=\begin{bmatrix}
z_1 & z_2 \\
z_3 & z_4 \\
\end{bmatrix}\circ \begin{bmatrix}
1 & 1 \\
1 & 1 \\
\end{bmatrix}=z_1\times1+z_2\times1+z_3\times1+z_4\times1=z_1+z_2+z_3+z_4</script><p>求导，有：</p>
<script type="math/tex; mode=display">
\begin{align*}
\frac{\partial V}{\partial x} &= \begin{bmatrix}
y_1+y_2 & y_3+y_4 \\
y_1+y_2 & y_3+y_4 \\
\end{bmatrix}\\
\frac{\partial V}{\partial y} &= \begin{bmatrix}
x_1+x_3 & x_1+x_3 \\
x_2+x_4 & x_2+x_4 \\
\end{bmatrix}
\end{align*}</script><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">x = torch.tensor([<span class="number">2.</span>, <span class="number">1.</span>, <span class="number">4.</span>, <span class="number">3.</span>], requires_grad=<span class="literal">True</span>)</span><br><span class="line">y = torch.tensor([[<span class="number">1.</span>, <span class="number">2.</span>], [<span class="number">3.</span>, <span class="number">4.</span>]], requires_grad=<span class="literal">True</span>)</span><br><span class="line">z = torch.mm(x.view(<span class="number">2</span>, <span class="number">2</span>), y)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;z:<span class="subst">&#123;z&#125;</span>&quot;</span>)</span><br><span class="line">z.backward(torch.Tensor([[<span class="number">1.</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">1</span>]]), retain_graph=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;x.grad: <span class="subst">&#123;x.grad&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;y.grad: <span class="subst">&#123;y.grad&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">z:tensor([[ 5.,  8.],</span><br><span class="line">        [13., 20.]], grad_fn=&lt;MmBackward0&gt;)</span><br><span class="line">x.grad: tensor([3., 7., 3., 7.])</span><br><span class="line">y.grad: tensor([[6., 6.],</span><br><span class="line">        [4., 4.]])</span><br></pre></td></tr></table></figure>
<p>选择 <code>grad_tensors=torch.ones_like(x)=[[1, 5], [3, 9]]</code>，则计算过程为：</p>
<script type="math/tex; mode=display">
V=\begin{bmatrix}
z_1 & z_2 \\
z_3 & z_4 \\
\end{bmatrix}\circ \begin{bmatrix}
1 & 5 \\
3 & 9 \\
\end{bmatrix}=z_1+5z_2+3z_3+9z_4</script><p>求导，有：</p>
<script type="math/tex; mode=display">
\begin{align*}
\frac{\partial V}{\partial x} &= \begin{bmatrix}
y_1+5y_2 & y_3+5y_4 \\
3y_1+9y_2 & 3y_3+9y_4 \\
\end{bmatrix}= \begin{bmatrix}
1+5\times2 & 3+5\times4 \\
3\times1+9\times2 & 3\times3+9\times4 \\
\end{bmatrix}\\
\frac{\partial V}{\partial y} &= \begin{bmatrix}
x_1+3x_3 & 5x_1+9x_3 \\
x_2+3x_4 & 5x_2+9x_4 \\
\end{bmatrix} = \begin{bmatrix}
2+3\times4 & 5\times2+9\times4 \\
1+3\times3 & 5\times1+9\times3 \\
\end{bmatrix}
\end{align*}</script><p>验证结果：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">x.grad: tensor([11., 23., 21., 45.])</span><br><span class="line">y.grad: tensor([[14., 46.],</span><br><span class="line">        [10., 32.]])</span><br></pre></td></tr></table></figure></p>
<h1 id="3-函数求导示例"><a href="#3-函数求导示例" class="headerlink" title="3 函数求导示例"></a>3 函数求导示例</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.autograd <span class="keyword">import</span> Variable <span class="keyword">as</span> V</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;x^2 * e^x&quot;&quot;&quot;</span></span><br><span class="line">    y = x**<span class="number">2</span> * torch.exp(x)</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gradf</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;2*x*e^x + x^2*e^x&quot;&quot;&quot;</span></span><br><span class="line">    dx = <span class="number">2</span>*x*torch.exp(x) + x**<span class="number">2</span>*torch.exp(x)</span><br><span class="line">    <span class="keyword">return</span> dx</span><br><span class="line"></span><br><span class="line">x = V(torch.randn(<span class="number">3</span>,<span class="number">4</span>), requires_grad=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x, <span class="built_in">type</span>(x), x.shape)</span><br><span class="line">y = f(x)</span><br><span class="line">y.backward(torch.ones(y.size()))</span><br><span class="line"><span class="built_in">print</span>(x.grad)</span><br><span class="line"><span class="built_in">print</span>(gradf(x))</span><br></pre></td></tr></table></figure>
<p>结果为：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tensor([[ 1.0985, -0.0066,  2.4466, -0.2702],</span><br><span class="line">        [ 0.8466, -0.2120,  1.3101,  1.0119],</span><br><span class="line">        [-0.1750, -0.3442, -0.5999,  0.9945]], requires_grad=True) &lt;class <span class="string">&#x27;torch.Tensor&#x27;</span>&gt; torch.Size([3, 4])</span><br><span class="line">tensor([[ 1.0211e+01, -1.3000e-02,  1.2565e+02, -3.5673e-01],</span><br><span class="line">        [ 5.6190e+00, -3.0664e-01,  1.6073e+01,  8.3833e+00],</span><br><span class="line">        [-2.6812e-01, -4.0395e-01, -4.6100e-01,  8.0503e+00]])</span><br><span class="line">tensor([[ 1.0211e+01, -1.3000e-02,  1.2565e+02, -3.5673e-01],</span><br><span class="line">        [ 5.6190e+00, -3.0664e-01,  1.6073e+01,  8.3833e+00],</span><br><span class="line">        [-2.6812e-01, -4.0395e-01, -4.6100e-01,  8.0503e+00]],</span><br><span class="line">       grad_fn=&lt;AddBackward0&gt;)</span><br></pre></td></tr></table></figure><br>可以看到，两种求导的结果一致。</p>
<h1 id="4-Jacobian-示例"><a href="#4-Jacobian-示例" class="headerlink" title="4 Jacobian 示例"></a>4 Jacobian 示例</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.autograd.functional <span class="keyword">import</span> jacobian</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># define a function</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x ** <span class="number">3</span> + <span class="number">4</span> * x - <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># define the inputs</span></span><br><span class="line">input1 = torch.tensor([<span class="number">2.</span>], requires_grad=<span class="literal">True</span>)  <span class="comment"># 如果只是用jacobian的方式，不用 requires_grad=True</span></span><br><span class="line">input2 = torch.tensor([<span class="number">2.</span>, <span class="number">3.</span>], requires_grad=<span class="literal">True</span>)</span><br><span class="line">input3 = torch.tensor([<span class="number">2.</span>, <span class="number">3.</span>, <span class="number">4.</span>], requires_grad=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># compute the jacobians</span></span><br><span class="line">y = func(input1)</span><br><span class="line">y.backward(torch.ones(y.size()))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;backward grad:\n&quot;</span>, input1.grad)</span><br><span class="line">output1 = jacobian(func, input1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Jacobian Tensor:\n&quot;</span>, output1)</span><br><span class="line"></span><br><span class="line">y=func(input2)</span><br><span class="line">y.backward(torch.ones(y.size()))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nbackward grad:\n&quot;</span>, input2.grad)</span><br><span class="line">output2 = jacobian(func, input2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Jacobian Tensor:\n&quot;</span>, output2)</span><br><span class="line"></span><br><span class="line">y=func(input3)</span><br><span class="line">y.backward(torch.ones(y.size()))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nbackward grad:\n&quot;</span>, input3.grad)</span><br><span class="line">output3 = jacobian(func, input3)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Jacobian Tensor:\n&quot;</span>, output3)</span><br></pre></td></tr></table></figure>
<p>输出结果：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">backward grad:</span><br><span class="line"> tensor([16.])</span><br><span class="line">Jacobian Tensor:</span><br><span class="line"> tensor([[16.]])</span><br><span class="line"></span><br><span class="line">backward grad:</span><br><span class="line"> tensor([16., 31.])</span><br><span class="line">Jacobian Tensor:</span><br><span class="line"> tensor([[16.,  0.],</span><br><span class="line">        [ 0., 31.]])</span><br><span class="line"></span><br><span class="line">backward grad:</span><br><span class="line"> tensor([16., 31., 52.])</span><br><span class="line">Jacobian Tensor:</span><br><span class="line"> tensor([[16.,  0.,  0.],</span><br><span class="line">        [ 0., 31.,  0.],</span><br><span class="line">        [ 0.,  0., 52.]])</span><br></pre></td></tr></table></figure></p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/83172023">https://zhuanlan.zhihu.com/p/83172023</a></li>
<li><a href="https://www.cxyzjd.com/article/weixin_33825683/86443410">https://www.cxyzjd.com/article/weixin_33825683/86443410</a></li>
</ol>
]]></content>
      <categories>
        <category>人工智能</category>
        <category>神经网络</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>cmake生成动态链接库并调用</title>
    <url>/archives/fa516be2.html</url>
    <content><![CDATA[<p>本文记录了使用cmake生成动态链接库并调用的方法。<br><span id="more"></span></p>
<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>不同工程之间经常会使用到动态链接库以方便调用，这里记录下相应的cmake实现方法。本文用两个同级下的文件夹表示两个工程，其中 <em>Generate_lib</em> 用来生成对应的动态链接库，<em>Use_lib</em> 用来调用前面生成的动态链接库。</p>
<h1 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2 代码实现"></a>2 代码实现</h1><h2 id="2-1-Generate-lib-文件夹"><a href="#2-1-Generate-lib-文件夹" class="headerlink" title="2.1 Generate_lib 文件夹"></a>2.1 Generate_lib 文件夹</h2><p>创建 <em>Generate_lib</em> 文件夹，其目录如下所示：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── build</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">├── include</span><br><span class="line">│   └── hello.h</span><br><span class="line">└── src</span><br><span class="line">    └── hello.cpp</span><br></pre></td></tr></table></figure></p>
<h3 id="2-1-1-CMakeLists-txt文件"><a href="#2-1-1-CMakeLists-txt文件" class="headerlink" title="2.1.1 CMakeLists.txt文件"></a>2.1.1 CMakeLists.txt文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required (VERSION 2.6)</span><br><span class="line">project(hello)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成动态库(SHARED)</span></span><br><span class="line">add_library(hello SHARED <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/hello.cpp)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装文件到目录下</span></span><br><span class="line">install(TARGETS hello LIBRARY DESTINATION <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)</span><br><span class="line">install(FILES <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/include/hello.h DESTINATION <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib_include)</span><br></pre></td></tr></table></figure>
<h3 id="2-1-2-hello-h-文件"><a href="#2-1-2-hello-h-文件" class="headerlink" title="2.1.2 hello.h 文件"></a>2.1.2 hello.h 文件</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> HELLO_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HELLO_H</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hello</span><span class="params">()</span></span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<h3 id="2-1-3-hello-cpp-文件"><a href="#2-1-3-hello-cpp-文件" class="headerlink" title="2.1.3 hello.cpp 文件"></a>2.1.3 hello.cpp 文件</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;../include/hello.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;hello world!\n&quot;</span> &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;This is Generate_lib path!\n&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-1-4-编译方法"><a href="#2-1-4-编译方法" class="headerlink" title="2.1.4 编译方法"></a>2.1.4 编译方法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<p>编译完后文件夹目录变为：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── build</span><br><span class="line">│   ├── CMakeCache.txt</span><br><span class="line">│   ├── CMakeFiles</span><br><span class="line">│   ├── cmake_install.cmake</span><br><span class="line">│   ├── install_manifest.txt</span><br><span class="line">│   ├── libhello.so</span><br><span class="line">│   └── Makefile</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">├── Generate_lib.txt</span><br><span class="line">├── include</span><br><span class="line">│   └── hello.h</span><br><span class="line">├── lib</span><br><span class="line">│   └── libhello.so</span><br><span class="line">├── lib_include</span><br><span class="line">│   └── hello.h</span><br><span class="line">└── src</span><br><span class="line">    └── hello.cpp</span><br><span class="line"></span><br><span class="line">6 directories, 11 files</span><br></pre></td></tr></table></figure><br>其中 lib 库中包含了生成的动态链接库，lib_include 文件夹包含了对应的头文件。</p>
<h2 id="2-2-Use-lib-文件夹"><a href="#2-2-Use-lib-文件夹" class="headerlink" title="2.2 Use_lib 文件夹"></a>2.2 Use_lib 文件夹</h2><p>创建 <em>Use_lib</em> 文件夹，目录如下：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── build</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">└── usehellolib.cpp</span><br></pre></td></tr></table></figure></p>
<h3 id="2-2-1-CMakeLists-txt-文件"><a href="#2-2-1-CMakeLists-txt-文件" class="headerlink" title="2.2.1 CMakeLists.txt 文件"></a>2.2.1 CMakeLists.txt 文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required (VERSION 2.6)</span><br><span class="line">project(usehellolib)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 头文件目录</span></span><br><span class="line">include_directories(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/../Generate_lib/lib_include)</span><br><span class="line">message(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>)</span><br><span class="line"><span class="comment"># 生成可执行文件</span></span><br><span class="line">add_executable(usehellolib usehellolib.cpp)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 链接库到可执行文件</span></span><br><span class="line">target_link_libraries(usehellolib <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/../Generate_lib/lib/libhello.so)</span><br></pre></td></tr></table></figure>
<h3 id="2-2-2-usehellolib-cpp"><a href="#2-2-2-usehellolib-cpp" class="headerlink" title="2.2.2 usehellolib.cpp"></a>2.2.2 usehellolib.cpp</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;hello.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;Here is USE_LIB path!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">  <span class="built_in">hello</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-2-3-编译方法"><a href="#2-2-3-编译方法" class="headerlink" title="2.2.3 编译方法"></a>2.2.3 编译方法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br><span class="line">./usehellolib</span><br></pre></td></tr></table></figure>
<p>运行结果如下：<br><img src="/images/20220813/01.png" alt="1"></p>
<h1 id="3-CMakeLists-txt中的指令介绍"><a href="#3-CMakeLists-txt中的指令介绍" class="headerlink" title="3 CMakeLists.txt中的指令介绍"></a>3 CMakeLists.txt中的指令介绍</h1><p>第2节的代码运行结果表明 <em>Generate_lib</em> 文件夹下已经生成了动态链接库 <code>libhello.so</code>，并将其安装在了 <em>Generate_lib/lib</em> 目录下。 <em>Use_lib</em> 文件夹中调用了这个链接库。接下来分析一下 CMakeLists.txt 中的内容。</p>
<h2 id="3-1-add-library"><a href="#3-1-add-library" class="headerlink" title="3.1 add_library"></a>3.1 add_library</h2><p><code>add_library</code> 的原型参考[<a href="https://cmake.org/cmake/help/latest/command/add_library.html">官方链接</a>][<a href="https://blog.csdn.net/mataojie/article/details/121466125">参考链接2</a>]，这里只介绍 <strong>Normal Libraries</strong> 一种，后面的用到时再补充。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">add_library(&lt;name&gt; [STATIC | SHARED | MODULE]</span><br><span class="line">            [EXCLUDE_FROM_ALL]</span><br><span class="line">            [source1] [source2 ...])</span><br></pre></td></tr></table></figure></p>
<ul>
<li><code>name</code>：添加名为<code>name</code>的库，必须全局唯一，不能重复。</li>
<li><code>[STATIC | SHARED | MODULE]</code>：生成的library名会根据<code>STATIC</code>或<code>SHARED</code>成为<code>libname.a</code>或<code>libname.so</code>。这里也可以不设置，通过全局的<code>BUILD_SHARED_LIBS</code>的<code>FALSE</code>或<code>TRUE</code>来指定。</li>
<li><code>EXCLUDE_FROM_ALL</code>：加了EXCLUDE_FROM_ALL属性的target在默认编译的时候，不会被编译，如果要编译它们，需要手动编译。</li>
<li><code>[source1]</code>：库的源文件可指定，也可用<code>target_sources()</code>后续指定。<br>本文中使用为：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">add_library(hello SHARED <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/hello.cpp)</span><br></pre></td></tr></table></figure>
其中 <code>$&#123;PROJECT_SOURCE_DIR&#125;</code>表示当前工程路径，也就是本项目中CMakeLists.txt所在的文件夹。</li>
</ul>
<h2 id="3-2-install"><a href="#3-2-install" class="headerlink" title="3.2 install"></a>3.2 install</h2><p>install用于指定在安装时运行的规则。它可以用来安装很多内容，可以包括目标二进制、动态库、静态库以及文件、目录、脚本等。有时候，也会用到一个非常有用的变量<code>CMAKE_INSTALL_PREFIX</code>，用于指定cmake install时的相对地址前缀。用法如：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在编译的时候加参数指定</span></span><br><span class="line">cmake -DCMAKE_INSTALL_PREFIX=/usr ..</span><br><span class="line"><span class="comment"># 在文件中指定</span></span><br><span class="line"><span class="built_in">set</span>(CMAKE_INSTALL_PREFIX /usr/bin)</span><br></pre></td></tr></table></figure></p>
<h3 id="3-2-1-目标文件"><a href="#3-2-1-目标文件" class="headerlink" title="3.2.1 目标文件"></a>3.2.1 目标文件</h3><p>目标文件在<code>install</code>命令中以 <strong>TARGETS</strong> 表示。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">install(TARGETS targets... [EXPORT &lt;export-name&gt;]</span><br><span class="line">        [[ARCHIVE|LIBRARY|RUNTIME|OBJECTS|FRAMEWORK|BUNDLE|PRIVATE_HEADER|PUBLIC_HEADER|RESOURCE]</span><br><span class="line">         [DESTINATION &lt;<span class="built_in">dir</span>&gt;]</span><br><span class="line">         [PERMISSIONS permissions...]</span><br><span class="line">         [CONFIGURATIONS [Debug|Release|...]]</span><br><span class="line">         [COMPONENT &lt;component&gt;]</span><br><span class="line">         [NAMELINK_COMPONENT &lt;component&gt;]</span><br><span class="line">         [OPTIONAL] [EXCLUDE_FROM_ALL]</span><br><span class="line">         [NAMELINK_ONLY|NAMELINK_SKIP]</span><br><span class="line">        ] [...]</span><br><span class="line">        [INCLUDES DESTINATION [&lt;<span class="built_in">dir</span>&gt; ...]]</span><br><span class="line"> )</span><br></pre></td></tr></table></figure><br>参数介绍：</p>
<ol>
<li>targets：目标文件名</li>
<li>目标文件类型及属性：<ul>
<li>目标文件类型：<ul>
<li>ARCHIVE：静态库</li>
<li>LIBRARY：动态库</li>
<li>RUNTIME：可执行二进制文件</li>
<li>PUBLIC_HEADER：与库关联的PUBLIC头文件</li>
<li>PRIVATE_HEADER：与库关联的PRIVATE头文件</li>
</ul>
</li>
<li>DESTINATION：指定磁盘上要安装文件的目录；</li>
<li>PERMISSIONS：指定安装文件的权限;有效权限: <ul>
<li>OWNER_READ</li>
<li>OWNER_WRITE</li>
<li>OWNER_EXECUTE</li>
<li>GROUP_READ</li>
<li>GROUP_WRITE</li>
<li>GROUP_EXECUTE</li>
<li>WORLD_READ</li>
<li>WORLD_WRITE</li>
<li>WORLD_EXECUTE</li>
<li>SETUID</li>
<li>SETGID</li>
</ul>
</li>
<li>CONFIGURATIONS：指定安装规则适用的构建配置列表(DEBUG或RELEASE等)；</li>
<li>COMPONENT：指定了该安装规则相关的一个安装部件的名字，如“runtime”；</li>
<li>EXCLUDE_FROM_ALL：指定该文件从完整安装中排除，仅作为特定于组件的安装的一部分进行安装；</li>
<li>OPTIONAL：如果要安装的文件不存在，则指定不是错误。</li>
</ul>
</li>
</ol>
<p>本文中的使用：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">install(TARGETS hello LIBRARY DESTINATION <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)</span><br></pre></td></tr></table></figure><br>上述指令将生成的<code>hello</code>链接库安装到<code>$&#123;PROJECT_SOURCE_DIR&#125;/lib</code>目录。</p>
<h3 id="3-2-2-普通文件"><a href="#3-2-2-普通文件" class="headerlink" title="3.2.2 普通文件"></a>3.2.2 普通文件</h3><p>目标文件以<code>FILES</code>或<code>PROGRAMS</code>指示。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">install(&lt;FILES|PROGRAMS&gt; files...</span><br><span class="line">        TYPE &lt;<span class="built_in">type</span>&gt; | DESTINATION &lt;<span class="built_in">dir</span>&gt;</span><br><span class="line">        [PERMISSIONS permissions...]</span><br><span class="line">        [CONFIGURATIONS [Debug|Release|...]]</span><br><span class="line">        [COMPONENT &lt;component&gt;]</span><br><span class="line">        [RENAME &lt;name&gt;] [OPTIONAL] [EXCLUDE_FROM_ALL])</span><br></pre></td></tr></table></figure><br>参数介绍：</p>
<ul>
<li><FILES|PROGRAMS>：<ul>
<li>FILES：为普通文件</li>
<li>PROGRAMS：指的是非目标文件的可执行程序(如脚本文件)</li>
</ul>
</li>
<li>TYPE：输入TYPE 不需要填写DESTINATION，使用默认的路径</li>
<li>RENAME：指定已安装文件的名称。仅当命令安装了单个文件时，才允许重命名。<br>其余参数同上节介绍。</li>
</ul>
<p>在本文中的使用：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">install(FILES <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/include/hello.h DESTINATION <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib_include)</span><br></pre></td></tr></table></figure><br>将<code>hello.h</code>头文件安装到<code>$&#123;PROJECT_SOURCE_DIR&#125;/lib_include</code>目录。</p>
<blockquote>
<p>此外，<code>install</code>命令针对 目录、脚本，以及export的用法可参考[<a href="https://blog.csdn.net/qq_25439881/article/details/104457021">链接</a>].</p>
</blockquote>
<h2 id="3-3-add-executable"><a href="#3-3-add-executable" class="headerlink" title="3.3 add_executable"></a>3.3 add_executable</h2><p>使用指定的源文件来生成目标可执行文件。这里的目标可执行文件分为三类：普通可执行目标文件、导入可执行目标文件、别名可执行目标文件。分别对应下面的三种命令格式。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">add_executable (&lt;name&gt; [WIN32] [MACOSX_BUNDLE]</span><br><span class="line">      [EXCLUDE_FROM_ALL]</span><br><span class="line">      [source1] [source2 ...])</span><br><span class="line">add_executable (&lt;name&gt; IMPORTED [GLOBAL])</span><br><span class="line">add_executable (&lt;name&gt; ALIAS &lt;target&gt;)</span><br></pre></td></tr></table></figure><br>以第一个为例，其参数含义：</p>
<ul>
<li><code>name</code>:可执行目标文件的名字，在一个cmake工程中，这个名字必须全局唯一。</li>
<li><code>WIN32</code>:用于windows系统下创建一个以WinMain为入口的可执行目标文件（通常入口函数为main），它不是一个控制台应用程序，而是一个GUI应用程序。当WIN32选项使用的时候，可执行目标的 WIN32_EXECUTABLE会被置位ON。</li>
<li><code>MACOSX_BUNDLE</code>:用于mac系统或者IOS系统下创建一个GUI可执行应用程序，当MACOSX_BUNDLE选项使用的时候，可执行目标的MACOSX_BUNDLE会被置位ON。</li>
<li><code>EXCLUDE_FROM_ALL</code>:用于指定可执行目标是否会被构建，当该选项使用的时候，可执行目标不会被构建。</li>
<li><code>[source1] [source2 ...]</code>:构建可执行目标文件所需要的源文件。也可以通过target_sources()继续为可执行目标文件添加源文件，要求是在调用target_sources之前，可执行目标文件必须已经通过add_executable或add_library定义了。<blockquote>
<p>Note1: 剩下的用法可参考[<a href="https://www.jianshu.com/p/19765d4932a4">链接</a>], [<a href="https://cmake.org/cmake/help/latest/command/add_executable.html#id2">官方链接</a>]<br>Note2: 对于多个source文件除了逐一添加外，还可以配合<code>aux_source_directory(&lt;dir&gt; &lt;variable&gt;)</code>将一个目录下的内容保存进指定的变量名，然后调用。示例：<code>aux_source_directory(. ALL_SRCS)  add_executable(mathPowerDemo2 $&#123;ALL_SRCS&#125;)</code>。更多内容参考[<a href="https://blog.csdn.net/cliukai/article/details/90670243">链接</a>]。</p>
</blockquote>
</li>
</ul>
<h2 id="3-4-target-link-libraries"><a href="#3-4-target-link-libraries" class="headerlink" title="3.4 target_link_libraries"></a>3.4 target_link_libraries</h2><p>该指定的作用为将目标文件与库文件链接。可以参考[<a href="https://cmake.org/cmake/help/latest/command/target_link_libraries.html">官方链接</a>].<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">target_link_libraries(&lt;target&gt; [item1] [item2] [...]</span><br><span class="line">                      [[debug|optimized|general] &lt;item&gt;] ...)</span><br></pre></td></tr></table></figure><br>参数含义：</p>
<ul>
<li><code>&lt;target&gt;</code>：指通过add_executable()和add_library()指令生成已经创建的目标文件。</li>
<li><code>[item]</code>： 表示要链接的库。这里有多种类型，可参考[<a href="https://cmake.org/cmake/help/latest/command/target_link_libraries.html">官方链接</a>].</li>
</ul>
<p>在本文中的使用：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">target_link_libraries(usehellolib <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/../Generate_lib/lib/libhello.so)</span><br></pre></td></tr></table></figure><br>将由 <em>Generate_lib</em> 生成的动态链接库文件链接至目标 <strong>usehellolib</strong>.</p>
<h2 id="3-5-message"><a href="#3-5-message" class="headerlink" title="3.5 message"></a>3.5 message</h2><p><code>message</code>用于为用户显示一条消息。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">message([&lt;mode&gt;] <span class="string">&quot;message text&quot;</span> ...)</span><br></pre></td></tr></table></figure><br>参数：</p>
<ul>
<li><code>&lt;mode&gt;</code>：<ul>
<li>(无) = 重要消息；</li>
<li>STATUS = 非重要消息；</li>
<li>WARNING = CMake 警告, 会继续执行；</li>
<li>AUTHOR_WARNING = CMake 警告 (dev), 会继续执行；</li>
<li>SEND_ERROR = CMake 错误, 继续执行，但是会跳过生成的步骤；</li>
<li>FATAL_ERROR = CMake 错误, 终止所有处理过程；</li>
</ul>
</li>
</ul>
<p>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">message(WARNING <span class="string">&quot;OpenCV requires Android SDK tools revision 14 or newer.&quot;</span>)</span><br><span class="line">message(STATUS <span class="string">&quot;Can&#x27;t detect runtime and/or arch&quot;</span>)</span><br></pre></td></tr></table></figure><br>在本文中：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">message(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>)</span><br></pre></td></tr></table></figure><br>这条信息可以显示出当前工程的路径。</p>
]]></content>
      <categories>
        <category>工科生的基本功</category>
        <category>快乐码农</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>C++</tag>
        <tag>cmake</tag>
      </tags>
  </entry>
  <entry>
    <title>Numpy 学习笔记</title>
    <url>/archives/9765ce4r.html</url>
    <content><![CDATA[<p>本文主要记录Numpy的一些学习笔记，方便自己查阅。<br><span id="more"></span></p>
<h1 id="1-numpy"><a href="#1-numpy" class="headerlink" title="1 numpy"></a>1 numpy</h1><h2 id="1-1-np-concatenate"><a href="#1-1-np-concatenate" class="headerlink" title="1.1 np.concatenate"></a>1.1 np.concatenate</h2><p>一维数组的合并<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b=[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">np.concatenate((a,b),axis=<span class="number">0</span>)  <span class="comment"># array([1,2,3,4,5,6])</span></span><br><span class="line">np.concatenate((a,b),axis=<span class="number">1</span>)  <span class="comment"># Error</span></span><br></pre></td></tr></table></figure><br>二维数组的合并：<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a=np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>]])</span><br><span class="line">b=np.array([[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">44</span>,<span class="number">55</span>,<span class="number">67</span>]])</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n矩阵a的维度为:&#x27;</span>,a.shape)  <span class="comment"># (2,3)</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\naxis=0的结果为:\n&quot;</span>,np.concatenate((a,b),axis=<span class="number">0</span>))  <span class="comment"># 在行后添加，前后链接</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\naxis=0的维度为:\n&quot;</span>,np.concatenate((a,b),axis=<span class="number">0</span>).shape)  <span class="comment"># (4,3)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\naxis=1的结果为:\n&quot;</span>,np.concatenate((a,b),axis=<span class="number">1</span>))  <span class="comment"># 在列后添加，左右链接</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\naxis=1的维度为:\n&quot;</span>,np.concatenate((a,b),axis=<span class="number">1</span>).shape)  <span class="comment">#(2,6)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\naxis=0的结果为:\n&quot;</span>,np.concatenate((a,b,a),axis=<span class="number">0</span>))  <span class="comment"># 在行后添加，前后链接</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\naxis=0的维度为:\n&quot;</span>,np.concatenate((a,b,a),axis=<span class="number">0</span>).shape)  <span class="comment"># (6,3)</span></span><br></pre></td></tr></table></figure></p>
<h2 id="1-2-np-vstack与np-hstack"><a href="#1-2-np-vstack与np-hstack" class="headerlink" title="1.2 np.vstack与np.hstack"></a>1.2 np.vstack与np.hstack</h2><p>np.vstack是按行堆叠为一个新的数组，np.hstack是按列堆叠为一个新的数组<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]])  <span class="comment"># (1, 3)</span></span><br><span class="line">b = np.array([[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])  <span class="comment"># (1, 3)</span></span><br><span class="line">c = np.vstack((a, b))  <span class="comment"># (2, 3)</span></span><br><span class="line">d = np.hstack((a, b))  <span class="comment"># (1, 6)</span></span><br></pre></td></tr></table></figure></p>
<h2 id="1-3-npz文件的保存与读取"><a href="#1-3-npz文件的保存与读取" class="headerlink" title="1.3 npz文件的保存与读取"></a>1.3 npz文件的保存与读取</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arr0 = np.array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">arr1 = np.array([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>])</span><br><span class="line"></span><br><span class="line">np.savez(<span class="string">&#x27;hello.npz&#x27;</span>, arr0, arr1)</span><br><span class="line">np.savez(<span class="string">&#x27;hellofile.npz&#x27;</span>, a=arr0, b=arr1)</span><br><span class="line"></span><br><span class="line">data = np.load(<span class="string">&#x27;hello.npz&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(data.files)  <span class="comment"># [&#x27;arr_0&#x27;, &#x27;arr_1&#x27;]</span></span><br><span class="line">datas = np.load(<span class="string">&#x27;hellofile.npz&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(datas.files)  <span class="comment"># .files 命令查看数据集中有什么数据, [&#x27;a&#x27;, &#x27;b&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(datas[<span class="string">&#x27;a&#x27;</span>])  <span class="comment"># [0 1 2 3]</span></span><br><span class="line"><span class="built_in">print</span>(datas[<span class="string">&#x27;b&#x27;</span>])  <span class="comment"># [4 5 6 7 8]</span></span><br></pre></td></tr></table></figure>
<h2 id="1-4-numpy添加元素"><a href="#1-4-numpy添加元素" class="headerlink" title="1.4 numpy添加元素"></a>1.4 numpy添加元素</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">list_b = np.empty([<span class="number">0</span>,<span class="number">3</span>], dtype=<span class="built_in">int</span>)</span><br><span class="line"><span class="built_in">print</span>(list_b.shape, list_b)  <span class="comment"># (0, 3) []</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">  list_b = np.append(list_b,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(list_b.shape, list_b)  <span class="comment"># (9,) [1 2 3 1 2 3 1 2 3]</span></span><br><span class="line"></span><br><span class="line">a=np.array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line"><span class="built_in">print</span>(a.shape, <span class="string">&quot;\n&quot;</span>, a)  <span class="comment"># (3,2)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;*&quot;</span>*<span class="number">25</span>)</span><br><span class="line">a_1=np.insert(a,<span class="number">3</span>,[<span class="number">1</span>])<span class="comment">#不加axis时，数据进行展开构成一维数组</span></span><br><span class="line"><span class="built_in">print</span>(a_1.shape, <span class="string">&quot;\n&quot;</span>, a_1)  <span class="comment"># (7, )</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;*&quot;</span>*<span class="number">25</span>)</span><br><span class="line">a_2=np.insert(a,<span class="number">2</span>,<span class="number">7</span>,axis=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(a_2.shape, <span class="string">&quot;\n&quot;</span>, a_2)  <span class="comment"># (4,2)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;*&quot;</span>*<span class="number">25</span>)</span><br><span class="line">a_3=np.insert(a,<span class="number">1</span>,<span class="number">7</span>,axis=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(a_3.shape, <span class="string">&quot;\n&quot;</span>, a_3)  <span class="comment"># (3,3)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;*&quot;</span>*<span class="number">25</span>)</span><br><span class="line">a_4=np.insert(a,<span class="number">1</span>,[<span class="number">99</span> ,<span class="number">99</span>],axis=<span class="number">0</span>)  <span class="comment"># (4,2)</span></span><br><span class="line"><span class="built_in">print</span>(a_4.shape, <span class="string">&quot;\n&quot;</span>, a_4)</span><br><span class="line"></span><br><span class="line">list_b = np.empty([<span class="number">0</span>,<span class="number">2</span>], dtype=<span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    list_b =  np.insert(list_b, list_b.shape[<span class="number">0</span>], [<span class="number">1</span>, <span class="number">2</span>], axis=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;*&quot;</span>*<span class="number">25</span>)</span><br><span class="line"><span class="built_in">print</span>(list_b.shape, <span class="string">&quot;\n&quot;</span>, list_b)  <span class="comment"># (3,2)</span></span><br></pre></td></tr></table></figure>
<h2 id="1-5-numpy-求差分"><a href="#1-5-numpy-求差分" class="headerlink" title="1.5 numpy 求差分"></a>1.5 numpy 求差分</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">A = np.arange(<span class="number">2</span> , <span class="number">14</span>).reshape((<span class="number">3</span> , <span class="number">4</span>))  <span class="comment"># numpy线性空间划分</span></span><br><span class="line">A[<span class="number">1</span> , <span class="number">1</span>] = <span class="number">8</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;A:\n&#x27;</span> , A)</span><br><span class="line"><span class="comment"># 默认是最后一个轴求差分</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;np.diff(A), default axis=-1:\n&#x27;</span>, np.diff(A))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;np.diff(A), axis=0:\n&#x27;</span>, np.diff(A, axis=<span class="number">0</span>))</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">A:</span><br><span class="line"> [[ 2  3  4  5]</span><br><span class="line"> [ 6  8  8  9]</span><br><span class="line"> [10 11 12 13]]</span><br><span class="line">np.diff(A), axis=-1:</span><br><span class="line"> [[1 1 1]</span><br><span class="line"> [2 0 1]</span><br><span class="line"> [1 1 1]]</span><br><span class="line">np.diff(A), axis=0:</span><br><span class="line"> [[4 5 4 4]</span><br><span class="line"> [4 3 4 4]]</span><br></pre></td></tr></table></figure>
<h2 id="1-6-numpy-多项式拟合"><a href="#1-6-numpy-多项式拟合" class="headerlink" title="1.6 numpy 多项式拟合"></a>1.6 numpy 多项式拟合</h2><p>官网上给出的提示是基于最小二乘法进行的多项式拟合。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">x = np.array([<span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>,  <span class="number">4.0</span>,  <span class="number">5.0</span>])</span><br><span class="line">y = np.array([<span class="number">0.0</span>, <span class="number">0.8</span>, <span class="number">0.9</span>, <span class="number">0.1</span>, -<span class="number">0.8</span>, -<span class="number">1.0</span>])</span><br><span class="line">z = np.polyfit(x, y, deg=<span class="number">3</span>)  <span class="comment"># 多项式的系数，deg表示多项式的阶数</span></span><br><span class="line">p = np.poly1d(z)</span><br><span class="line"><span class="keyword">with</span> warnings.catch_warnings():</span><br><span class="line">    warnings.simplefilter(<span class="string">&#x27;ignore&#x27;</span>, np.RankWarning)</span><br><span class="line">    p6 = np.poly1d(np.polyfit(x, y, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;多项式系数：&#x27;</span>, z)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;多项式表达式：\n&#x27;</span>, p)</span><br><span class="line"><span class="built_in">print</span>(p(<span class="number">0.5</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">xp = np.linspace(-<span class="number">2</span>, <span class="number">6</span>, <span class="number">100</span>)</span><br><span class="line"><span class="comment"># 绘制点， 多项式函数p， 多项式函数p6</span></span><br><span class="line">_ = plt.plot(x, y, <span class="string">&#x27;.&#x27;</span>, xp, p(xp), <span class="string">&#x27;-&#x27;</span>, xp, p6(xp), <span class="string">&#x27;--&#x27;</span>)</span><br><span class="line">plt.ylim(-<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></p>
<h2 id="1-7-numpy与list的转换"><a href="#1-7-numpy与list的转换" class="headerlink" title="1.7 numpy与list的转换"></a>1.7 numpy与list的转换</h2><p>从list转为numpy数组。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = [<span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>]</span><br><span class="line">b = np.array(a)  <span class="comment"># b.shape: (3,)</span></span><br><span class="line">a = [[<span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>], [<span class="number">4.</span>, <span class="number">5.</span>, <span class="number">6.</span>]]</span><br><span class="line">b = np.array(a)  <span class="comment"># b.shape: (2, 3)</span></span><br></pre></td></tr></table></figure></p>
<p>numpy转为list。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>]</span><br><span class="line">b = np.array(a)  <span class="comment"># b.shape: (3,)</span></span><br><span class="line">c = b.tolist()</span><br></pre></td></tr></table></figure></p>
<h2 id="1-8-numpy检索最值与其对应的索引号"><a href="#1-8-numpy检索最值与其对应的索引号" class="headerlink" title="1.8 numpy检索最值与其对应的索引号"></a>1.8 numpy检索最值与其对应的索引号</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x = np.array([[<span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>], [<span class="number">11.</span>, <span class="number">1.</span>, <span class="number">5.</span>], [<span class="number">23.</span>, <span class="number">4.</span>, <span class="number">0.</span>]])</span><br><span class="line">dim0_max = np.<span class="built_in">max</span>(x, axis=<span class="number">0</span>)  <span class="comment"># array([23.,  4.,  5.])</span></span><br><span class="line">dim0_max_index = np.argmax(x, axis=<span class="number">0</span>)  <span class="comment"># array([2, 2, 1], dtype=int64)</span></span><br><span class="line">dim1_max = np.<span class="built_in">max</span>(x, axis=<span class="number">1</span>)  <span class="comment"># array([ 3., 11., 23.])</span></span><br><span class="line">dim1_max_index = np.argmax(x, axis=<span class="number">1</span>)  <span class="comment"># array([2, 0, 0], dtype=int64)</span></span><br></pre></td></tr></table></figure>
<h2 id="1-9-numpy获取满足条件的索引值"><a href="#1-9-numpy获取满足条件的索引值" class="headerlink" title="1.9 numpy获取满足条件的索引值"></a>1.9 numpy获取满足条件的索引值</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">t = np.arange(<span class="number">3</span>, <span class="number">9</span>)</span><br><span class="line">np.where(t&gt;<span class="number">3</span>)</span><br><span class="line">np.argwhere(t&gt;<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">t = np.arange(<span class="number">3</span>, <span class="number">9</span>).reshape(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">np.where(t&gt;<span class="number">3</span>)</span><br><span class="line">np.argwhere(t&gt;<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<p>结果：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; t</span><br><span class="line">array([3, 4, 5, 6, 7, 8])</span><br><span class="line">(array([1, 2, 3, 4, 5], dtype=int64),)  <span class="comment"># tuple</span></span><br><span class="line">array([[1],</span><br><span class="line">       [2],</span><br><span class="line">       [3],</span><br><span class="line">       [4],</span><br><span class="line">       [5]], dtype=int64)  <span class="comment"># 位置组成的array, shape: (5,1)</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; t</span><br><span class="line">array([[3, 4, 5],</span><br><span class="line">       [6, 7, 8]])</span><br><span class="line">(array([0, 0, 1, 1, 1], dtype=int64), array([1, 2, 0, 1, 2], dtype=int64))</span><br><span class="line">array([[0, 1],</span><br><span class="line">       [0, 2],</span><br><span class="line">       [1, 0],</span><br><span class="line">       [1, 1],</span><br><span class="line">       [1, 2]], dtype=int64)</span><br></pre></td></tr></table></figure></p>
<h2 id="1-10-numpy随机数"><a href="#1-10-numpy随机数" class="headerlink" title="1.10 numpy随机数"></a>1.10 numpy随机数</h2><p>ref: <a href="https://numpy.org/doc/stable/reference/random/generated/numpy.random.random.html">https://numpy.org/doc/stable/reference/random/generated/numpy.random.random.html</a><br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成在0~1之间的随机数</span></span><br><span class="line">x = np.random.rand(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="comment"># 生成的随机整数</span></span><br><span class="line">x = np.random.randint(<span class="number">1</span>, <span class="number">10</span>, size=(<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"><span class="comment"># 生成符合正态分布的随机数</span></span><br><span class="line">x = np.random.uniform(<span class="number">1</span>, <span class="number">10</span>, (<span class="number">3</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">array([[0.04891686, 0.51957275, 0.30805805, 0.88879564],</span><br><span class="line">       [0.85382255, 0.84637804, 0.5668803 , 0.98538723],</span><br><span class="line">       [0.59531752, 0.50007081, 0.10770858, 0.74240021]])</span><br><span class="line"></span><br><span class="line">array([[9, 5, 7, 9],</span><br><span class="line">       [9, 7, 4, 2],</span><br><span class="line">       [6, 2, 7, 4]])</span><br><span class="line"></span><br><span class="line">array([[1.50977021, 9.81732507, 7.25303954, 1.84175363],</span><br><span class="line">       [2.20489679, 4.01683278, 3.63814963, 4.7198848 ],</span><br><span class="line">       [1.94682047, 8.08387709, 8.70521749, 9.61507899]])       </span><br></pre></td></tr></table></figure></p>
<h2 id="1-11-numpy乘法"><a href="#1-11-numpy乘法" class="headerlink" title="1.11 numpy乘法"></a>1.11 numpy乘法</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">A = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line">B = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line">x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">y = np.array([<span class="number">4</span>, <span class="number">0</span>, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Method 1: * or np.multiply(x, y) 对应元素相乘，对矩阵的维度有要求</span></span><br><span class="line"><span class="comment"># print(A*B)  # ValueError: operands could not be broadcast together with shapes (2,3) (3,2)</span></span><br><span class="line"><span class="built_in">print</span>(x*y)  <span class="comment"># array([4, 0, 6])</span></span><br><span class="line"><span class="built_in">print</span>(np.multiply(x, y))  <span class="comment"># array([4, 0, 6])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Method 2: np.dot()  矩阵相乘，向量点积</span></span><br><span class="line"><span class="built_in">print</span>(np.dot(A, B))  <span class="comment">#array([[22, 28], [49, 64]]) shape:(2,2)</span></span><br><span class="line"><span class="built_in">print</span>(np.matmul(A, B))  <span class="comment"># 对于二维矩阵，matmul方法与np.dot()的结果一致，都是普通矩阵相乘</span></span><br><span class="line"><span class="built_in">print</span>(np.dot(x, y))  <span class="comment"># 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Method 3: np.cross()  </span></span><br><span class="line">a = np.array([<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>])</span><br><span class="line">b = np.array([<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(np.cross(a,b))  <span class="comment"># x轴叉乘y轴，得到z轴 array([0, 0, 1])</span></span><br></pre></td></tr></table></figure>
<p>np.matmul的多维和单维使用方法参考官网：<a href="https://numpy.org/doc/stable/reference/generated/numpy.matmul.html">https://numpy.org/doc/stable/reference/generated/numpy.matmul.html</a><br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对于两个大于2维的矩阵，它认为是矩阵的堆叠，用最后的两维作为矩阵进行相乘</span></span><br><span class="line">a = np.arange(<span class="number">3</span> * <span class="number">2</span> * <span class="number">4</span>).reshape((<span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>))</span><br><span class="line">b = np.arange(<span class="number">3</span> * <span class="number">2</span> * <span class="number">4</span>).reshape((<span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>))</span><br><span class="line">c = np.arange(<span class="number">1</span> * <span class="number">2</span> * <span class="number">4</span>).reshape((<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(np.matmul(a, b).shape)  <span class="comment"># (3, 2, 2)，将a视为3个2x4矩阵堆叠，分别与b的3个4x2矩阵相乘</span></span><br><span class="line"><span class="built_in">print</span>(np.matmul(a, c).shape)  <span class="comment"># (3, 2, 2)，将a视为3个2x4矩阵堆叠，分别与c的1个4x2矩阵相乘</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一维情况</span></span><br><span class="line">a = [[<span class="number">2</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">3</span>]]</span><br><span class="line">b = [<span class="number">4</span>, <span class="number">3</span>] <span class="comment"># (2,)</span></span><br><span class="line">c = [[<span class="number">4</span>], [<span class="number">3</span>]]  <span class="comment"># (2, 1)</span></span><br><span class="line">d = [[<span class="number">4</span>, <span class="number">3</span>]]  <span class="comment"># (1, 2)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(np.matmul(a, b))  <span class="comment"># array([ 8, 13])，将b从(2,)提升为(2, 1)，提升的维度用1补全，乘后再去掉这个维度，即a与c相乘得到(2, 1)后再降维到(2, )</span></span><br><span class="line"><span class="built_in">print</span>(np.matmul(b, a))  <span class="comment"># array([11,  9]), 将b提升为(1, 2)，bxa得到(1,2)，再降维到(2,)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 与dot方法对比</span></span><br><span class="line">a = np.ones([<span class="number">9</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">4</span>])  <span class="comment"># (9, 5, 7, 4)</span></span><br><span class="line">c = np.ones([<span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>])  <span class="comment"># (9, 5, 4, 3)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">20</span>)</span><br><span class="line">np.dot(a, c).shape  <span class="comment"># (9, 5, 7, 9, 5, 3)</span></span><br><span class="line">np.matmul(a, c).shape  <span class="comment"># (9, 5, 7, 3)</span></span><br></pre></td></tr></table></figure><br>np.matmul不能乘以标量，这与dot方法不同。多维情况与dot也不一样。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = np.array([i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>)]).reshape([<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">b = np.array([i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>)]).reshape([<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">20</span>)</span><br><span class="line">np.matmul(a,b)  <span class="comment"># (2,2,2)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">20</span>)</span><br><span class="line">np.dot(a,b)  <span class="comment"># (2,2,2,2)</span></span><br></pre></td></tr></table></figure><br>输出结果：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">a</span><br><span class="line">[[[ 0  1  2]</span><br><span class="line">  [ 3  4  5]]</span><br><span class="line"></span><br><span class="line"> [[ 6  7  8]</span><br><span class="line">  [ 9 10 11]]]</span><br><span class="line">b</span><br><span class="line">[[[ 0  1]</span><br><span class="line">  [ 2  3]</span><br><span class="line">  [ 4  5]]</span><br><span class="line"></span><br><span class="line"> [[ 6  7]</span><br><span class="line">  [ 8  9]</span><br><span class="line">  [10 11]]]</span><br><span class="line">-------------------</span><br><span class="line">array([[[ 10,  13],</span><br><span class="line">        [ 28,  40]],</span><br><span class="line"></span><br><span class="line">       [[172, 193],</span><br><span class="line">        [244, 274]]])</span><br><span class="line">-------------------</span><br><span class="line">array([[[[ 10,  13],</span><br><span class="line">         [ 28,  31]],</span><br><span class="line"></span><br><span class="line">        [[ 28,  40],</span><br><span class="line">         [100, 112]]],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       [[[ 46,  67],</span><br><span class="line">         [172, 193]],</span><br><span class="line"></span><br><span class="line">        [[ 64,  94],</span><br><span class="line">         [244, 274]]]])</span><br></pre></td></tr></table></figure><br>dot方法将a的最后一维作为向量，b的倒数第二个维度与其相同</p>
]]></content>
      <categories>
        <category>工科生的基本功</category>
        <category>快乐码农</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Pytorch 学习笔记（神经网络篇）</title>
    <url>/archives/9765ce3g.html</url>
    <content><![CDATA[<p>本文主要记录在用Pytorch时和神经网络相关的一些笔记。<br><span id="more"></span></p>
<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>本文记录了Pytorch学习过程中的和神经网络相关的一些内容，例如：多层网络的搭建，LSTM的计算结果等。</p>
<h1 id="2-nn中的一些方法"><a href="#2-nn中的一些方法" class="headerlink" title="2 nn中的一些方法"></a>2 nn中的一些方法</h1><h2 id="2-0-基础"><a href="#2-0-基础" class="headerlink" title="2.0 基础"></a>2.0 基础</h2><ul>
<li><code>dir(torch.xxx.xxxx)</code>可以用来查看下一级的函数<br>示例：<code>dir(torch.cuda)</code> 有双下划线的表示不可以修改，表示已经到底了</li>
<li><p><code>help(torch.cuda.is_available)</code>  查看怎么使用，这里不加括号</p>
</li>
<li><p>Jupyter Notebook可以将输出显示的很整洁，而控制台将会混乱</p>
</li>
<li><p>Dataset 提供一种数据获取方式及其label，Dataset主要是重写<strong>getitem</strong>这个方法</p>
</li>
<li>Dataloader 为网络提供不同的数据形式。dataset是建立数据集，就是建立起数据以及它们的索引，还有数据总量；dataloader负责从dataset中取数据，例如dataset就是一副扑克牌，dataloader决定了用一只手还是两只手去抓牌；dataloader中 batch_size 就是一次取2张牌还是4张牌。</li>
<li>num_workers可能在Windows中出错</li>
<li>tensorboard的使用：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple tensorboard</span><br><span class="line"><span class="built_in">cd</span> logs所在目录</span><br><span class="line">tensorboard --logdir=logs --port=6007  <span class="comment"># 默认的端口是6006</span></span><br></pre></td></tr></table></figure></li>
<li>torch中非线性激活函数Relu(input, inplace=True) inplace 表示将原来给Relu的输入替换</li>
<li>Tudui.train(), Tudui.eval() 仅仅是对网络中包含Dropout、BatchNorm层的网络才有效，如果没有这两层，可以不调用这两个函数。</li>
<li>pytorch中requires_grad()_的用法：<br><code>tensor.requires_grad_()</code> 可以将tensor的求导属性设置未True</li>
<li>类继承的简单说明：<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Model</span>(nn.Module):  <span class="comment"># 小括号中的nn.module表示对自己定义的Model类对nn.module继承</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">init</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">super</span>(Model, self).__init__  <span class="comment"># 表示对nn.Module类的初始化</span></span><br><span class="line">    self.conv1 = nn.Conv2d(<span class="number">1</span>, <span class="number">20</span>, <span class="number">5</span>)</span><br><span class="line">    self.conv2 = nn.Conv2d(<span class="number">20</span>, <span class="number">20</span>, <span class="number">5</span>)</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">    x = F.relu(self.conv1(x))</span><br><span class="line">    <span class="keyword">return</span> F.relu(self.conv2(x))</span><br></pre></td></tr></table></figure></li>
<li>最大池化的目的是提取主要特征，保留主要信息，减少数据量</li>
<li>pytorch视觉的一些数据集：<a href="https://pytorch.org/vision/stable/index.html">https://pytorch.org/vision/stable/index.html</a></li>
</ul>
<h2 id="2-1-多个相同网络的添加"><a href="#2-1-多个相同网络的添加" class="headerlink" title="2.1 多个相同网络的添加"></a>2.1 多个相同网络的添加</h2><p>参考[<a href="https://blog.csdn.net/u014090429/article/details/112618607">链接</a>]中说的非常清晰。</p>
<p>总的来说， nn.Sequential() 可以在添加网络的时候同时进行forward，不需要再额外写forward函数，但是这样也失去了一部分的灵活性。而 nn.ModuleList() 仅仅是灵活添加网络，但并不包含 forward，需要自己在forward中进行重写。前者更多地应用于需要将一个模块反复调用的场景，后者更适用于需要知道前面某层输出或参数的情况。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">net7</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(net7, self).__init__()</span><br><span class="line">        self.linear_list = [nn.Linear(<span class="number">10</span>, <span class="number">10</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">        self.linears = nn.Sequential(*self.linears_list)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        self.x = self.linears(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"> </span><br><span class="line">net = net7()</span><br><span class="line"><span class="built_in">print</span>(net)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上述代码中的 * 操作符，参考[<a href="https://mp.weixin.qq.com/s?__biz=MzA4MjEyNTA5Mw==&amp;mid=2652569153&amp;idx=1&amp;sn=57b34413de84ec876976cad5cab520bc&amp;chksm=8464d60bb3135f1d5fb724022952b9ef1c366a42eac1bc475a8ae5341916e4670c029e74cb9d&amp;mpshare=1&amp;scene=1&amp;srcid=#rd">链接</a>]。</p>
</blockquote>
<p>输出结果：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">net7(</span><br><span class="line">  (linears): Sequential(</span><br><span class="line">    (0): Linear(in_features=10, out_features=10, bias=True)</span><br><span class="line">    (1): Linear(in_features=10, out_features=10, bias=True)</span><br><span class="line">    (2): Linear(in_features=10, out_features=10, bias=True)</span><br><span class="line">  )</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p>
<p>torch.nn.ModuleList()方法<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyModule</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(MyModule, self).__init__()</span><br><span class="line">        self.linears = nn.ModuleList([nn.Linear(<span class="number">10</span>, <span class="number">10</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="comment"># ModuleList can act as an iterable, or be indexed using ints</span></span><br><span class="line">        <span class="keyword">for</span> i, l <span class="keyword">in</span> <span class="built_in">enumerate</span>(self.linears):</span><br><span class="line">            x = self.linears[i // <span class="number">2</span>](x) + l(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">test=MyModule()</span><br><span class="line"><span class="built_in">print</span>(test)</span><br></pre></td></tr></table></figure><br>上述代码的输出为：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MyModule(</span><br><span class="line">  (linears): ModuleList(</span><br><span class="line">    (0): Linear(in_features=10, out_features=10, bias=True)</span><br><span class="line">    (1): Linear(in_features=10, out_features=10, bias=True)</span><br><span class="line">    (2): Linear(in_features=10, out_features=10, bias=True)</span><br><span class="line">    (3): Linear(in_features=10, out_features=10, bias=True)</span><br><span class="line">    (4): Linear(in_features=10, out_features=10, bias=True)</span><br><span class="line">    (5): Linear(in_features=10, out_features=10, bias=True)</span><br><span class="line">    (6): Linear(in_features=10, out_features=10, bias=True)</span><br><span class="line">    (7): Linear(in_features=10, out_features=10, bias=True)</span><br><span class="line">    (8): Linear(in_features=10, out_features=10, bias=True)</span><br><span class="line">    (9): Linear(in_features=10, out_features=10, bias=True)</span><br><span class="line">  )</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">input_size=<span class="number">10</span></span><br><span class="line">hidden_size=<span class="number">128</span></span><br><span class="line">nlayers = <span class="number">3</span></span><br><span class="line">rnns = nn.ModuleList()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nlayers):</span><br><span class="line">    input_size = input_size <span class="keyword">if</span> i==<span class="number">0</span> <span class="keyword">else</span> hidden_size</span><br><span class="line">    rnns.append(nn.LSTM(input_size,hidden_size,<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(rnns)</span><br></pre></td></tr></table></figure>
<p>输出结果：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ModuleList(</span><br><span class="line">  (0): LSTM(10, 128)</span><br><span class="line">  (1): LSTM(128, 128)</span><br><span class="line">  (2): LSTM(128, 128)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>注意：</p>
<ul>
<li>子模块必须放在顶层的属性中，而不可能放在列表或者字典中。因为如果不在顶层，而是在列表或者字典中，那么优化器就不能够准确定位这些子模块，因而也就无法优化更新这些模块的参数。</li>
<li>如果你需要一个列表或者字典来存放你的子模块，那么就需要使用pytorch提供的方式nn.ModuleList和nn.ModuleDict方法。</li>
</ul>
</blockquote>
<h2 id="2-2-torch-manual-seed-seed-介绍"><a href="#2-2-torch-manual-seed-seed-介绍" class="headerlink" title="2.2 torch.manual_seed(seed) 介绍"></a>2.2 torch.manual_seed(seed) 介绍</h2><p>参考：[<a href="https://blog.csdn.net/weixin_44211968/article/details/123769010">链接</a>]<br>函数的功能就是保证程序每次运行的时候生成的随机数都是一致的。</p>
<h2 id="2-3-dataloader提取数据"><a href="#2-3-dataloader提取数据" class="headerlink" title="2.3 dataloader提取数据"></a>2.3 dataloader提取数据</h2><p>[<a href="https://blog.csdn.net/weixin_39958366/article/details/110493551">链接</a>]</p>
<h2 id="2-4-nn-Conv1d"><a href="#2-4-nn-Conv1d" class="headerlink" title="2.4 nn.Conv1d()"></a>2.4 nn.Conv1d()</h2><p>[<a href="https://pytorch.org/docs/stable/generated/torch.nn.Conv1d.html">链接1</a>]<br>[<a href="https://blog.csdn.net/sunny_xsc1994/article/details/82969867">链接2</a>]</p>
<h2 id="2-5-torch-nn-init-kaiming-normal"><a href="#2-5-torch-nn-init-kaiming-normal" class="headerlink" title="2.5 torch.nn.init.kaiming_normal_()"></a>2.5 torch.nn.init.kaiming_normal_()</h2><p><a href="https://blog.csdn.net/nuliliq/article/details/122678289">https://blog.csdn.net/nuliliq/article/details/122678289</a></p>
<p>使用正态分布对输入张量进行赋值。<br>如果权重是通过线性层（卷积或全连接）隐性确定的，则需设置mode=fan_in。如果通过创建随机矩阵显式创建权重，则应进行设置mode=‘fan_out’。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line">w = torch.empty(<span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(w)</span><br><span class="line"><span class="built_in">print</span>(torch.nn.init.kaiming_normal_(w, mode=<span class="string">&#x27;fan_out&#x27;</span>, nonlinearity=<span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(w)</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tensor([[9.9184e-39, 8.7245e-39, 9.2755e-39, 8.9082e-39, 9.9184e-39],</span><br><span class="line">        [8.4490e-39, 9.6429e-39, 1.0653e-38, 1.0469e-38, 4.2246e-39],</span><br><span class="line">        [1.0378e-38, 9.6429e-39, 9.2755e-39, 9.7346e-39, 1.0745e-38]])</span><br><span class="line">tensor([[-1.1195,  0.8319,  0.4465,  1.5517, -0.2840],</span><br><span class="line">        [-0.6165,  0.2486,  0.0273,  0.7761, -0.9499],</span><br><span class="line">        [ 0.3389, -0.1474,  0.5669, -0.1427,  0.2397]])</span><br><span class="line">tensor([[-1.1195,  0.8319,  0.4465,  1.5517, -0.2840],</span><br><span class="line">        [-0.6165,  0.2486,  0.0273,  0.7761, -0.9499],</span><br><span class="line">        [ 0.3389, -0.1474,  0.5669, -0.1427,  0.2397]])</span><br></pre></td></tr></table></figure>
<h2 id="2-6-torch-nn-Embedding"><a href="#2-6-torch-nn-Embedding" class="headerlink" title="2.6 torch.nn.Embedding()"></a>2.6 torch.nn.Embedding()</h2><p>Embedding 教程. [<a href="https://developers.google.com/machine-learning/crash-course/embeddings/video-lecture?hl=zh_cn">链接1</a>][<a href="https://developers.google.com/machine-learning/crash-course/embeddings/translating-to-a-lower-dimensional-space">链接2</a>].<br>torch.nn.Embedding(numembeddings,embeddingdim)的意思是创建一个词嵌入模型，numembeddings代表一共有多少个词, embedding_dim代表你想要为每个词创建一个多少维的向量来表示它，如下面的例子。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line">embedding = nn.Embedding(<span class="number">5</span>, <span class="number">4</span>) <span class="comment"># 假定字典中只有5个词，词向量维度为4</span></span><br><span class="line">word = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">        [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]] <span class="comment"># 每个数字代表一个词，例如 &#123;&#x27;!&#x27;:0,&#x27;how&#x27;:1, &#x27;are&#x27;:2, &#x27;you&#x27;:3,  &#x27;ok&#x27;:4&#125;</span></span><br><span class="line">         		   <span class="comment">#而且这些数字的范围只能在0～4之间，因为上面定义了只有5个词</span></span><br><span class="line">embed = embedding(torch.LongTensor(word))</span><br><span class="line"><span class="built_in">print</span>(embed) </span><br><span class="line"><span class="built_in">print</span>(embed.size())</span><br></pre></td></tr></table></figure><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># print result:</span></span><br><span class="line">tensor([[[-0.7768, -0.6267,  0.0288, -1.0217],</span><br><span class="line">         [-0.0518,  0.6011,  1.2924, -1.4219],</span><br><span class="line">         [-0.4475, -1.9976,  0.9484, -0.1971]],</span><br><span class="line"></span><br><span class="line">        [[-0.0518,  0.6011,  1.2924, -1.4219],</span><br><span class="line">         [-0.4475, -1.9976,  0.9484, -0.1971],</span><br><span class="line">         [ 1.5638, -0.8426, -0.8601,  1.1443]]], grad_fn=&lt;EmbeddingBackward0&gt;)</span><br><span class="line">torch.Size([2, 3, 4])</span><br></pre></td></tr></table></figure></p>
<h2 id="2-7-nn-LayerNorm"><a href="#2-7-nn-LayerNorm" class="headerlink" title="2.7 nn.LayerNorm()"></a>2.7 nn.LayerNorm()</h2><p>[<a href="https://blog.csdn.net/weixin_41978699/article/details/122778085">链接</a>].<br>在transformer中一般采用LayerNorm，LayerNorm也是归一化的一种方法，与BatchNorm不同的是它是对每单个batch进行的归一化，而batchnorm是对所有batch一起进行归一化的。</p>
<h1 id="3-LSTM-的一些笔记"><a href="#3-LSTM-的一些笔记" class="headerlink" title="3 LSTM 的一些笔记"></a>3 LSTM 的一些笔记</h1><h2 id="3-1-nn-LSTM的使用"><a href="#3-1-nn-LSTM的使用" class="headerlink" title="3.1 nn.LSTM的使用"></a>3.1 nn.LSTM的使用</h2><p>参考链接：<a href="https://blog.csdn.net/mimiduck/article/details/119975080">https://blog.csdn.net/mimiduck/article/details/119975080</a><br>莫烦Python 402_RNN.py说明：<br>任务目标：预测手写数字是几<br>训练数据集是MNIST，使用pytorch加载该数据集返回两个值, 第一个是一个 60000x28x28 的tensor, 这里的 n 是样本数(行数), m 是特征数(列数). 训练数据集包含 60,000 个样本, 测试数据集包含 10,000 样本. 在 MNIST 数据集中的每张图片由 28 x 28 个像素点构成, 每个像素点用一个灰度值表示. 在这里, 我们将 28 x 28 的像素展开为一个一维的行向量, 这些行向量就是图片数组里的行(每行 784 个值, 或者说每行就是代表了一张图片). load_mnist 函数返回的第二个数组(labels) 包含了相应的目标变量, 也就是手写数字的类标签(整数 0-9).</p>
<h2 id="3-2-pytorch种LSTM层数的问题"><a href="#3-2-pytorch种LSTM层数的问题" class="headerlink" title="3.2 pytorch种LSTM层数的问题"></a>3.2 pytorch种LSTM层数的问题</h2><ol>
<li>官网上关于LSTM参数 num_layers 的讨论：<a href="https://discuss.pytorch.org/t/what-is-num-layers-in-rnn-module/9843">https://discuss.pytorch.org/t/what-is-num-layers-in-rnn-module/9843</a></li>
<li>LSTM层数问题：<a href="https://stackoverflow.com/questions/49224413/difference-between-1-lstm-with-num-layers-2-and-2-lstms-in-pytorch">https://stackoverflow.com/questions/49224413/difference-between-1-lstm-with-num-layers-2-and-2-lstms-in-pytorch</a></li>
<li>LSTM层数代码的验证：<a href="https://stackoverflow.com/questions/71630493/multi-lstm-layers-and-multi-lstm-in-pytorch">https://stackoverflow.com/questions/71630493/multi-lstm-layers-and-multi-lstm-in-pytorch</a></li>
<li>多层LSTM与cell的绘图：<a href="https://towardsdatascience.com/from-a-lstm-cell-to-a-multilayer-lstm-network-with-pytorch-2899eb5696f3">https://towardsdatascience.com/from-a-lstm-cell-to-a-multilayer-lstm-network-with-pytorch-2899eb5696f3</a></li>
</ol>
<h2 id="3-3-变长数据的处理"><a href="#3-3-变长数据的处理" class="headerlink" title="3.3 变长数据的处理"></a>3.3 变长数据的处理</h2><p>LSTM变长数据的输入：<a href="https://blog.csdn.net/kejizuiqianfang/article/details/100835528">https://blog.csdn.net/kejizuiqianfang/article/details/100835528</a><br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将不等长的tensor数据，补充成等长的tensor数据，这个就已经是补充好的等长tensor数据了</span></span><br><span class="line">torch.nn.utils.rnn.pad_sequence()</span><br><span class="line"><span class="comment"># 把等长的tensor根据所输入的参数压缩成实际的数据, 同时数据格式变成PackedSequence</span></span><br><span class="line">torch.nn.utils.rnn.pack_padded_sequence()</span><br><span class="line"><span class="comment"># 上述压缩成PackedSequence的数据还原成tensor类型, 并补成等长的数据</span></span><br><span class="line">torch.nn.utils.rnn.pad_packed_sequence()</span><br></pre></td></tr></table></figure><br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn.utils.rnn <span class="keyword">as</span> rnn_utils</span><br><span class="line">x = [torch.tensor([<span class="number">1</span>]), torch.tensor([<span class="number">1</span>,<span class="number">2</span>])]</span><br><span class="line">y = rnn_utils.pad_sequence(x, batch_first=<span class="literal">True</span>, padding_value=-<span class="number">999</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;type: &quot;</span>, <span class="built_in">type</span>(x), <span class="built_in">type</span>(y))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x:\n&quot;</span>, x)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;y:\n&quot;</span>, y)</span><br></pre></td></tr></table></figure><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>:  &lt;class <span class="string">&#x27;list&#x27;</span>&gt; &lt;class <span class="string">&#x27;torch.Tensor&#x27;</span>&gt;</span><br><span class="line">x:</span><br><span class="line"> [tensor([1]), tensor([1, 2])]</span><br><span class="line">y:</span><br><span class="line"> tensor([[   1, -999],</span><br><span class="line">        [   1,    2]])</span><br></pre></td></tr></table></figure></p>
<h2 id="3-4-Seq2Seq模型"><a href="#3-4-Seq2Seq模型" class="headerlink" title="3.4 Seq2Seq模型"></a>3.4 Seq2Seq模型</h2><ol>
<li>简易版RNN</li>
<li>LSTM</li>
<li>GRU，LSTM的简化版</li>
<li>Attention</li>
<li>Self Attention</li>
<li>Transformer (<a href="https://www.bilibili.com/video/BV1SK4y1d7Qh/?spm_id_from=333.788.recommend_more_video.-1">b站王树森</a>)<br>[<a href="https://www.bbsmax.com/A/Gkz1Pm4qdR/">深入理解Transformer及其源码</a>]</li>
<li>Informer<br>AAAI最佳论文Informer 解读. [<a href="https://blog.csdn.net/fluentn/article/details/115392229">链接</a>]</li>
</ol>
<h1 id="4-两个警告"><a href="#4-两个警告" class="headerlink" title="4 两个警告"></a>4 两个警告</h1><h2 id="4-2-警告1-——-Numpy-array-is-not-writeable"><a href="#4-2-警告1-——-Numpy-array-is-not-writeable" class="headerlink" title="4.2 警告1 —— Numpy array is not writeable"></a>4.2 警告1 —— Numpy array is not writeable</h2><p>警告1：\torchvision\datasets\mnist.py:498: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at …\torch\csrc\utils\tensor_numpy.cpp:180.)</p>
<p>点进去之后将copy=False改为copy=True</p>
<p>参考链接：<a href="https://blog.csdn.net/qq_36667170/article/details/121222766">https://blog.csdn.net/qq_36667170/article/details/121222766</a></p>
<h2 id="4-2-警告2-——-test-data-has-been-renamed-data"><a href="#4-2-警告2-——-test-data-has-been-renamed-data" class="headerlink" title="4.2 警告2 —— test_data has been renamed data"></a>4.2 警告2 —— test_data has been renamed data</h2><p>警告2：UserWarning: test_data has been renamed datawarnings.warn(“test_data has been renamed data”)<br>UserWarning: test_labels has been renamed targets warnings.warn(“test_labels has been renamed targets”)</p>
<p>test_data.test_data → test_data.data<br>test_data.tast_labels → test_data.targets</p>
<p>参考链接：<a href="https://blog.csdn.net/u011522686/article/details/104717311">https://blog.csdn.net/u011522686/article/details/104717311</a></p>
<h1 id="5-可参考的视频教程"><a href="#5-可参考的视频教程" class="headerlink" title="5 可参考的视频教程"></a>5 可参考的视频教程</h1><ul>
<li>pytorch的另一个基础教程：<a href="https://www.bilibili.com/video/BV1sD4y127bC?from=search&amp;seid=13757539151759783516&amp;spm_id_from=333.337.0.0">视频</a><a href="https://github.com/setail/pytorch_tutorial">代码</a></li>
<li>pytorch小土堆快速入门：<a href="https://www.bilibili.com/video/BV1hE411t7RN?p=15">视频</a><a href="https://github.com/xiaotudui/PyTorch-Tutorial">代码</a></li>
</ul>
]]></content>
      <categories>
        <category>人工智能</category>
        <category>神经网络</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Pytorch 学习笔记（基础篇）</title>
    <url>/archives/9765ce7e.html</url>
    <content><![CDATA[<p>本文主要是记录Pytorch学习过程中的一些基础运算方法，方便自己查阅。<br><span id="more"></span></p>
<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>本文记录了Pytorch学习过程中的一些基本用法，主要包括：线性空间的划分、矩阵乘法等。</p>
<h1 id="2-Pytroch-基础用法"><a href="#2-Pytroch-基础用法" class="headerlink" title="2 Pytroch 基础用法"></a>2 Pytroch 基础用法</h1><h2 id="2-1-维度置换permute"><a href="#2-1-维度置换permute" class="headerlink" title="2.1 维度置换permute"></a>2.1 维度置换permute</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = torch.randn(<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>)</span><br><span class="line">b = a.permute(<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>)  <span class="comment"># 将a的最后两个维度数据交换，即a原来的第1维数据变成b的第2维数据</span></span><br><span class="line"><span class="built_in">print</span>(a.shape)  <span class="comment"># torch.Size([4, 6, 7])</span></span><br><span class="line"><span class="built_in">print</span>(b.shape)  <span class="comment"># torch.Size([4, 7, 6])</span></span><br></pre></td></tr></table></figure>
<h2 id="2-2-线性空间的划分"><a href="#2-2-线性空间的划分" class="headerlink" title="2.2 线性空间的划分"></a>2.2 线性空间的划分</h2><p>函数原型：</p>
<blockquote>
<p>torch.linspace(start, end, steps, *, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False)</p>
</blockquote>
<p>示例用法：<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">torch.linspace(<span class="number">3</span>, <span class="number">10</span>, steps=<span class="number">5</span>)  <span class="comment"># tensor([ 3.0000,  4.7500,  6.5000,  8.2500, 10.0000])</span></span><br><span class="line">torch.linspace(-<span class="number">10</span>, <span class="number">10</span>, steps=<span class="number">5</span>)  <span class="comment"># tensor([-10.,  -5.,   0.,   5.,  10.])</span></span><br><span class="line">torch.linspace(start=-<span class="number">10</span>, end=<span class="number">10</span>, steps=<span class="number">5</span>)  <span class="comment"># tensor([-10.,  -5.,   0.,   5.,  10.])</span></span><br><span class="line">torch.linspace(start=-<span class="number">10</span>, end=<span class="number">10</span>, steps=<span class="number">1</span>)  <span class="comment"># tensor([-10.])</span></span><br></pre></td></tr></table></figure></p>
<h2 id="2-3-tensor连接"><a href="#2-3-tensor连接" class="headerlink" title="2.3 tensor连接"></a>2.3 tensor连接</h2><p>torch.cat() 函数目的： 在给定维度上对输入的张量序列seq 进行连接操作。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">x1 = torch.tensor([[<span class="number">11</span>,<span class="number">21</span>,<span class="number">31</span>],[<span class="number">21</span>,<span class="number">31</span>,<span class="number">41</span>]],dtype=torch.<span class="built_in">int</span>)  <span class="comment"># torch.Size([2, 3])</span></span><br><span class="line">x2 = torch.tensor([[<span class="number">12</span>,<span class="number">22</span>,<span class="number">32</span>],[<span class="number">22</span>,<span class="number">32</span>,<span class="number">42</span>]],dtype=torch.<span class="built_in">int</span>)  <span class="comment"># torch.Size([2, 3])</span></span><br><span class="line">torch.cat((x1,x2), <span class="number">0</span>).shape  <span class="comment"># torch.Size([4, 3])</span></span><br><span class="line">torch.cat((x1,x2), <span class="number">1</span>).shape  <span class="comment"># torch.Size([2, 6])</span></span><br><span class="line">x = torch.tensor([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])  <span class="comment"># torch.Size([3])</span></span><br><span class="line">y = torch.tensor([<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>])  <span class="comment"># torch.Size([3])</span></span><br><span class="line">torch.cat((x,y),<span class="number">1</span>)  <span class="comment"># error</span></span><br><span class="line">torch.cat((x,y),<span class="number">0</span>)  <span class="comment"># tensor([ 1,  2,  3, 11, 22, 33])</span></span><br></pre></td></tr></table></figure><br>需要注意的是，连接的维度不能超过tensor本身具备的维度。</p>
<h2 id="2-4-矩阵运算"><a href="#2-4-矩阵运算" class="headerlink" title="2.4 矩阵运算"></a>2.4 矩阵运算</h2><h3 id="2-4-1-torch-einsum"><a href="#2-4-1-torch-einsum" class="headerlink" title="2.4.1 torch.einsum"></a>2.4.1 torch.einsum</h3><p>[<a href="https://zhuanlan.zhihu.com/p/434232512">链接</a>]<br>爱因斯坦求和约定：用于简洁的表示乘积、点积、转置等方法。<br>例如：<br>$A\in\mathbb{R}^{i\times k}$, $B\in\mathbb{R}^{k\times j}$，则 $C_j^i=A_k^iB_j^k$，在代码中可以表示为’ik, kj-&gt;ij’，则对应代码为：<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">A = torch.linspace(<span class="number">1</span>, <span class="number">12</span>, steps=<span class="number">12</span>).reshape(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">B = torch.linspace(<span class="number">1</span>, <span class="number">20</span>, steps=<span class="number">20</span>).reshape(<span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;A: \n&#x27;</span>, A)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;B: \n&#x27;</span>, B)</span><br><span class="line">C = torch.einsum(<span class="string">&#x27;ik,kj-&gt;ij&#x27;</span>, A, B)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;C:\n&#x27;</span>, C, C.shape)  <span class="comment"># torch.Size([3, 5])</span></span><br><span class="line"></span><br><span class="line">B = torch.linspace(<span class="number">1</span>, <span class="number">20</span>, steps=<span class="number">20</span>).reshape(<span class="number">5</span>, <span class="number">4</span>)</span><br><span class="line">C = torch.einsum(<span class="string">&#x27;ik,jk-&gt;ij&#x27;</span>, A, B)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;C:\n&#x27;</span>, C, C.shape)  <span class="comment"># torch.Size([3, 5])</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;A所有元素求和：ij-&gt;\n&#x27;</span>, torch.einsum(<span class="string">&#x27;ij-&gt;&#x27;</span>, A))  <span class="comment"># 求和，tensor(1.4456)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;A列求和：ij-&gt;j\n&#x27;</span>, torch.einsum(<span class="string">&#x27;ij-&gt;j&#x27;</span>, A))  <span class="comment"># 列求和</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;A点积求和：ij,ij-&gt;\n&#x27;</span>, torch.einsum(<span class="string">&#x27;ij,ij-&gt;&#x27;</span>, A, A))  <span class="comment"># 点积求和</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;A转置：ij-&gt;ji\n&#x27;</span>, torch.einsum(<span class="string">&#x27;ij-&gt;ji&#x27;</span>, A))  <span class="comment"># 转置</span></span><br><span class="line"><span class="comment"># 多维矩阵求和</span></span><br><span class="line">B = torch.linspace(<span class="number">1</span>, <span class="number">60</span>, steps=<span class="number">60</span>).reshape(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">C = torch.linspace(<span class="number">1</span>, <span class="number">20</span>, steps=<span class="number">20</span>).reshape(<span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">D = torch.einsum(<span class="string">&#x27;ij,ijk,jk-&gt;ik&#x27;</span>, A, B, C)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;多维矩阵求和：ij,ijk,jk-&gt;ik\n&#x27;</span>, D, D.shape)  <span class="comment"># torch.Size([3, 5])  将三个矩阵共有的维度j合并</span></span><br></pre></td></tr></table></figure><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">A: </span><br><span class="line"> tensor([[ 1.,  2.,  3.,  4.],</span><br><span class="line">        [ 5.,  6.,  7.,  8.],</span><br><span class="line">        [ 9., 10., 11., 12.]])</span><br><span class="line">B: </span><br><span class="line"> tensor([[ 1.,  2.,  3.,  4.,  5.],</span><br><span class="line">        [ 6.,  7.,  8.,  9., 10.],</span><br><span class="line">        [11., 12., 13., 14., 15.],</span><br><span class="line">        [16., 17., 18., 19., 20.]])</span><br><span class="line">C:</span><br><span class="line"> tensor([[110., 120., 130., 140., 150.],</span><br><span class="line">        [246., 272., 298., 324., 350.],</span><br><span class="line">        [382., 424., 466., 508., 550.]]) torch.Size([3, 5])</span><br><span class="line">C:</span><br><span class="line"> tensor([[ 30.,  70., 110., 150., 190.],</span><br><span class="line">        [ 70., 174., 278., 382., 486.],</span><br><span class="line">        [110., 278., 446., 614., 782.]]) torch.Size([3, 5])</span><br><span class="line">A所有元素求和：ij-&gt;</span><br><span class="line"> tensor(78.)</span><br><span class="line">A列求和：ij-&gt;j</span><br><span class="line"> tensor([15., 18., 21., 24.])</span><br><span class="line">A点积求和：ij,ij-&gt;</span><br><span class="line"> tensor(650.)</span><br><span class="line">A转置：ij-&gt;ji</span><br><span class="line"> tensor([[ 1.,  5.,  9.],</span><br><span class="line">        [ 2.,  6., 10.],</span><br><span class="line">        [ 3.,  7., 11.],</span><br><span class="line">        [ 4.,  8., 12.]])</span><br><span class="line">多维矩阵求和：ij,ijk,jk-&gt;ik</span><br><span class="line"> tensor([[ 1460.,  1690.,  1940.,  2210.,  2500.],</span><br><span class="line">        [ 8036.,  9074., 10164., 11306., 12500.],</span><br><span class="line">        [20052., 22538., 25108., 27762., 30500.]]) torch.Size([3, 5])</span><br></pre></td></tr></table></figure></p>
<h3 id="2-4-2-一维向量的运算"><a href="#2-4-2-一维向量的运算" class="headerlink" title="2.4.2 一维向量的运算"></a>2.4.2 一维向量的运算</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">x = torch.tensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">y = torch.tensor([<span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x_shape&quot;</span>, x.shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;y_shape&quot;</span>, y.shape)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>+<span class="string">&#x27;-&#x27;</span>*<span class="number">15</span> + <span class="string">&#x27; 元素相乘: *, torch.mul &#x27;</span>+<span class="string">&#x27;-&#x27;</span>*<span class="number">15</span>)</span><br><span class="line">c = x*y</span><br><span class="line"><span class="built_in">print</span>(c, c.shape)</span><br><span class="line">d = torch.mul(x, y)</span><br><span class="line"><span class="built_in">print</span>(d, d.shape)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>+<span class="string">&#x27;-&#x27;</span>*<span class="number">15</span> + <span class="string">&#x27; 向量点积/内积: torch.dot &#x27;</span>+<span class="string">&#x27;-&#x27;</span>*<span class="number">15</span>)</span><br><span class="line"><span class="built_in">print</span>(torch.dot(x, y))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>+<span class="string">&#x27;-&#x27;</span>*<span class="number">15</span> + <span class="string">&#x27; 向量叉乘: torch.cross &#x27;</span>+<span class="string">&#x27;-&#x27;</span>*<span class="number">15</span>)</span><br><span class="line">x = torch.tensor([<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line">y = torch.tensor([<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(torch.cross(x, y))</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">x_shape torch.Size([4])</span><br><span class="line">y_shape torch.Size([4])</span><br><span class="line"></span><br><span class="line">--------------- 元素相乘: *, torch.mul ---------------</span><br><span class="line">tensor([ 2,  2, 12, 12]) torch.Size([4])</span><br><span class="line">tensor([ 2,  2, 12, 12]) torch.Size([4])</span><br><span class="line"></span><br><span class="line">--------------- 向量点积/内积: torch.dot ---------------</span><br><span class="line">tensor(28)</span><br><span class="line"></span><br><span class="line">--------------- 向量叉乘: torch.cross ---------------</span><br><span class="line">tensor([0, 0, 1])  <span class="comment"># 由 x, y轴叉乘得到z轴</span></span><br></pre></td></tr></table></figure>
<h3 id="2-4-3-二维矩阵的运算"><a href="#2-4-3-二维矩阵的运算" class="headerlink" title="2.4.3 二维矩阵的运算"></a>2.4.3 二维矩阵的运算</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">x = torch.tensor([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line">y = torch.tensor([[<span class="number">2</span>, <span class="number">1</span>], [<span class="number">4</span>, <span class="number">3</span>]])</span><br><span class="line">z1 = torch.tensor([<span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line">z2 = z1.unsqueeze(<span class="number">0</span>)</span><br><span class="line">z3 = z1.unsqueeze(-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x_shape&quot;</span>, x.shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;y_shape&quot;</span>, y.shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;z1_shape&quot;</span>, z1.shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;z2_shape&quot;</span>, z2.shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;z3_shape&quot;</span>, z3.shape)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>+<span class="string">&#x27;\n&#x27;</span>+<span class="string">&#x27;-&#x27;</span>*<span class="number">15</span> + <span class="string">&#x27; 元素相乘: *, torch.mul &#x27;</span>+<span class="string">&#x27;-&#x27;</span>*<span class="number">15</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">9312</span>) + <span class="string">&quot;  x * y: \n&quot;</span>,x * y, (x * y).shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">9313</span>) + <span class="string">&quot;  x * z1: \n&quot;</span>,x * z1, (x * z1).shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">9314</span>) + <span class="string">&quot;  x * z2: \n&quot;</span>,x * z2, (x * z2).shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">9315</span>) + <span class="string">&quot;  x * z3: \n&quot;</span>,x * z3, (x * z3).shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">9316</span>) + <span class="string">&quot;  torch.mul(x, y): \n&quot;</span>, torch.mul(x, y), torch.mul(x, y).shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">9317</span>) + <span class="string">&quot;  torch.mul(x, z1): \n&quot;</span>, torch.mul(x, z1), torch.mul(x, z1).shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">9318</span>) + <span class="string">&quot;  torch.mul(x, z2): \n&quot;</span>, torch.mul(x, z2), torch.mul(x, z2).shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">9319</span>) + <span class="string">&quot;  torch.mul(x, z3): \n&quot;</span>, torch.mul(x, z3), torch.mul(x, z3).shape)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>+<span class="string">&#x27;-&#x27;</span>*<span class="number">15</span> + <span class="string">&#x27; 二维矩阵与一维矩阵相乘: @, torch.matmul() &#x27;</span>+<span class="string">&#x27;-&#x27;</span>*<span class="number">15</span>)</span><br><span class="line"><span class="comment"># 事实上，z2和z3是二维矩阵，而非一维向量</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x@z1 != z1@x: \n&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27; x@z1:\n&#x27;</span>, x@z1, (x@z1).shape) <span class="comment"># 将 z1 从 (2) 扩展为 (2,1)，计算完再去掉扩充的维度</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27; z1@x:\n&#x27;</span>, z1@x, (z1@x).shape) <span class="comment"># 将 z1 从 (2) 扩展为 (1,2)，计算完再去掉扩充的维度</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;z2@x:\n&#x27;</span>, z2@x, (z2@x).shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;x@z3:\n&#x27;</span>, x@z3, (x@z3).shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;torch.matmul(x, z1):\n&#x27;</span>, torch.matmul(x, z1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;torch.matmul(z1, x):\n&#x27;</span>, torch.matmul(z1, x))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>+<span class="string">&#x27;-&#x27;</span>*<span class="number">15</span> + <span class="string">&#x27; 二维矩阵乘法: @, torch.mm, torch.matmul() &#x27;</span>+<span class="string">&#x27;-&#x27;</span>*<span class="number">15</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x@y: \n&quot;</span>, x@y, (x@y).shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;torch.mm(x, y): \n&quot;</span>, torch.mm(x, y), torch.mm(x, y).shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;torch.matmul(x, y): \n&quot;</span>, torch.matmul(x, y), torch.matmul(x, y).shape)</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">x_shape torch.Size([2, 2])</span><br><span class="line">y_shape torch.Size([2, 2])</span><br><span class="line">z1_shape torch.Size([2])</span><br><span class="line">z2_shape torch.Size([1, 2])</span><br><span class="line">z3_shape torch.Size([2, 1])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--------------- 元素相乘: *, torch.mul ---------------</span><br><span class="line">①  x * y: </span><br><span class="line"> tensor([[ 2,  2],</span><br><span class="line">        [12, 12]]) torch.Size([2, 2])</span><br><span class="line">②  x * z1: </span><br><span class="line"> tensor([[ 5, 12],</span><br><span class="line">        [15, 24]]) torch.Size([2, 2])</span><br><span class="line">③  x * z2: </span><br><span class="line"> tensor([[ 5, 12],</span><br><span class="line">        [15, 24]]) torch.Size([2, 2])</span><br><span class="line">④  x * z3: </span><br><span class="line"> tensor([[ 5, 10],</span><br><span class="line">        [18, 24]]) torch.Size([2, 2])</span><br><span class="line">⑤  torch.mul(x, y): </span><br><span class="line"> tensor([[ 2,  2],</span><br><span class="line">        [12, 12]]) torch.Size([2, 2])</span><br><span class="line">⑥  torch.mul(x, z1): </span><br><span class="line"> tensor([[ 5, 12],</span><br><span class="line">        [15, 24]]) torch.Size([2, 2])</span><br><span class="line">⑦  torch.mul(x, z2): </span><br><span class="line"> tensor([[ 5, 12],</span><br><span class="line">        [15, 24]]) torch.Size([2, 2])</span><br><span class="line">⑧  torch.mul(x, z3): </span><br><span class="line"> tensor([[ 5, 10],</span><br><span class="line">        [18, 24]]) torch.Size([2, 2])</span><br><span class="line"></span><br><span class="line">--------------- 二维矩阵与一维矩阵相乘: @, torch.matmul() ---------------</span><br><span class="line">x@z1 != z1@x: </span><br><span class="line"></span><br><span class="line"> x@z1:</span><br><span class="line"> tensor([17, 39]) torch.Size([2])</span><br><span class="line"> z1@x:</span><br><span class="line"> tensor([23, 34]) torch.Size([2])</span><br><span class="line">z2@x:</span><br><span class="line"> tensor([[23, 34]]) torch.Size([1, 2])</span><br><span class="line">x@z3:</span><br><span class="line"> tensor([[17],</span><br><span class="line">        [39]]) torch.Size([2, 1])</span><br><span class="line">torch.matmul(x, z1):</span><br><span class="line"> tensor([17, 39])</span><br><span class="line">torch.matmul(z1, x):</span><br><span class="line"> tensor([23, 34])</span><br><span class="line"></span><br><span class="line">--------------- 二维矩阵乘法: @, torch.mm, torch.matmul() ---------------</span><br><span class="line">x@y: </span><br><span class="line"> tensor([[10,  7],</span><br><span class="line">        [22, 15]]) torch.Size([2, 2])</span><br><span class="line">torch.mm(x, y): </span><br><span class="line"> tensor([[10,  7],</span><br><span class="line">        [22, 15]]) torch.Size([2, 2])</span><br><span class="line">torch.matmul(x, y): </span><br><span class="line"> tensor([[10,  7],</span><br><span class="line">        [22, 15]]) torch.Size([2, 2])</span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">x = torch.linspace(<span class="number">1</span>, <span class="number">12</span>, steps=<span class="number">12</span>).reshape(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">y = torch.linspace(<span class="number">11</span>, <span class="number">22</span>, steps=<span class="number">12</span>).reshape(<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>+<span class="string">&#x27;-&#x27;</span>*<span class="number">15</span> + <span class="string">&#x27; 三维矩阵乘法: @, torch.bmm, torch.matmul() &#x27;</span>+<span class="string">&#x27;-&#x27;</span>*<span class="number">15</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x_shape&quot;</span>, x.shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;y_shape&quot;</span>, y.shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x@y: \n&quot;</span>, x@y, (x@y).shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;torch.mm(x, y): \n&quot;</span>, torch.bmm(x, y), torch.bmm(x, y).shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;torch.matmul(x, y): \n&quot;</span>, torch.matmul(x, y), torch.matmul(x, y).shape)</span><br><span class="line"></span><br><span class="line">x = torch.linspace(<span class="number">1</span>, <span class="number">72</span>, steps=<span class="number">72</span>).reshape(<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">y = torch.linspace(<span class="number">11</span>, <span class="number">34</span>, steps=<span class="number">24</span>).reshape(<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>+<span class="string">&#x27;-&#x27;</span>*<span class="number">15</span> + <span class="string">&#x27; 三维以上维矩阵乘法: @, torch.matmul() &#x27;</span>+<span class="string">&#x27;-&#x27;</span>*<span class="number">15</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x_shape&quot;</span>, x.shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;y_shape&quot;</span>, y.shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x@y: \n&quot;</span>, x@y, (x@y).shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;torch.matmul(x, y): \n&quot;</span>, torch.matmul(x, y), torch.matmul(x, y).shape)</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--------------- 三维矩阵乘法: @, torch.bmm, torch.matmul() ---------------</span><br><span class="line">x_shape torch.Size([2, 2, 3])</span><br><span class="line">y_shape torch.Size([2, 3, 2])</span><br><span class="line">x@y: </span><br><span class="line"> tensor([[[ 82.,  88.],</span><br><span class="line">         [199., 214.]],</span><br><span class="line"></span><br><span class="line">        [[460., 484.],</span><br><span class="line">         [631., 664.]]]) torch.Size([2, 2, 2])</span><br><span class="line">torch.mm(x, y): </span><br><span class="line"> tensor([[[ 82.,  88.],</span><br><span class="line">         [199., 214.]],</span><br><span class="line"></span><br><span class="line">        [[460., 484.],</span><br><span class="line">         [631., 664.]]]) torch.Size([2, 2, 2])</span><br><span class="line">torch.matmul(x, y): </span><br><span class="line"> tensor([[[ 82.,  88.],</span><br><span class="line">         [199., 214.]],</span><br><span class="line"></span><br><span class="line">        [[460., 484.],</span><br><span class="line">         [631., 664.]]]) torch.Size([2, 2, 2])</span><br><span class="line"></span><br><span class="line">--------------- 三维以上维矩阵乘法: @, torch.matmul() ---------------</span><br><span class="line">x_shape torch.Size([3, 4, 2, 3])</span><br><span class="line">y_shape torch.Size([4, 3, 2])</span><br><span class="line">x@y: </span><br><span class="line"> tensor([[[[  82.,   88.],</span><br><span class="line">          [ 199.,  214.]],</span><br><span class="line"></span><br><span class="line">         [[ 460.,  484.],</span><br><span class="line">          [ 631.,  664.]],</span><br><span class="line"></span><br><span class="line">         [[1054., 1096.],</span><br><span class="line">          [1279., 1330.]],</span><br><span class="line"></span><br><span class="line">         [[1864., 1924.],</span><br><span class="line">          [2143., 2212.]]],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        [[[1018., 1096.],</span><br><span class="line">          [1135., 1222.]],</span><br><span class="line"></span><br><span class="line">         [[1828., 1924.],</span><br><span class="line">          [1999., 2104.]],</span><br><span class="line"></span><br><span class="line">         [[2854., 2968.],</span><br><span class="line">          [3079., 3202.]],</span><br><span class="line"></span><br><span class="line">         [[4096., 4228.],</span><br><span class="line">          [4375., 4516.]]],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        [[[1954., 2104.],</span><br><span class="line">          [2071., 2230.]],</span><br><span class="line"></span><br><span class="line">         [[3196., 3364.],</span><br><span class="line">          [3367., 3544.]],</span><br><span class="line"></span><br><span class="line">         [[4654., 4840.],</span><br><span class="line">          [4879., 5074.]],</span><br><span class="line"></span><br><span class="line">         [[6328., 6532.],</span><br><span class="line">          [6607., 6820.]]]]) torch.Size([3, 4, 2, 2])</span><br><span class="line">torch.matmul(x, y): </span><br><span class="line"> tensor([[[[  82.,   88.],</span><br><span class="line">          [ 199.,  214.]],</span><br><span class="line"></span><br><span class="line">         [[ 460.,  484.],</span><br><span class="line">          [ 631.,  664.]],</span><br><span class="line"></span><br><span class="line">         [[1054., 1096.],</span><br><span class="line">          [1279., 1330.]],</span><br><span class="line"></span><br><span class="line">         [[1864., 1924.],</span><br><span class="line">          [2143., 2212.]]],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        [[[1018., 1096.],</span><br><span class="line">          [1135., 1222.]],</span><br><span class="line"></span><br><span class="line">         [[1828., 1924.],</span><br><span class="line">          [1999., 2104.]],</span><br><span class="line"></span><br><span class="line">         [[2854., 2968.],</span><br><span class="line">          [3079., 3202.]],</span><br><span class="line"></span><br><span class="line">         [[4096., 4228.],</span><br><span class="line">          [4375., 4516.]]],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        [[[1954., 2104.],</span><br><span class="line">          [2071., 2230.]],</span><br><span class="line"></span><br><span class="line">         [[3196., 3364.],</span><br><span class="line">          [3367., 3544.]],</span><br><span class="line"></span><br><span class="line">         [[4654., 4840.],</span><br><span class="line">          [4879., 5074.]],</span><br><span class="line"></span><br><span class="line">         [[6328., 6532.],</span><br><span class="line">          [6607., 6820.]]]]) torch.Size([3, 4, 2, 2])</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工科生的基本功</category>
        <category>快乐码农</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 基础篇</title>
    <url>/archives/9765ce6d.html</url>
    <content><![CDATA[<span id="more"></span>
<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>本文主要记录自己在学习Python过程中的一些笔记。</p>
<h1 id="2-Python基础篇"><a href="#2-Python基础篇" class="headerlink" title="2 Python基础篇"></a>2 Python基础篇</h1><h2 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1 安装"></a>2.1 安装</h2><p>略</p>
<h2 id="2-2-print"><a href="#2-2-print" class="headerlink" title="2.2 print"></a>2.2 print</h2><p>输出单引号的两种方式：<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;I\&#x27;m here.&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;I&#x27;m here.&quot;</span>)</span><br></pre></td></tr></table></figure></p>
<h2 id="2-3-基本运算符号"><a href="#2-3-基本运算符号" class="headerlink" title="2.3 基本运算符号"></a>2.3 基本运算符号</h2><p>+-<em>/：略<br>平方：`*</em>`<br>取余：8%3 = 2<br>取整：9//4 = 2</p>
<h2 id="2-4-自变量-variable"><a href="#2-4-自变量-variable" class="headerlink" title="2.4 自变量 variable"></a>2.4 自变量 variable</h2><p>定义多个自变量：<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a,b,c = <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br></pre></td></tr></table></figure></p>
<h2 id="2-6-for循环"><a href="#2-6-for循环" class="headerlink" title="2.6 for循环"></a>2.6 for循环</h2><p>break会跳出整个循环<br>continue是停止本次循环之后的内容并进入下一次循环<br>list输出内容的同时并输出循环数：<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line"><span class="keyword">for</span> i, data <span class="keyword">in</span> enumrate(a):</span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">str</span>(i) + <span class="string">&quot;: &quot;</span>, data)</span><br></pre></td></tr></table></figure></p>
<p>for循环后加else，如果中途break则不会执行，如果正常执行完则会执行：<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">  <span class="keyword">if</span> i == <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="built_in">print</span>(i)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">range(5): 0,1,2,3,4</span><br><span class="line">range(1,5): 1,2,3,4</span><br><span class="line">range(1,10,2): 1,3,5,7,9</span><br><span class="line">range(1,10,5): 1,6</span><br></pre></td></tr></table></figure></p>
<h2 id="2-7-if"><a href="#2-7-if" class="headerlink" title="2.7 if"></a>2.7 if</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">x = <span class="number">2</span> </span><br><span class="line">y = <span class="number">3</span></span><br><span class="line">z = <span class="number">4</span></span><br><span class="line"><span class="keyword">if</span> x&lt;y&gt;z:   <span class="comment"># 同理， x&lt;y&lt;z这种的也行</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;something&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="2-19-类init功能"><a href="#2-19-类init功能" class="headerlink" title="2.19 类init功能"></a>2.19 类init功能</h2><p>init中就可以直接调用类中的函数</p>
<h2 id="2-22-list"><a href="#2-22-list" class="headerlink" title="2.22 list"></a>2.22 list</h2><details class="folding-tag" green><summary> 查看代码 </summary>
              <div class='content'>
              <figure class="highlight py"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;aa&#x27;</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span>*<span class="number">20</span> + <span class="string">&#x27; 元素位置索引与计数 &#x27;</span> + <span class="string">&#x27;-&#x27;</span>*<span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(x.index(<span class="number">1</span>))  <span class="comment"># 第一次检索到元素就返回</span></span><br><span class="line"><span class="built_in">print</span>(x.count(<span class="string">&#x27;aa&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(x.index(<span class="string">&#x27;aa&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>([i <span class="keyword">for</span> i, data <span class="keyword">in</span> <span class="built_in">enumerate</span>(x) <span class="keyword">if</span> data==<span class="number">1</span>])  <span class="comment"># 检索所有位置</span></span><br><span class="line"><span class="built_in">print</span>([i <span class="keyword">for</span> i, data <span class="keyword">in</span> <span class="built_in">enumerate</span>(x) <span class="keyword">if</span> data==<span class="string">&#x27;aa&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>+<span class="string">&#x27;*&#x27;</span>*<span class="number">20</span> + <span class="string">&#x27; 移除一个元素 &#x27;</span>+<span class="string">&#x27;*&#x27;</span>*<span class="number">20</span>)</span><br><span class="line">x.pop(<span class="number">3</span>)  <span class="comment"># pop方法移除一个元素, pop的输入参数是元素位置</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;aa&#x27;</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">x.remove(<span class="string">&#x27;aa&#x27;</span>)  <span class="comment"># remove移除一个元素，输入的是元素本身</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>+<span class="string">&#x27;=&#x27;</span>*<span class="number">20</span> + <span class="string">&#x27; 移除指定顺序的多个元素 &#x27;</span>+<span class="string">&#x27;=&#x27;</span>*<span class="number">20</span>)</span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;aa&#x27;</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">del_id = [<span class="number">0</span>, <span class="number">6</span>, <span class="number">5</span>]</span><br><span class="line">del_id.sort()  <span class="comment"># 默认排序：从小到大</span></span><br><span class="line"><span class="built_in">print</span>(del_id)</span><br><span class="line">del_id.reverse()  <span class="comment"># 翻转之后，直接保存到原list上</span></span><br><span class="line"><span class="built_in">print</span>(del_id)</span><br><span class="line">del_id = [<span class="number">0</span>, <span class="number">6</span>, <span class="number">5</span>]</span><br><span class="line">del_id.sort(reverse=<span class="literal">True</span>)  <span class="comment"># 按从大到小排序</span></span><br><span class="line"><span class="built_in">print</span>(del_id)</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">id</span> <span class="keyword">in</span> del_id:</span><br><span class="line">  x.pop(<span class="built_in">id</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>+<span class="string">&#x27;#&#x27;</span>*<span class="number">20</span> + <span class="string">&#x27; 插入元素 &#x27;</span> + <span class="string">&#x27;#&#x27;</span>*<span class="number">20</span>)</span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;aa&#x27;</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">x.append(<span class="string">&#x27;tt&#x27;</span>)  <span class="comment"># 末尾插入单个元素</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line">x.extend(del_id)  <span class="comment"># 末尾插入元素列表</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line">x.insert(<span class="number">3</span>, <span class="string">&#x27;dd&#x27;</span>)  <span class="comment"># 指定位置插入元素</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>+<span class="string">&#x27;=&#x27;</span>*<span class="number">20</span> + <span class="string">&#x27; 指定多个位置插入多个元素 &#x27;</span> + <span class="string">&#x27;=&#x27;</span>*<span class="number">20</span>)</span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;aa&#x27;</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">element = [<span class="string">&#x27;gg&#x27;</span>, <span class="string">&#x27;hh&#x27;</span>, <span class="string">&#x27;kk&#x27;</span>]</span><br><span class="line">element_id = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>]</span><br><span class="line">element.reverse()</span><br><span class="line">element_id.reverse()</span><br><span class="line"><span class="comment"># 排序后从后向前插入</span></span><br><span class="line"><span class="keyword">for</span> i, idx <span class="keyword">in</span> <span class="built_in">enumerate</span>(element_id):</span><br><span class="line">  x.insert(idx, element[i])</span><br><span class="line">  <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>+<span class="string">&#x27;-`&#x27;</span>*<span class="number">10</span> + <span class="string">&#x27; list -&gt; str &#x27;</span> + <span class="string">&#x27;-`&#x27;</span>*<span class="number">10</span>)</span><br><span class="line">dataList = [<span class="string">&#x27;1\n&#x27;</span>, <span class="string">&#x27;2\n&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span> ]</span><br><span class="line">str1 = <span class="string">&quot;&quot;</span>.join(dataList )</span><br><span class="line"><span class="built_in">print</span> (dataList)</span><br><span class="line"><span class="built_in">print</span>(str1)</span><br></pre></td></tr></table></figure>
              </div>
            </details>
<details class="folding-tag" yellow><summary> 查看输出结果 </summary>
              <div class='content'>
              <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-------------------- 元素位置索引与计数 --------------------</span><br><span class="line">0</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">[0, 5, 6]</span><br><span class="line">[3, 7]</span><br><span class="line"></span><br><span class="line">******************** 移除一个元素 ********************</span><br><span class="line">[1, 2, 3, <span class="string">&#x27;bb&#x27;</span>, 1, 1, <span class="string">&#x27;aa&#x27;</span>, 4, 5]</span><br><span class="line">[1, 2, 3, <span class="string">&#x27;bb&#x27;</span>, 1, 1, <span class="string">&#x27;aa&#x27;</span>, 4, 5]</span><br><span class="line"></span><br><span class="line">==================== 移除指定顺序的多个元素 ====================</span><br><span class="line">[0, 5, 6]</span><br><span class="line">[6, 5, 0]</span><br><span class="line">[6, 5, 0]</span><br><span class="line">[2, 3, <span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;aa&#x27;</span>, 4, 5]</span><br><span class="line"></span><br><span class="line"><span class="comment">#################### 插入元素 ####################</span></span><br><span class="line">[1, 2, 3, <span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, 1, 1, <span class="string">&#x27;aa&#x27;</span>, 4, 5, <span class="string">&#x27;tt&#x27;</span>]</span><br><span class="line">[1, 2, 3, <span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, 1, 1, <span class="string">&#x27;aa&#x27;</span>, 4, 5, <span class="string">&#x27;tt&#x27;</span>, 6, 5, 0]</span><br><span class="line">[1, 2, 3, <span class="string">&#x27;dd&#x27;</span>, <span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, 1, 1, <span class="string">&#x27;aa&#x27;</span>, 4, 5, <span class="string">&#x27;tt&#x27;</span>, 6, 5, 0]</span><br><span class="line"></span><br><span class="line">==================== 指定多个位置插入多个元素 ====================</span><br><span class="line">[1, 2, 3, <span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, 1, <span class="string">&#x27;kk&#x27;</span>, 1, <span class="string">&#x27;aa&#x27;</span>, 4, 5]</span><br><span class="line">[1, 2, 3, <span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;hh&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, 1, <span class="string">&#x27;kk&#x27;</span>, 1, <span class="string">&#x27;aa&#x27;</span>, 4, 5]</span><br><span class="line">[1, <span class="string">&#x27;gg&#x27;</span>, 2, 3, <span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;hh&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, 1, <span class="string">&#x27;kk&#x27;</span>, 1, <span class="string">&#x27;aa&#x27;</span>, 4, 5]</span><br><span class="line"></span><br><span class="line">-`-`-`-`-`-`-`-`-`-` list -&gt; str -`-`-`-`-`-`-`-`-`-`</span><br><span class="line">[<span class="string">&#x27;1\n&#x27;</span>, <span class="string">&#x27;2\n&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>]</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">34</span><br></pre></td></tr></table></figure>
              </div>
            </details>
<h2 id="2-24-字典"><a href="#2-24-字典" class="headerlink" title="2.24 字典"></a>2.24 字典</h2><p>字典没有顺序<br>字典中的value可以是function</p>
<h2 id="2-28-错误处理try"><a href="#2-28-错误处理try" class="headerlink" title="2.28 错误处理try"></a>2.28 错误处理try</h2><p>打开不存在的eeee文件<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  file = <span class="built_in">open</span>(<span class="string">&#x27;eeee&#x27;</span>, <span class="string">&#x27;r+&#x27;</span>)     <span class="comment"># r只读，r+读写</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:          <span class="comment"># 捕获错误并将错误保存在变量e</span></span><br><span class="line">  <span class="built_in">print</span>(e)</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;No file named as eeee&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  file.write(<span class="string">&#x27;ssss&#x27;</span>)            <span class="comment"># 有错误执行except不会进入else，没有错误则进入else</span></span><br><span class="line">file.close</span><br></pre></td></tr></table></figure></p>
<h2 id="2-29-lambda，zip，map-filter-sort"><a href="#2-29-lambda，zip，map-filter-sort" class="headerlink" title="2.29 lambda，zip，map, filter, sort"></a>2.29 lambda，zip，map, filter, sort</h2><h3 id="2-29-1-lambda"><a href="#2-29-1-lambda" class="headerlink" title="2.29.1 lambda"></a>2.29.1 lambda</h3><p>lambda用来定义简单的函数，避免代码冗长，例如函数仅执行 x+y, :前是函数的参数，可以有多个，后面是函数体，只能有一个。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">fun2 = <span class="keyword">lambda</span> x,y: x+y</span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line">fun2（<span class="number">2</span>,<span class="number">3</span>）</span><br></pre></td></tr></table></figure></p>
<h3 id="2-29-2-zip"><a href="#2-29-2-zip" class="headerlink" title="2.29.2 zip"></a>2.29.2 zip</h3><p>zip 可以放多个变量进去</p>
<h3 id="2-29-3-map"><a href="#2-29-3-map" class="headerlink" title="2.29.3 map"></a>2.29.3 map</h3><p>map 是将函数及参数混在一起输入，但是参数要以列表的形式输入，可以输入多个参数，示例：<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun1</span>(<span class="params">x,y</span>)</span><br><span class="line">  <span class="keyword">return</span>(x+y)</span><br><span class="line"><span class="built_in">map</span>(fun1, [<span class="number">1</span>],[<span class="number">2</span>])  <span class="comment"># 运行函数fun1，以列表的形式输入两个参数，但是这样输出会是一个object</span></span><br><span class="line"><span class="built_in">list</span>(<span class="built_in">map</span>(fun1, [<span class="number">1</span>],[<span class="number">2</span>]))  <span class="comment"># [3]</span></span><br><span class="line"><span class="built_in">list</span>(<span class="built_in">map</span>(fun1,[l,<span class="number">3</span>],[<span class="number">2</span>,<span class="number">5</span>])  <span class="comment"># 两个列表对应两个参数，每个列表中有两个参数，会依次执行1+2,3+5，输出[3,8]</span></span><br></pre></td></tr></table></figure></p>
<h3 id="2-29-4-filter"><a href="#2-29-4-filter" class="headerlink" title="2.29.4 filter"></a>2.29.4 filter</h3><p>filter函数用于过滤序列，过滤掉不符合条件的元素，返回由符合条件元素组成的新列表。该接收两个参数，第一个为函数，第二个为序列，序列的每个元素作为参数传递给函数进行判断，然后返回 True 或 False，最后将返回 True 的元素放到新列表中。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 过滤出列表中的奇数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_odd</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">1</span></span><br><span class="line"> </span><br><span class="line">newlist = <span class="built_in">filter</span>(is_odd, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>])</span><br><span class="line"><span class="built_in">print</span>(newlist)  <span class="comment"># [1,3,5,7,9]</span></span><br><span class="line"><span class="comment"># lambda</span></span><br><span class="line">newlist = <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> x:x % <span class="number">2</span>, <span class="built_in">range</span>(<span class="number">10</span>)))</span><br><span class="line"><span class="built_in">print</span>(newlist)  <span class="comment"># [1,3,5,7,9]</span></span><br></pre></td></tr></table></figure></p>
<h3 id="2-29-5-sort"><a href="#2-29-5-sort" class="headerlink" title="2.29.5 sort"></a>2.29.5 sort</h3><p>sort函数有两个参数：</p>
<ul>
<li>key    可选。指定排序标准的函数。</li>
<li>reverse    可选。reverse=True 将对列表进行降序排序。默认是 reverse=False。</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">myFunc</span>(<span class="params">e</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cars = [<span class="string">&#x27;Porsche&#x27;</span>, <span class="string">&#x27;Audi&#x27;</span>, <span class="string">&#x27;BMW&#x27;</span>, <span class="string">&#x27;Volvo&#x27;</span>]</span><br><span class="line">cars.sort()</span><br><span class="line"><span class="built_in">print</span>(cars)  <span class="comment"># [&#x27;Audi&#x27;, &#x27;BMW&#x27;, &#x27;Porsche&#x27;, &#x27;Volvo&#x27;]</span></span><br><span class="line">cars.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(cars)  <span class="comment"># [&#x27;Volvo&#x27;, &#x27;Porsche&#x27;, &#x27;BMW&#x27;, &#x27;Audi&#x27;]</span></span><br><span class="line">cars.sort(key=myFunc)</span><br><span class="line"><span class="built_in">print</span>(cars)  <span class="comment"># [&#x27;BMW&#x27;, &#x27;Audi&#x27;, &#x27;Volvo&#x27;, &#x27;Porsche&#x27;]</span></span><br><span class="line">cars.sort(key=myFunc, reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(cars)  <span class="comment"># [&#x27;Porsche&#x27;, &#x27;Volvo&#x27;, &#x27;Audi&#x27;, &#x27;BMW&#x27;]</span></span><br><span class="line">cars.sort(key=<span class="keyword">lambda</span> data:<span class="built_in">len</span>(data))</span><br><span class="line"><span class="built_in">print</span>(cars)  <span class="comment"># [&#x27;BMW&#x27;, &#x27;Audi&#x27;, &#x27;Volvo&#x27;, &#x27;Porsche&#x27;]</span></span><br></pre></td></tr></table></figure>
<h2 id="2-30-浅复制与深复制"><a href="#2-30-浅复制与深复制" class="headerlink" title="2.30 浅复制与深复制"></a>2.30 浅复制与深复制</h2><p>ref: <a href="https://zhuanlan.zhihu.com/p/54011712">https://zhuanlan.zhihu.com/p/54011712</a><br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b = a   <span class="comment"># b与a是同一个地址</span></span><br><span class="line"><span class="built_in">id</span>(a)   <span class="comment"># 查看a在硬盘中的位置</span></span><br><span class="line"><span class="built_in">id</span>(b)</span><br><span class="line">b[<span class="number">0</span>] = <span class="number">11</span> <span class="comment"># 同时a[0]会更改</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">c = copy.copy(a)      <span class="comment"># 浅拷贝</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a)==<span class="built_in">id</span>(b))   <span class="comment"># True, a与b完全一致，改变一个，另一个会改变</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a)==<span class="built_in">id</span>(c))   <span class="comment"># False，a与b不是一个东西，修改c中的东西a不会改变</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>]]</span><br><span class="line">d = copy.copy(a)      <span class="comment"># 浅拷贝，d与a只有第一层的地址不一样，更深层的则会一致</span></span><br><span class="line"><span class="built_in">id</span>(a) == <span class="built_in">id</span>(d)        <span class="comment"># False</span></span><br><span class="line"><span class="built_in">id</span>(a[<span class="number">2</span>]) == <span class="built_in">id</span>(d[<span class="number">2</span>])  <span class="comment"># True</span></span><br><span class="line">a[<span class="number">0</span>] = <span class="number">11</span>             <span class="comment"># d[0] 不会改变</span></span><br><span class="line">a[<span class="number">2</span>][<span class="number">0</span>] = <span class="number">333</span>         <span class="comment"># d[2][0] 会改变!  id 部分重复</span></span><br><span class="line">e = copy.deepcopy(a)</span><br><span class="line"><span class="built_in">id</span>(e[<span class="number">2</span>]) == <span class="built_in">id</span>(a[<span class="number">2</span>])  <span class="comment"># False, deepcopy是完全copy，不会与被拷贝对象在内存空间有任何一致的地方</span></span><br></pre></td></tr></table></figure></p>
<h2 id="2-31-双冒号"><a href="#2-31-双冒号" class="headerlink" title="2.31 双冒号::"></a>2.31 双冒号::</h2><p>Python序列切片地址可以写为[开始：结束：步长]，其中的开始和结束可以省略。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">x = torch.linspace(<span class="number">1</span>, <span class="number">10</span>, steps=<span class="number">10</span>)</span><br><span class="line">y = x.view(-<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(y[<span class="number">0</span>::<span class="number">2</span>])</span><br></pre></td></tr></table></figure><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; y               </span><br><span class="line">tensor([[ 1.,  2.], </span><br><span class="line">        [ 3.,  4.], </span><br><span class="line">        [ 5.,  6.], </span><br><span class="line">        [ 7.,  8.], </span><br><span class="line">        [ 9., 10.]])</span><br><span class="line">&gt;&gt;&gt; y[0::2]                             </span><br><span class="line">tensor([[ 1.,  2.], </span><br><span class="line">        [ 5.,  6.], </span><br><span class="line">        [ 9., 10.]])</span><br></pre></td></tr></table></figure></p>
<h2 id="2-35-set找不同"><a href="#2-35-set找不同" class="headerlink" title="2.35 set找不同"></a>2.35 set找不同</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">char_list = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;d&#x27;</span>]</span><br><span class="line">sentence = <span class="string">&#x27;Welcome Back&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>(char_list)) <span class="comment"># &#123;&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;&#125;,set类型，与dict类型不一致，形状上是只有key</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>(sentence))</span><br><span class="line">u_char=<span class="built_in">set</span>(char_list)</span><br><span class="line">u_char.add(<span class="string">&#x27;x&#x27;</span>)       <span class="comment"># 只能增加一个字符，不能增加列表</span></span><br><span class="line">u_char.remove(<span class="string">&#x27;a&#x27;</span>)    <span class="comment"># 没有该元素会报错</span></span><br><span class="line">u_char.discard(<span class="string">&#x27;q&#x27;</span>)   <span class="comment"># 没有该元素不会报错，返回原值</span></span><br><span class="line">u_char.clear()        <span class="comment"># 清空</span></span><br><span class="line">set1 = u_char</span><br><span class="line">set2 = &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;i&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(set1.difference(set2))  <span class="comment"># 返回set1中与set2不同的元素</span></span><br><span class="line"><span class="built_in">print</span>(set1.intersection(set2))  <span class="comment"># 返回set1中与set2一致的元素</span></span><br></pre></td></tr></table></figure>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li>视频地址：<a href="https://www.bilibili.com/video/BV1wW411Y7ai?p=3">https://www.bilibili.com/video/BV1wW411Y7ai?p=3</a></li>
<li>莫凡网站：<a href="https://mofanpy.com/">https://mofanpy.com/</a><blockquote>
<p>Note：在评论中会有其他的一些python教程</p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>工科生的基本功</category>
        <category>快乐码农</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Mujoco210安装</title>
    <url>/archives/9765ce9e.html</url>
    <content><![CDATA[<p>本文将介绍Mujoco210的安装过程。<br><span id="more"></span></p>
<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>重装电脑后，需要重配置Mujoco环境，遂升级至210版本。安装平台：Ubuntu18.04 + Mujoco 2.1.0 + mujoco_py</p>
<h1 id="2-Mujoco的安装"><a href="#2-Mujoco的安装" class="headerlink" title="2 Mujoco的安装"></a>2 Mujoco的安装</h1><ol>
<li>下载 Mujoco210 Linux 版本： <a href="https://mujoco.org/download/mujoco210-linux-x86_64.tar.gz">https://mujoco.org/download/mujoco210-linux-x86_64.tar.gz</a>.</li>
<li>执行下列指令。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> ~/.mujoco                                    <span class="comment"># 创建文件夹</span></span><br><span class="line"><span class="built_in">cd</span> mujoco210下载路径</span><br><span class="line">tar -zxvf mujoco210-linux-x86_64.tar.gz -C ~/.mujoco <span class="comment"># 解压至~/.mujoco</span></span><br><span class="line">sudo gedit ~/.basrc</span><br><span class="line"><span class="comment"># 最后添加 export LD_LIBRARY_PATH=~/.mujoco/mujoco210/bin</span></span><br><span class="line"><span class="comment"># 保存退出</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></li>
<li>执行下列指令验证是否安装成功。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.mujoco/mujoco210/bin</span><br><span class="line">./simulate ../model/humanoid.xml</span><br></pre></td></tr></table></figure></li>
<li>顺利的话，会出现下图所示的结果。<br><img src="/images/20220726/01.png" alt="1"></li>
</ol>
<h1 id="3-mujoco-py的安装"><a href="#3-mujoco-py的安装" class="headerlink" title="3 mujoco_py的安装"></a>3 mujoco_py的安装</h1><h2 id="3-1-mujoco-py的下载"><a href="#3-1-mujoco-py的下载" class="headerlink" title="3.1 mujoco_py的下载"></a>3.1 mujoco_py的下载</h2><p>执行下列语句下载 mujoco_py。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/openai/mujoco-py.git</span><br></pre></td></tr></table></figure></p>
<h2 id="3-2-mujoco-py的安装"><a href="#3-2-mujoco-py的安装" class="headerlink" title="3.2 mujoco_py的安装"></a>3.2 mujoco_py的安装</h2><p>依赖项的安装。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注意可能需要科学上网</span></span><br><span class="line">sudo apt-get install libgl1-mesa-dev libgl1-mesa-glx libosmesa6-dev</span><br><span class="line">sudo apt-get install libglew-dev</span><br><span class="line">sudo apt-get install patchelf</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>如果不安装这个依赖项，可能会出现第4节中的问题。</p>
</blockquote>
<p>mujoco_py的安装。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda activate py38  <span class="comment"># 激活自己用anaconda配置的环境</span></span><br><span class="line"><span class="built_in">cd</span> ~/mujoco-py       <span class="comment"># 自己下载mujoco-py的路径</span></span><br><span class="line"></span><br><span class="line">pip3 install -U <span class="string">&#x27;mujoco-py&lt;2.2,&gt;=2.1&#x27;</span></span><br><span class="line">pip3 install -r requirements.txt</span><br><span class="line">pip3 install -r requirements.dev.txt</span><br><span class="line">python3 setup.py install</span><br></pre></td></tr></table></figure></p>
<h2 id="3-3-配置-bashrc"><a href="#3-3-配置-bashrc" class="headerlink" title="3.3 配置.bashrc"></a>3.3 配置.bashrc</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gedit ~/.bashrc</span><br><span class="line"><span class="comment"># 文件最后添加 export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib/nvidia </span></span><br><span class="line"><span class="comment"># 再添加 export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libGLEW.so</span></span><br><span class="line"><span class="comment"># 保存退出</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>
<h2 id="3-4-验证安装成功"><a href="#3-4-验证安装成功" class="headerlink" title="3.4 验证安装成功"></a>3.4 验证安装成功</h2><p>新开一个终端，如下图所示。<br><img src="/images/20220726/05.png" alt="5"></p>
<p>运行 mujoco_py 中自带的例子：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/mujoco-py/examples/            <span class="comment"># 打开 mujoco_py 的 examples 路径</span></span><br><span class="line">python3 setting_state.py </span><br></pre></td></tr></table></figure></p>
<p>成功的话将会出现下面的结果。</p>
<video id="video" controls="" preload="none">
    <source id="mp4" src="/images/20210305/mujoco_example.mp4" type="video/mp4">
</video>

<h1 id="4-出现的问题"><a href="#4-出现的问题" class="headerlink" title="4 出现的问题"></a>4 出现的问题</h1><p>在终端中执行 <code>import mujoco_py</code> 时出现如下问题：</p>
<ol>
<li>fata error: X11/Xlib.h: No such file or directory<br><img src="/images/20220726/02.png" alt="2"></li>
<li>fatal error: GL/glew.h: No such file or directory<br><img src="/images/20220726/03.png" alt="3"></li>
<li>No such file or directory: ‘patchelf’<br><img src="/images/20220726/04.png" alt="4"></li>
</ol>
<p>解决办法： 安装第3.2节的依赖。</p>
<p>终端能正常运行后，运行示例程序时直接卡死，终端提示 ERROR: GLEW initalization error: Missing GL version。<br><img src="/images/20220726/06.png" alt="6"></p>
<p>解决办法： 在 <code>~/.bashrc</code> 中添加 export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libGLEW.so</p>
<h1 id="5-Pycharm-中运行mujoco-py会出现的问题"><a href="#5-Pycharm-中运行mujoco-py会出现的问题" class="headerlink" title="5 Pycharm 中运行mujoco_py会出现的问题"></a>5 Pycharm 中运行mujoco_py会出现的问题</h1><p>在Pycharm中运行mujoco_py会出现环境变量的问题，解决方法是手动添加环境变量。<br>Pycharm -&gt; <code>Run</code> -&gt; <code>Edit Configurations</code> -&gt; <code>Environment Variables</code>，添加：<br>$LD_LIBRARY_PATH:/home/robot/.mujoco/mujoco210/bin:$LD_LIBRARY_PATH:/usr/lib/nvidia</p>
<blockquote>
<p>注意两个环境变量中间用一个:隔开<br><img src="/images/20220726/07.png" alt="7"></p>
</blockquote>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/486957504">https://zhuanlan.zhihu.com/p/486957504</a></li>
<li><a href="https://www.cnblogs.com/devilmaycry812839668/p/16007042.html">https://www.cnblogs.com/devilmaycry812839668/p/16007042.html</a></li>
<li><a href="https://blog.csdn.net/weixin_44420419/article/details/116231500">https://blog.csdn.net/weixin_44420419/article/details/116231500</a></li>
<li><a href="https://github.com/openai/mujoco-py/issues/652">https://github.com/openai/mujoco-py/issues/652</a></li>
<li><a href="https://github.com/openai/mujoco-py">https://github.com/openai/mujoco-py</a></li>
<li><a href="https://codeantenna.com/a/78cxVW5Ate">https://codeantenna.com/a/78cxVW5Ate</a></li>
</ol>
]]></content>
      <categories>
        <category>人工智能</category>
        <category>强化学习</category>
      </categories>
      <tags>
        <tag>Library</tag>
      </tags>
  </entry>
  <entry>
    <title>用seaborn/matplot绘制误差带阴影图</title>
    <url>/archives/7cd1c910.html</url>
    <content><![CDATA[<p>记录利用 seaborn、matplot 绘制带有误差带阴影的图。<br><span id="more"></span></p>
<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>因为在强化学习中经常要用到利用误差带绘的阴影图，因此特地记录一下。实现的时候有两种方法，一种是 seaborn，另一种是matplot。接下来将分别介绍。<br><!-- 中进行回归分析的时候可以生成一些自带误差带的图，参考[链接5]((https://seaborn.pydata.org/examples/errorband_lineplots.html))，可似乎并没有提到应该怎么制定误差带阴影，如果要自定义的话，还是需要用matplot中的 [fill_between(x, y1, y2)](https://matplotlib.org/stable/plot_types/basic/fill_between.html#sphx-glr-plot-types-basic-fill-between-py). --></p>
<h1 id="2-seaborn绘制误差带图"><a href="#2-seaborn绘制误差带图" class="headerlink" title="2 seaborn绘制误差带图"></a>2 seaborn绘制误差带图</h1><p>参考链接<a href="https://seaborn.pydata.org/examples/errorband_lineplots.html">5</a> 给出了一个官方的示例，我们先来对这个示例进行一些把玩。数据集fmri的简介及获取方式可参考<a href="https://colainlibrary.com/archives/853893d9.html">Seaborn绘图——概述</a>。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入数据集</span></span><br><span class="line">fmri = sns.load_dataset(<span class="string">&quot;fmri&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(fmri))  <span class="comment"># 获取所有列名</span></span><br><span class="line"><span class="built_in">print</span>(fmri.nunique())  <span class="comment"># 获取每一列中有多少个不同的数据</span></span><br><span class="line"><span class="built_in">print</span>(fmri.shape)  <span class="comment"># 获取数据集大小</span></span><br><span class="line"><span class="built_in">print</span>(fmri.head(<span class="number">5</span>))  <span class="comment"># 打印前5行</span></span><br><span class="line">fmri_time = fmri.loc[:, <span class="string">&#x27;timepoint&#x27;</span>]  <span class="comment"># 获取 timepoint 列的所有数据</span></span><br><span class="line"><span class="built_in">print</span>(fmri_time)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘图</span></span><br><span class="line">sns.relplot(x=<span class="string">&quot;timepoint&quot;</span>, y=<span class="string">&quot;signal&quot;</span>, data=fmri)</span><br><span class="line">plt.show()</span><br><span class="line">sns.relplot(x=<span class="string">&quot;timepoint&quot;</span>, y=<span class="string">&quot;signal&quot;</span>, kind=<span class="string">&quot;line&quot;</span>, data=fmri)</span><br><span class="line">plt.show()</span><br><span class="line">sns.relplot(x=<span class="string">&quot;timepoint&quot;</span>, y=<span class="string">&quot;signal&quot;</span>, ci=<span class="literal">None</span>, kind=<span class="string">&quot;line&quot;</span>, data=fmri)</span><br><span class="line">plt.show()</span><br><span class="line">sns.relplot(x=<span class="string">&quot;timepoint&quot;</span>, y=<span class="string">&quot;signal&quot;</span>, kind=<span class="string">&quot;line&quot;</span>, ci=<span class="string">&quot;sd&quot;</span>, data=fmri)</span><br><span class="line">plt.show()</span><br><span class="line">sns.relplot(x=<span class="string">&quot;timepoint&quot;</span>, y=<span class="string">&quot;signal&quot;</span>, estimator=<span class="literal">None</span>, kind=<span class="string">&quot;line&quot;</span>, data=fmri)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><br>绘制出来的曲线如下：<br><div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 100%;"><img src="/images/20220406/7-00.png" alt="box-x" align=center /></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/7-01.png" alt="box-x" align=center /></div><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/7-02.png" alt="box-y" align=center/></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/7-03.png" alt="box-x" align=center /></div><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/7-04.png" alt="box-y" align=center/></div></div></div></div></p>
<p>由于这个数据集的 timepoint 列包含0~18，共19个数，而数据集的长度是1064，因此，将timepoint作为横轴，则会有一个 timepoint 对应多个 signal 的情况，亦即横轴取值出现了重复，这点从第一幅散点图可以清晰看出。如果将relplot() 中的 kind 设置为 line，则会计算对应纵轴变量的均值(mean)和置信水平为0.95的置信区间（confidence interval）来实现一种聚合（aggregation）。对上图的简要说明如下：</p>
<ul>
<li>第二幅图是默认对各点的均值做聚合绘制的阴影带；</li>
<li>第三幅图是仅绘制出均值，使用 <code>ci=None</code> 忽略掉置信区间；</li>
<li>第四幅图是设置 <code>ci=&quot;sd&quot;</code> 计算标准差作为置信区间；</li>
<li>第五福图是设置 <code>estimator=None</code> 关闭了聚合效果，仅将点进行连线。</li>
</ul>
<p>类似于前述文章的绘图方式，可以引入类别变量作为区分：<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">sns.relplot(x=<span class="string">&quot;timepoint&quot;</span>, y=<span class="string">&quot;signal&quot;</span>, hue=<span class="string">&quot;event&quot;</span>, kind=<span class="string">&quot;line&quot;</span>, data=fmri)</span><br><span class="line">plt.show()</span><br><span class="line">sns.relplot(x=<span class="string">&quot;timepoint&quot;</span>, y=<span class="string">&quot;signal&quot;</span>, hue=<span class="string">&quot;region&quot;</span>, style=<span class="string">&quot;event&quot;</span>, kind=<span class="string">&quot;line&quot;</span>, data=fmri)</span><br><span class="line">plt.show()</span><br><span class="line">sns.relplot(x=<span class="string">&quot;timepoint&quot;</span>, y=<span class="string">&quot;signal&quot;</span>, hue=<span class="string">&quot;region&quot;</span>, style=<span class="string">&quot;event&quot;</span>, dashes=<span class="literal">False</span>, markers=<span class="literal">True</span>, kind=<span class="string">&quot;line&quot;</span>, data=fmri)</span><br><span class="line">plt.show()</span><br><span class="line">sns.relplot(x=<span class="string">&quot;timepoint&quot;</span>, y=<span class="string">&quot;signal&quot;</span>, hue=<span class="string">&quot;event&quot;</span>, style=<span class="string">&quot;event&quot;</span>, kind=<span class="string">&quot;line&quot;</span>, data=fmri)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><br>效果如下：<br><div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/7-05.png" width=96% alt="box-x" align=left /></div><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/7-06.png" alt="box-y" align=center/></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/7-07.png" alt="box-x" align=center /></div><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/7-08.png" width=96% alt="box-y" align=right/></div></div></div></div></p>
<p>上图中，第一幅图通过控制 <code>hue</code> 作为分类变量，用颜色区别开；第二幅图又引入了 <code>style</code> 变量，用线型区分开；第三幅图示例了如何设置标记点，还可以有其他的设置方式，可以以列表的形式传入给相应的参数。</p>
<h1 id="3-构造简单数据集小试牛刀"><a href="#3-构造简单数据集小试牛刀" class="headerlink" title="3 构造简单数据集小试牛刀"></a>3 构造简单数据集小试牛刀</h1><p>如果觉得使用seaborn的数据集不过瘾，还可以自己来构造一个简单的数据集进行试验。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造一个含有噪声的正弦波</span></span><br><span class="line">time = np.arange(<span class="number">0</span>, <span class="number">2</span>*np.pi, <span class="number">0.1</span>)</span><br><span class="line">sin_waves = np.sin(time)</span><br><span class="line">sin_waves = np.expand_dims(sin_waves, axis=-<span class="number">1</span>)</span><br><span class="line">noise = np.random.random((time.size, <span class="number">10</span>)) - <span class="number">0.5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;noise shape: &#x27;</span>, noise.shape)  <span class="comment"># (63, 10)</span></span><br><span class="line">data = sin_waves + noise</span><br><span class="line">data_mean = np.mean(data, axis=<span class="number">1</span>)</span><br><span class="line">data_std = np.std(data, axis=<span class="number">1</span>)</span><br><span class="line">data_var = np.var(data, axis=<span class="number">1</span>)</span><br><span class="line">data_max = np.<span class="built_in">max</span>(data, axis=<span class="number">1</span>)</span><br><span class="line">data_min = np.<span class="built_in">min</span>(data, axis=<span class="number">1</span>)</span><br><span class="line">plt.figure()</span><br><span class="line">plt.plot(data_mean)</span><br><span class="line">plt.show()</span><br><span class="line">plt.figure()</span><br><span class="line">plt.plot(data_std)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 time 扩展为 10 列一样的数据</span></span><br><span class="line">time_array = time</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(noise.shape[<span class="number">1</span>] - <span class="number">1</span>):</span><br><span class="line">    time_array = np.column_stack((time_array, time))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 time 和 signal 平铺为两列数据，且一一对应</span></span><br><span class="line">time_array = time_array.flatten()  <span class="comment"># (630,)</span></span><br><span class="line">data = data.flatten()  <span class="comment"># (630,)</span></span><br><span class="line">data = np.column_stack((time_array, data))  <span class="comment"># (630,2)</span></span><br><span class="line">df = pd.DataFrame(data, columns=[<span class="string">&#x27;time&#x27;</span>, <span class="string">&#x27;signal&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘图</span></span><br><span class="line">sns.relplot(x=<span class="string">&#x27;time&#x27;</span>, y=<span class="string">&#x27;signal&#x27;</span>, data=df)</span><br><span class="line">plt.show()</span><br><span class="line">sns.relplot(x=<span class="string">&#x27;time&#x27;</span>, y=<span class="string">&#x27;signal&#x27;</span>, data=df, kind=<span class="string">&#x27;line&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><br>在上述程序中，构造了一个正弦波 $\sin t$，其中 $t\in[0, 2\pi)$，然后再随机化一个噪声矩阵，并将其加在正弦波上，按行求其均值、标准差、方差，再将一开始的 time 数组扩展为同等维度的数组 time_array, time_array 中的每一列都一致。接着，将 time_array 和 data 分别平铺后合并为一个两列的数据并转为 DataFrame 格式。绘图的结果如下：<br><div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/7-10.png" alt="box-x" align=center /></div><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/7-11.png" alt="box-y" align=center/></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/7-12.png" alt="box-x" align=center /></div><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/7-13.png" alt="box-y" align=center/></div></div></div></div></p>
<h1 id="4-matplot-绘制阴影带"><a href="#4-matplot-绘制阴影带" class="headerlink" title="4 matplot 绘制阴影带"></a>4 matplot 绘制阴影带</h1><p>在上节的基础上，如果想绘制包含所有数据在内的阴影带，应该怎么办呢？<br>可以直接将数据的最大最小值取出，然后用 matplot 的 fill_between() 函数进行填充，同时也可以绘制其标准差的误差带。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">sns.relplot(x=<span class="string">&#x27;time&#x27;</span>, y=<span class="string">&#x27;signal&#x27;</span>, data=df)</span><br><span class="line">plt.plot(time, data_mean, color=<span class="string">&#x27;deeppink&#x27;</span>, label=<span class="string">&#x27;mean&#x27;</span>)</span><br><span class="line">plt.plot(time, sin_waves, <span class="string">&#x27;b-&#x27;</span>, label=<span class="string">&#x27;ideal&#x27;</span>)</span><br><span class="line">plt.fill_between(time, data_min, data_max, color=<span class="string">&#x27;violet&#x27;</span>, alpha=<span class="number">0.2</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">plt.plot(time, data_mean, color=<span class="string">&#x27;deeppink&#x27;</span>, label=<span class="string">&#x27;mean&#x27;</span>)</span><br><span class="line">plt.plot(time, sin_waves, <span class="string">&#x27;b-&#x27;</span>, label=<span class="string">&#x27;ideal&#x27;</span>)</span><br><span class="line">plt.fill_between(time, data_mean - data_std, data_mean + data_std, color=<span class="string">&#x27;violet&#x27;</span>, alpha=<span class="number">0.2</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><br>效果如下：<br><div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/7-14.png" width=75% alt="box-x" align=left /></div><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/7-15.png" alt="box-y" align=center/></div></div></div></div></p>
<p>matplot中颜色的调节可参照下表，直接输入 <code>color=&#39;颜色名&#39;</code> 即可<sup>[7]</sup>。<br><img src="/images/20220406/7-100.png" alt="color"></p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://matplotlib.org/stable/gallery/lines_bars_and_markers/fill_between_alpha.html#sphx-glr-gallery-lines-bars-and-markers-fill-between-alpha-py">Fill Between and Alpha</a></li>
<li><a href="https://matplotlib.org/stable/gallery/lines_bars_and_markers/fill_between_demo.html#sphx-glr-gallery-lines-bars-and-markers-fill-between-demo-py">Filling the area between lines</a></li>
<li><a href="https://matplotlib.org/stable/plot_types/basic/fill_between.html#sphx-glr-plot-types-basic-fill-between-py">fill_between(x, y1, y2)</a></li>
<li><a href="https://cloud.tencent.com/developer/ask/sof/534017">https://cloud.tencent.com/developer/ask/sof/534017</a></li>
<li><a href="https://seaborn.pydata.org/examples/errorband_lineplots.html">Timeseries plot with error bands</a></li>
<li><a href="https://blog.csdn.net/hao5335156/article/details/81121175">（一）seaborn教程——可视化统计关系</a></li>
<li><a href="https://finthon.com/matplotlib-color-list/">matplot颜色表</a></li>
</ol>
]]></content>
      <categories>
        <category>工科生的基本功</category>
        <category>专栏——seaborn绘图</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Seaborn绘图——catplot 类别变量的分析</title>
    <url>/archives/17259b03.html</url>
    <content><![CDATA[<p>记录利用 Seaborn 中关于类别变量的分析方法。<br><span id="more"></span></p>
<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>因为需要用到seaborn相关的绘图工具，因此记录一下学习笔记，方便后续自己查阅。<br>前期代码：<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">tip_df = sns.load_dataset(<span class="string">&quot;tips&quot;</span>)</span><br><span class="line">penguin_df = sns.load_dataset(<span class="string">&quot;penguins&quot;</span>)</span><br><span class="line">diamond_df = sns.load_dataset(<span class="string">&quot;diamonds&quot;</span>)</span><br><span class="line">car_df = sns.load_dataset(<span class="string">&quot;car_crashes&quot;</span>)</span><br></pre></td></tr></table></figure></p>
<h1 id="2-catplot-绘制类别变量"><a href="#2-catplot-绘制类别变量" class="headerlink" title="2 catplot() 绘制类别变量"></a>2 catplot() 绘制类别变量</h1><h2 id="2-1-类别变量的分布"><a href="#2-1-类别变量的分布" class="headerlink" title="2.1 类别变量的分布"></a>2.1 类别变量的分布</h2><p>绘制类别变量的分布可以用countplot() 或者 histplot() 两种函数。histplot() 在专栏的前述文章已经介绍过。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">sns.catplot(data=tip_df, x=<span class="string">&quot;time&quot;</span>, kind=<span class="string">&quot;count&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><br><img src="/images/20220406/6-1.png" alt="01"></p>
<h2 id="2-2-不同类别中数值变量的均值、中值估计"><a href="#2-2-不同类别中数值变量的均值、中值估计" class="headerlink" title="2.2 不同类别中数值变量的均值、中值估计"></a>2.2 不同类别中数值变量的均值、中值估计</h2><p>barplot, pointplot<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 绘制数值变量的中值估计，分别为柱状图或者点图，estimator默认是均值</span></span><br><span class="line">sns.catplot(data=penguin_df, x=<span class="string">&quot;species&quot;</span>, y=<span class="string">&quot;bill_length_mm&quot;</span>, kind=<span class="string">&quot;bar&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line">sns.catplot(data=penguin_df, x=<span class="string">&quot;species&quot;</span>, y=<span class="string">&quot;bill_length_mm&quot;</span>, kind=<span class="string">&quot;point&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line">sns.catplot(data=penguin_df, x=<span class="string">&quot;species&quot;</span>, y=<span class="string">&quot;bill_length_mm&quot;</span>, kind=<span class="string">&quot;bar&quot;</span>, estimator=np.median)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment"># 再加入类别</span></span><br><span class="line">sns.catplot(data=penguin_df, x=<span class="string">&quot;species&quot;</span>, y=<span class="string">&quot;bill_length_mm&quot;</span>, kind=<span class="string">&quot;point&quot;</span>, hue=<span class="string">&quot;island&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><br><div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/6-2.png" alt="box-x" align=center /></div><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/6-2-1.png" alt="box-y" align=center/></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/6-3.png" width=81% alt="box-x" align=left /></div><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/6-4.png" alt="box-y" align=center/></div></div></div></div></p>
<h2 id="2-3-catplot的FacetGrid特性"><a href="#2-3-catplot的FacetGrid特性" class="headerlink" title="2.3 catplot的FacetGrid特性"></a>2.3 catplot的FacetGrid特性</h2><p>不同人数对应均值的估计。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">sns.catplot(data=tip_df, x=<span class="string">&quot;time&quot;</span>, y=<span class="string">&quot;tip&quot;</span>, kind=<span class="string">&quot;bar&quot;</span>, col=<span class="string">&quot;size&quot;</span>, col_wrap=<span class="number">3</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><br><img src="/images/20220406/6-5.png" alt="5"></p>
<h2 id="2-4-boxplot和boxenplot"><a href="#2-4-boxplot和boxenplot" class="headerlink" title="2.4 boxplot和boxenplot"></a>2.4 boxplot和boxenplot</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">sns.catplot(data=penguin_df, x=<span class="string">&quot;species&quot;</span>, y=<span class="string">&quot;bill_length_mm&quot;</span>, kind=<span class="string">&quot;box&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line">sns.catplot(data=diamond_df, x=<span class="string">&quot;clarity&quot;</span>, y=<span class="string">&quot;price&quot;</span>, kind=<span class="string">&quot;box&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment"># boxen 适合大数据集，会逐级绘制</span></span><br><span class="line">sns.catplot(data=diamond_df, x=<span class="string">&quot;clarity&quot;</span>, y=<span class="string">&quot;price&quot;</span>, kind=<span class="string">&quot;boxen&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/20220406/6-6.png" alt="box-x" align=center /></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/20220406/6-7.png" alt="box-y" align=center/></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/20220406/6-8.png" alt="box-y" align=center/></div></div></div></div>
<p>对比上图中的后两幅图，可以看出用 boxenplot 会使得数据集中的异常值更少。</p>
<h2 id="2-5-带状图、小提琴图"><a href="#2-5-带状图、小提琴图" class="headerlink" title="2.5 带状图、小提琴图"></a>2.5 带状图、小提琴图</h2><p>stripplot, swarmplot, violinplot 用带状图、小提琴图来对不同类别中数值变量的分布进行刻画。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">sns.catplot(data=penguin_df, x=<span class="string">&quot;species&quot;</span>, y=<span class="string">&quot;bill_length_mm&quot;</span>, kind=<span class="string">&quot;strip&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line">sns.catplot(data=penguin_df, x=<span class="string">&quot;species&quot;</span>, y=<span class="string">&quot;bill_length_mm&quot;</span>, kind=<span class="string">&quot;strip&quot;</span>, jitter=<span class="literal">False</span>)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment"># jitter 在0~1之间，False的时候不会散开</span></span><br><span class="line">sns.catplot(data=penguin_df, x=<span class="string">&quot;species&quot;</span>, y=<span class="string">&quot;bill_length_mm&quot;</span>, kind=<span class="string">&quot;strip&quot;</span>, jitter=<span class="number">0.3</span>)</span><br><span class="line">plt.show()</span><br><span class="line">sns.catplot(data=penguin_df, x=<span class="string">&quot;species&quot;</span>, y=<span class="string">&quot;bill_length_mm&quot;</span>, kind=<span class="string">&quot;swarm&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line">sns.catplot(data=penguin_df, x=<span class="string">&quot;species&quot;</span>, y=<span class="string">&quot;bill_length_mm&quot;</span>, kind=<span class="string">&quot;violin&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment"># 第一个用catplot，第二个用swarmplot，可以将它们绘制在一起，并指定大小为3的白色圆点</span></span><br><span class="line">sns.catplot(data=penguin_df, x=<span class="string">&quot;species&quot;</span>, y=<span class="string">&quot;bill_length_mm&quot;</span>, kind=<span class="string">&quot;violin&quot;</span>)</span><br><span class="line">sns.swarmplot(data=penguin_df, x=<span class="string">&quot;species&quot;</span>, y=<span class="string">&quot;bill_length_mm&quot;</span>, color=<span class="string">&quot;w&quot;</span>, size=<span class="number">3</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><br><div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/20220406/6-9.png" alt="box-x" align=center /></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/20220406/6-10.png" alt="box-y" align=center/></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/20220406/6-11.png" alt="box-y" align=center/></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/20220406/6-12.png" alt="box-x" align=center /></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/20220406/6-13.png" alt="box-y" align=center/></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/20220406/6-14.png" alt="box-y" align=center/></div></div></div></div></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">sns.catplot(data=penguin_df, x=<span class="string">&quot;species&quot;</span>, y=<span class="string">&quot;bill_length_mm&quot;</span>, hue=<span class="string">&quot;sex&quot;</span>, kind=<span class="string">&quot;violin&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment"># 将上图两边各取一半合并绘制</span></span><br><span class="line">sns.catplot(data=penguin_df, x=<span class="string">&quot;species&quot;</span>, y=<span class="string">&quot;bill_length_mm&quot;</span>, hue=<span class="string">&quot;sex&quot;</span>, kind=<span class="string">&quot;violin&quot;</span>, split=<span class="literal">True</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/6-15.png" alt="box-x" align=center /></div><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/6-16.png" alt="box-y" align=center/></div></div></div></div>
<h1 id="3-FacetGrid，PairGrid-中自定义绘制函数"><a href="#3-FacetGrid，PairGrid-中自定义绘制函数" class="headerlink" title="3 FacetGrid，PairGrid 中自定义绘制函数"></a>3 FacetGrid，PairGrid 中自定义绘制函数</h1><p>FacetGrid 是将数据集中的数据依据各类别变量划分为不同的子集，再在<strong>子集</strong>上进行分析。</p>
<p>PairGrid 是在<strong>全部数据集</strong>上将所有的数值变量成对分析。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个空白的FacetGrid</span></span><br><span class="line">g = sns.FacetGrid(data=tip_df, row=<span class="string">&quot;time&quot;</span>, col=<span class="string">&quot;smoker&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment"># 依据smoker和time划分，并绘制其kde函数，row和col必须是类别变量</span></span><br><span class="line">g = sns.FacetGrid(data=tip_df, row=<span class="string">&quot;smoker&quot;</span>, col=<span class="string">&quot;time&quot;</span>)</span><br><span class="line">g.<span class="built_in">map</span>(sns.kdeplot, <span class="string">&quot;tip&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line">g = sns.FacetGrid(data=tip_df, row=<span class="string">&quot;time&quot;</span>, col=<span class="string">&quot;smoker&quot;</span>)</span><br><span class="line"><span class="comment"># 错误：g.map(sns.scatterplot,data=tip_df,x=&quot;total_bill&quot;,y=&quot;tip&quot;)</span></span><br><span class="line">g.<span class="built_in">map</span>(sns.scatterplot, <span class="string">&quot;total_bill&quot;</span>, <span class="string">&quot;tip&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/20220406/6-17.png" alt="box-x" align=center /></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/20220406/6-18.png" alt="box-y" align=center/></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/20220406/6-19.png" alt="box-y" align=center/></div></div></div></div>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">g = sns.PairGrid(data=penguin_df)  <span class="comment"># 创建一个空白的对象</span></span><br><span class="line">plt.show()</span><br><span class="line">g = sns.PairGrid(data=penguin_df, hue=<span class="string">&quot;species&quot;</span>)</span><br><span class="line">g.<span class="built_in">map</span>(sns.scatterplot)</span><br><span class="line">plt.show()</span><br><span class="line">g = sns.PairGrid(data=penguin_df, hue=<span class="string">&quot;species&quot;</span>)</span><br><span class="line">g.map_diag(sns.kdeplot)</span><br><span class="line">g.map_offdiag(sns.scatterplot)  <span class="comment"># 非对角线是散点图</span></span><br><span class="line">plt.show()</span><br><span class="line">g = sns.PairGrid(data=penguin_df)</span><br><span class="line">g.map_diag(sns.histplot)  <span class="comment"># 对角线上是直方图</span></span><br><span class="line">g.map_upper(sns.kdeplot)  <span class="comment"># 上三角是kde</span></span><br><span class="line">g.map_lower(sns.scatterplot)  <span class="comment"># 下三角是散点图</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="/images/20220406/6-20.png" alt="20"><br><img src="/images/20220406/6-21.png" alt="20"><br><img src="/images/20220406/6-22.png" alt="20"><br><img src="/images/20220406/6-23.png" alt="20"></p>
]]></content>
      <categories>
        <category>工科生的基本功</category>
        <category>专栏——seaborn绘图</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Seaborn绘图——绘制两个变量的联合分布</title>
    <url>/archives/feaf6c34.html</url>
    <content><![CDATA[<p>记录利用 Seaborn 中关于两个变量的联合分布绘图方法。<br><span id="more"></span></p>
<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>因为需要用到seaborn相关的绘图工具，因此记录一下学习笔记，方便后续自己查阅。<br>前期代码：<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">tip_df = sns.load_dataset(<span class="string">&quot;tips&quot;</span>)</span><br><span class="line">penguin_df = sns.load_dataset(<span class="string">&quot;penguins&quot;</span>)</span><br><span class="line">diamond_df = sns.load_dataset(<span class="string">&quot;diamonds&quot;</span>)</span><br><span class="line">car_df = sns.load_dataset(<span class="string">&quot;car_crashes&quot;</span>)</span><br></pre></td></tr></table></figure></p>
<h1 id="2-displot-绘制两个变量的联合分布"><a href="#2-displot-绘制两个变量的联合分布" class="headerlink" title="2 displot() 绘制两个变量的联合分布"></a>2 displot() 绘制两个变量的联合分布</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">sns.displot(data=penguin_df, x=<span class="string">&quot;bill_length_mm&quot;</span>, y=<span class="string">&quot;bill_depth_mm&quot;</span>, kind=<span class="string">&quot;kde&quot;</span>, rug=<span class="literal">True</span>)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment"># thresh是0~1之间，越大画出来的越少；levels用来决定画出来的线多少，即稀疏程度，范围不止1</span></span><br><span class="line">sns.displot(data=penguin_df, x=<span class="string">&quot;bill_length_mm&quot;</span>, y=<span class="string">&quot;bill_depth_mm&quot;</span>, kind=<span class="string">&quot;kde&quot;</span>, thresh=<span class="number">0.7</span>)</span><br><span class="line">plt.show()</span><br><span class="line">sns.displot(data=penguin_df, x=<span class="string">&quot;bill_length_mm&quot;</span>, y=<span class="string">&quot;bill_depth_mm&quot;</span>, kind=<span class="string">&quot;kde&quot;</span>, thresh=<span class="number">0.2</span>, levels=<span class="number">5</span>)</span><br><span class="line">plt.show()</span><br><span class="line">sns.displot(data=penguin_df, x=<span class="string">&quot;bill_length_mm&quot;</span>, y=<span class="string">&quot;bill_depth_mm&quot;</span>, kind=<span class="string">&quot;kde&quot;</span>, thresh=<span class="number">0.2</span>, levels=<span class="number">50</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/5-01.png" alt="box-x" align=center /></div><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/5-02-0.png" alt="box-y" align=center/></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/5-02.png" alt="box-x" align=center /></div><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/5-02-2.png" alt="box-y" align=center/></div></div></div></div>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">sns.displot(data=diamond_df, x=<span class="string">&quot;price&quot;</span>, y=<span class="string">&quot;clarity&quot;</span>, log_scale=[<span class="literal">True</span>, <span class="literal">False</span>])</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment"># 两个类别变量</span></span><br><span class="line">sns.displot(data=penguin_df, x=<span class="string">&quot;island&quot;</span>, y=<span class="string">&quot;species&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>结果如下：<br><div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/5-03.png" alt="box-x" align=center /></div><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/5-04.png" alt="box-y" align=center/></div></div></div></div></p>
<p>上图中第一幅图进行了对数变换，越黑的地方表示价格越高。第二幅图是类别变量的分布。</p>
<h1 id="3-jointplot"><a href="#3-jointplot" class="headerlink" title="3 jointplot()"></a>3 jointplot()</h1><p>jointplot() 可以用来绘制两个变量的联合分布和各自分布。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kind : &#123; &quot;scatter&quot; | &quot;kde&quot; | &quot;hist&quot; | &quot;hex&quot; | &quot;reg&quot; | &quot;resid&quot; &#125;， default kind is scatter</span></span><br><span class="line">sns.jointplot(data=tip_df, x=<span class="string">&quot;total_bill&quot;</span>, y=<span class="string">&quot;tip&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line">sns.jointplot(data=tip_df, x=<span class="string">&quot;total_bill&quot;</span>, y=<span class="string">&quot;tip&quot;</span>, kind=<span class="string">&quot;kde&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line">sns.jointplot(data=tip_df, x=<span class="string">&quot;total_bill&quot;</span>, y=<span class="string">&quot;tip&quot;</span>, kind=<span class="string">&quot;hist&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line">sns.jointplot(data=tip_df, x=<span class="string">&quot;total_bill&quot;</span>, y=<span class="string">&quot;tip&quot;</span>, kind=<span class="string">&quot;hex&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line">sns.jointplot(data=tip_df, x=<span class="string">&quot;total_bill&quot;</span>, y=<span class="string">&quot;tip&quot;</span>, kind=<span class="string">&quot;reg&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line">sns.jointplot(data=tip_df, x=<span class="string">&quot;total_bill&quot;</span>, y=<span class="string">&quot;tip&quot;</span>, kind=<span class="string">&quot;resid&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>结果如下：<br><div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/20220406/5-05.png" alt="box-x" align=center /></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/20220406/5-05-1.png" alt="box-x" align=center /></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/20220406/5-05-2.png" alt="box-y" align=center/></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/20220406/5-05-3.png" alt="box-x" align=center /></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/20220406/5-05-4.png" alt="box-x" align=center /></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/20220406/5-05-5.png" alt="box-y" align=center/></div></div></div></div></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">sns.jointplot(data=tip_df, x=<span class="string">&quot;total_bill&quot;</span>, y=<span class="string">&quot;tip&quot;</span>, hue=<span class="string">&quot;sex&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>加入hue来分类，结果如下：<br><img src="/images/20220406/5-06.png" alt="06"></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 绘制两个类型变量之间的分布</span></span><br><span class="line">sns.jointplot(data=penguin_df, x=<span class="string">&quot;island&quot;</span>, y=<span class="string">&quot;species&quot;</span>, kind=<span class="string">&quot;hist&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="/images/20220406/5-07.png" alt="07"></p>
<h1 id="4-JointGrid"><a href="#4-JointGrid" class="headerlink" title="4 JointGrid()"></a>4 JointGrid()</h1><p>JointGrid() 是 joinplot() 的升级版，jointplot() 一般是选定 kind 类型，两个变量的分布和各自分布的类型就定下来了，而 JointGrid() 可以对其进行自定义，有两种写法。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">g = sns.JointGrid(data=tip_df, x=<span class="string">&quot;total_bill&quot;</span>, y=<span class="string">&quot;tip&quot;</span>)</span><br><span class="line">g.plot(sns.histplot, sns.boxplot)</span><br><span class="line">plt.show()</span><br><span class="line">g = sns.JointGrid(data=tip_df, x=<span class="string">&quot;total_bill&quot;</span>, y=<span class="string">&quot;tip&quot;</span>)</span><br><span class="line">g.plot_joint(sns.kdeplot)</span><br><span class="line">g.plot_marginals(sns.histplot, kde=<span class="literal">True</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><br><div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/5-08.png" alt="box-x" align=center /></div><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/5-09.png" alt="box-x" align=center /></div></div></div></div></p>
<h1 id="5-pairplot"><a href="#5-pairplot" class="headerlink" title="5 pairplot()"></a>5 pairplot()</h1><p>pairplot() 用来成对绘制<strong>所有数值变量</strong>的联合分布。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kind : &#123;&#x27;scatter&#x27;, &#x27;kde&#x27;, &#x27;hist&#x27;, &#x27;reg&#x27;&#125;</span></span><br><span class="line">sns.pairplot(data=tip_df)</span><br><span class="line">plt.show()</span><br><span class="line">sns.pairplot(data=tip_df, kind=<span class="string">&quot;kde&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line">sns.pairplot(data=tip_df, kind=<span class="string">&quot;hist&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line">sns.pairplot(data=tip_df, kind=<span class="string">&quot;reg&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><br><div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/5-10.png" alt="box-x" align=center /></div><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/5-10-1.png" alt="box-x" align=center /></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/5-10-2.png" alt="box-x" align=center /></div><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/5-11.png" alt="box-x" align=center /></div></div></div></div></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 加载一个数据量更多的数据集</span></span><br><span class="line">car_df=sns.load_dataset(<span class="string">&quot;car_crashes&quot;</span>)</span><br><span class="line">sns.pairplot(data=car_df, kind=<span class="string">&quot;reg&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment"># 仅绘制两种</span></span><br><span class="line">sns.pairplot(data=car_df, x_vars=[<span class="string">&quot;speeding&quot;</span>, <span class="string">&quot;alcohol&quot;</span>], y_vars=[<span class="string">&quot;total&quot;</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/5-12.png" width=88% alt="box-x" align=center /></div><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/5-13.png" alt="box-x" align=center /></div></div></div></div>
<h1 id="6-PairGrid"><a href="#6-PairGrid" class="headerlink" title="6 PairGrid()"></a>6 PairGrid()</h1><p>PairGrid() 是 pairplot() 的升级版，PairGrid() 中是通过 g.map() 来自定义绘制函数。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">g = sns.PairGrid(data=car_df, x_vars=[<span class="string">&quot;total&quot;</span>, <span class="string">&quot;speeding&quot;</span>, <span class="string">&quot;alcohol&quot;</span>], y_vars=[<span class="string">&quot;total&quot;</span>, <span class="string">&quot;speeding&quot;</span>, <span class="string">&quot;alcohol&quot;</span>])</span><br><span class="line">g.map_upper(sns.scatterplot)  <span class="comment"># 上三角绘制散点图</span></span><br><span class="line">g.map_diag(sns.histplot, kde=<span class="literal">True</span>)  <span class="comment"># 对角线绘制直方图叠加kde曲线</span></span><br><span class="line">g.map_lower(sns.regplot)  <span class="comment"># 下三角绘制回归曲线</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><br><img src="/images/20220406/5-14.png" alt="14"></p>
<h1 id="7-heatmap"><a href="#7-heatmap" class="headerlink" title="7 heatmap()"></a>7 heatmap()</h1><p>heatmap() 是热力图，用来成对绘制所有数值变量的相关系数。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">car_cor = car_df.corr()</span><br><span class="line"><span class="built_in">print</span>(car_cor)</span><br><span class="line">sns.heatmap(car_cor, cmap=<span class="string">&quot;Blues&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment"># linewidth使格子分隔开，显示更清晰</span></span><br><span class="line">sns.heatmap(car_cor, cmap=<span class="string">&quot;Blues&quot;</span>, linewidth=<span class="number">0.5</span>)</span><br><span class="line">plt.show()</span><br><span class="line">sns.heatmap(car_cor, cmap=<span class="string">&quot;coolwarm&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment"># 指定各格子上的数据显示小数点后两位</span></span><br><span class="line">sns.heatmap(car_cor, cmap=<span class="string">&quot;coolwarm&quot;</span>, annot=<span class="literal">True</span>, fmt=<span class="string">&quot;.2f&quot;</span>, linewidth=<span class="number">0.5</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><br>相关系数计算结果如下：<br><img src="/images/20220406/5-18.png" alt="18"></p>
<p>绘图结果如下：<br><div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/5-15.png" height=400 alt="box-x" align=center /></div><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/5-15-1.png" height=400 alt="box-x" align=center /></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/5-16.png" height=400 alt="box-x" align=center /></div><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/5-17.png" height=400 alt="box-x" align=center /></div></div></div></div></p>
]]></content>
      <categories>
        <category>工科生的基本功</category>
        <category>专栏——seaborn绘图</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Seaborn绘图——lmplot(linear model plot)</title>
    <url>/archives/1bc7b37e.html</url>
    <content><![CDATA[<p>记录利用 Seaborn 中关于 lmplot 的相关用法<br><span id="more"></span></p>
<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>因为需要用到seaborn相关的绘图工具，因此记录一下学习笔记，方便后续自己查阅。</p>
<h1 id="2-lmplot"><a href="#2-lmplot" class="headerlink" title="2 lmplot"></a>2 lmplot</h1><p>这个函数主要是用来对两个数值变量之间的线性关系进行分析。</p>
<h2 id="2-1-lmplot线性回归分析"><a href="#2-1-lmplot线性回归分析" class="headerlink" title="2.1 lmplot线性回归分析"></a>2.1 lmplot线性回归分析</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">tip_df = sns.load_dataset(<span class="string">&quot;tips&quot;</span>)</span><br><span class="line">sns.lmplot(data=tip_df, x=<span class="string">&quot;total_bill&quot;</span>, y=<span class="string">&quot;tip&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line">sns.regplot(data=tip_df, x=<span class="string">&quot;total_bill&quot;</span>, y=<span class="string">&quot;tip&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line">sns.lmplot(data=tip_df, x=<span class="string">&quot;total_bill&quot;</span>, y=<span class="string">&quot;tip&quot;</span>, hue=<span class="string">&quot;time&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/20220406/4-01.png" width=75% alt="box-x" align=center /></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/20220406/4-02.png" alt="box-y" align=center/></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/20220406/4-04.png" width=90% alt="box-y" align=center/></div></div></div></div>
<p>第一幅图和第二幅图是一样的，只是长宽比例不一样；第三幅图是加入类别变量的结果。</p>
<h2 id="2-2-residplot-残差图"><a href="#2-2-residplot-残差图" class="headerlink" title="2.2 residplot 残差图"></a>2.2 residplot 残差图</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 绘制残差图</span></span><br><span class="line">sns.residplot(data=tip_df, x=<span class="string">&quot;total_bill&quot;</span>, y=<span class="string">&quot;tip&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="/images/20220406/4-03.png" alt="03"></p>
<p>理想情况下，残差应该是随机分布的。</p>
<h2 id="2-3-FacetGrid-特性"><a href="#2-3-FacetGrid-特性" class="headerlink" title="2.3 FacetGrid 特性"></a>2.3 FacetGrid 特性</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">sns.lmplot(data=tip_df, x=<span class="string">&quot;total_bill&quot;</span>, y=<span class="string">&quot;tip&quot;</span>, row=<span class="string">&quot;smoker&quot;</span>, col=<span class="string">&quot;time&quot;</span>, hue=<span class="string">&quot;time&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="/images/20220406/4-05.png" alt="05"></p>
]]></content>
      <categories>
        <category>工科生的基本功</category>
        <category>专栏——seaborn绘图</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Seaborn绘图——relplot(relative plot)</title>
    <url>/archives/3617e253.html</url>
    <content><![CDATA[<p>记录利用 Seaborn 中关于 relplot 的相关用法<br><span id="more"></span></p>
<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>因为需要用到seaborn相关的绘图工具，因此记录一下学习笔记，方便后续自己查阅。</p>
<h1 id="2-relplot"><a href="#2-relplot" class="headerlink" title="2 relplot"></a>2 relplot</h1><p>这个函数主要是用来查看数据的相关性。</p>
<h2 id="2-1-散点图"><a href="#2-1-散点图" class="headerlink" title="2.1 散点图"></a>2.1 散点图</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">tip_df = sns.load_dataset(<span class="string">&quot;tips&quot;</span>)</span><br><span class="line">sns.relplot(data=tip_df, x=<span class="string">&quot;total_bill&quot;</span>, y=<span class="string">&quot;tip&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line">sns.relplot(data=tip_df, x=<span class="string">&quot;total_bill&quot;</span>, y=<span class="string">&quot;tip&quot;</span>, hue=<span class="string">&quot;time&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line">sns.relplot(data=tip_df, x=<span class="string">&quot;total_bill&quot;</span>, y=<span class="string">&quot;tip&quot;</span>, hue=<span class="string">&quot;time&quot;</span>, style=<span class="string">&quot;time&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line">sns.relplot(data=tip_df, x=<span class="string">&quot;total_bill&quot;</span>, y=<span class="string">&quot;tip&quot;</span>, hue=<span class="string">&quot;time&quot;</span>, style=<span class="string">&quot;time&quot;</span>, markers=[<span class="string">&quot;o&quot;</span>, <span class="string">&quot;^&quot;</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/3-01.png" width=85% alt="box-x" align=center /></div><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/3-02.png" alt="box-y" align=center/></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/3-03.png" width=90% alt="box-x" align=center /></div><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/3-04.png" width=90% alt="box-y" align=center/></div></div></div></div>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">sns.relplot(data=tip_df, x=<span class="string">&quot;total_bill&quot;</span>, y=<span class="string">&quot;tip&quot;</span>, hue=<span class="string">&quot;size&quot;</span>, size=<span class="string">&quot;size&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="/images/20220406/3-05.png" alt="05"></p>
<p>上图表明，对于分类为数值变量有规律增长的变量，图形会以渐变色自动显示。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">sns.relplot(data=tip_df, x=<span class="string">&quot;total_bill&quot;</span>, y=<span class="string">&quot;tip&quot;</span>, col=<span class="string">&quot;day&quot;</span>, col_wrap=<span class="number">2</span>, hue=<span class="string">&quot;smoker&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="/images/20220406/3-06.png" alt="06"></p>
<p>同 displot 一样，relplot 也具备FacetGrid特性，上图中，设置列参数为“day”，且一行只画两天(col_wrap=2)。</p>
<h2 id="2-2-折线图"><a href="#2-2-折线图" class="headerlink" title="2.2 折线图"></a>2.2 折线图</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">stock_df = pd.DataFrame(<span class="built_in">dict</span>(time=np.arange(<span class="number">500</span>), price=np.random.randn(<span class="number">500</span>).cumsum() + np.ones(<span class="number">500</span>) * <span class="number">50</span>))</span><br><span class="line">sns.relplot(data=stock_df, x=<span class="string">&quot;time&quot;</span>, y=<span class="string">&quot;price&quot;</span>, kind=<span class="string">&quot;line&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="/images/20220406/3-07.png" alt="07"></p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://finthon.com/matplotlib-marker/">matplotlib标记表(marker)</a></li>
</ol>
]]></content>
      <categories>
        <category>工科生的基本功</category>
        <category>专栏——seaborn绘图</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Seaborn绘图——displot(distribution plot)</title>
    <url>/archives/b4c0319e.html</url>
    <content><![CDATA[<p>记录利用 Seaborn 中关于 displot 的相关用法<br><span id="more"></span></p>
<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>因为需要用到seaborn相关的绘图工具，因此记录一下学习笔记，方便后续自己查阅。</p>
<h1 id="2-变量分布"><a href="#2-变量分布" class="headerlink" title="2 变量分布"></a>2 变量分布</h1><p>变量分布是指查看数据中某一个或者几个变量的分布情况，查看:</p>
<ul>
<li>是否有异常值</li>
<li>是服从正态分布，还是双峰分布，或是其他分布，是否有偏移</li>
<li>依据类别变量对数据进行划分，各子集上的变量分布是否有很大差异</li>
</ul>
<h2 id="2-1-boxplot-箱式图"><a href="#2-1-boxplot-箱式图" class="headerlink" title="2.1 boxplot 箱式图"></a>2.1 boxplot 箱式图</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">penguin_df = sns.load_dataset(<span class="string">&quot;penguins&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(penguin_df.describe())</span><br><span class="line">sns.boxplot(data=penguin_df, x=<span class="string">&quot;bill_length_mm&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line">sns.boxplot(data=penguin_df, y=<span class="string">&quot;bill_length_mm&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/01.png" width=100% alt="box-x" align=center /></div><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/02.png" width=100% alt="box-y" align=center/></div></div></div></div>
<p>第二幅图中的五条横线从上到下依次表示：嘴巴长度的最大值、数据量小于75%的分界线、平均值、数据量小于25%的分界线、最小值。查看数据集中对应的变量分布：<br><img src="/images/20220406/03.png" alt="describe"></p>
<p>多组数据的绘制<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">tips_df = sns.load_dataset(<span class="string">&quot;tips&quot;</span>)</span><br><span class="line">sns.boxplot(data=tip_df)</span><br><span class="line">plt.show()</span><br><span class="line">sns.boxplot(data=tip_df, y=<span class="string">&quot;total_bill&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><br><div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/04.png" alt="box-x" align=center /></div><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/05.png" alt="box-y" align=center/></div></div></div></div><br>这种方式会将超过最大值的一些数据认为是异常点，但在实际中是否是异常值，还需要经过进一步地确认才行。</p>
<h2 id="2-2-displot-查看变量分布"><a href="#2-2-displot-查看变量分布" class="headerlink" title="2.2 displot 查看变量分布"></a>2.2 displot 查看变量分布</h2><h3 id="2-2-1-数值变量直方图"><a href="#2-2-1-数值变量直方图" class="headerlink" title="2.2.1 数值变量直方图"></a>2.2.1 数值变量直方图</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数值变量的分布</span></span><br><span class="line">sns.displot(penguin_df, x=<span class="string">&quot;bill_length_mm&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line">sns.displot(penguin_df, x=<span class="string">&quot;bill_length_mm&quot;</span>, bins=<span class="number">50</span>)</span><br><span class="line">plt.show()</span><br><span class="line">sns.histplot(penguin_df, x=<span class="string">&quot;bill_length_mm&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line">sns.histplot(penguin_df, x=<span class="string">&quot;bill_length_mm&quot;</span>, bins=<span class="number">50</span>)  <span class="comment"># bins即分为几格</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>使用<span class='p red'>d</span>istplot绘制直方图，结果如下：<br><div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/06-0.png" alt="box-x" align=center /></div><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/07-0.png" alt="box-y" align=center/></div></div></div></div></p>
<p>使用<span class='p red'>h</span>istplot绘制直方图，结果如下：<br><div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/06.png" alt="box-x" align=center /></div><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/07.png" alt="box-y" align=center/></div></div></div></div></p>
<p>可以看到，这两个函数绘制的直方图除了大小不一样以及边框不一样外，没有什么区别。当然边框也是可以调整的。</p>
<h3 id="2-2-2-类别变量直方图"><a href="#2-2-2-类别变量直方图" class="headerlink" title="2.2.2 类别变量直方图"></a>2.2.2 类别变量直方图</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 类别变量的分布</span></span><br><span class="line">sns.histplot(penguin_df, x=<span class="string">&quot;species&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line">sns.histplot(penguin_df, x=<span class="string">&quot;species&quot;</span>, hue=<span class="string">&quot;species&quot;</span>)  <span class="comment"># 颜色区分</span></span><br><span class="line">plt.show()</span><br><span class="line">sns.histplot(penguin_df, x=<span class="string">&quot;species&quot;</span>, hue=<span class="string">&quot;species&quot;</span>, shrink=<span class="number">0.7</span>)  <span class="comment"># 分开距离</span></span><br><span class="line">plt.show()</span><br><span class="line">sns.countplot(data=penguin_df, x=<span class="string">&quot;species&quot;</span>)  <span class="comment"># countplot 可用来绘制类别变量</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>使用histplot绘制的结果如下：<br><div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/20220406/08.png" alt="box-x" align=center /></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/20220406/09.png" alt="box-y" align=center/></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/20220406/10.png" alt="box-y" align=center/></div></div></div></div><br>使用countplot绘制的结果如下：<br><img src="/images/20220406/11.png" alt="countplot"></p>
<h3 id="2-2-3-kdeplot"><a href="#2-2-3-kdeplot" class="headerlink" title="2.2.3 kdeplot"></a>2.2.3 kdeplot</h3><p>kde曲线默认是用高斯核函数(kernel)。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">sns.displot(x=<span class="string">&quot;bill_length_mm&quot;</span>, data=penguin_df, kind=<span class="string">&quot;kde&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line">sns.kdeplot(x=<span class="string">&quot;bill_length_mm&quot;</span>, data=penguin_df)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><br>运行结果如下：<br><div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/12.png" width=75% alt="box-x" align=center /></div><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/13.png" alt="box-y" align=center/></div></div></div></div></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">sns.displot(x=<span class="string">&quot;bill_length_mm&quot;</span>, data=penguin_df, kind=<span class="string">&quot;kde&quot;</span>, rug=<span class="literal">True</span>)</span><br><span class="line">plt.show()</span><br><span class="line">sns.displot(x=<span class="string">&quot;bill_length_mm&quot;</span>, data=penguin_df, kind=<span class="string">&quot;kde&quot;</span>, cut=<span class="number">0</span>)</span><br><span class="line">plt.show()</span><br><span class="line">sns.displot(x=<span class="string">&quot;bill_length_mm&quot;</span>, data=penguin_df, kde=<span class="literal">True</span>, rug=<span class="literal">True</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/20220406/14.png" height = "400" alt="box-x" align=center /></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/20220406/15.png" height = "400" alt="box-y" align=center/></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/20220406/16.png" height = "400" alt="box-y" align=center/></div></div></div></div>
<p>上述三幅图中，第一幅图添加了rug；第二幅图仅保留kde曲线中和数据集对应的部分，超出最大最小的部分未在图中显示；第三幅图则是将直方图与kde曲线叠加在一起。</p>
<p>从上图看出，仅对企鹅嘴长单一数值变量进行分析，得到的是一个双峰分布，接下来引入企鹅种类做进一步分析。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">sns.displot(x=<span class="string">&quot;bill_length_mm&quot;</span>, data=penguin_df, kind=<span class="string">&quot;kde&quot;</span>, hue=<span class="string">&quot;species&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><br><img src="/images/20220406/17.png" alt="spec"></p>
<p>从上图可以看出，实际上不同种类的企鹅的嘴长是各自服从正态分布的，叠加后才会出现双峰分布。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 有明显偏移的数据处理</span></span><br><span class="line">diamond_df = sns.load_dataset(<span class="string">&quot;diamonds&quot;</span>)</span><br><span class="line">sns.displot(data=diamond_df, x=<span class="string">&quot;price&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line">sns.displot(data=diamond_df, x=<span class="string">&quot;price&quot;</span>, log_scale=<span class="literal">True</span>)  <span class="comment"># 取对数</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>绘制结果如下：<br><div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/18.png" alt="box-x" align=center /></div><div class="group-picture-column" style="width: 50%;"><img src="/images/20220406/19.png" width=100% alt="box-y" align=center/></div></div></div></div></p>
<p>上图第一幅图表明，钻石的价格集中分布在几百到几千的范围，有明显偏移，将横坐标价格取对数后，看出整体的分布更趋向于正态分布。</p>
<p>利用kde曲线比较训练集和测试集变量分布是否一致。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line">train_df, test_df = train_test_split(diamond_df, test_size=<span class="number">0.3</span>, random_state=<span class="number">42</span>)</span><br><span class="line">sns.displot(data=train_df, x=<span class="string">&quot;depth&quot;</span>, kind=<span class="string">&quot;kde&quot;</span>, linewidth=<span class="number">5.0</span>, color=<span class="string">&quot;r&quot;</span>)</span><br><span class="line">sns.kdeplot(data=test_df, x=<span class="string">&quot;depth&quot;</span>, color=<span class="string">&quot;g&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><br><img src="/images/20220406/20.png" alt="spec"></p>
<blockquote>
<p>Note: 只能用一次displot，第二次再用displot会导致两个曲线分开绘制于两张图上。</p>
</blockquote>
<h3 id="2-2-4-ecdfplot"><a href="#2-2-4-ecdfplot" class="headerlink" title="2.2.4 ecdfplot"></a>2.2.4 ecdfplot</h3><p>ecdf是经验累积分布函数，与箱式图有相似之处，表达的方式不一样。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">sns.displot(penguin_df, x=<span class="string">&quot;bill_length_mm&quot;</span>, kind=<span class="string">&quot;ecdf&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><br><img src="/images/20220406/21.png" alt="spec"></p>
<h2 id="2-3-displot-具有的-FacetGrid-特性"><a href="#2-3-displot-具有的-FacetGrid-特性" class="headerlink" title="2.3 displot 具有的 FacetGrid 特性"></a>2.3 displot 具有的 FacetGrid 特性</h2><p>displot 是图绘制函数，具有FacetGrid特性，即会将图形按照行和列设置为类别变量，依据类别变量可以再将数据集划分为子集，进而对子集的分布进行分析，亦即对变量的条件概率分布进行了绘制。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">sns.displot(data=penguin_df, x=<span class="string">&quot;bill_length_mm&quot;</span>, row=<span class="string">&quot;sex&quot;</span>, col=<span class="string">&quot;island&quot;</span>, kind=<span class="string">&quot;kde&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line">sns.displot(data=penguin_df, x=<span class="string">&quot;bill_length_mm&quot;</span>, row=<span class="string">&quot;sex&quot;</span>, col=<span class="string">&quot;island&quot;</span>, hue=<span class="string">&quot;species&quot;</span>, kind=<span class="string">&quot;kde&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></p>
<p>上图将企鹅按照性别（行）和岛屿（列）进行分类绘制其kde曲线，第二幅图则在第一幅图基础上增加了企鹅种类作为另一个类别变量。<br><img src="/images/20220406/22.png" alt="spec"><br><img src="/images/20220406/23.png" alt="spec"></p>
]]></content>
      <categories>
        <category>工科生的基本功</category>
        <category>专栏——seaborn绘图</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Seaborn绘图——概述</title>
    <url>/archives/853893d9.html</url>
    <content><![CDATA[<p>记录利用 Seaborn 绘图的方法，方便后续查阅。<br><span id="more"></span></p>
<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>因为需要用到seaborn相关的绘图工具，因此记录一下学习笔记，方便后续自己查阅。参考链接中的第一个链接是自己学习的主要来源，第二个链接对seaborn的调色以及其他的一些基本使用有较为详尽的介绍。</p>
<h1 id="2-概述"><a href="#2-概述" class="headerlink" title="2 概述"></a>2 概述</h1><p><a href="https://seaborn.pydata.org/">seaborn</a> 是在 <a href="https://matplotlib.org/">matplotlib</a> 基础上开发的一个绘图库，使用 seaborn 可以便捷地绘制多种科研用图。 seaborn 的安装方法:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install seaborn</span><br></pre></td></tr></table></figure></p>
<p>查看 seaborn 的版本:<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="built_in">print</span>(sns.__version__)</span><br></pre></td></tr></table></figure></p>
<h1 id="3-seaborn-中数据的读取"><a href="#3-seaborn-中数据的读取" class="headerlink" title="3 seaborn 中数据的读取"></a>3 seaborn 中数据的读取</h1><p>seaborn 对应的数据格式是 pandas 的 DataFrame 或者 Numpy 数组。seaborn 中有 19 种数据集供大家使用，不过使用的时候需要科学上网才能正常下载。为了方便，也可以从 Github 上提前先下载好相应的数据集，下载链接：<a href="https://github.com/mwaskom/seaborn-data">https://github.com/mwaskom/seaborn-data</a>.<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看seaborn有哪些自带的数据集</span></span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="built_in">print</span>(sns.get_dataset_names())</span><br><span class="line"><span class="comment"># 结果为:</span></span><br><span class="line"><span class="comment"># [&#x27;anagrams&#x27;, &#x27;anscombe&#x27;, &#x27;attention&#x27;, &#x27;brain_networks&#x27;, &#x27;car_crashes&#x27;, &#x27;diamonds&#x27;, &#x27;dots&#x27;, &#x27;exercise&#x27;, &#x27;flights&#x27;, &#x27;fmri&#x27;, &#x27;gammas&#x27;, &#x27;geyser&#x27;, &#x27;iris&#x27;, &#x27;mpg&#x27;, &#x27;penguins&#x27;, &#x27;planets&#x27;, &#x27;taxis&#x27;, &#x27;tips&#x27;, &#x27;titanic&#x27;]</span></span><br></pre></td></tr></table></figure></p>
<h2 id="3-1-tips-数据集"><a href="#3-1-tips-数据集" class="headerlink" title="3.1 tips 数据集"></a>3.1 tips 数据集</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line">tip_df = sns.load_dataset(<span class="string">&quot;tips&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(tip_df))  <span class="comment"># &lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(tip_df.shape)  <span class="comment"># (244, 7)</span></span><br><span class="line"><span class="built_in">print</span>(tip_df)</span><br></pre></td></tr></table></figure>
<p>运行结果为:<br><img src="/images/20220406/tips.png" alt="tips"></p>
<p>可以看到，seaborn 是一个包含244行、7列数据的 pandas 的 DataFrame 格式数据。每一列的数据分别为:</p>
<ul>
<li>total_bill: 总账单</li>
<li>tip: 小费</li>
<li>sex: 性别，包含男女两种</li>
<li>smoker: 吸烟与否</li>
<li>day: 星期几</li>
<li>time: 午餐和晚餐两种</li>
<li>size: 每桌人数2~6共五种</li>
</ul>
<h2 id="3-2-penguins-数据集"><a href="#3-2-penguins-数据集" class="headerlink" title="3.2 penguins 数据集"></a>3.2 penguins 数据集</h2><p>penguins 数据集是一个 344 行、 7 列的企鹅数据集，每一列的含义为:</p>
<ul>
<li>species: 企鹅种类，共三种</li>
<li>island: 共有三种岛屿</li>
<li>bill_length_mm: 嘴巴长度</li>
<li>bill_depth_mm: 嘴巴深度</li>
<li>flipper_length_mm: 脚掌长度</li>
<li>body_mass_g: 体重</li>
<li>sex: 性别，共两种<br><img src="/images/20220406/penguins.png" alt="penguins"></li>
</ul>
<h2 id="3-3-diamonds-数据集"><a href="#3-3-diamonds-数据集" class="headerlink" title="3.3 diamonds 数据集"></a>3.3 diamonds 数据集</h2><p>diamonds 数据集包含 53940 行、10 列，其中每一列的含义为:</p>
<ul>
<li>carat: 代表钻石的重量</li>
<li>cut: 代表了钻石的切工，由低到高依次为Fair, Good, Very Good, Premium, Ideal</li>
<li>color: 代表了钻石的颜色从最低的 J 到最高的 D </li>
<li>clarity: 代表了钻石的透明程度从低到高依次为I1, SI1, SI2, VS1, VS2, VVS1, VVS2, IF</li>
<li>depth: 深度</li>
<li>table: 代表了钻石的桌面比例</li>
<li>price: 代表了钻石的价格</li>
<li>x: 钻石的长</li>
<li>y: 钻石的宽</li>
<li>z: 钻石的高<br><img src="/images/20220406/diamonds.png" alt="diamonds"></li>
</ul>
<h2 id="3-4-fmri-数据集"><a href="#3-4-fmri-数据集" class="headerlink" title="3.4 fmri 数据集"></a>3.4 fmri 数据集</h2><p>fmri 数据集是一个事件相关功能核磁共振成像数据，包含 1064 行 5 列，每一列数据含义为：</p>
<ul>
<li>subject: 刺激类型，共有14种</li>
<li>timepoint: 时间点，共有19种(0~18)</li>
<li>event: 事件，共2种</li>
<li>region: 大脑区域，共2种</li>
<li>signal: 信号，共1064个结果<br><img src="/images/20220406/fmri_dataset.png" alt="fmri"></li>
</ul>
<h1 id="4-API-概述"><a href="#4-API-概述" class="headerlink" title="4 API 概述"></a>4 API 概述</h1><p>总体来讲，seaborn 的 API 可以分为绘图层面的函数以及其下对应的坐标轴层面的函数：</p>
<ul>
<li>displot(变量分布，distribution plot)<ul>
<li>histplot(直方图)</li>
<li>kdeplot</li>
<li>ecdfplot</li>
<li>rugplot</li>
</ul>
</li>
<li>replot(两变量，relation plot)<ul>
<li>scatterplot(散点图)</li>
<li>lineplot</li>
</ul>
</li>
<li>lmplot(线性关系，linear model plot)<ul>
<li>regplot(线性回归拟合)</li>
<li>residplot(残差)</li>
</ul>
</li>
<li>catplot(类别变量分析，category)<ul>
<li>countplot(类似与histplot)</li>
<li>barplot</li>
<li>pointplot</li>
<li>boxplot</li>
<li>stripplot</li>
<li>swarmplot</li>
<li>violinplot</li>
</ul>
</li>
</ul>
<p>如此分类，只需在四种图绘制函数的参数kind进行修改即可绘制相应的图形。</p>
<h1 id="5-参考链接"><a href="#5-参考链接" class="headerlink" title="5 参考链接"></a>5 参考链接</h1><ol>
<li><a href="https://www.bilibili.com/video/BV1VX4y1F76x?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1VX4y1F76x?spm_id_from=333.337.search-card.all.click</a></li>
<li><a href="https://www.bilibili.com/video/BV1HF411B72n?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1HF411B72n?spm_id_from=333.337.search-card.all.click</a></li>
<li><a href="https://github.com/mwaskom/seaborn-data">https://github.com/mwaskom/seaborn-data</a></li>
</ol>
]]></content>
      <categories>
        <category>工科生的基本功</category>
        <category>专栏——seaborn绘图</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 调用 ADS 接口及时间分析</title>
    <url>/archives/f900a735.html</url>
    <content><![CDATA[<p>记录利用Python调用TwinCAT ADS接口的方法及效率测试。<br><span id="more"></span></p>
<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>使用Python调用TwinCAT ADS接口的核心即 <a href="https://pyads.readthedocs.io/en/latest/index.html">pyads库</a>。笔者主要在Windows上进行了相关测试，Ubuntu上的测试尚未进行。</p>
<h1 id="2-pyads从ADS读取数据的方式"><a href="#2-pyads从ADS读取数据的方式" class="headerlink" title="2 pyads从ADS读取数据的方式"></a>2 pyads从ADS读取数据的方式</h1><p>笔者测试了三种方式，是否有更多的方式还有待探究。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyads</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">plc = pyads.Connection(<span class="string">&#x27;127.0.0.1.1.1&#x27;</span>,pyads.PORT_TC3PLC1)</span><br><span class="line">plc.<span class="built_in">open</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get all symbols from TwinCAT</span></span><br><span class="line"><span class="comment"># symbols = plc.get_all_symbols()</span></span><br><span class="line"><span class="comment"># for item in symbols:</span></span><br><span class="line"><span class="comment">#     print(item)</span></span><br><span class="line"><span class="comment"># # print(&#x27;\n&#x27;.join(&quot;%s: %s&quot;% item for iterm in vars(symbols[0]).items()))</span></span><br><span class="line"><span class="comment"># print(len(symbols))  # 685</span></span><br><span class="line">symbol = plc.get_symbol(<span class="string">&#x27;MAIN.array&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(symbol)</span><br><span class="line"><span class="built_in">print</span>(symbol.read())</span><br><span class="line"></span><br><span class="line">a = <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Method 1</span></span><br><span class="line">start = time.time()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    plc.get_symbol(<span class="string">&#x27;MAIN.array&#x27;</span>).read()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;symbol read time: &#x27;</span>, time.time() - start)  <span class="comment"># 100次0.23601937294006348s</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Method 2</span></span><br><span class="line">start = time.time()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    plc.read_by_name(<span class="string">&quot;MAIN.SafeIndex&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27; read by name time: &#x27;</span>, time.time() - start)  <span class="comment"># 100次0.32199621200561523s</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Method 3</span></span><br><span class="line">start = time.time()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    plc.read_list_by_name([<span class="string">&quot;MAIN.SafeIndex&quot;</span>])  <span class="comment"># 100次0.10998749732971191s</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;list read time: \n&#x27;</span>, time.time() - start)</span><br></pre></td></tr></table></figure></p>
<p>三种方式都是循环运行100次，求其平均值，结果是采用 <code>plc.read_list_by_name</code> 的方式获取的平均时间最短。</p>
<p>注意：</p>
<ul>
<li><code>plc.read_list_by_name</code>: 可以一次性以列表的方式获取多个数值，但不会对时间造成过多的影响，结果以dict形式呈现，如何获取数组还有待探索；</li>
<li><code>plc.get_symbol</code>: 可以获取<strong>数组</strong>类型的数据；</li>
<li><code>plc.read_by_name</code>: 可以获取一个ADS接口的数据，结果<strong>不是</strong>dict, 会直接呈现，也可以获取数组类型的数据。</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/qq_42588821/article/details/104157471">Python与倍福(Beckhoff)ADS通讯</a></li>
</ol>
]]></content>
      <categories>
        <category>机器人控制</category>
      </categories>
      <tags>
        <tag>机器人</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu和Windows获取系统时间的比较</title>
    <url>/archives/7e62fd0f.html</url>
    <content><![CDATA[<p>记录利用Python获取系统时间戳的方法。<br><span id="more"></span></p>
<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>做项目的过程中，发现用Python来获取电脑的系统时间总是有一些问题，经过查找资料发现应该是 Windows 和 Ubuntu 系统不一样，造成用同样的方法获取到的时间戳是不一样的。特地记录一下这个过程。</p>
<h1 id="2-获取系统时间的方法"><a href="#2-获取系统时间的方法" class="headerlink" title="2 获取系统时间的方法"></a>2 获取系统时间的方法</h1><p>先来看一段简单的程序<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="built_in">print</span>(time.time())</span><br><span class="line"><span class="keyword">for</span> i <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;No.&#x27;</span>, i)</span><br><span class="line">  time.sleep(<span class="number">0.5</span>)</span><br><span class="line">  <span class="built_in">print</span>(time.time())</span><br></pre></td></tr></table></figure></p>
<p>Ubuntu显示结果：<br>1646807738.1324077<br>1646807738.632916<br>1646807739.1335397<br>1646807739.63411<br>1646807740.1347759<br>1646807740.6354375</p>
<p>Windows显示结果：<br>1646807786.0287051<br>1646807786.5307221<br>1646807787.032723<br>1646807787.5337255<br>1646807788.0347238<br>1646807788.5367093</p>
<p>目前看起来二者都没有什么问题。将上述程序修改一下：<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="built_in">print</span>(time.time())</span><br><span class="line"><span class="keyword">for</span> i <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">  <span class="comment"># time.sleep(0.5)</span></span><br><span class="line">  <span class="built_in">print</span>(time.time())</span><br></pre></td></tr></table></figure></p>
<p>Ubuntu显示结果：<br>1646808031.1839275<br>1646808031.183945<br>1646808031.1839483<br>1646808031.183951<br>1646808031.1839535<br>1646808031.183956</p>
<p>Windows显示结果：<br>1646808010.2492912<br>1646808010.2492912<br>1646808010.2512927<br>1646808010.2512927<br>1646808010.2512927<br>1646808010.2512927</p>
<p>对比上述两个结果，可以看出，由于循环中仅执行打印当前时间戳的代码，运行很快，Ubuntu上可以看出每次的时间不一致，相邻的时间差大约为0.000003s=0.003ms，而Windows上的打印结果则显示多次输出的是一个值，说明 Windows 上用这样的获取时间戳方式无法获取到精确的时间。经过查阅资料后，Windows上的系统时间是精确到100ns。在Python3.8后，引入了一个 <strong>perf_counter()</strong> 的方法，这个函数返回性能计数器的值（以 秒 为单位）作为浮点数，即具有最高可用分辨率的时钟，以测量短持续时间。它确实包括睡眠期间经过的时间，并且是系统范围的。通常perf_counter()用在测试代码时间上，具有最高的可用分辨率。不过因为返回值的参考点未定义，因此我们测试代码的时候需要调用两次，做差值。<br>将上述代码修改为：<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">start_time = time.time()</span><br><span class="line">start_counter = time.perf_counter()</span><br><span class="line"><span class="keyword">for</span> i <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">  <span class="built_in">print</span>(start_time + time.perf_counter() - start_counter)</span><br></pre></td></tr></table></figure><br>在Windows上运行的结果如下：<br>1646808530.6189997<br>1646808530.619183<br>1646808530.6207914<br>1646808530.6209636<br>1646808530.6211357</p>
<p>从上述运行结果可以看出，由于加入了加减法的运算，相邻的两个时间差在0.0001722s=0.1722ms。目前尚不清楚为什么在Windows环境下直接用 time.time() 为什么无法精确到微秒级，留个疑问在这里。</p>
<p>笔者的实际测试结果是，用这种时间获取一段时间，将获取到的时间戳(Core i3-4xxxU)直接plot出来，发现仍然会有很大的跳变，具体原因还有待进一步探究。</p>
<h1 id="3-TwinCAT获取系统时间"><a href="#3-TwinCAT获取系统时间" class="headerlink" title="3 TwinCAT获取系统时间"></a>3 TwinCAT获取系统时间</h1><p>TwinCAT上获取的系统时间是以1961年1月1日为起点的，而Python直接获取的Ubuntu/Windows系统时间是以1970年1月1日为起点的。另外，还需要注意的一点是，即使将TwinCAT获取的系统时间戳转换为1970年1月1日为起点的，与python获取到的系统时间戳仍然是不一致的，但是在一小段时间内（例如1秒内），两个时间戳的差值变化不大。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://docs.python.org/zh-cn/3/library/time.html?highlight=time#time">time 官方库介绍</a></li>
</ol>
]]></content>
      <categories>
        <category>工科生的基本功</category>
        <category>快乐码农</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 自动挂载硬盘</title>
    <url>/archives/d1830d13.html</url>
    <content><![CDATA[<p>记录Ubuntu自动挂载硬盘的方法。<br><span id="more"></span></p>
<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>因为是 Windows + Ubuntu 双系统，而且是固态硬盘+机械硬盘双硬盘，每次Ubuntu启动后，安装在机械硬盘中的一些软件就无法使用，总是需要手动点击一下盘符，才能激活，遂不能忍！因此，本文旨在记录如何解决Ubuntu自动挂载Windows下分区的问题。</p>
<h1 id="2-方法"><a href="#2-方法" class="headerlink" title="2 方法"></a>2 方法</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo fdisk -l</span><br></pre></td></tr></table></figure>
<p>通过上述指令查看电脑的硬盘情况，如下图所示。其中nvme是固态硬盘，sda是机械硬盘。<br><img src="/images/20220126/01.png" alt="01"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo blkid /dev/sda2</span><br></pre></td></tr></table></figure>
<p>通过上述指令查看每一个分区的UUID。<br><img src="/images/20220126/02.png" alt="01"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gedit /etc/fstab</span><br></pre></td></tr></table></figure>
<p>打开文件周在末尾添加想要挂载的分区。格式为：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[UUID] [挂载磁盘分区位置]  [挂载磁盘格式]  0  2</span><br></pre></td></tr></table></figure><br>因为我自己已经习惯了在侧边栏直接点击硬盘分区，因此将各分区放在 <code>/media/robot/</code> 下，如下：<br><img src="/images/20220126/03.png" alt="01"><br>挂载位置自己可以设置。</p>
<p>测试：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mount -a     <span class="comment"># 挂载测试，测试编写的文件是否有误，无误则会成功挂载</span></span><br><span class="line">sudo umount -a    <span class="comment"># 移除挂载，可选</span></span><br><span class="line">sudo reboot       <span class="comment"># 重启生效</span></span><br></pre></td></tr></table></figure></p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/qq_35451572/article/details/79541106">Ubuntu 磁盘挂载——开机自动挂载</a></li>
<li><a href="https://bbs.huaweicloud.com/blogs/detail/241181">Ubuntu 16.04 启动自动挂载Windows ntfs分区</a></li>
</ol>
]]></content>
      <categories>
        <category>工科生的基本功</category>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Motive 软件使用方法</title>
    <url>/archives/dc5dd3f8.html</url>
    <content><![CDATA[<!-- <img src=" /images/20191023/00.png" width=50% /> -->
<p>简要记录Motive的使用方法。</p>
<span id="more"></span>
<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>最近在用动捕系统做实验，简单记录下motive的相关使用方法，防止记忆丢失。</p>
<h1 id="2-所用相机"><a href="#2-所用相机" class="headerlink" title="2 所用相机"></a>2 所用相机</h1><p>所用相机：OptiTrack V120:Trio, <a href="https://www.optitrack.com/cameras/v120-trio/#documents">官网链接</a><br>相机的硬件连接方式：<a href="https://d111srqycjesc9.cloudfront.net/V120-duo-trio-quick-start-guide-p-ot-110.1607.pdf">链接</a></p>
<blockquote>
<p>Tip1: 都是标准化的接口，直接照图插上就能用。<strong>不要使用250V的圆孔电源插头。</strong><br>Tip2: 该款三目相机无需进行标定，但是坐标原点的位置在第一个镜头和第二个镜头之间偏后约30cm的位置。<br>Tip3: 相关的参考文档都能从官网中找到。</p>
</blockquote>
<h1 id="3-软件"><a href="#3-软件" class="headerlink" title="3 软件"></a>3 软件</h1><p>软件为 motive2.3.0. <a href="https://www.optitrack.com/support/downloads/">下载链接</a><br>配套的SDK，NaNet SDK4.0.0. <a href="https://www.optitrack.com/support/downloads/developer-tools.html">下载链接</a></p>
<blockquote>
<p>我的目的是测试通软硬件，最后在Linux上读数据；官网上说 Camera SDK 2.3.0 与 Motive2.3.0 相匹配，尚未测试。<br><!-- motive2.3.0的使用方法见软件录屏。 --><br>Tip1: 软件中地面的一小格为20cm，一大格为1m。<br>Tip2: <strong>将 View -&gt; Data Streaming Pane 中的所有开关都打开</strong>。<br>Tip3: 建造刚体： View -&gt; Builder Pane, 选中marker点，输入名字，点击 Create。<br>读取数据的方式：<br>运行 <code>NatNet_SDK_4.0\NatNetSDK\Samples\bin\x64\SampleClient.exe</code><br><!-- ，执行结果如下：
![result]( ./20211219/result.png) --></p>
</blockquote>
<h1 id="4-Ubuntu读取"><a href="#4-Ubuntu读取" class="headerlink" title="4 Ubuntu读取"></a>4 Ubuntu读取</h1><ol>
<li>从 <a href="https://www.optitrack.com/support/downloads/developer-tools.html">下载链接</a> 获取配套的NaNet SDK4.0.0. Linux 示例程序。</li>
<li>用一根网线将Ubuntu和Windows连接。</li>
<li>关闭Windows的防火墙。</li>
<li>设置IP地址，并测试双向是否ping通。</li>
<li>Motive 中打开 <code>View -&gt; Data Streaming Pane</code> 面板，将 <code>Local Interface：</code> 改为第4步设置的<strong>Windows IP</strong>。</li>
<li>Ubuntu 按照SDK中的说明运行程序。 ./SampleClient WindowsIP</li>
</ol>
<p>结果：<br>  读取到与第3节中一致的结果。</p>
]]></content>
      <categories>
        <category>工科生的基本功</category>
      </categories>
      <tags>
        <tag>Library</tag>
      </tags>
  </entry>
  <entry>
    <title>机器人阻抗控制</title>
    <url>/archives/d5db4349.html</url>
    <content><![CDATA[<!-- b站分享按钮下"嵌入" -->
<!-- <iframe src="//player.bilibili.com/player.html?aid=248891855&bvid=BV17v411H7Dm&cid=362984310&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe> -->
<div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"> <iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="//player.bilibili.com/player.html?aid=248891855&bvid=BV17v411H7Dm&cid=362984310&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe> </div>

<p>基于自行搭建的机器人控制器,从电机力矩层面实现阻抗控制.<br><span id="more"></span></p>
]]></content>
      <categories>
        <category>机器人控制</category>
        <category>专栏——机器人动力学</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>机器人</tag>
      </tags>
  </entry>
  <entry>
    <title>SDH，一变就通</title>
    <url>/archives/1a88a2b6.html</url>
    <content><![CDATA[<span id="more"></span>
<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>上篇已经介绍过 SDH 建立坐标系的过程，本篇来介绍下 SDH 参数表示坐标系间的齐次变换矩阵。</p>
<p>用 $R_x$ 表示绕 $x$ 轴的三维旋转矩阵，用 $\mathcal{R}_x$ 表示绕 $x$ 轴旋转的齐次变换矩阵。</p>
<script type="math/tex; mode=display">
R_{x}(\theta)=\begin{bmatrix}
1 & 0 & 0 \\
0 & \cos\theta & -\sin\theta \\
0 & \sin\theta & \cos\theta \\
\end{bmatrix}
\in
\mathbb{R}^{3\times 3}</script><script type="math/tex; mode=display">
R_{y}(\theta)=\begin{bmatrix}
\cos\theta & 0 & \sin\theta \\
0 & 1 & 0 \\
-\sin\theta & 0 & \cos\theta \\
\end{bmatrix}
\in
\mathbb{R}^{3\times 3}</script><script type="math/tex; mode=display">
R_{z}(\theta)=\begin{bmatrix}
\cos\theta & -\sin\theta & 0 \\
\sin\theta & \cos\theta & 0\\
0 & 0 & 1 \\
\end{bmatrix}
\in
\mathbb{R}^{3\times 3}</script><script type="math/tex; mode=display">
\mathcal{R}_x(\theta)=\begin{bmatrix}
R_x(\theta) & 1 \\
0_{1\times 3} & 1 \\
\end{bmatrix}
\in
\mathbb{R}^{4\times 4}</script><p>用 $t_x = \begin{bmatrix}<br>  d &amp; 0 &amp;0<br>\end{bmatrix}^T$表示沿 $x$ 方向平移 $d$，用$\mathcal{T}_x(d)$ 表示平移 $t$ 的齐次变换矩阵。即：</p>
<script type="math/tex; mode=display">
\mathcal{T}_x(d)=\begin{bmatrix}
I_{3\times 3} & t_x \\
0_{1\times 3} & 1 \\
\end{bmatrix}
\in
\mathbb{R}^{4\times 4}</script><p>接下来用一个示例说明旋转矩阵的两种含义：</p>
<p><img src="/images/20210520/demo.jpg" alt="demo"></p>
<p>上图中的两种含义会决定旋转矩阵的左乘还是右乘。当表示第一种含义的时候，用的右乘；第二种含义，旋转矩阵则应左乘。</p>
<h1 id="2-用-SDH-参数表示坐标系见的齐次变换矩阵"><a href="#2-用-SDH-参数表示坐标系见的齐次变换矩阵" class="headerlink" title="2 用 SDH 参数表示坐标系见的齐次变换矩阵"></a>2 用 SDH 参数表示坐标系见的齐次变换矩阵</h1><p><img src="/images/20210519/rvc_SDH.png" alt="SDH"></p>
<p>上图清晰地展示了从 $j-1$ 系如何变换到 $j$ 系，其过程如下：</p>
<ol>
<li>沿 $z_{j-1}$ 轴移动 $d_j$</li>
<li>沿 $z_{j-1}$ 轴转动 $\theta_j$</li>
<li>沿 $x_{j}$ 轴移动 $a_j$</li>
<li>沿 $x_{j}$ 轴转动 $\alpha_j$</li>
</ol>
<p>因此，从 $j-1$ 系到 $j$ 系的变换矩阵 $^{j-1}\xi_j$ 就可以表示为</p>
<script type="math/tex; mode=display">
\begin{aligned}
^{j-1}\xi_j & = \mathcal{T}_z(d_j)\mathcal{R}_z(\theta_j)\mathcal{T}_x(a_j)\mathcal{R}_x(\alpha_j)\\
& = \begin{bmatrix}
\cos\theta_j & -\cos\alpha_j\sin\theta_j & \sin\alpha_j\sin\theta_j & a_j\cos\theta_j \\
\sin\theta_j & \cos\alpha_j\cos\theta_j & -\sin\alpha_j\cos\theta_j & a_j\sin\theta_j \\
0 & \sin\alpha_j & \cos\alpha_j & d_j \\
0 & 0 & 0 & 1\\
\end{bmatrix}
\end{aligned}\tag{1}</script><p>于是，对于 UR10 这样的 6 轴机器人，从基座开始到末端的变换矩阵为：</p>
<script type="math/tex; mode=display">
\begin{aligned}
^0\xi_6 &= ^0\xi_1\cdot^1\xi_2\cdot^2\xi_3\cdot^3\xi_4\cdot^4\xi_5\cdot^5\xi_6\\
&=\begin{bmatrix}
  ^0\mathbf{R}_6 & ^0\mathbf{p}_6\\
  0 & 1\\
\end{bmatrix}
\end{aligned}\tag{2}</script><p>对于机器人而言，更直观的是用末端位姿来表示式(2)所示的齐次变换矩阵。机器人末端在空间中的位置即用式(2)中的 $^0\mathbf{p}_6 = \begin{bmatrix}<br>  x&amp;y&amp;z<br>\end{bmatrix}^T$ 表示，姿态矩阵 $^0\mathbf{R}_6$ 则用三个变量来表示。<br>这里介绍用X-Y-Z固定角坐标系来描述的方法<sup>[1]</sup>：</p>
<p>首先将坐标系 {$B$} 和一个已知参考坐标系 {$A$} 重合。先将 {$B$} 绕 {$A$} 系的 $X$ 轴旋转 $r$ 角度(roll)，再绕 $A$ 系的 $Y$ 轴旋转 $p$ 角度(pitch)，最后绕 $A$ 的 $Z$ 轴旋转 $y$ 角度(yaw)。每个旋转轴都是绕着固定参考系{$A$}的轴，规定这种姿态的表示法为X-Y-Z固定角坐标系。有的地方也把它们定义为回转角、俯仰角和偏航角。因此，上述旋转顺序是 $X-Y-Z$。假定基座标系中的一点为 $^BP$，$B$ 表示基座标系。<br>先绕 $X_B$ 轴转 $\theta_y = r$，旋转后的点在基座标系中的表示用 $^B P_1$ 表示，有：</p>
<script type="math/tex; mode=display">
^B P_1 = Rx_B(r)\cdot^BP \tag{3}</script><p>再绕 $Y_B$ 轴转 $\theta_p =  p$，旋转后的点在基座标系中的用 $^B P_2$ 表示，有：</p>
<script type="math/tex; mode=display">
^B P_2 = Ry_B( p)\cdot^BP_1  \tag{4}</script><p>最后绕 $Z_B$ 轴转 $\theta_r =  y$，旋转后的点在基座标系中的用 $^B P_3$ 表示，有：</p>
<script type="math/tex; mode=display">
^B P_3 = Rz_B( y)\cdot^BP_2 \tag{5}</script><p>将上式三式整合，得基座标系中最终点的坐标和初始点坐标之间的关系为：</p>
<script type="math/tex; mode=display">
\begin{aligned}
^BP_3 & = Rz_B( y)\cdot^BP_2 \\
&= Rz_B( y)\cdot Ry_B( p)\cdot^BP_1 \\
&= Rz_B( y)\cdot Ry_B( p)\cdot Rx_B(r)\cdot^BP \\
&= 
\begin{bmatrix}
\cos y & -\sin y & 0 \\
\sin y & \cos y & 0\\
0 & 0 & 1 \\
\end{bmatrix}
\begin{bmatrix}
\cos p & 0 & \sin p \\
0 & 1 & 0\\
-\sin p & 0 & \cos p \\
\end{bmatrix}
\begin{bmatrix}
1 & 0 & 0 \\
0 &\cos r & -\sin r \\
0 &\sin r & \cos r \\
\end{bmatrix}\cdot ^BP
\\
&= \begin{bmatrix}
  \cos y \cos p & -\sin y\cos r+\cos y\sin p\sin r & \sin y\sin r+\cos y\sin p\cos r\\
  \sin y\cos p & \cos y\cos r+\sin y\sin p\sin r & -\cos y\sin r + \sin y\sin p\cos r\\
  -\sin p & \cos p\sin r & \cos p\cos r\\
\end{bmatrix}\cdot ^BP\\
& = \begin{bmatrix}
  r_{11} & r_{12} & r_{13}\\
  r_{21} & r_{22} & r_{23}\\
  r_{31} & r_{32} & r_{33}\\
\end{bmatrix}\cdot {^{B}}P
\end{aligned}\tag{6}</script><font color="#dd0000" size=4>注意：上述每一步的旋转都是相对于基座标系（固定坐标系）旋转的。因此，最终的旋转矩阵是左乘。</font>

<p>依据式(6)进行求解 $y, p, r$：</p>
<ol>
<li>当 $| p| \neq 90°$ 时，<script type="math/tex; mode=display">
\left\{\begin{aligned}
p &=  atan2(-r_{31},\sqrt{r_{11}^2 + r_{21}^2})\\
y &=  atan2(\frac{r_{21}}{\cos p},\frac{r_{11}}{\cos p})\\
r &=  atan2(\frac{r_{32}}{\cos p},\frac{r_{33}}{\cos p})\\
\end{aligned}\right. \tag{7}</script></li>
<li>当 $p = 90°$ 时，$r_{12} = -\sin y\cos r+\cos y\sin r = \sin(r-y)$, $r_{13} = \sin y\sin r + \cos y\cos r = \cos(r-y)$, 无法直接解算出，直接设定此时 $r = 0$，此时 $r_{12} = -\sin y$，$r_{13} = \cos y$，因此，解为<script type="math/tex; mode=display">
\left\{\begin{aligned}
r &= 0°\\
y &= - atan2(r_{12},r_{13})\\
\end{aligned}\right. \tag{8}</script></li>
<li>同理，当 $p = -90°$ 时， $r_{12} = -\sin y\cos r - \cos y\sin r = -\sin(r+y)$， $r_{13} = \sin y\sin r - \cos y\cos r = -\cos(y+r)$，指定 $r = 0$，此时 $r_{12} = -\sin y$，$r_{13} = -\cos y$，因此，解为<script type="math/tex; mode=display">
\left\{\begin{aligned}
r &= 0°\\
y &=  atan2(-r_{12},-r_{13})\\
\end{aligned}\right. \tag{9}</script></li>
</ol>
<blockquote>
<p>atan2 是 MATLAB 自带的函数。</p>
</blockquote>
<h1 id="3-验证"><a href="#3-验证" class="headerlink" title="3 验证"></a>3 验证</h1><h2 id="3-1-rpy-验证"><a href="#3-1-rpy-验证" class="headerlink" title="3.1 rpy 验证"></a>3.1 rpy 验证</h2><p>装完PeterCoke的 rcv_tools 工具箱后，运行 <em>tripleangle</em>， 如下所示：</p>
<p><img src="/images/20210520/rpy.png" alt="20210520"></p>
<p>图中，Rz 表示绕世界坐标系的 Z 轴旋转，Ry 表示绕世界坐标系的 Y 轴旋转，Rx表示绕世界坐标系的 X 轴旋转。在PeterCoke的工具箱中，使用 <strong>rpy2r</strong> 可以将 rpy 转为旋转矩阵，程序实例如下：</p>
<p><img src="/images/20210520/verify.png" alt="xyz"></p>
<p>通过运行 <em>open rpy2r</em> 打开函数的源码如下所示：</p>
<p><img src="/images/20210520/rpy-xyz.png" alt="xyz"></p>
<p>使用时该函数的输入参数是 <em>roll,pitch,yaw</em>，工具箱的默认旋转顺序是 $ZYX$，从第 96 行可以看出采用的旋转顺序是 $R_z(yaw)R_y(pitch)R_x(roll)$，与式 (6) 一致。因此，<font color="#dd0000" size=4>工具箱的旋转顺序命名是按照旋转矩阵从左至右命名的，与实际的旋转顺序正好相反。</font></p>
<h2 id="3-2-机器人末端位姿验证"><a href="#3-2-机器人末端位姿验证" class="headerlink" title="3.2 机器人末端位姿验证"></a>3.2 机器人末端位姿验证</h2><p>零位时的 UR10 和关节 3 转 $90°$ 后的位姿计算结果如下所示：</p>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/images/20210520/ur10_0.png" width=93% /></div><div class="group-picture-column" style="width: 50%;"><img src="/images/20210520/ur10_1.png" width=93%/></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/images/20210520/ur10_0_1.png" /></div><div class="group-picture-column" style="width: 50%;"><img src="/images/20210520/ur10_1_1.png" width=90%/></div></div></div></div>
<p>以第二组结果为例，反算出来的 $roll = 0, pitch = -\pi/2, yaw = \pi /2$，即末端姿态绕<font color="#dd0000">基座标系</font> $x$ 轴旋转了 $0°$，再绕<font color="#dd0000">基座标系</font>的 $y$ 轴旋转了 $-90°$，最后绕<font color="#dd0000">基座标系</font>的 $z$ 轴旋转了 $90°$，与图示末端姿态一致。</p>
<p>简单计算，即可得到由旋转矩阵求 rpy 的公式 (7)~(9) 与用工具箱得到的结果一致。</p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol>
<li>机器人建模和控制[M]</li>
<li><a href="https://blog.csdn.net/m0_37764065/article/details/107207404">【机器人运动学/姿态角】欧拉角和RPY角</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/93563805">机器人运动控制算法——位姿</a></li>
</ol>
]]></content>
      <categories>
        <category>机器人控制</category>
        <category>专栏——机器人动力学</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>机器人</tag>
      </tags>
  </entry>
  <entry>
    <title>SDH，一学就会</title>
    <url>/archives/22acf33e.html</url>
    <content><![CDATA[<p>介绍标准 DH(SDH) 机器人建系方法。</p>
<span id="more"></span>
<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>在做机器人控制的时候，为了能够方便地对机器人进行力矩控制，自己搭建了一套控制器。在搭建完基本的硬件平台后，需要对机器人进行建模。首先是机器人坐标系的建立。以UR10为例。</p>
<p>有两种可以在 MATLAB 中使用的工具箱：</p>
<ul>
<li><a href="https://petercorke.com/toolboxes/robotics-toolbox/#Downloading_the_Toolbox">PerterCoke的Robotics ToolBox</a></li>
<li><a href="http://arvc.umh.es/arte/index_en.html">ARTE: A ROBOTICS TOOLBOX FOR EDUCATION</a></li>
</ul>
<p>第一种工具箱对应的有一本书 《Robotics, Vision and Control》<sup>[1]</sup>，这个用的比较多，不再赘述。</p>
<p>第二种工具箱下载好后将路径添加到 MATLAB 中，然后在它的文件夹下运行一下命令即可。</p>
<figure class="highlight m"><table><tr><td class="code"><pre><span class="line">init_lib</span><br><span class="line">robot <span class="built_in">=</span> load_robot(<span class="string">&#x27;UR&#x27;</span>,<span class="string">&#x27;UR10&#x27;</span>);</span><br><span class="line"><span class="comment">% 关节坐标轴是否可见</span></span><br><span class="line"><span class="comment">% robot.graphical.draw_axes = 1 </span></span><br><span class="line">drawrobot3d(robot,[<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>])</span><br></pre></td></tr></table></figure>
<h1 id="2-SDH建立坐标系的过程"><a href="#2-SDH建立坐标系的过程" class="headerlink" title="2 SDH建立坐标系的过程"></a>2 SDH建立坐标系的过程</h1><p><img src="/images/20210519/rvc_SDH.png" alt="SDH"></p>
<p>上图所示的转动关节 DH 参数的定义<sup>[1]</sup>：</p>
<ol>
<li>关节距离 $d_j$：从 $x_{j-1}$ 轴沿 $z_{j-1}$ 轴到 $x_j$ 轴的距离；</li>
<li>关节转角 $\theta _j$：从 $x_{j-1}$ 轴沿 $z_{j-1}$ 轴转到 $x_j$ 轴的角度，且  $\theta_j \in (-\pi,\pi]$；</li>
<li>杆间距离 $a_j$：从 $z_{j-1}$ 轴沿 $x_j$ 轴到 $z_j$ 轴的距离；</li>
<li>杆件扭角 $\alpha_j$：从 $z_{j-1}$ 轴沿 $x_j$ 轴转到 $z_j$ 轴的角度，且 $\alpha_j \in (-\pi,\pi]$.</li>
</ol>
<p>DH 坐标系中轴与原点确定的基本原则是<sup>[2]</sup>：</p>
<ol>
<li>$z_j$ 轴沿关节 $j+1$ 的轴向(指向可任选，但通常都将各平行的 $z$ 轴均取为相同的指向)；</li>
<li>原点选取的原则：原点 $O_j$ 为 $z_{j-1}$ 轴和 $z_j$ 轴的公法线与 $z_{j-1}$ 轴的交点.<ul>
<li>当 $z_{j-1}$ 轴和 $z_j$ 轴平行时，两轴之间有无数条公垂线，若两轴重合，取 $O_j = O_{j-1}$；若两轴平行但不重合，则过 $O_{j-1}$ 点作 $z_{j-1}$ 轴和 $z_j$ 轴的公垂线，此公垂线与 $z_j$ 轴的交点即 $O_j$.</li>
<li>由于没有 $z_{-1}$，所以上述方法不适用于 $O_0$，这时确定 $O_0$ 的方法是：若 $z_0$ 与 $z_1$ 相交，取 $O_0 = O_1$；若$z_0$ 与 $z_1$ 不相交，取 $O_0$ 在 $z_0$ 与 $z_1$ 的公垂线上。</li>
</ul>
</li>
<li>轴 $x_j$ 与轴 $z_{j-1}$ 相交且垂直，即 $x_j$ 为沿过 $z_{j-1}$ 轴和 $z_j$ 轴的公垂线，方向从 $z_{j-1}$ 指向 $z_j$.<ul>
<li>当 $z_{j-1}$ 轴和 $z_j$ 轴重合时，这时 $O_j = O_{j-1}$，那么在零位时要求 $x_j = x_{j-1}$.</li>
<li>当 $z_{j-1}$ 轴和 $z_j$ 轴相交且不重合时，选择 $x_j = \pm(z_{j-1}\times z_j)$，通常使所有平行的 $x$ 轴均具有相同的指向.</li>
<li>当 $j = 0$时，$O_0 = O_1$, 或 $O_0$ 在 $z_0$ 轴和 $z_1$ 轴的公垂线上，选取 $x_0$ 轴与 $x_1$ 轴重合.<blockquote>
<p>Tip: 上述方法没有考虑平动关节的建系，可参见[2]。</p>
</blockquote>
</li>
</ul>
</li>
</ol>
<h1 id="3-官网给出的-UR10-的-SDH-模型"><a href="#3-官网给出的-UR10-的-SDH-模型" class="headerlink" title="3 官网给出的 UR10 的 SDH 模型"></a>3 官网给出的 UR10 的 SDH 模型</h1><p><a href="https://www.universal-robots.com/articles/ur/application-installation/dh-parameters-for-calculations-of-kinematics-and-dynamics/">UR官网</a>给出在零位时的UR10模型如下图所示。</p>
<p><img src=" /images/20210519/SDH.png" height = "300" alt="UR10" align=center /></p>
<p>按照第 2 节给出的 DH 建系原则，进行以下步骤的建模：</p>
<ol>
<li>确定各关节的旋转轴，用 $q_j$ 表示(可以参考下一节的图)。</li>
<li>确定 $z$ 轴，依据 DH 建系方法， $z_0 (z_{base})$ 应为 $q_1$，$z_1$ 应为 $q_2$，以此类推，最终，$z_6$ 应为 $q_6$，与 $z_5$ 相同。</li>
<li>确定坐标原点：<ul>
<li>$j = 0$ 时，$z_0$ 与 $z_1$ 相交，取 $O_0 = O_1$；</li>
<li>$j = 1$ 时，$z_0$ 与 $z_1$ 相交，取其交点为 $O_1$；</li>
<li>$j = 2$ 时，$z_1$ 与 $z_2$ 平行，过 $O_1$ 作 $z_1$ 与 $z_2$ 的公垂线并与 $z_2$ 相交的交点为 $O_2$；</li>
<li>$j = 3$ 时，$z_2$ 与 $z_3$ 平行，过 $O_2$ 作 $z_2$ 与 $z_3$ 的公垂线并与 $z_3$ 相交的交点为 $O_3$；</li>
<li>$j = 4$ 时，$z_3$ 与 $z_4$ 相交，取其交点为 $O_4$；</li>
<li>$j = 5$ 时，$z_4$ 与 $z_5$ 相交，取其交点为 $O_5$；</li>
<li>$j = 6$ 时，$z_5$ 与 $z_6$ 重合，取原点为 $O_6 = O_5$；</li>
</ul>
</li>
<li>确定 $x$ 轴：<ul>
<li>$j = 0$ 时，$O_0 = O_1$，应有 $x_0 = x_1$；</li>
<li>$j = 1$ 时，$z_0$ 与 $z_1$ 相交，选择 $x_1 = z_0 \times z_1$ (以上图为例，可以认为是图内指向向右)；</li>
<li>$j = 2$ 时，$z_1$ 与 $z_2$ 平行，$x_2$ 即 $z_1$ 与 $z_2$ 的公垂线，且从 $z_1$ 指向 $z_2$，为了保持平行方向的 $x$ 轴朝向一致，指定 $x_2$ 从 $z_2$ 指向 $z_1$；</li>
<li>$j = 3$ 时，$z_2$ 与 $z_3$ 平行，$x_3$ 即 $z_2$ 与 $z_3$ 的公垂线，且从 $z_2$ 指向 $z_3$，为了保持平行方向的 $x$ 轴朝向一致，指定 $x_3$ 从 $z_3$ 指向 $z_2$；</li>
<li>$j = 4$ 时，$z_3$ 与 $z_4$ 相交，选择 $x_4 = z_3 \times z_4$；</li>
<li>$j = 5$ 时，$z_4$ 与 $z_5$ 相交，选择 $x_5 = z_4 \times z_5$，为了保持平行方向的 $x$ 轴朝向一致，改为$x_5 = -z_4 \times z_5$；</li>
<li>$j = 6$ 时，$z_5$ 与 $z_6$ 重合，取 $x_6 = x_5$；</li>
</ul>
</li>
</ol>
<p>上述建模后存在的问题：</p>
<ol>
<li>$0$ 系和 $1$ 系重合，而 $O_1$ 为 $z_0$ 与 $z_1$ 的交点， <font color="#dd0000">这样没有考虑到 $O_1$ 与地面的高度，因此，将 $O_0$ 移动至底座与地面的接触面上，坐标系方向不变；</font><br /></li>
<li>同理，$5$ 系和 $6$ 系重合，<font color="#dd0000">没有考虑到连杆 $6$ 的长度，因此将 $O_6$ 移动至机器人末端，坐标系朝向不变。</font><br /></li>
</ol>
<p>确定 DH 参数：</p>
<ol>
<li>$j = 1$ 时：<ul>
<li>从 $x_0$ 轴沿 $z_0$ 轴到 $x_1$ 轴的距离为 $d_1$，即 $O_1$ 到地面的高度；</li>
<li>因 $x_0 // x_1$，从 $x_0$ 轴沿 $z_0$ 轴转到 $x_1$ 轴的角度为 $\theta_1  = 0$；</li>
<li>因 $z_0 \perp z_1$ 且共面，从 $z_0$ 轴沿 $x_1$ 轴到 $z_1$ 轴的距离为 $a_1 = 0$；</li>
<li>从 $z_0$ 轴沿 $x_1$ 轴转到 $z_1$ 轴的角度为 $\alpha_1 = \pi/2$.</li>
</ul>
</li>
<li>$j = 2$ 时：<ul>
<li>从 $x_1$ 轴沿 $z_1$ 轴到 $x_2$ 轴的距离为 $d_2 = 0$；</li>
<li>从 $x_1$ 轴沿 $z_1$ 轴转到 $x_2$ 轴的角度为 $\theta_2  = 0$；</li>
<li>从 $z_1$ 轴沿 $x_2$ 轴到 $z_2$ 轴的距离为 $-a_2$，即 连杆 $2$ 长度的相反数；</li>
<li>因 $z_1 // z_2$，从 $z_1$ 轴沿 $x_2$ 轴转到 $z_2$ 轴的角度为 $\alpha_2 = 0$.</li>
</ul>
</li>
<li>$j = 3$ 时：<ul>
<li>从 $x_2$ 轴沿 $z_2$ 轴到 $x_3$ 轴的距离为 $d_3 = 0$；</li>
<li>因 $x_2 // x_3$，从 $x_2$ 轴沿 $z_2$ 轴转到 $x_3$ 轴的角度为 $\theta_3  = 0$；</li>
<li>从 $z_2$ 轴沿 $x_3$ 轴到 $z_3$ 轴的距离为 $-a_3$，即 连杆 $3$ 竖直段的长度；</li>
<li>因 $z_2 // z_3$，从 $z_2$ 轴沿 $x_3$ 轴转到 $z_3$ 轴的角度为 $\alpha_3 = 0$.</li>
</ul>
</li>
<li>$j = 4$ 时，<ul>
<li>从 $x_3$ 轴沿 $z_3$ 轴到 $x_4$ 轴的距离为 $d_4$，即连杆 $4$ 长度；</li>
<li>因 $x_3 // x_4$ ，从 $x_3$ 轴沿 $z_3$ 轴转到 $x_4$ 轴的角度为 $\theta_4  = 0$；</li>
<li>因 $z_3 \perp z_4$ 且共面，从 $z_3$ 轴沿 $x_4$ 轴到 $z_4$ 轴的距离为 $a_4 = 0$；</li>
<li>从 $z_3$ 轴沿 $x_4$ 轴转到 $z_4$ 轴的角度为 $\alpha_4 = \pi/2$.</li>
</ul>
</li>
<li>$j = 5$ 时，<ul>
<li>从 $x_4$ 轴沿 $z_4$ 轴到 $x_5$ 轴的距离为 $d_5$，即连杆 $5$ 长度；</li>
<li>因 $x_4 // x_5$，从 $x_4$ 轴沿 $z_4$ 轴转到 $x_5$ 轴的角度为 $\theta_5  = 0$；</li>
<li>因 $z_4 \perp z_5$ 且共面，从 $z_4$ 轴沿 $x_5$ 轴到 $z_5$ 轴的距离为 $a_5 = 0$；</li>
<li>从 $z_4$ 轴沿 $x_5$ 轴转到 $z_5$ 轴的角度为 $\alpha_5 = -\pi/2$.  </li>
</ul>
</li>
<li>$j = 6$ 时，<ul>
<li>从 $x_5$ 轴沿 $z_5$ 轴到 $x_6$ 轴的距离为 $d_6$，即连杆 $6$ 长度；</li>
<li>因 $x_5 // x_6$，从 $x_5$ 轴沿 $z_5$ 轴转到 $x_6$ 轴的角度为 $\theta_6  = 0$；</li>
<li>因 $z_5$ 与 $z_6$ 重合，从 $z_5$ 轴沿 $x_6$ 轴到 $z_6$ 轴的距离为 $a_6 = 0$；</li>
<li>从 $z_5$ 轴沿 $x_6$ 轴转到 $z_6$ 轴的角度为 $\alpha_6 = 0$.</li>
</ul>
</li>
</ol>
<p>综上所述，DH 参数可以汇总如下表：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>$j$</th>
<th>$\theta$</th>
<th>$d$</th>
<th>$a$</th>
<th>$\alpha$</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>$0$</td>
<td>$d_1$</td>
<td>$0$</td>
<td>$\pi/2$</td>
</tr>
<tr>
<td>2</td>
<td>$0$</td>
<td>$0$</td>
<td>$-a_2$</td>
<td>$0$</td>
</tr>
<tr>
<td>3</td>
<td>$0$</td>
<td>$0$</td>
<td>$-a_3$</td>
<td>$0$</td>
</tr>
<tr>
<td>4</td>
<td>$0$</td>
<td>$d_4$</td>
<td>$0$</td>
<td>$\pi/2$</td>
</tr>
<tr>
<td>5</td>
<td>$0$</td>
<td>$d_5$</td>
<td>$0$</td>
<td>$-\pi/2$</td>
</tr>
<tr>
<td>6</td>
<td>$0$</td>
<td>$d_6$</td>
<td>$0$</td>
<td>$0$</td>
</tr>
</tbody>
</table>
</div>
<p>对照官网给出的 DH 参数：</p>
<p><img src="/images/20210519/ur10_0_0.png" height = "300" alt="puma560" align=center /></p>
<p>上述给出的 DH 建系方法存在的<font color="#dd0000" size=4>不足</font>：</p>
<ol>
<li>$j = 2$ 时，$z_1$ 与 $z_2$ 平行，按照基本原则应过 $O_1$ 作 $z_1$ 与 $z_2$ 的公垂线，其与 $z_2$ 的交点为 $O_2$。这样子建系存在的问题是<font color="#dd0000" size="4">未将连杆 $1$ 的长度考虑在内</font>。</li>
<li>同理，未考虑连杆 $3$ 在 $z_2(q_3)$ 轴方向的长度。</li>
<li>官网的零位在实际中是躺在地上的一种位姿，笔者在实际应用中要求零位是竖直状态。</li>
<li>仿真中进行显示的时候会感觉效果不好。</li>
</ol>
<h1 id="4-包含全部参数的SDH建系方法"><a href="#4-包含全部参数的SDH建系方法" class="headerlink" title="4 包含全部参数的SDH建系方法"></a>4 包含全部参数的SDH建系方法</h1><p>首先，将零位指定为竖直状态，如下图所示。</p>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/20210519/画板z.png" width = 80% alt="puma560" align=center /></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/20210519/画板0.png" width = 80% alt="puma560" align=center/></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/20210519/画板2.png" width = 88% alt="puma560" align=center/></div></div></div></div>
<p>再进行一次坐标系的确定：</p>
<ol>
<li>确定各关节的旋转轴，用 $q_j$ 表示。</li>
<li>确定 $z$ 轴，依据 DH 建系方法， $z_0$ 应为 $q_1$，$z_1$ 应为 $q_2$，以此类推，最终，$z_6$ 应为 $q_6$，与 $z_5$ 相同。指定竖直方向的 $z$ 轴向上为正，水平方向的 $z$ 轴向左为正。</li>
<li>确定坐标原点：<ul>
<li>$j = 0$ 时，为了包含 $1$ 关节到地面的距离，应取原点 $O_0$ 为基座与地面的接触底面中心；</li>
<li>$j = 1$ 时，$z_0$ 与 $z_1$ 相交，取其交点为 $O_1$，与第3节一致；</li>
<li>$j = 2$ 时，$z_1$ 与 $z_2$ 平行，第3节中对应的位置为 $O_2’$，为包含连杆 $1$ 的长度，将原来的 $O_2$ 移动至连杆 $2$ 的中心线与 $z_2$ 的交点；</li>
<li>$j = 3$ 时，$z_2$ 与 $z_3$ 平行，按照基本原则应确定为 $O_3’$，注意到连杆 $3$ 实际上由电机所在水平段与包含 $4$ 关节在内的竖直段组成，为包含连杆 $3$ 在水平段的长度，应该移至连杆 $3$ 与 $z_3$ 的交点，即 $O_3$，反而与第3节的 $O_3$ 一致；</li>
<li>$j = 4$ 时，$z_3$ 与 $z_4$ 相交，取其交点为 $O_4$，与第3节一致；</li>
<li>$j = 5$ 时，$z_4$ 与 $z_5$ 相交，取其交点为 $O_5$，与第3节一致；</li>
<li>$j = 6$ 时，$z_5$ 与 $z_6$ 重合，为包含连杆 $6$ 的长度，取原点为 $O_6$，在末端；</li>
</ul>
</li>
<li>确定 $x$ 轴：<ul>
<li>$j = 0$ 时，与第3节一致；</li>
<li>$j = 1$ 时，$z_0$ 与 $z_1$ 相交，选择 $x_1 = z_0 \times z_1$ (以上图为例，可以认为是指向纸面外)；</li>
<li>$j = 2$ 时，$z_1$ 与 $z_2$ 平行，$x_2$ 即 $z_1$ 与 $z_2$ 的公垂线，且从 $z_1$ 指向 $z_2$；</li>
<li>$j = 3$ 时，$z_2$ 与 $z_3$ 平行，$x_3$ 即 $z_2$ 与 $z_3$ 的公垂线，且从 $z_2$ 指向 $z_3$；</li>
<li>$j = 4$ 时，$z_3$ 与 $z_4$ 相交，选择 $x_4 = -z_3 \times z_4$，与 $x_1$ 保持方向一致；</li>
<li>$j = 5$ 时，$z_4$ 与 $z_5$ 相交，选择 $x_5 = z_4 \times z_5$；</li>
<li>$j = 6$ 时，$z_5$ 与 $z_6$ 重合，取 $x_6 // x_5$ 且正方向相同；</li>
</ul>
</li>
</ol>
<p>确定 DH 参数：</p>
<ol>
<li>$j = 1$ 时：<ul>
<li>从 $x_0$ 轴沿 $z_0$ 轴到 $x_1$ 轴的距离为 $d_1$，即 $O_1$ 到地面的高度；</li>
<li>因 $x_0 // x_1$，从 $x_0$ 轴沿 $z_0$ 轴转到 $x_1$ 轴的角度为 $\theta_1  = 0$；</li>
<li>因 $z_0 \perp z_1$ 且共面，从 $z_0$ 轴沿 $x_1$ 轴到 $z_1$ 轴的距离为 $a_1 = 0$；</li>
<li>从 $z_0$ 轴沿 $x_1$ 轴转到 $z_1$ 轴的角度为 $\alpha_1 = \pi/2$.</li>
</ul>
</li>
<li>$j = 2$ 时：<ul>
<li>从 $x_1$ 轴沿 $z_1$ 轴到 $x_2$ 轴的距离为 $d_2$，即 $z_0$ 与连杆 $2$ 中轴线的距离，即连杆 $1$ 的长度；</li>
<li>从 $x_1$ 轴沿 $z_1$ 轴转到 $x_2$ 轴的角度为 $\theta_2  = \pi/2$；</li>
<li>从 $z_1$ 轴沿 $x_2$ 轴到 $z_2$ 轴的距离为 $a_2$，即 连杆 $2$ 的长度；</li>
<li>因 $z_1 // z_2$，从 $z_1$ 轴沿 $x_2$ 轴转到 $z_2$ 轴的角度为 $\alpha_2 = 0$.</li>
</ul>
</li>
<li>$j = 3$ 时，注意连杆 $3$ 实际上由电机所在水平段与包含 $4$ 关节在内的竖直段组成：<ul>
<li>从 $x_2$ 轴沿 $z_2$ 轴到 $x_3$ 轴的距离为 $-d_3$，即连杆 $3$ 水平段长度的相反数；</li>
<li>因 $x_2 // x_3$，从 $x_2$ 轴沿 $z_2$ 轴转到 $x_3$ 轴的角度为 $\theta_3  = 0$；</li>
<li>从 $z_2$ 轴沿 $x_3$ 轴到 $z_3$ 轴的距离为 $a_3$，即 连杆 $3$ 竖直段的长度；</li>
<li>因 $z_2 // z_3$，从 $z_2$ 轴沿 $x_3$ 轴转到 $z_3$ 轴的角度为 $\alpha_3 = 0$.</li>
</ul>
</li>
<li>$j = 4$ 时，<ul>
<li>从 $x_3$ 轴沿 $z_3$ 轴到 $x_4$ 轴的距离为 $d_4$，即连杆 $4$ 长度；</li>
<li>因 $x_3 \perp x_4$ 且不共面，从 $x_3$ 轴沿 $z_3$ 轴转到 $x_4$ 轴的角度为 $\theta_4  = -\pi/2$；</li>
<li>因 $z_3 \perp z_4$ 且共面，从 $z_3$ 轴沿 $x_4$ 轴到 $z_4$ 轴的距离为 $a_4 = 0$；</li>
<li>从 $z_3$ 轴沿 $x_4$ 轴转到 $z_4$ 轴的角度为 $\alpha_4 = -\pi/2$.</li>
</ul>
</li>
<li>$j = 5$ 时，<ul>
<li>从 $x_4$ 轴沿 $z_4$ 轴到 $x_5$ 轴的距离为 $d_5$，即连杆 $5$ 长度；</li>
<li>因 $x_4 // x_5$，从 $x_4$ 轴沿 $z_4$ 轴转到 $x_5$ 轴的角度为 $\theta_5  = 0$；</li>
<li>因 $z_4 \perp z_5$ 且共面，从 $z_4$ 轴沿 $x_5$ 轴到 $z_5$ 轴的距离为 $a_5 = 0$；</li>
<li>从 $z_4$ 轴沿 $x_5$ 轴转到 $z_5$ 轴的角度为 $\alpha_5 = \pi/2$.  </li>
</ul>
</li>
<li>$j = 6$ 时，<ul>
<li>从 $x_5$ 轴沿 $z_5$ 轴到 $x_6$ 轴的距离为 $d_6$，即连杆 $6$ 长度；</li>
<li>因 $x_5 // x_6$，从 $x_5$ 轴沿 $z_5$ 轴转到 $x_6$ 轴的角度为 $\theta_6  = 0$；</li>
<li>因 $z_5$ 与 $z_6$ 重合，从 $z_5$ 轴沿 $x_6$ 轴到 $z_6$ 轴的距离为 $a_6 = 0$；</li>
<li>从 $z_5$ 轴沿 $x_6$ 轴转到 $z_6$ 轴的角度为 $\alpha_6 = 0$.</li>
</ul>
</li>
</ol>
<p>综上所述，DH 参数可以汇总如下表：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">$j$</th>
<th style="text-align:center">$\theta$</th>
<th style="text-align:center">$d$</th>
<th style="text-align:center">$a$</th>
<th style="text-align:center">$\alpha$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">$0$</td>
<td style="text-align:center">$d_1$</td>
<td style="text-align:center">$0$</td>
<td style="text-align:center">$\pi/2$</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">$\pi/2$</td>
<td style="text-align:center">$d_2$</td>
<td style="text-align:center">$a_2$</td>
<td style="text-align:center">$0$</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">$0$</td>
<td style="text-align:center">$-d_3$</td>
<td style="text-align:center">$a_3$</td>
<td style="text-align:center">$0$</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">$-\pi/2$</td>
<td style="text-align:center">$d_4$</td>
<td style="text-align:center">$0$</td>
<td style="text-align:center">$-\pi/2$</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">$0$</td>
<td style="text-align:center">$d_5$</td>
<td style="text-align:center">$0$</td>
<td style="text-align:center">$\pi/2$</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">$0$</td>
<td style="text-align:center">$d_6$</td>
<td style="text-align:center">$0$</td>
<td style="text-align:center">$0$</td>
</tr>
</tbody>
</table>
</div>
<h1 id="5-结果对比"><a href="#5-结果对比" class="headerlink" title="5 结果对比"></a>5 结果对比</h1><p>给出 PeterCoke工具箱中UR10的 DH 参数和上述建立的 DH 参数仿真结果：</p>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/images/20210519/ur10_1.png" width=99%/></div><div class="group-picture-column" style="width: 50%;"><img src="/images/20210519/ur10_a_1.png"/></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/images/20210519/ur10_2.png" width=99%/></div><div class="group-picture-column" style="width: 50%;"><img src="/images/20210519/ur10_a_2.png" width=99%/></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/images/20210519/ur10_3.png" width=100%/></div><div class="group-picture-column" style="width: 50%;"><img src="/images/20210519/ur10_a_3.png" width=95%/></div></div></div></div>
<p>上述结果的左侧为工具箱的仿真结果，右侧为本文建立的 DH 参数仿真结果。”offset”即表示关节角的偏转，对应于 DH 中的 $\theta$。</p>
<p>PeterCoke的工具箱是不包含 UR10 的 STL 模型的，ARTE 工具箱中包含了该模型，需要将它导入，可以参考 [5]。STL 模型必须包含所有连杆长度信息才能正常显示。</p>
<h1 id="6-思考"><a href="#6-思考" class="headerlink" title="6 思考"></a>6 思考</h1><p>至此，还有两个小小的疑问供大家思考：</p>
<ol>
<li>对于零位在水平方向的情况，包含全部参数的 DH 参数是多少？</li>
<li>零位在水平方向时，连杆 $1$ 的长度和连杆 $3$ 水平方向的长度是否被考虑在 DH 参数内会影响最后的计算结果吗？</li>
</ol>
<h1 id="7-参考文献与连接"><a href="#7-参考文献与连接" class="headerlink" title="7 参考文献与连接"></a>7 参考文献与连接</h1><p>[1] Corke P. Robotics, vision and control: fundamental algorithms in MATLAB® second, completely revised[M].<br>Springer, 2017.</p>
<p>[2] 霍伟. 机器人动力学与控制[M]. 高等教育出版社, 2005.</p>
<p>[3] <a href="http://arvc.umh.es/arte/index_en.html#install">ARTE: A ROBOTICS TOOLBOX FOR EDUCATION</a></p>
<p>[4] <a href="https://www.universal-robots.com/articles/ur/application-installation/dh-parameters-for-calculations-of-kinematics-and-dynamics/">UR官网</a></p>
<p>[5] <a href="https://zhuanlan.zhihu.com/p/339499260">机器人工具箱——3D可视化显示</a></p>
<div align=left>]]></content>
      <categories>
        <category>机器人控制</category>
        <category>专栏——机器人动力学</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>机器人</tag>
      </tags>
  </entry>
  <entry>
    <title>Ethercat 主站调试</title>
    <url>/archives/6d0d409.html</url>
    <content><![CDATA[<p>记录 Ethercat 驱动电机所用到的函数。</p>
<span id="more"></span>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/chocolate2018/article/details/108401412">Igh1.5.2 etherCAT接口分析</a></li>
<li><a href="https://blog.csdn.net/absinjun/article/details/81701496">Ethercat解析（十二）之命令行工具的使用</a></li>
<li><a href="https://blog.csdn.net/weixin_40293570/article/details/108712655">Ethercat系列—-IGH DC模式测试电机程序（Preempt-RT）</a></li>
</ol>
<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>在做机器人控制的时候，为了能够方便地对机器人进行力矩控制，自己搭建了一套控制器。笔者从机器人Ethercat主站的工作开始做起。<br>实时内核补丁、操作系统在搭建的时候有如下探索结果：</p>
<ul>
<li>xenomai3.1/xenomai3.0.5 + Ubuntu16.04，编译时 rtdm 模块有问题，编译 Igh Ethercat 时，使能rtai 模块，总是编译无法通过，xenomai的自带例程涉及到 rtdm 的无法使用，自己写程序的时候需要有xenomai.cmake模块才能编译，不知道该如何处理rtai的问题。</li>
<li>xenomai2.6.5 + ubuntu12/14，可以使用，但是系统版本太老了…</li>
<li>preempt_rt + Ubuntu16.04，当前使用结果，preempt_rt 的实时内核能到 us 级，而 xenomai 能到 ns 级，考虑到机器人实时控制频率在 1k～4k Hz，preempt_rt 足够使用了。</li>
</ul>
<p>preempt_rt 的安装及实时性测试参考<a href="https://colainlibrary.com/archives/d44fcc81.html">https://colainlibrary.com/archives/d44fcc81.html</a></p>
<p>xenomai 的安装及测试可以参考<a href="https://rtt-lwr.readthedocs.io/en/latest/rtpc/xenomai.html">https://rtt-lwr.readthedocs.io/en/latest/rtpc/xenomai.html</a></p>
<h1 id="2-Ethercat-使用"><a href="#2-Ethercat-使用" class="headerlink" title="2 Ethercat 使用"></a>2 Ethercat 使用</h1><p>Ethercat 的安装只需下载源码进行编译即可，这里梳理一下 Ethercat 和驱动器通过程序连起来的流程。</p>
<p>一个示例是<a href="https://blog.csdn.net/weixin_40293570/article/details/108712655">Ethercat系列—-IGH DC模式测试电机程序（Preempt-RT）</a>，使用的时候注意将相应的 PDO 信息设置正确，以及 SM 块个数填对。</p>
<ol>
<li>获取驱动器的pdo信息。<ul>
<li>依据已有的xml文件</li>
<li>通过 ethercat xml 指令获取</li>
</ul>
</li>
<li>ecrt_open_master()</li>
<li>ecrt_request_master()</li>
<li>ecrt_master_create_domain()</li>
<li>load xml</li>
<li>create_slave_config()<ul>
<li>ecrt_master_slave_config();</li>
<li>ecrt_slave_config_pdos(joint.sc, EC_END, slave_0_syncs) </li>
<li>ecrt_slave_config_reg_pdo_entry(joint.sc, 0x6040, 0, domain, NULL);</li>
<li>config sdos</li>
</ul>
</li>
<li>ecrt_master_activate();</li>
<li>ecrt_domain_data();</li>
<li>线程函数<ul>
<li>clock_gettime</li>
<li>timespec_add()</li>
<li>clock_nonosleep();</li>
<li>ecrt_master_application_time();</li>
<li>ecrt_master_receive();</li>
<li>ecrt_domain_process();</li>
<li>EC_READ_U16();</li>
<li>RC_WRITE_S16();</li>
<li>ecrt_domain_queue();</li>
<li>ecrt_master_send();</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>机器人控制</category>
        <category>专栏——基于 Preempt_rt 和 Igh Ethercat 的环境配置</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>Ethercat</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 多内核切换和设置默认开启内核</title>
    <url>/archives/456588d2.html</url>
    <content><![CDATA[<p>记录 Ubuntu16.04 多内核切换的方法。</p>
<span id="more"></span>
<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>最近在Ubuntu中装了多个内核，涉及到了默认启动内核选择的问题，在此做一个简要记录。</p>
<h1 id="2-更新grub"><a href="#2-更新grub" class="headerlink" title="2 更新grub"></a>2 更新grub</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gedit /boot/grub/grub.cfg </span><br></pre></td></tr></table></figure>
<p><img src="/images//20210421/core.png" alt="1"></p>
<p>第134行”memuentry”开始是Ubuntu启动时的开机选项，用数字表示为0，单引号中的’Ubuntu’就是grub的第一个启动项；</p>
<p>第151行”submenu”表示二级目录，用数字表示为1，该目录下的”memuentry”再从0开始计；</p>
<p>第152行”memuentry”单引号中的’Ubuntu, with Linux 4.19.72-rt26’就是grub的另一个启动项，以此类推。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gedit /etc/default/grub</span><br></pre></td></tr></table></figure>
<p><img src="/images//20210421/grub.png" alt="2"></p>
<p>第6行改为 GRUB_DEFAULT=”Advanced options for Ubuntu&gt;Ubuntu, with Linux 4.14.226-rt-109”，就修改了默认的启动内核。</p>
<p>当要启动的内核版本比你安装系统时的内核版本低，且只有这两中内核时，这种修改会存在不生效的可能。如果不生效，就写成数字的形式。例如”1&gt; 6”（要加上引号和空格），就表示 Advanced options for Ubuntu 下的第6个（从0开始计）启动项（memuentry）。<br><img src="/images//20210421/grub2.png" alt="3"></p>
<p>如果说直接从.cfg文件中数数不方便，可以将上图第7行的注释掉，启动的时候选择”Advanced options for Ubuntu”，然后会列出所有可供选择的启动内核版本。<br><img src="/images//20210421/desk.jpg" alt="4"><br>再从0开始数，选择自己想要的启动内核，再修改GRUB_DEFAULT中的数字。例如下图中白条选中的就是从0开始的第6个。<br><img src="/images//20210421/choose.jpg" alt="5"></p>
<p>修改完成后，记得要执行下列命令才能生效。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo update-grub</span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure></p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/bby1987/article/details/104264285">Ubuntu修改默认启动的内核版本（grub）</a></li>
<li><a href="https://blog.csdn.net/m0_37340681/article/details/97896696">Ubuntu更改默认启动内核</a></li>
</ol>
]]></content>
      <categories>
        <category>机器人控制</category>
        <category>专栏——基于 Preempt_rt 和 Igh Ethercat 的环境配置</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ethercat 主站搭建</title>
    <url>/archives/e5d7cd24.html</url>
    <content><![CDATA[<p>介绍 Ubuntu16.04 下 Igh Ethercat 主站搭建的过程。</p>
<span id="more"></span>
<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>从 <a href="https://github.com/ribalda/ethercat">https://github.com/ribalda/ethercat</a> 下载 ethercat 安装包。</p>
<h1 id="2-安装流程"><a href="#2-安装流程" class="headerlink" title="2 安装流程"></a>2 安装流程</h1><p>用 <strong>lspci -vvv</strong> 查看网卡的型号以及驱动类型，也可以系统桌面右上角的网络连接中查看网卡的型号，从网上搜驱动类型。</p>
<p><img src="/images/20210417/82576.png" alt="82575EB"></p>
<p><em>Ethernet controller</em> 可以看到网卡型号为 <em>82576</em>，<em>Kernel modules</em> 可以看到网卡驱动类型为 <em>igb</em>。</p>
<p>用 <strong>ifconfig</strong> 查看所有网卡的MAC地址，也可以从系统桌面右上角的网络连接中通过 <em>Edit Connections</em> —&gt; <em>Edit</em> —&gt; <em>Ethernet</em> —&gt; <em>Device</em> 中查看。</p>
<p><img src="/images/20210417/mac.png" alt="mac"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install autoconf autogen libtool   <span class="comment"># 安装依赖项</span></span><br><span class="line"><span class="built_in">cd</span> 安装包路径</span><br><span class="line">./bootstrap</span><br><span class="line">./configure --prefix=/opt/etherlab --enable-generic --enable-8139too=no --enable-igb=<span class="built_in">yes</span> --enable-r8169=<span class="built_in">yes</span> --enable-e1000e=<span class="built_in">yes</span> --enable-cycles --enable-hrtimer</span><br><span class="line"><span class="comment">#./configure --prefix=/opt/etherlab --enable-generic --enable-8139too=no --enable-igb=yes --enable-r8169=yes --enable-e1000e=yes --enable-cycles --enable-hrtimer=yes --enable-rtdm=yes --with-xenomai-dir=/usr/xenomai</span></span><br><span class="line">make -j6</span><br><span class="line">make all modules</span><br><span class="line">sudo -s</span><br><span class="line">make install</span><br><span class="line">sudo make modules_install</span><br><span class="line"><span class="built_in">cd</span> /etc</span><br><span class="line">sudo <span class="built_in">mkdir</span> sysconfig</span><br><span class="line">sudo <span class="built_in">cp</span> /opt/etherlab/etc/sysconfig/ethercat /etc/sysconfig</span><br><span class="line">sudo <span class="built_in">cp</span> /opt/etherlab/etc/init.d/ethercat /etc/init.d</span><br><span class="line">sudo <span class="built_in">cp</span> /opt/etherlab/etc/ethercat.conf /etc</span><br><span class="line">sudo gedit /etc/sysconfig/ethercat </span><br></pre></td></tr></table></figure>
<p>在第27行 <font face="黑体" color=red size=5>MASTER0_DEVICE的引号中</font> 添加网卡的MAC地址，例如 <em>MASTER0_DEVICE=”6c:b3:11:40:a7:e0”</em>。</p>
<p>在第100行 <font face="黑体" color=red size=5>DEVICE_MODULES的引号中</font> 添加网卡驱动类型，例如 <em>DEVICE_MODULES=”igb”</em>。</p>
<font face="黑体" color=red size=5>注意：经过实际测试，preempt_rt+Ethercat，使用igb的驱动，会造成内存泄露的问题。现象就是程序正常运行，然后内存会逐渐增大，用最简单的程序，大概会一分钟增加0.01G内存，程序结束后，这块内存也不会自动销毁，换成generic的驱动（或者使用RTL8169驱动支持的网卡），则没有这个问题！</font>

<p>保存退出后，继续执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">ln</span> -s /opt/etherlab/bin/ethercat /usr/local/bin/ethercat</span><br><span class="line"><span class="built_in">echo</span> KERNEL==\&quot;EtherCAT[0-9]*\&quot;, MODE=\&quot;0664\&quot; &gt; /etc/udev/rules.d/99-EtherCAT.rules</span><br><span class="line">sudo depmod</span><br><span class="line">sudo /etc/init.d/ethercat start     <span class="comment"># 打开主站</span></span><br><span class="line">sudo /etc/init.d/ethercat stop      <span class="comment"># 停止主站</span></span><br><span class="line">sudo /etc/init.d/ethercat restart   <span class="comment"># 重启主站</span></span><br></pre></td></tr></table></figure>
<h1 id="3-主站测试"><a href="#3-主站测试" class="headerlink" title="3 主站测试"></a>3 主站测试</h1><p>在超级用户模式下执行 <em>/etc/init.d/ethercat start</em> 指令后，得到如下结果表示主站安装正确。</p>
<p><img src="/images/20210417/start.png" alt="start"></p>
<p>通过 <em>ethercat slaves</em> 可以查看连接的从站情况。</p>
<p><img src="/images/20210417/slaves.png" alt="slaves"></p>
<p>从 Igh 主站 PDF 文件中可以找到各项的输出信息解释如下所示：</p>
<p><img src="/images/20210417/explaination.png" alt="exp"></p>
<blockquote>
<p>Tip1：注意读出来的名字是否正常，如果名字与相应的 xml 文件中名字不一致，大概率是不能通过 Igh 主站来配置的。原因有很多种，建议用一个标准的商用产品先做调试。</p>
<p>Tip2: 如果读取到从站的名字全是 0，考虑网卡型号不符合 Igh 主站的要求。</p>
</blockquote>
<p>从 Igh 官网可以查看相应的说明，官网网址：<a href="https://etherlab.org/en/ethercat/">https://etherlab.org/en/ethercat/</a></p>
]]></content>
      <categories>
        <category>机器人控制</category>
        <category>专栏——基于 Preempt_rt 和 Igh Ethercat 的环境配置</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>机器人</tag>
        <tag>Ethercat</tag>
      </tags>
  </entry>
  <entry>
    <title>preempt_rt 实时内核补丁</title>
    <url>/archives/d44fcc81.html</url>
    <content><![CDATA[<p>介绍在 Ubuntu16.04 下安装 preempt_rt 实时内核的方法。<br><span id="more"></span></p>
<p>注意：因为 Realtek 网卡的 Ethercat 驱动只支持到了 4.14 版本的内核，所以笔者最后使用了 4.14.226 版本： </p>
<ul>
<li>linux-4.14.226.tar.xz: <a href="https://mirrors.edge.kernel.org/pub/linux/kernel/v4.x/">https://mirrors.edge.kernel.org/pub/linux/kernel/v4.x/</a></li>
<li>patch-4.14.226-rt109.patch.gz: <a href="https://mirrors.edge.kernel.org/pub/linux/kernel/projects/rt/4.14/older/">https://mirrors.edge.kernel.org/pub/linux/kernel/projects/rt/4.14/older/</a></li>
</ul>
<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>硬件平台： Core™ i5-8400 CPU @ 2.80GHz × 6 </p>
<p>软件平台： Ubuntu16.04.7</p>
<p>从 (<a href="https://mirrors.edge.kernel.org/pub/linux/kernel/v4.x/">https://mirrors.edge.kernel.org/pub/linux/kernel/v4.x/</a>) 下载4.19.72版本的内核 linux-4.19.72.tar.xz。</p>
<p>从 (<a href="https://mirrors.edge.kernel.org/pub/linux/kernel/projects/rt/4.19/older/">https://mirrors.edge.kernel.org/pub/linux/kernel/projects/rt/4.19/older/</a>) 下载实时内核补丁 patch-4.19.72-rt26.patch.gz。</p>
<h1 id="2-安装流程"><a href="#2-安装流程" class="headerlink" title="2 安装流程"></a>2 安装流程</h1><p>首先，使用下列指令查看内核版本。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">uname</span> -a</span><br></pre></td></tr></table></figure><br>输出如下结果：</p>
<p>Linux pc 4.15.0-142-generic #146~16.04.1-Ubuntu SMP Tue Apr 13 09:27:15 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux</p>
<p>按照如下指令进行配置。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> preempt_rt &amp;&amp; <span class="built_in">cd</span> preempt_rt</span><br><span class="line">xz -<span class="built_in">cd</span> linux-4.19.72.tar.xz | tar xvf -</span><br><span class="line">gunzip patch-4.19.72-rt26.patch.gz</span><br><span class="line"><span class="built_in">cd</span> linux-4.19.72</span><br><span class="line">patch -p1 &lt; ../patch-4.19.72-rt26.patch</span><br><span class="line"><span class="comment"># xzcat ../patch-4.19.72-rt26.patch.xz | patch -p1</span></span><br><span class="line">sudo apt-get install -y build-essential kernel-package libncurses5-dev libssl-dev bison flex</span><br><span class="line">sudo make menuconfig    <span class="comment"># 配置内核</span></span><br></pre></td></tr></table></figure><br>按照如下过程进行配置。</p>
<p><img src="/images/20210416/01-1.png" alt="01"></p>
<p>选择 <em>Processor type and features</em>。</p>
<p><img src="/images/20210416/02-1.png" alt="02"></p>
<p>选择 <em>Preemmption Model (Voluntary Kernel Premption (Desktop))</em> ，进入之后如下图所示。</p>
<p><img src="/images/20210416/03.png" alt="03"></p>
<p>选择 <em>Fully Preemptible Kernel (RT)</em>，确定之后再看如下图所示，表示选中成功。</p>
<p><img src="/images/20210416/04.png" alt="04"></p>
<p>然后按 <strong>Esc</strong> 键退回至主页面。</p>
<p><img src="/images/20210416/05.png" alt="05"></p>
<p>选中 <em>Kernel hacking</em>。</p>
<p><img src="/images/20210416/06.png" alt="06"></p>
<p>选中 <em>Memory Debugging</em> 。</p>
<p><img src="/images/20210416/07.png" alt="07"></p>
<p>确认一下<font face="黑体" color=red size=5>没有选择</font> <em>Check for stack overflows</em> ，默认都是没有选中的。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make -j6            <span class="comment"># 编译内核，大概用半小时左右</span></span><br><span class="line">sudo make modules_install -j6</span><br><span class="line">sudo make install -j6</span><br><span class="line">sudo update-grub    <span class="comment"># 更新grub</span></span><br><span class="line">sudo reboot         <span class="comment"># 重启</span></span><br></pre></td></tr></table></figure>
<p>重启之后再次查看内核版本。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">uname</span> -a</span><br></pre></td></tr></table></figure>
<p>输出如下：</p>
<p>Linux pc 4.19.72-rt26 #1 SMP PREEMPT RT Fri Apr 16 23:16:37 CST 2021 x86_64 x86_64 x86_64 GNU/Linux</p>
<p>说明编译成功。</p>
<h1 id="3-测试实时性"><a href="#3-测试实时性" class="headerlink" title="3 测试实时性"></a>3 测试实时性</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install rt-tests</span><br><span class="line">sudo cyclictest -t 5 -p 80 -n   <span class="comment"># 运行5个线程，线程优先级为80，无限循环</span></span><br></pre></td></tr></table></figure>
<p>cyclictest运行结果的解释：</p>
<ul>
<li>T: 0        序号为0的线程</li>
<li>P: 0        线程优先级为0</li>
<li>I: 1000     时间间隔为1000微秒(us)</li>
<li>C: 9397     计数器。线程的时间间隔每达到一次，计数器加1</li>
<li>Min:        最小延时(us)</li>
<li>Act:        最近一次的延时(us)</li>
<li>Avg:        平均延时(us)</li>
<li>Max:        最大延时(us)</li>
</ul>
<p>测试结果如下：<br><img src="/images/20210416/cyclictest.png" alt="cyclictest"></p>
<p>还可以在CPU满负荷的时候进行实时性测试。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install stress</span><br><span class="line">stress --cpu 4 --io 4 --vm 2 --vm-bytes 128M --<span class="built_in">timeout</span> 60s &amp;    <span class="comment"># 后台运行stress 60s</span></span><br></pre></td></tr></table></figure>
<p>新开一个终端用 htop 查看cpu使用情况。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install htop</span><br><span class="line">htop</span><br></pre></td></tr></table></figure></p>
<p>测试结果如下：</p>
<p><img src="/images//20210416/stress.png" alt="stess"></p>
<h1 id="4-可能遇到的问题"><a href="#4-可能遇到的问题" class="headerlink" title="4 可能遇到的问题"></a>4 可能遇到的问题</h1><p>在配置内核的时候可能会碰到如下两个问题：</p>
<ol>
<li><p>bison: not found<br><img src="/images//20210416/bison.png" alt="bi"><br>解决方案：sudo apt-get install bison</p>
</li>
<li><p>flex: not found<br><img src="/images//20210416/fles.png" alt="fl"><br>解决方案： sudo apt-get install flex</p>
</li>
</ol>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://youngmok.com/tutorial-how-to-make-rt-preempt-linux-with-ubuntu-18-04-02/">https://youngmok.com/tutorial-how-to-make-rt-preempt-linux-with-ubuntu-18-04-02/</a></p>
]]></content>
      <categories>
        <category>机器人控制</category>
        <category>专栏——基于 Preempt_rt 和 Igh Ethercat 的环境配置</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>Preempt</tag>
        <tag>Ethercat</tag>
      </tags>
  </entry>
  <entry>
    <title>两台Ubuntu系统文件共享</title>
    <url>/archives/4347a04c.html</url>
    <content><![CDATA[<p>介绍两台Ubuntu系统共享文件的方法。</p>
<span id="more"></span>
<p>首先设定好两台电脑的静态ip；</p>
<p>然后A主机进入需要传送的文件目录，然后执行<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m SimpleHTTPServer</span><br></pre></td></tr></table></figure></p>
<p>再打开B主机的浏览器访问 <strong>A主机的IP:8000</strong>;</p>
<p>最后，点击链接就可以了。</p>
<p>参考链接：<a href="https://zhidao.baidu.com/question/458973402533874445.html">两台ubuntu的电脑，怎么用一根网线直连，传输文件？</a></p>
]]></content>
      <categories>
        <category>工科生的基本功</category>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>KDL的安装</title>
    <url>/archives/e2bb99c2.html</url>
    <content><![CDATA[<span id="more"></span>
<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>为了快速搭建一个机器人控制器，方便后期进行机器人控制算法开发，需要用到 Orocos 的 KDL 库。本文将介绍一下 KDL 相关的基础知识。</p>
<h1 id="2-Orocos"><a href="#2-Orocos" class="headerlink" title="2 Orocos"></a>2 Orocos</h1><h2 id="2-1-综述"><a href="#2-1-综述" class="headerlink" title="2.1 综述"></a>2.1 综述</h2><p>“Orocos”代表“Open Robot Control Software”，即开源机器人控制软件。 Orocos 为软件开发人员提供了开源的机器人软件框架，提供了很多功能，方便开发人员快速的开发机器人软件模块。Orocos 由 Kinematics Dynamics Library(KDL)，Bayesian Filtering Library 及 Orocos Toolchain 组成。 官方网站：<a href="https://orocos.org/">https://orocos.org/</a></p>
<h2 id="2-2-KDL"><a href="#2-2-KDL" class="headerlink" title="2.2 KDL"></a>2.2 KDL</h2><p>KDL（Kinematics and Dynamics）：机器人运动学与动力学组件，为运动学提供了实时的动力学约束计算，这个组件非常有用，有了这个组件，很多机器人开发者可以快速地开发机器人算法。 这是本系列主要研究内容。</p>
<h2 id="2-3-BFL"><a href="#2-3-BFL" class="headerlink" title="2.3 BFL"></a>2.3 BFL</h2><p>BFL（Bayesian Filtering Library）：贝叶斯过滤库提供了一个独立于应用程序的动态贝叶斯网络推导框架，即基于贝叶斯规则的递归信息处理和估计算法，如卡尔曼滤波器，粒子滤波器法等。 </p>
<h2 id="2-4-Toolchain"><a href="#2-4-Toolchain" class="headerlink" title="2.4 Toolchain"></a>2.4 Toolchain</h2><p>Toolchain：Orocos工具链是使用模块化运行时可配置软件组件创建实时机器人应用程序的主要工具。工具链包含了实时工具集（Real-Time Toolkit）、Orocos组件库（Orocos Component Library）等。</p>
<h1 id="3-KDL的安装"><a href="#3-KDL的安装" class="headerlink" title="3 KDL的安装"></a>3 KDL的安装</h1><ol>
<li>安装Eigen依赖库<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libeigen3-dev</span><br></pre></td></tr></table></figure></li>
<li>从 <a href="https://github.com/orocos/orocos_kinematics_dynamics">https://github.com/orocos/orocos_kinematics_dynamics</a> 下载源码，源码中包含 c++ 和 python 两个版本。</li>
<li>执行下列语句：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> orocos_kdl</span><br><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make -j6</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="4-PyKDL的安装"><a href="#4-PyKDL的安装" class="headerlink" title="4 PyKDL的安装"></a>4 PyKDL的安装</h1><p>在安装好c++版本的kdl后，再安装Python版本的kdl。<br>从 <a href="https://github.com/pybind/pybind11/tree/e315e1fe2bad553ff541ce3bc00804e0e70583a2">https://github.com/pybind/pybind11/tree/e315e1fe2bad553ff541ce3bc00804e0e70583a2</a> 下载pybind11，下载完成后解压，将其中的所有文件复制到 pthon_orocos_kdl/pybind11 目录下。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> python_orocos_kdl</span><br><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">(<span class="keyword">if</span> conda use)conda activate py37</span><br><span class="line">cmake .. -DPYTHON_VERSION=3.7 -DCMAKE_BUILD_TYPE=Release  <span class="comment"># 注意指定Python版本，不一样的编译出来的未必能用。16.04默认python2.7，如果写成3，默认是3.5，3.7的虚拟环境不能用3.5编译好的结果</span></span><br><span class="line">make -j</span><br><span class="line">(<span class="keyword">if</span> conda use)<span class="built_in">cp</span> PyKDL.so /home/robot/anaconda3/envs/py37/lib/python3.7/site_packages/</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure></p>
<p>如果是conda的虚拟环境，做如下设置将系统默认的Python版本修改。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gedit ~/.bashrc</span><br><span class="line"><span class="built_in">export</span> PYTHONPATH=<span class="string">&quot;/home/robot/anaconda3/envs/py37/lib/python3.7/site-packages:<span class="variable">$PYTHONPATH</span>&quot;</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></p>
<p>测试方法如下：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda activate py37</span><br><span class="line">python</span><br><span class="line">import PyKDL</span><br></pre></td></tr></table></figure></p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/65496560">机器人学与OROCOS-KDL（一）简介</a></li>
<li><a href="https://github.com/orocos/orocos_kinematics_dynamics">github源码</a></li>
<li><a href="https://orocos.org/">官网</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/361251107">安装PyKDL到虚环境</a></li>
<li><a href="https://blog.csdn.net/qq_42237662/article/details/109783935">如何在基于python3的conda虚拟环境中从头编译PyKDL</a></li>
</ol>
]]></content>
      <categories>
        <category>机器人控制</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>机器人</tag>
      </tags>
  </entry>
  <entry>
    <title>Mujoco安装</title>
    <url>/archives/9a2f84b2.html</url>
    <content><![CDATA[<h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1 介绍"></a>1 介绍</h1><p>安装平台：Ubuntu16.04 + Mujoco 2.0 + mujoco_py</p>
<h1 id="2-证书的获取"><a href="#2-证书的获取" class="headerlink" title="2 证书的获取"></a>2 证书的获取</h1><p><strong>2021年10月18日，DeepMind收购了Mujoco,目前从 <a href="https://www.roboti.us/license.html">https://www.roboti.us/license.html</a> 提供了一个免费的证书，可以用到2031年10月18日。</strong></p>
<p>Mujoco不同的身份可以获取不同的证书，用学生邮箱(edu)可以获取到一年的使用时间。<br>证书获取地址见：<a href="https://www.roboti.us/license.html">https://www.roboti.us/license.html</a>.</p>
<p>学生身份获取 license 的操作流程是：</p>
<ol>
<li>首先通过提交自己的信息，如下图所示，申请一个Account Number（这可能需要几天的时间）。<br><img src="/images/20210305/01.png" alt="1"></li>
<li>在下图中点击 <strong>Linux</strong>，会下载一个 <strong>getid_linux</strong> 的文件，执行下面的指令以获取你要注册的计算机的 id。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/Downloads            <span class="comment"># 打开文件下载目录</span></span><br><span class="line"><span class="built_in">chmod</span> a+x getid_linux     <span class="comment"># 获取权限</span></span><br><span class="line">./getid_linux             <span class="comment"># 获取计算机id</span></span><br></pre></td></tr></table></figure></li>
<li>将邮件中的 Account Number 和获取到的 computer id 填入下图所示的位置，再点击 <em>Register Computer</em>。<br><img src="/images/20210305/02.png" alt="2"></li>
<li>成功之后会再收到一封邮件，会包含附件 <strong>mjkey.txt</strong>。</li>
</ol>
<h1 id="3-Mujoco的安装"><a href="#3-Mujoco的安装" class="headerlink" title="3 Mujoco的安装"></a>3 Mujoco的安装</h1><h2 id="3-1-安装流程"><a href="#3-1-安装流程" class="headerlink" title="3.1 安装流程"></a>3.1 安装流程</h2><ol>
<li>下载 MuJoCo version 2.0 Linux 版本 ：<a href="https://www.roboti.us/download/mujoco200_linux.zip。">https://www.roboti.us/download/mujoco200_linux.zip。</a></li>
<li>执行下列指令。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> ~/.mujoco                                    <span class="comment"># 创建文件夹</span></span><br><span class="line">sudo <span class="built_in">cp</span> mujoco200_linux.zip的文件路径 ~/.mujoco           <span class="comment"># 复制</span></span><br><span class="line"><span class="built_in">cd</span> ~/.mujoco                                       <span class="comment"># 进入隐藏文件夹</span></span><br><span class="line">unzip mujoco200_linux.zip                          <span class="comment"># 解压</span></span><br><span class="line"><span class="built_in">mv</span> mujoco200_linux mujoco200                       <span class="comment"># 将mujoco200_linux重命名为mujoco200</span></span><br><span class="line"><span class="built_in">cd</span> Downloads                                       <span class="comment"># 进入下载将mjkey.txt的文件夹</span></span><br><span class="line">sudo <span class="built_in">cp</span> mjkey.txt ~/.mujoco/                            <span class="comment"># 复制秘钥到路径</span></span><br><span class="line">sudo <span class="built_in">cp</span> mjkey.txt ~/.mujoco/mujoco200/bin               <span class="comment"># 复制秘钥到路径</span></span><br></pre></td></tr></table></figure></li>
<li>执行下列指令验证是否安装成功。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.mujoco/mujoco200/bin</span><br><span class="line">./simulate ../model/humanoid.xml</span><br></pre></td></tr></table></figure></li>
<li>顺利的话，会出现下图所示的结果。<br><img src="/images/20210305/03.png" alt="3"></li>
</ol>
<h2 id="3-2-环境变量配置"><a href="#3-2-环境变量配置" class="headerlink" title="3.2 环境变量配置"></a>3.2 环境变量配置</h2><p>在 <em>～/.bashrc</em> 文件中进行配置：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gedit ~/.bashrc              </span><br><span class="line"><span class="comment"># 打开文件，并在打开的窗口最后加入以下2行内容，注意修改自己的路径</span></span><br><span class="line"><span class="built_in">export</span> MUJOCO_KEY_PATH=~/.mujoco<span class="variable">$&#123;MUJOCO_KEY_PATH&#125;</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$LD_LIBRARY_PATH</span>:/home/你自己的用户名/.mujoco/mujoco200/bin</span><br><span class="line"><span class="comment"># 关闭文件后，执行下列语句以使配置生效</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc             </span><br></pre></td></tr></table></figure></p>
<h1 id="4-mujoco-py的安装"><a href="#4-mujoco-py的安装" class="headerlink" title="4 mujoco_py的安装"></a>4 mujoco_py的安装</h1><h2 id="4-1-mujoco-py的下载"><a href="#4-1-mujoco-py的下载" class="headerlink" title="4.1 mujoco_py的下载"></a>4.1 mujoco_py的下载</h2><p>执行下列语句下载 mujoco_py。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/openai/mujoco-py.git</span><br></pre></td></tr></table></figure></p>
<h2 id="4-2-mujoco-py的安装"><a href="#4-2-mujoco-py的安装" class="headerlink" title="4.2 mujoco_py的安装"></a>4.2 mujoco_py的安装</h2><p>依赖项的安装。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install libosmesa6-dev</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>如果不安装这个依赖项，可能会出现第5节中的问题。</p>
</blockquote>
<h3 id="4-2-1-源码安装方式"><a href="#4-2-1-源码安装方式" class="headerlink" title="4.2.1 源码安装方式"></a>4.2.1 源码安装方式</h3><p>安装mujoco_py，可以安装在anaconda的虚拟环境中，也可以直接安装在系统中。它要求Python的环境最小为 3.6 版本，我为了方便，用anaconda装了 Python3.7。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create --name mujoco python=3.7 <span class="comment">#创建一个名为 mujoco 的虚拟环境</span></span><br><span class="line">conda activate mujoco</span><br><span class="line"><span class="built_in">cd</span> mujoco_py 下载路径</span><br><span class="line">pip install -r requirements.txt       <span class="comment"># 安装需要的环境</span></span><br><span class="line"><span class="comment"># pip3 install -U &#x27;mujoco-py&lt;2.1,&gt;=2.0&#x27; # 官网推荐安装方式，往往会报错</span></span><br><span class="line">pip install -r requirements.dev.txt </span><br><span class="line"><span class="built_in">cd</span> ~/mujoco-py/vendor   </span><br><span class="line">./Xdummy-entrypoint</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure></p>
<h3 id="4-2-2-个人推荐安装方式"><a href="#4-2-2-个人推荐安装方式" class="headerlink" title="4.2.2 个人推荐安装方式"></a>4.2.2 个人推荐安装方式</h3><p>官网推荐的安装方式在安装完运行程序的时候一直提示 numpy 与其他的不兼容，也许是程序依赖的其他库版本与安装的mujoco版本不兼容，因此采用了另一种更简单的安装方式：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create --name mujoco2028 python=3.6 <span class="comment">#创建一个名为 mujoco 的虚拟环境</span></span><br><span class="line">conda activate mujoco2028</span><br><span class="line">pip install mujoco_py==2.0.2.8</span><br></pre></td></tr></table></figure></p>
<h2 id="4-3-验证安装成功"><a href="#4-3-验证安装成功" class="headerlink" title="4.3 验证安装成功"></a>4.3 验证安装成功</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python3</span><br><span class="line">&gt;&gt;&gt; import mujoco_py                <span class="comment"># 注意这一步是否有下一节中提到的错误</span></span><br><span class="line">&gt;&gt;&gt; import os</span><br><span class="line">&gt;&gt;&gt; mj_path, _ = mujoco_py.utils.discover_mujoco()</span><br><span class="line">&gt;&gt;&gt; xml_path = os.path.join(mj_path, <span class="string">&#x27;model&#x27;</span>, <span class="string">&#x27;humanoid.xml&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt; model = mujoco_py.load_model_from_path(xml_path)</span><br><span class="line">&gt;&gt;&gt; sim = mujoco_py.MjSim(model)</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(sim.data.qpos)            <span class="comment"># 出现第一组结果</span></span><br><span class="line">&gt;&gt;&gt; sim.step()</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(sim.data.qpos)            <span class="comment"># 出现第二组结果</span></span><br></pre></td></tr></table></figure>
<p>上述指令运行结果如下所示：<br><img src="/images/20210305/04.png" alt="4"></p>
<p>运行 mujoco_py 中自带的例子：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/mujoco-py/examples/            <span class="comment"># 打开 mujoco_py 的 examples 路径</span></span><br><span class="line">python3 setting_state.py </span><br></pre></td></tr></table></figure></p>
<p>成功的话将会出现下面的结果。<br><!-- <iframe height=498 width=510 src="/media/robot/ubuntuData/RLdemo/mujoco_example.mp4" frameborder=0 allowfullscreen></iframe>
![5]( /images/20210305/mujoco_example.mp4) --></p>
<video id="video" controls="" preload="none">
    <source id="mp4" src="/images/20210305/mujoco_example.mp4" type="video/mp4">
</video>

<h1 id="5-出现的问题"><a href="#5-出现的问题" class="headerlink" title="5 出现的问题"></a>5 出现的问题</h1><p>我在执行4.3节的第二行指令 import mujoco_py 时，遇到了如下问题：<br><img src="/images/20210305/05.png" alt="6"></p>
<p>解决的方案就是安装4.2节中提到的依赖库 <strong>libosmesa6-dev</strong>.</p>
<p>使用4.2.1的安装方式在 import mujoco_py 的时候，可能会提示 gcc 错误，<br>需要执行<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libgl1-mesa-dev libgl1-mesa-glx libosmesa6-dev</span><br></pre></td></tr></table></figure></p>
<p>更多的问题请参考[5]的解决方案。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/Youtian_/article/details/103841453">Linux系统 Ubuntu18.04 成功安装Mujoco、mujoco_py 详细步骤、安装教程（也可在虚拟环境中安装Mujoco</a></li>
<li><a href="https://blog.csdn.net/csdnqixiaoxin/article/details/86644612">mujoco以及mujoco-py的安装</a></li>
<li><a href="https://paper.yanxishe.com/columnDetail/20246#">强化学习环境：MuJoCo 安装踩坑记录</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/85833777">Ubuntu 16.04 安装 mujoco, mujoco_py 和 gym</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/103271894">深度强化学习环境安装(gym,mujoco,mujoco_pybaselines)</a></li>
</ol>
]]></content>
      <categories>
        <category>人工智能</category>
        <category>强化学习</category>
      </categories>
      <tags>
        <tag>Library</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu系统备份</title>
    <url>/archives/1efdabd.html</url>
    <content><![CDATA[<p>介绍Ubuntu系统备份的方法。<br><span id="more"></span></p>
<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>在Ubuntu下经常会遇到系统环境崩溃、目录误删除等问题，为了提升开发效率，有必要对系统已有的环境进行备份。<br>经与公司yym探究，总结如下方案。</p>
<h1 id="2-几种备份命令"><a href="#2-几种备份命令" class="headerlink" title="2 几种备份命令"></a>2 几种备份命令</h1><p>备份前先切换到root用户，避免权限问题，然后切换到/(根目录)，执行以下命令<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo su</span><br><span class="line"><span class="built_in">cd</span> /</span><br></pre></td></tr></table></figure></p>
<h2 id="2-1-备份根目录命令"><a href="#2-1-备份根目录命令" class="headerlink" title="2.1 备份根目录命令"></a>2.1 备份根目录命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -cvpzf /media/yangfei/jk-robot/backup/system/ubuntu_backup@`<span class="built_in">date</span> +%Y-%m+%d`.tar.gz --exclude=/proc --exclude=/tmp --exclude=/boot --exclude=/home --exclude=/lost+found --exclude=/media --exclude=/mnt --exclude=/run /</span><br></pre></td></tr></table></figure>
<p>注意：备份到最后系统会提示”tar: 由于前次错误,将以上次的错误状态退出”，这个警告可以忽略.</p>
<h2 id="2-2-备份home命令"><a href="#2-2-备份home命令" class="headerlink" title="2.2 备份home命令"></a>2.2 备份home命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -cvpzf /media/yangfei/jk-robot/backup/system/ubuntu_home_backup@`<span class="built_in">date</span> +%Y-%m-%d`.tar.gz /home</span><br></pre></td></tr></table></figure>
<h2 id="2-3-备份boot命令"><a href="#2-3-备份boot命令" class="headerlink" title="2.3 备份boot命令"></a>2.3 备份boot命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -cvpzf /media/yangfei/jk-robot/backup/system/ubuntu_boot_backup@`<span class="built_in">date</span> +%Y-%m-%d`.tar.gz /boot</span><br></pre></td></tr></table></figure>
<h1 id="3-系统还原"><a href="#3-系统还原" class="headerlink" title="3 系统还原"></a>3 系统还原</h1><h2 id="3-1-直接操作"><a href="#3-1-直接操作" class="headerlink" title="3.1 直接操作"></a>3.1 直接操作</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">操作前切换到root，并且换到/根目录。</span><br><span class="line">tar -xvpzf /media/yangfei/jk-robot/backup/system/ubuntu_backup@2021-01+04.tar.gz -C /</span><br></pre></td></tr></table></figure>
<h2 id="3-2-使用LiveCD"><a href="#3-2-使用LiveCD" class="headerlink" title="3.2 使用LiveCD"></a>3.2 使用LiveCD</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">操作之前请确保你已经有一个制作好的ubuntu U盘启动盘。进入系统后，打开终端还是先切换到root。</span><br><span class="line"><span class="built_in">mkdir</span> /mnt/sys</span><br><span class="line">mount /dev/sdaX /mnt/sys</span><br><span class="line">tar -xvpzf /media/yangfei/jk-robot/backup/system/ubuntu_boot_backup@2021-01+04.tar.gz -C /mnt/sys</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意:先创建一个临时目录用于挂载你的/根目录分区，sdaX代表你的/根目录分区，如果不知道就用fdisk -l查看一下，另外如果你的移动硬盘没有被自动挂载，你也需要手动创建一个临时目录进行挂载。</p>
</blockquote>
<p>说明：<br>/media/yangfei/jk-robot/backup/system/ubuntu_backup@<code>date +%Y-%m+%d</code>.tar.gz<br>这个是备份文档的存放路径，我的移动硬盘名字叫jk-robot，挂载在/media/yangfei目录下，ubuntu_backup@date +%Y-%m+%d.tar.gz是我备份文件的名字，这里用了一个shell命令date +%Y-%m+%d用于获取当前时间，tar.gz是说明这个文件是用tar进行打包，gzip进行压缩的。</p>
<p>参数：<br>-c： 新建一个备份文档<br>-v： 显示详细信息<br>-p： 保存权限，并应用到所有文件<br>-z： 用gzip压缩备份文档，减小空间<br>-f： 指定备份文件的路径<br>–exclude： 排除指定目录，不进行备份</p>
<p>Note: 注意–exclude参数，接下来谈谈那些目录没有备份，以及为什么不备份。<br>我的ubuntu系统，共有四个分区，分别是：/、/home、/boot、swap。</p>
<h1 id="4-建议与解释"><a href="#4-建议与解释" class="headerlink" title="4 建议与解释"></a>4 建议与解释</h1><p>1)非常建议系统备份的时候按照分区进行分别备份，并且也不建议安装系统的时候只给系统分一个分区。有四个分区的好处是，一般系统坏了都是/分区的问题，/home没什么关系，所以这种情况，可以只还原/分区，其他分区完全可以不用动，系统就可以恢复，会节省很多时间。<br>2)另外，为了保险起见，也可以对/home和/boot备份，但是备份频率完全没必要和/分区一样高。比如/分区每周备份一次，那/home和/boot完全可以一个月备份一次，因为这两个分区出问题的概率真的很小，而且变动也不会太频繁。<br>3)如果没有把/home或者/boot目录单独分一个区，一定不要加–exclude=/home或–exclude=/boot参数！！！</p>
<p>/proc：一个虚拟文件系统，系统运行的每一个进程都会自动在这个目录下面创建一个进程目录。既然是系统自动创建，也就没必要备份的必要了。<br>/tmp：一个临时文件夹，系统的一些临时文件会放在这里。<br>/lost+found：系统发生错误时（比如非法关机），可以在这里找回一些丢失文件。<br>/media：多媒体挂载点，像u盘、移动硬盘、windons分区等都会自动挂载到这个目录下。<br>/mnt：临时挂载点，你可以自己挂载一些文件系统到这里。<br>/run：系统从启动以来产生的一些信息文件。<br>/home：用户家目录，存放用户个人文件和应用程序。<br>/boot：和系统启动相关的文件，像grub相关文件都放在这里，这个目录很重要！</p>
<p>Note：因为tar还原是只会覆盖相同的文件，但是这种方法只是恢复备份时的文件，就是说如果某些文件丢失或损坏了，这样可以恢复修复这些文件，但不能删除自备份到恢复前这期间所生成的其它文件，说白了就是假如你备份系统时有1234这四个文件，如果三天后，由于某些原因变成了1234’5（4改变了），你恢复后，就会变成12345，其中4’恢复成备份时的文件，5保留。所以大家要是想彻底还原成备份时候的样子最好彻底删除根目录下的所有文件，然后再还原，这样就可以还原成备份时的样子了。<br>删除整个文件系统，比如运行命令rm -fr /*，那么你还原系统后一定要把你之前没有备份的目录手动创建，不然重启系统是有问题的。</p>
<p>mkdir proc tmp lost+found media mnt run</p>
<h1 id="5-参考网站"><a href="#5-参考网站" class="headerlink" title="5 参考网站"></a>5 参考网站</h1><p><a href="https://blog.csdn.net/qq_35523593/article/details/78545530">https://blog.csdn.net/qq_35523593/article/details/78545530</a><br><a href="https://blog.csdn.net/sinat_27554409/article/details/78227496">https://blog.csdn.net/sinat_27554409/article/details/78227496</a><br><a href="https://blog.csdn.net/scythe666/article/details/52029407">https://blog.csdn.net/scythe666/article/details/52029407</a><br><a href="https://help.ubuntu.com/community/BackupYourSystem/TAR">官网</a></p>
]]></content>
      <categories>
        <category>工科生的基本功</category>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>机场行李筐智能分拣</title>
    <url>/archives/86188ed1.html</url>
    <content><![CDATA[<!-- b站分享按钮下"嵌入" -->
<div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"> <iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="//player.bilibili.com/player.html?aid=503939372&bvid=BV1pg411u7x2&cid=363000331&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe> </div>

<span id="more"></span>
<p>机场行李筐智能分拣系统实现结果:</p>
<ol>
<li>图像识别算法可以准确识别传送带上的行李与行李筐，识别率达 99% 以上；</li>
<li>受限于上位机与下位机的通信方式、机器人末端吸盘及配件，机器人抓取成功率可达 97% 以上；</li>
<li>受限于盒体模具并不完全一致，码垛成功率可达 97% 以上;</li>
<li>码跺区有人进入时,具有安全保护功能;</li>
<li>受限于图像处理的速度,机器人运动时的速度,一个筐码跺完成后可能会出现不能立即抓取到达机器人下方的筐.</li>
</ol>
<p>为方便复现,记录本项目中用到的环境安装方法:<a href="https://colainlibrary.com/archives/ce622490.html">机场行李筐分拣项目环境安装汇总</a></p>
]]></content>
      <categories>
        <category>机器人控制</category>
        <category>专栏——机场行李筐分拣项目</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>机器人</tag>
      </tags>
  </entry>
  <entry>
    <title>机场行李筐分拣项目环境安装汇总</title>
    <url>/archives/ce622490.html</url>
    <content><![CDATA[<p>介绍机场行李筐智能分拣项目的安装环境～<br><span id="more"></span></p>
<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>经过与几位师弟、@yym的共同探索，总结在机场行李框分拣项目中需要用到的环境如下：</p>
<p>硬件设施：</p>
<p>i7-8700 + RTX2080 Ti + 机器人 + Basler + realsense。</p>
<p>软件环境：</p>
<ol>
<li>Ubuntu16.04（内核4.15）</li>
<li>显卡驱动；</li>
<li>Cuda；</li>
<li>CUDNN；</li>
<li>Opencv+Opencv_contrib；</li>
<li>basler相机驱动；</li>
<li>realsense相机驱动；</li>
<li>darknet yolov4；</li>
<li>pytorch yolov3</li>
<li>PCL；</li>
<li>VTK-8.2.0；</li>
<li>Ubuntu终端科学上网。</li>
</ol>
<h1 id="2-环境安装"><a href="#2-环境安装" class="headerlink" title="2 环境安装"></a>2 环境安装</h1><h2 id="2-1-Ubuntu16-04安装"><a href="#2-1-Ubuntu16-04安装" class="headerlink" title="2.1 Ubuntu16.04安装"></a>2.1 Ubuntu16.04安装</h2><p>Ubuntu16.04系统安装见<a href="https://colainlibrary.com/archives/292fe4d9.html">Windows下采用U盘安装Ubuntu双系统详细过程
</a>。</p>
<blockquote>
<p>注意：建议安装内核版本为4.15，即小版本为Ubuntu16.04.4的系统。</p>
</blockquote>
<h2 id="2-2-Realsense相机驱动安装"><a href="#2-2-Realsense相机驱动安装" class="headerlink" title="2.2 Realsense相机驱动安装"></a>2.2 Realsense相机驱动安装</h2><p>参考<a href="https://colainlibrary.com/archives/5086b3d.html">Ubuntu安装Realsense的驱动</a>。</p>
<blockquote>
<p>注意：上述网址中的Terminal命令可能有一部分已经失效，建议参考官方github的教程安装。</p>
<p>注意：如果装完之后执行<em>realsense-viewer</em> ，出现一个加号的情况，建议更换显示器再尝试。</p>
</blockquote>
<h2 id="2-3-darknet-yolov4环境的搭建"><a href="#2-3-darknet-yolov4环境的搭建" class="headerlink" title="2.3 darknet yolov4环境的搭建"></a>2.3 darknet yolov4环境的搭建</h2><p>显卡驱动、Cuda、Cudnn是为了搭建darknet yolov4所需的环境。</p>
<h3 id="2-3-1-显卡驱动的安装"><a href="#2-3-1-显卡驱动的安装" class="headerlink" title="2.3.1 显卡驱动的安装"></a>2.3.1 显卡驱动的安装</h3><p>参考<a href="https://colainlibrary.com/archives/745f5887.html">Ubuntu安装NVIDIA显卡驱动</a>。</p>
<blockquote>
<p>注意：安装完后留意执行<em>nvidia-smi</em> 后在右上角显示的<strong>CUDA Version</strong>是多少。<br>对于老版本的显卡，例如1050ti，直接从 <em>Setting</em> -&gt; <em>Software &amp; Updates</em> -&gt; <em>Additional Drivers</em>， 选择默认的NVIDIA显卡驱动。</p>
</blockquote>
<h3 id="2-3-2-Cuda和Cudnn的安装"><a href="#2-3-2-Cuda和Cudnn的安装" class="headerlink" title="2.3.2 Cuda和Cudnn的安装"></a>2.3.2 Cuda和Cudnn的安装</h3><p>参考<a href="https://colainlibrary.com/archives/c836ec8d.html">Ubuntu下CUDA和cuDNN的安装</a>.</p>
<h3 id="2-3-3-Opencv-3-4-12的安装"><a href="#2-3-3-Opencv-3-4-12的安装" class="headerlink" title="2.3.3 Opencv-3.4.12的安装"></a>2.3.3 Opencv-3.4.12的安装</h3><p>参考<a href="https://colainlibrary.com/archives/ef786701.html">Opencv-3.4.12的安装</a>.</p>
<h3 id="2-3-4-darknet-yolov4环境测试"><a href="#2-3-4-darknet-yolov4环境测试" class="headerlink" title="2.3.4 darknet yolov4环境测试"></a>2.3.4 darknet yolov4环境测试</h3><p>参考<a href="https://colainlibrary.com/archives/67893eb3.html">Darknet Yolov4创建数据集并使用</a>.</p>
<h2 id="2-4-deeplabv3的环境搭建"><a href="#2-4-deeplabv3的环境搭建" class="headerlink" title="2.4 deeplabv3的环境搭建"></a>2.4 deeplabv3的环境搭建</h2><p>参考<a href="https://colainlibrary.com/archives/423d18b1.html">使用deeplab训练自己的数据集</a>.</p>
<h2 id="2-5-basler相机驱动的安装"><a href="#2-5-basler相机驱动的安装" class="headerlink" title="2.5 basler相机驱动的安装"></a>2.5 basler相机驱动的安装</h2><p>官方网站：<a href="https://www.baslerweb.com/cn/products/software/basler-pylon-camera-software-suite/">https://www.baslerweb.com/cn/products/software/basler-pylon-camera-software-suite/</a></p>
<p>解压pylon_6.1.1.19861_x86_64_setup.tar.gz文件, 里面有install文件有安装教程.</p>
<p>安装后用USB3.0进行测试</p>
<p>测试：</p>
<p>插入basler相机（注意USB需要插3.0），在/opt/pylon/bin目录下执行sudo ./pylonviewer，然后拍照保存</p>
<h2 id="2-6-pcl库的安装"><a href="#2-6-pcl库的安装" class="headerlink" title="2.6 pcl库的安装"></a>2.6 pcl库的安装</h2><p>参考<a href="https://colainlibrary.com/archives/3ea3bdaa.html">pcl库的安装</a>.</p>
<h2 id="2-7-终端科学上网"><a href="#2-7-终端科学上网" class="headerlink" title="2.7 终端科学上网"></a>2.7 终端科学上网</h2><p>参考<a href="https://colainlibrary.com/archives/42db6ec5.html">Ubuntu终端科学上网的方法</a></p>
]]></content>
      <categories>
        <category>机器人控制</category>
        <category>专栏——机场行李筐分拣项目</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>Linux</tag>
        <tag>机器人</tag>
      </tags>
  </entry>
  <entry>
    <title>PCL库的安装</title>
    <url>/archives/3ea3bdaa.html</url>
    <content><![CDATA[<p>介绍Ubuntu下安装pcl库的方式。<br><span id="more"></span></p>
<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>这里包含pcl1.9.1以及VTK-8.2.0两部分内容的安装方式。</p>
<h1 id="2-PCL1-9-1安装方式"><a href="#2-PCL1-9-1安装方式" class="headerlink" title="2 PCL1.9.1安装方式"></a>2 PCL1.9.1安装方式</h1><p>下载相应的安装包后，执行<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update  </span><br><span class="line">sudo apt-get install git build-essential linux-libc-dev</span><br><span class="line">sudo apt-get install cmake cmake-gui</span><br><span class="line">sudo apt-get install libusb-1.0-0-dev libusb-dev libudev-dev</span><br><span class="line">sudo apt-get install mpi-default-dev openmpi-bin openmpi-common </span><br><span class="line">sudo apt-get install libflann1.8 libflann-dev</span><br><span class="line">sudo apt-get install libeigen3-dev</span><br><span class="line">sudo apt-get install libboost-all-dev</span><br><span class="line">sudo apt-get install libvtk5.10-qt4 libvtk5.10 libvtk5-dev</span><br><span class="line">sudo apt-get install libqhull* libgtest-dev</span><br><span class="line">sudo apt-get install freeglut3-dev pkg-config</span><br><span class="line">sudo apt-get install libxmu-dev libxi-dev</span><br><span class="line">sudo apt-get install mono-complete</span><br><span class="line">sudo apt-get install qt-sdk openjdk-8-jdk openjdk-8-jre</span><br><span class="line"><span class="built_in">cd</span> pcl-pcl-1.9.1</span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">cmake -DCMAKE_BUILD_TYPE=None -DCMAKE_INSTALL_PREFIX=/usr \ -DBUILD_GPU=ON-DBUILD_apps=ON -DBUILD_examples=ON \ -DCMAKE_INSTALL_PREFIX=/usr ..</span><br><span class="line">make -j2</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure></p>
<h1 id="3-VTK-8-2-0的安装"><a href="#3-VTK-8-2-0的安装" class="headerlink" title="3 VTK-8.2.0的安装"></a>3 VTK-8.2.0的安装</h1><p>下载好相应的安装包后，执行<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> VTK-8.2.0</span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make -j4</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>机器人控制</category>
        <category>专栏——机场行李筐分拣项目</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>使用deeplab训练自己的数据集</title>
    <url>/archives/423d18b1.html</url>
    <content><![CDATA[<p>介绍在Ubuntu下使用deeplab训练自己创建的数据集需要用到的环境配置及方法。<br><span id="more"></span></p>
<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>在机场行李筐分拣项目中用到了deeplab网络确定行李筐的角度，本文主要介绍deeplab的环境搭建，训练方法及测试。<br>因为deeplab是语义分割的一种方法，因此用labelme打标签更为合适。<br>软件环境：Ubuntu16.04 + python2.7 + pytorch0.4.1 + CUDA10.2 + labelme<br>硬件配置：RTX2080Ti 11G</p>
<h1 id="2-anaconda3的安装"><a href="#2-anaconda3的安装" class="headerlink" title="2 anaconda3的安装"></a>2 anaconda3的安装</h1><ol>
<li>去官方网站下载对应的版本：<a href="https://www.anaconda.com/products/individual">https://www.anaconda.com/products/individual</a></li>
<li>下载完成后切换到文件所在的目录下执行：bash Anaconda3-xxxxxx-Linux-x86_64.sh(下载文件名)</li>
<li>选择yes或回车，直至安装完成</li>
</ol>
<h1 id="3-数据集的制作"><a href="#3-数据集的制作" class="headerlink" title="3 数据集的制作"></a>3 数据集的制作</h1><p>数据集制作的目标是将采集的用于训练的图片经打标签后变为可以用于网络训练的二值化png图片（打开后看到的是一团黑）。</p>
<h2 id="3-1-labelme的安装"><a href="#3-1-labelme的安装" class="headerlink" title="3.1 labelme的安装"></a>3.1 labelme的安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create -n labelme python=3.6          <span class="comment">#建立一个名字为labelme的conda环境,python版本为3.6</span></span><br><span class="line">conda activate labelme                      <span class="comment">#激活labelme</span></span><br><span class="line">conda install pyqt                          <span class="comment">#安装pyqt</span></span><br><span class="line">pip install labelme                         <span class="comment">#安装labelme</span></span><br><span class="line">labelme                                     <span class="comment">#运行labelme</span></span><br></pre></td></tr></table></figure>
<h2 id="3-2-正样本的制作"><a href="#3-2-正样本的制作" class="headerlink" title="3.2 正样本的制作"></a>3.2 正样本的制作</h2><p>正样本是指包含有待识别目标，需要进行正常打标签的图片。</p>
<ol>
<li>采集图片</li>
<li>使用labelme打标签，生成对应的json标签文件</li>
<li>在相对路径：anaconda3/envs/labelme/lib/python3.6/site-packages/labelme/cli 中用’boxdetect’目录下的 json_to_dataset.py 替换文件</li>
<li>利用json_to_dataset.py文件将.json文件转化为png标签文件：<br>在运行命令之前需要确保两件事情：</li>
</ol>
<ul>
<li>确保在labelme环境下(终端最左测有(labelme)标志)</li>
<li>确保json文件的名字在不包括尾缀(.json)的情况下是四位数，或者改变json_to_dataset.py文件第45行的[:-9]为   -5-名字位数（不包括尾缀）<br>确保以上两件事之后运行：labelme_json_to_dataset ./<br>运行命令之后会生成labelpng文件，文件下有与json个数对应的png图片文件</li>
</ul>
<h2 id="3-3-负样本的制作"><a href="#3-3-负样本的制作" class="headerlink" title="3.3 负样本的制作"></a>3.3 负样本的制作</h2><p>负样本是指不包含待识别目标，背景或者光线不同无法打标签但是需要用来训练的图片。<br>与正样本一样，需要三样东西</p>
<ol>
<li>没有识别目标的图片(负样本图片)</li>
<li>复制对应个数的empty.png(纯黑的图片)并且改成和负样本图片对应的名字</li>
<li>把 <em>.json</em> 文件第六行　“label”: “gray”　中的”gray”改成非识别目标的名字，比如dark等，然后复制和负样本对应个数以及修改成对应的名称</li>
</ol>
<h2 id="3-4-样本标签效果检测"><a href="#3-4-样本标签效果检测" class="headerlink" title="3.4 样本标签效果检测"></a>3.4 样本标签效果检测</h2><p>编写一个脚本，将json转化后得到的灰度图进行增强，即对不同的目标进行不同颜色的显示，确认打标签效果。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">## inc_color.py</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">mask = Image.<span class="built_in">open</span>(<span class="string">&#x27;1265.png&#x27;</span>).convert(<span class="string">&#x27;L&#x27;</span>)</span><br><span class="line"></span><br><span class="line">mask.putpalette([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,     <span class="comment">#　putpalette给对象加上调色板，相当于上色：背景为黑色，目标１为红色，目标2为黄色，目标3为橙色（如果你的图中有更多的目标，可以自行添加更多的调色值）</span></span><br><span class="line">                 <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">                 <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>,</span><br><span class="line">                 <span class="number">255</span>, <span class="number">153</span>, <span class="number">0</span>])</span><br><span class="line">mask.show()  <span class="comment"># 查看mask上色后的效果</span></span><br></pre></td></tr></table></figure></p>
<h1 id="4-训练"><a href="#4-训练" class="headerlink" title="4 训练"></a>4 训练</h1><h2 id="4-1-文件整理"><a href="#4-1-文件整理" class="headerlink" title="4.1 文件整理"></a>4.1 文件整理</h2><ol>
<li>将上述步骤生成的png文件复制到boxdect/label目录下</li>
<li>把训练使用图片复制到boxdetect/datasets/TrainPic目录下   </li>
<li>把json文件放在boxdetect/datasets/jsondata文件下</li>
<li>测试图片复制到boxdetect/datasets/TestPic目录下(非必须选项，训练完成后可以测试训练结果)</li>
</ol>
<h2 id="4-2-参数修改"><a href="#4-2-参数修改" class="headerlink" title="4.2 参数修改"></a>4.2 参数修改</h2><p>修改文件./config.py中的：<br>self.TRAIN_DIR修改为训练图片的地址<br>self.TEST_DIR修改为图片测试图片的地址<br>self.JSON_DIR修改成jsondata文件存放的地址<br>self.TRAIN_EPOCHS修改为epoch大小             </p>
<blockquote>
<p>训练迭代次数，实际的总训练次数为 TRAIN_EPOCHS*（图片数量/4）</p>
</blockquote>
<h2 id="4-3-生成网络输入的文件"><a href="#4-3-生成网络输入的文件" class="headerlink" title="4.3 生成网络输入的文件"></a>4.3 生成网络输入的文件</h2><p>运行mktxt.py运行结果为生成trainbox.txt<br>运行mkexist.py运行结果为生成gray_trainbox.txt和white_trainbox.txt</p>
<h2 id="4-4-训练"><a href="#4-4-训练" class="headerlink" title="4.4 训练"></a>4.4 训练</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 推荐使用anaconda创建一个运行环境(最好在运行以下命令之前实现终端科学上网)：</span></span><br><span class="line"><span class="comment"># 创建一个命名为deeplab三个软件对应版本的环境（9.x版本的cuda也可以使用）</span></span><br><span class="line">conda create -n deeplab python=2.7 pytorch=0.4.1 CUDA=10.2</span><br><span class="line"><span class="comment"># 激活pt环境</span></span><br><span class="line">conda activate pt                                              </span><br><span class="line"><span class="comment"># 开始训练。每2000代保存一次模型文件至boxsave文件夹下，tensorboard文件保存至logs文件夹下 </span></span><br><span class="line">python trainbox.py</span><br></pre></td></tr></table></figure>
<blockquote>
<p>训练代数保存的变量在trainbox.py文件下的318行</p>
</blockquote>
<h1 id="5-测试"><a href="#5-测试" class="headerlink" title="5 测试"></a>5 测试</h1><ol>
<li>修改imagesave.py文件中的模型为训练时保存的模型，复制boxsave文件下最后一个权重文件的名称替换imagesave.py文件下的deeplabv3plus_res50_atrous_box_1hsvitr8000         <blockquote>
<p>测试的图片在 boxdetect/datasets/TrainPic 目录下</p>
</blockquote>
</li>
<li>运行 <em>python imagesave.py</em>, 测试结果保存于saveimg文件夹</li>
</ol>
<h1 id="5-Q-amp-A"><a href="#5-Q-amp-A" class="headerlink" title="5 Q&amp;A"></a>5 Q&amp;A</h1><p>Q:no module name xxx<br>A:pip install xxx                       #如果安装失败就在百度上面搜索一下模块的全名，有可能xxx只是模块名字的缩写，比如skimage,全名为scikit-image</p>
<p>Q:QObject::moveToThread: Current thread (0x157ea50) is not the object’s thread (0x1ce2a00).<br>Cannot move to target thread (0x157ea50)<br>qt.qpa.plugin: Could not load the Qt platform plugin “xcb” in “/home/yangfei/.local/lib/python3.6/site-packages/cv2/qt/plugins” even though it was found.<br>This application failed to start because no Qt platform plugin could be initialized. Reinstalling the application may fix this problem.<br>Available platform plugins are: xcb, eglfs, linuxfb, minimal, minimalegl, offscreen, vnc, wayland-egl, wayland, wayland-xcomposite-egl, wayland-xcomposite-glx, webgl.<br>已放弃 (核心已转储)<br>A:pip install opencv-python==4.1.0.25</p>
<p>寻找该目录以及子目录下是否含有某些内容：<br>sudo grep -r “xxx”</p>
<p>其中遇到的一些错误就是：<br>没啥装啥。<br>如果没有找到文件，就重新修正文件路径</p>
]]></content>
      <categories>
        <category>机器人控制</category>
        <category>专栏——机场行李筐分拣项目</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu终端科学上网的方法</title>
    <url>/archives/42db6ec5.html</url>
    <content><![CDATA[<p>介绍在Ubuntu下终端科学上网的方式。<br><span id="more"></span></p>
<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p> 最近一段时间用conda来配置虚拟环境，经常会出现终端中下载速度很慢的情况，最终会导致下载安装失败，因此有必要使用科学上网来完成相关任务。</p>
<h1 id="2-步骤"><a href="#2-步骤" class="headerlink" title="2 步骤"></a>2 步骤</h1><ol>
<li>下载小飞机：<a href="https://github.com/qingshuisiyuan/electron-ssr-backup/releases/download/v0.2.6/electron-ssr-0.2.6.deb">https://github.com/qingshuisiyuan/electron-ssr-backup/releases/download/v0.2.6/electron-ssr-0.2.6.deb</a>.</li>
<li>执行以下命令<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install libcanberra-gtk-module libcanberra-gtk3-module gconf2 gconf-service libappindicator1</span><br><span class="line">sudo apt-get install libssl-dev </span><br><span class="line">sudo apt-get install libsodium-dev</span><br><span class="line">sudo apt-get install python</span><br><span class="line">sudo apt-get install python2  <span class="comment"># 理论上来讲装了上一条这个就不用了</span></span><br><span class="line">sudo dpkg -i electron-ssr-0.2.6.deb</span><br></pre></td></tr></table></figure></li>
<li>安装完后打开小飞机，然后点击自动下载，并将自己的科学上网服务器配置进去。</li>
<li>执行<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gedit ~/.bashrc</span><br></pre></td></tr></table></figure></li>
<li>在打开的文件末尾，添加下列两行命令后保存退出。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=<span class="string">&#x27;http://localhost:12333&#x27;</span>   <span class="comment"># http代理端口默认的是12333</span></span><br><span class="line"><span class="built_in">export</span> https_proxy=<span class="string">&#x27;http://localhost:12333&#x27;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>说明1：12333是默认的代理端口，如果不确定是否正确，点击ssr图标-&gt;配置-&gt;选项设置-&gt;通用设置-&gt;勾选http代理并查看http代理端口号，并将上述两行的指令中的端口号修改为配置中的端口号<br>说明2：注意通过 <em>ssr图标-&gt;服务器-&gt;ssr Group</em> 确认是否为自己添加的二维码</p>
</blockquote>
</li>
<li>执行<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></li>
<li>将小飞机的系统代理模式修改为 <strong>PAC代理</strong>， 再新开一个终端，执行<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget www.google.com</span><br></pre></td></tr></table></figure>
如果能把google首页下载到home目录下，说明配置成功。</li>
<li>彻底删除小飞机：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo dpkg -P electron-ssr</span><br><span class="line"><span class="built_in">cd</span> ~/.config</span><br><span class="line">sudo <span class="built_in">rm</span> -rf electron-ssr</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果不删除.config目录下的electron-ssr文件夹，卸载之后再安装还是会使用卸载前的配置。</p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>机器人控制</category>
        <category>专栏——机场行李筐分拣项目</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Darknet Yolov4创建数据集并使用</title>
    <url>/archives/67893eb3.html</url>
    <content><![CDATA[<p>介绍机场行李筐智能分拣项目的安装环境之 darknet yolov4<br><span id="more"></span></p>
<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>使用darknet yolov4是为了检测行李筐。需要已经安装好显卡驱动、CUDA、cuDNN、opencv。环境安装好后，需要制作自己的数据集。</p>
<p>yolov4权重文件：链接: <a href="https://pan.baidu.com/s/1VBA_f473r98KKtIOiXqlWw">https://pan.baidu.com/s/1VBA_f473r98KKtIOiXqlWw</a> 提取码: m5nk。</p>
<h1 id="2-检测环境安装是否完善"><a href="#2-检测环境安装是否完善" class="headerlink" title="2 检测环境安装是否完善"></a>2 检测环境安装是否完善</h1><p>下载yolov4源码：链接: <a href="https://pan.baidu.com/s/1eLHbEg06EZXZvX45wgJHGQ">https://pan.baidu.com/s/1eLHbEg06EZXZvX45wgJHGQ</a> 提取码: qghn。</p>
<p>解压后从该文件夹打开Terminal，执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make clean</span><br><span class="line">make -j8</span><br><span class="line">./darknet detect cfg/yolov4.cfg yolov4.weights data/dog.jpg</span><br></pre></td></tr></table></figure>
<p>执行后输出如下图片，表示安装成功。</p>
<p><img src="/images/20201103/predictions.jpg" alt="01"></p>
<h1 id="3-制作自己的数据集"><a href="#3-制作自己的数据集" class="headerlink" title="3 制作自己的数据集"></a>3 制作自己的数据集</h1><ol>
<li><p>首先用相机拍一定数量的图片作为数据集，然后用LabelImg软件对图片进行打标签，得到图片所对应的xml文件。</p>
</li>
<li><p>将darknet源码中的 <strong>data</strong> 文件夹下的内容删除，并建立下图所示的4个文件夹和一个 <em>sel_train_test.py</em> 空文件。</p>
</li>
</ol>
<p><img src="/images/20201103/02.png" alt="02"></p>
<ol>
<li>将原始图片存放在data/images目录下。</li>
<li>将打标签后得到的xml文件存放在 data/Annotations 目录下。</li>
<li>在 darknet 目录下新建文件 <em>vocbox.names</em>，并写入自己的标签内容，例如<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gray</span><br><span class="line">white</span><br></pre></td></tr></table></figure></li>
<li><p>打开第2步新建的 /darknet/data/sel_train_test.py，具体代码内容件附录1。</p>
<p> 该脚本实现的功能是：将训练集和测试集区分开，从原始图片中每10张取一张作为测试集，得到训练集和测试集图片的序号，并分别存放在darknet/data/ImageSets/train.txt和darknet/data/ImageSets/test.txt。</p>
<p> 注意修改脚本中第5～7行保存文件的路径。</p>
</li>
<li><p>在darknet/data目录下打开Terminal，执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python sel_train_test.py</span><br></pre></td></tr></table></figure>
</li>
<li><p>在darknet目录下新建voc_label.py文件，该文件中的代码见附录2，修改的地方在代码中!!!表示。</p>
<p> 该脚本的目的是将打标签得到的xml文件转为txt文件，并保存在darknet/data/labels文件夹；<br> 同时获取训练集和测试集图片的完整路径，并保存在darknet/train.txt和darknet/test.txt。</p>
</li>
<li><p>在darknet目录下打开Terminal，执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python voc_label.py</span><br></pre></td></tr></table></figure>
</li>
<li><p>将darknet/data/labels文件夹下的txt文件拷贝到 darknet/data/images 文件夹下。</p>
</li>
<li>在 darknet 目录下新建文件 <em>vocbox.data</em>，写入如下内容并保存<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">classes= 2</span><br><span class="line">train  = /home/robot/Downloads/darknet/train.txt</span><br><span class="line">valid  = /home/robot/Downloads/darknet/test.txt</span><br><span class="line">names = /home/robot/Downloads/darknet/vocbox.names</span><br><span class="line">backup = backup</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：依据自己的数据集修改分类数、以及执行 voc_label.py 文件后得到的 train.txt 和 test.txt 路径。</p>
</blockquote>
</li>
</ol>
<h1 id="4-配置文件的修改"><a href="#4-配置文件的修改" class="headerlink" title="4 配置文件的修改"></a>4 配置文件的修改</h1><h2 id="4-1-makefile文件的修改"><a href="#4-1-makefile文件的修改" class="headerlink" title="4.1 makefile文件的修改"></a>4.1 makefile文件的修改</h2><p>打开darknet/Makefile，找到前几行的代码，修改如下<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GPU=1               <span class="comment"># 训练时使用CUDA进行加速训练（CUDA应该在 /usr/local/cuda文件夹下）</span></span><br><span class="line">CUDNN=1             <span class="comment"># 使用CUDNN v5-v7进行加速（cuDNN应该在 /usr/local/cudnn文件夹下）</span></span><br><span class="line">CUDNN_HALF=1        <span class="comment"># 为Tensor Cores (在Titan V / Tesla V100 / DGX-2等)上进行加速训练和推理。</span></span><br><span class="line">OPENCV=1            <span class="comment"># OpenCV可以读取视频或者图片</span></span><br><span class="line">AVX=0</span><br><span class="line">OPENMP=0</span><br><span class="line">LIBSO=1             <span class="comment"># 生成动态链接库</span></span><br></pre></td></tr></table></figure></p>
<h2 id="4-2-cfg文件的修改"><a href="#4-2-cfg文件的修改" class="headerlink" title="4.2 cfg文件的修改"></a>4.2 cfg文件的修改</h2><p>打开darknet/cfg/yolov4-relu.cfg(或者其他的cfg，relu表示用relu激活函数)。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## step1</span></span><br><span class="line">batch=64                <span class="comment"># Training标签下，原来就是64,根据gpu自己选择，但必须是2的倍数</span></span><br><span class="line">subdivisions=16         <span class="comment"># 如果out of memory，则32或64，依次倍增。或者64，32，...，1，依次倍减batch值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## step2</span></span><br><span class="line">width=608               <span class="comment"># 图片宽和高，这边我没有修改，该值必须被32整除。</span></span><br><span class="line">height=608</span><br><span class="line">max_batches=500500      <span class="comment"># 该值最少是classes*2000</span></span><br><span class="line">steps=400000,450000     <span class="comment"># 该值是 max_batches的80% 和 90%</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## step3，修改classess，和打标签时的分类数一致</span></span><br><span class="line">classes=2               <span class="comment"># 每个yolo标签下都需要修改，共三处</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## step4,修改紧挨 yolo 标签上面的 convolutional</span></span><br><span class="line">filters=21          	<span class="comment"># 计算方法为(classes + 5)x3，共三处</span></span><br></pre></td></tr></table></figure></p>
<p>cfg文件的参数含义可以参考: <a href="https://www.cnblogs.com/answerThe/p/11544361.html">关于yolo配置文件以及训练时各参数的含义</a>.</p>
<h1 id="5-开始训练"><a href="#5-开始训练" class="headerlink" title="5 开始训练"></a>5 开始训练</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> darknet</span><br><span class="line">sudo ldconfig</span><br><span class="line">make clean</span><br><span class="line">make -j8</span><br><span class="line">sudo ./darknet detector train vocbox.data cfg/yolov4-relu.cfg yolov4.conv.137 -i 0 -map</span><br></pre></td></tr></table></figure>
<p>如果没有权重文件 <em>yolov4.conv.137</em>，可以从如下地址下载:</p>
<p>链接: <a href="https://pan.baidu.com/s/1XiBjueBZ6lLKfhJyJo887A">https://pan.baidu.com/s/1XiBjueBZ6lLKfhJyJo887A</a> 提取码: 67ra</p>
<p>训练完成后，会得到一张损失函数图，以及存放在darknet/backup目录下的权重文件。</p>
<p><img src="/images/20201103/03.png" alt="03"></p>
<h1 id="6-测试训练结果"><a href="#6-测试训练结果" class="headerlink" title="6 测试训练结果"></a>6 测试训练结果</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> darknet</span><br><span class="line">sudo ./darknet detector <span class="built_in">test</span> vocbox.data cfg/yolov4-relu.cfg ./backup/yolov4-relu_final.weights</span><br></pre></td></tr></table></figure>
<p>运行后，从Terminal中再输入相应的测试图片路劲即可。</p>
<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="附录1-sel-train-test-py"><a href="#附录1-sel-train-test-py" class="headerlink" title="附录1 sel_train_test.py"></a>附录1 sel_train_test.py</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> listdir, getcwd</span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> join</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    source_folder=<span class="string">&#x27;/home/robot/Downloads/darknet/data/images&#x27;</span>       <span class="comment">#!!!! Modify</span></span><br><span class="line">    dest=<span class="string">&#x27;/home/robot/Downloads/darknet/data/ImageSets/train.txt&#x27;</span>   <span class="comment">#!!!! Modify</span></span><br><span class="line">    dest2=<span class="string">&#x27;/home/robot/Downloads/darknet/data/ImageSets/test.txt&#x27;</span>   <span class="comment">#!!!! Modify</span></span><br><span class="line">    file_list=os.listdir(source_folder)       </span><br><span class="line">    train_file=<span class="built_in">open</span>(dest,<span class="string">&#x27;a&#x27;</span>)                 </span><br><span class="line">    val_file=<span class="built_in">open</span>(dest2,<span class="string">&#x27;a&#x27;</span>)                  </span><br><span class="line">    <span class="keyword">for</span> file_obj <span class="keyword">in</span> file_list:                </span><br><span class="line">        file_path=os.path.join(source_folder,file_obj) </span><br><span class="line">       </span><br><span class="line">        file_name,file_extend=os.path.splitext(file_obj)</span><br><span class="line">       </span><br><span class="line">        file_num=<span class="built_in">int</span>(file_name) </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(file_num % <span class="number">10</span> == <span class="number">0</span>):</span><br><span class="line">            val_file.write(file_name+<span class="string">&#x27;\n&#x27;</span>)  </span><br><span class="line">        <span class="keyword">else</span> :</span><br><span class="line">            train_file.write(file_name+<span class="string">&#x27;\n&#x27;</span>)    </span><br><span class="line">    train_file.close()</span><br><span class="line">val_file.close()</span><br></pre></td></tr></table></figure>
<h2 id="附录2-voc-label-py"><a href="#附录2-voc-label-py" class="headerlink" title="附录2 voc_label.py"></a>附录2 voc_label.py</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> listdir, getcwd</span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> join</span><br><span class="line"></span><br><span class="line">sets=[<span class="string">&#x27;train&#x27;</span>,<span class="string">&#x27;test&#x27;</span>]</span><br><span class="line"></span><br><span class="line">classes = [<span class="string">&quot;gray&quot;</span>, <span class="string">&quot;white&quot;</span>] <span class="comment">#!!! Modify classes based on your labels!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert</span>(<span class="params">size, box</span>):</span><br><span class="line">    dw = <span class="number">1.</span>/size[<span class="number">0</span>]</span><br><span class="line">    dh = <span class="number">1.</span>/size[<span class="number">1</span>]</span><br><span class="line">    x = (box[<span class="number">0</span>] + box[<span class="number">1</span>])/<span class="number">2.0</span></span><br><span class="line">    y = (box[<span class="number">2</span>] + box[<span class="number">3</span>])/<span class="number">2.0</span></span><br><span class="line">    w = box[<span class="number">1</span>] - box[<span class="number">0</span>]</span><br><span class="line">    h = box[<span class="number">3</span>] - box[<span class="number">2</span>]</span><br><span class="line">    x = x*dw</span><br><span class="line">    w = w*dw</span><br><span class="line">    y = y*dh</span><br><span class="line">    h = h*dh</span><br><span class="line">    <span class="keyword">return</span> (x,y,w,h)</span><br><span class="line"></span><br><span class="line"><span class="comment">#def convert_annotation(year, image_id):</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert_annotation</span>(<span class="params">image_id</span>):</span><br><span class="line">    <span class="comment"># in_file = open(&#x27;VOCdevkit/VOC%s/Annotations/%s.xml&#x27;%(year, image_id))</span></span><br><span class="line">    in_file = <span class="built_in">open</span>(<span class="string">&#x27;data/Annotations/%s.xml&#x27;</span>%(image_id))</span><br><span class="line">    <span class="comment"># out_file = open(&#x27;VOCdevkit/VOC%s/labels/%s.txt&#x27;%(year, image_id), &#x27;w&#x27;)</span></span><br><span class="line">    out_file = <span class="built_in">open</span>(<span class="string">&#x27;data/labels/%s.txt&#x27;</span>%(image_id), <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    tree=ET.parse(in_file)</span><br><span class="line">    root = tree.getroot()</span><br><span class="line">    size = root.find(<span class="string">&#x27;size&#x27;</span>)</span><br><span class="line">    w = <span class="built_in">int</span>(size.find(<span class="string">&#x27;width&#x27;</span>).text)</span><br><span class="line">    h = <span class="built_in">int</span>(size.find(<span class="string">&#x27;height&#x27;</span>).text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> obj <span class="keyword">in</span> root.<span class="built_in">iter</span>(<span class="string">&#x27;object&#x27;</span>):</span><br><span class="line">        difficult = obj.find(<span class="string">&#x27;difficult&#x27;</span>).text</span><br><span class="line">        cls = obj.find(<span class="string">&#x27;name&#x27;</span>).text</span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> classes <span class="keyword">or</span> <span class="built_in">int</span>(difficult) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        cls_id = classes.index(cls)</span><br><span class="line">        xmlbox = obj.find(<span class="string">&#x27;bndbox&#x27;</span>)</span><br><span class="line">        b = (<span class="built_in">float</span>(xmlbox.find(<span class="string">&#x27;xmin&#x27;</span>).text), <span class="built_in">float</span>(xmlbox.find(<span class="string">&#x27;xmax&#x27;</span>).text), <span class="built_in">float</span>(xmlbox.find(<span class="string">&#x27;ymin&#x27;</span>).text), <span class="built_in">float</span>(xmlbox.find(<span class="string">&#x27;ymax&#x27;</span>).text))</span><br><span class="line">        bb = convert((w,h), b)</span><br><span class="line">        out_file.write(<span class="built_in">str</span>(cls_id) + <span class="string">&quot; &quot;</span> + <span class="string">&quot; &quot;</span>.join([<span class="built_in">str</span>(a) <span class="keyword">for</span> a <span class="keyword">in</span> bb]) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">wd = getcwd()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>  image_set <span class="keyword">in</span> sets:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;data/labels/&#x27;</span>):</span><br><span class="line">        os.makedirs(<span class="string">&#x27;data/labels/&#x27;</span>)</span><br><span class="line">    image_ids = <span class="built_in">open</span>(<span class="string">&#x27;data/ImageSets/%s.txt&#x27;</span>%(image_set)).read().strip().split()</span><br><span class="line">    list_file = <span class="built_in">open</span>(<span class="string">&#x27;%s.txt&#x27;</span>%(image_set), <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> image_id <span class="keyword">in</span> image_ids:</span><br><span class="line">        list_file.write(<span class="string">&#x27;%s/data/images/%s.jpg\n&#x27;</span>%(wd, image_id))   <span class="comment">#!!!! Modify the format of pictures based on your source pictures!</span></span><br><span class="line">        convert_annotation( image_id)</span><br><span class="line">    list_file.close()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>机器人控制</category>
        <category>专栏——机场行李筐分拣项目</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>Linux</tag>
        <tag>机器人</tag>
      </tags>
  </entry>
  <entry>
    <title>Opencv-3.4.12的安装</title>
    <url>/archives/ef786701.html</url>
    <content><![CDATA[<p>介绍机场行李筐智能分拣项目的安装环境之opencv-3.4.12的安装方法。<br><span id="more"></span></p>
<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>关于Opencv的安装，之前已经有两篇博客介绍过Opencv3.4.1安装方法。</p>
<ol>
<li><a href="https://colainlibrary.com/archives/56535.html">Opencv-3.4.1的安装教程</a></li>
<li><a href="https://colainlibrary.com/archives/85e5f27f.html">Opencv_contrib-3.4.1的安装及问题处理</a></li>
</ol>
<p>上述两个教程解决opencv-3.4.1的安装应该是没有问题，但对3.4.12版本可能会有些依赖项不太试用。本文主要是将opencv-3.4.12安装时需要的依赖项以及opencv-contrib-3.4.12一起安装，并添加Cuda的配置，以便后期调用GPU。之所以用3.4.12的版本，是因为调用yolov4训练结果必须试用3.4.2以上版本的opencv。</p>
<h1 id="2-安装"><a href="#2-安装" class="headerlink" title="2 安装"></a>2 安装</h1><h2 id="2-1-安装依赖"><a href="#2-1-安装依赖" class="headerlink" title="2.1 安装依赖"></a>2.1 安装依赖</h2><p>参考: <a href="https://www.pyimagesearch.com/2016/10/24/ubuntu-16-04-how-to-install-opencv/">Ubuntu 16.04: How to install OpenCV</a>.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install build-essential cmake pkg-config</span><br><span class="line">$ sudo apt-get install libjpeg8-dev libtiff5-dev libjasper-dev libpng12-dev</span><br><span class="line">$ sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev</span><br><span class="line">$ sudo apt-get install libxvidcore-dev libx264-dev</span><br><span class="line">$ sudo apt-get install libgtk-3-dev</span><br><span class="line">$ sudo apt-get install libatlas-base-dev gfortran</span><br><span class="line">$ sudo apt-get install python2.7-dev python3.5-dev</span><br></pre></td></tr></table></figure></p>
<h2 id="2-2-opencv安装"><a href="#2-2-opencv安装" class="headerlink" title="2.2 opencv安装"></a>2.2 opencv安装</h2><p>将下载好的opencv-3.4.12和opencv_contrib-3.4.12解压，并将opencv_contrib-3.4.12这个文件夹拷贝到opencv-3.4.12中，然后从opencv-3.4.12这个目录打开Terminal。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> opencv-3.4.12存放位置</span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">cmake -D CMAKE_BUILD_TYPE=Release \</span><br><span class="line">      -D CMAKE_INSTALL_PREFIX=/usr/local \</span><br><span class="line">      -D OPENCV_GENERATE_PKGCONFIG=ON \</span><br><span class="line">      -D WITH_CUDA=ON .. \</span><br><span class="line">      -D OPENCV_EXTRA_MODULES_PATH=../opencv_contrib-3.4.12/modules ../../opencv-3.4.12</span><br><span class="line">make -j$(<span class="built_in">nproc</span>)</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：上面的指令不要执行一次就认为结束了，要观察输出结果是否有报错。如果在编译的过程中有错误，请参考<a href="https://colainlibrary.com/archives/85e5f27f.html">Opencv_contrib-3.4.1的安装及问题处理</a>。</p>
</blockquote>
<h1 id="3-环境变量的设置"><a href="#3-环境变量的设置" class="headerlink" title="3 环境变量的设置"></a>3 环境变量的设置</h1><p>执行<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo /bin/bash -c <span class="string">&#x27;echo &quot;/usr/local/lib&quot; &gt; /etc/ld.so.conf.d/opencv.conf&#x27;</span></span><br><span class="line">sudo ldconfig</span><br><span class="line">sudo gedit /etc/bash.bashrc</span><br></pre></td></tr></table></figure></p>
<p>在打开的文本最后添加<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#for opencv</span></span><br><span class="line">PKG_CONFIG_PATH=<span class="variable">$PKG_CONFIG_PATH</span>:/usr/local/lib/pkgconfig</span><br><span class="line"><span class="built_in">export</span> PKG_CONFIG_PATH</span><br><span class="line"><span class="comment">#end</span></span><br></pre></td></tr></table></figure></p>
<p>保存文件并退出。再执行<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo -s </span><br><span class="line"><span class="built_in">source</span> /etc/bash.bashrc	   <span class="comment">#激活配置</span></span><br><span class="line">sudo updatedb  		  <span class="comment">#更新database</span></span><br></pre></td></tr></table></figure></p>
<h1 id="4-查看opencv安装版本"><a href="#4-查看opencv安装版本" class="headerlink" title="4 查看opencv安装版本"></a>4 查看opencv安装版本</h1><p>执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pkg-config --modversion opencv</span><br></pre></td></tr></table></figure>
<p>如果输出3.4.12，则表明安装成功。</p>
]]></content>
      <categories>
        <category>机器人控制</category>
        <category>专栏——机场行李筐分拣项目</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>Linux</tag>
        <tag>机器人</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu下CUDA和cuDNN的安装</title>
    <url>/archives/c836ec8d.html</url>
    <content><![CDATA[<p>介绍机场行李筐智能分拣项目的安装环境之CUDA和cuDNN的安装。<br><span id="more"></span></p>
<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>在此之前，应当已经先装好了NVIDIA显卡驱动，并通过 <em>nvidia-smi</em> 指令查询到所装显卡对应的cuda版本。依据所安装的显卡版本或者显示的cuda version，从<a href="https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html">NVIDIA显卡驱动与CUDA版本对应网站</a>查询到对应的CUDA版本。本文用的是CUDA 10.2以及cuDNN7.6.5。</p>
<h2 id="2-CUDA-10-2的安装"><a href="#2-CUDA-10-2的安装" class="headerlink" title="2 CUDA 10.2的安装"></a>2 CUDA 10.2的安装</h2><p>以CUDA 10.2的安装为例，搜索引擎搜索<em>cuda 10.2</em>，进入<a href="https://developer.nvidia.com/cuda-10.2-download-archive">官方下载页面</a>，选择对应的系统版本等，出现如下页面。</p>
<p><img src="/images/20201101/01.png" alt="01"></p>
<h3 id="2-1-下载cuda-10-2"><a href="#2-1-下载cuda-10-2" class="headerlink" title="2.1 下载cuda-10.2"></a>2.1 下载cuda-10.2</h3><p>下载cuda-10.2有两种方式：</p>
<ol>
<li><p>按照官方给出的安装提示从终端执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://developer.download.nvidia.com/compute/cuda/10.2/Prod/local_installers/cuda_10.2.89_440.33.01_linux.run</span><br></pre></td></tr></table></figure>
</li>
<li><p>直接复制 <em>wget</em> 后的网址到浏览器地址栏，会弹出下载提示。</p>
</li>
</ol>
<h3 id="2-2-下载cuda-10-2补充包"><a href="#2-2-下载cuda-10-2补充包" class="headerlink" title="2.2 下载cuda-10.2补充包"></a>2.2 下载cuda-10.2补充包</h3><p>从上图中直接点击<strong>Download (121.5MB)</strong>。</p>
<h3 id="2-3-安装CUDA-10-2"><a href="#2-3-安装CUDA-10-2" class="headerlink" title="2.3 安装CUDA-10.2"></a>2.3 安装CUDA-10.2</h3><p>找到下载好的CUDA-10.2安装包，从其所在目录打开终端，执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo sh cuda_10.2.89_440.33.01_linux.run</span><br></pre></td></tr></table></figure>
<p>在第一个问题后输入 <strong>accept</strong>。</p>
<p><img src="/images/20201101/02.png" alt="02"></p>
<p>按回车后，在出现的页面中通过向下移动光标，选中<strong>Driver</strong>，按回车取消安装这一行（这是默认的显卡驱动，之前已经安装过了，故不再安装），使其前面的[X]变为[ ]。再向下移动光标至最后一行，按回车开始安装。如下图所示。</p>
<p><img src="/images/20201101/03.png" alt="03"></p>
<p><img src="/images/20201101/04.png" alt="04"></p>
<h3 id="2-4-安装CUDA-10-2补充包"><a href="#2-4-安装CUDA-10-2补充包" class="headerlink" title="2.4 安装CUDA-10.2补充包"></a>2.4 安装CUDA-10.2补充包</h3><p>从终端打开下载好的文件所在目录，执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo sh cuda_10.2.1_linux.run</span><br></pre></td></tr></table></figure>
<p>选择accept和默认安装即可。</p>
<p><img src="/images/20201101/05.png" alt="05"></p>
<p><img src="/images/20201101/06.png" alt="06"></p>
<p><img src="/images/20201101/07.png" alt="07"></p>
<h3 id="2-5-环境变量的设置"><a href="#2-5-环境变量的设置" class="headerlink" title="2.5 环境变量的设置"></a>2.5 环境变量的设置</h3><p>执行<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gedit ~/.bashrc</span><br></pre></td></tr></table></figure></p>
<p>在打开文件的最后添加以下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/usr/local/cuda-10.2/bin<span class="variable">$&#123;PATH:+:<span class="variable">$&#123;PATH&#125;</span>&#125;</span>             </span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/usr/local/cuda-10.2/lib64<span class="variable">$&#123;LD_LIBRARY_PATH:+:<span class="variable">$&#123;LD_LIBRARY_PATH&#125;</span>&#125;</span></span><br></pre></td></tr></table></figure>
<p>保存文件后关闭，并执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>
<p>使得修改后的环境变量生效。</p>
<h3 id="2-6-验证安装成功"><a href="#2-6-验证安装成功" class="headerlink" title="2.6 验证安装成功"></a>2.6 验证安装成功</h3><p>执行<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvcc -V</span><br></pre></td></tr></table></figure></p>
<p>出现cuda的安装版本，表示成功。</p>
<p><img src="/images/20201101/08.png" alt="08"></p>
<h2 id="3-cuDNN7-6-5的安装"><a href="#3-cuDNN7-6-5的安装" class="headerlink" title="3 cuDNN7.6.5的安装"></a>3 cuDNN7.6.5的安装</h2><font color=red>[CUDNN8的安装方法](https://zhuanlan.zhihu.com/p/126997172)</font>

<p>cuDNN下载位置：<a href="https://developer.nvidia.cn/rdp/cudnn-archive">https://developer.nvidia.cn/rdp/cudnn-archive</a></p>
<p>cuDNN是一个SDK，是一个专门用于神经网络的加速包，注意，它跟我们的CUDA没有一一对应的关系，即每一个版本的CUDA可能有好几个版本的cuDNN与之对应，但一般有一个最新版本的cuDNN版本与CUDA对应更好。</p>
<p>下载与CUDA版本相对应的cuDNN版本，将安装包解压之后执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">cp</span> cuda/include/cudnn.h /usr/local/cuda/include/</span><br><span class="line">sudo <span class="built_in">cp</span> cuda/lib64/libcudnn* /usr/local/cuda/lib64/</span><br><span class="line">sudo <span class="built_in">chmod</span> a+r /usr/local/cuda/include/cudnn.h</span><br><span class="line">sudo <span class="built_in">chmod</span> a+r /usr/local/cuda/lib64/libcudnn*</span><br></pre></td></tr></table></figure>
<p>执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /usr/local/cuda/include/cudnn.h | grep CUDNN_MAJOR -A 2</span><br></pre></td></tr></table></figure>
<p>下图表示安装成功。</p>
<p><img src="/images/20201101/09.png" alt="09"></p>
<h2 id="4-卸载"><a href="#4-卸载" class="headerlink" title="4 卸载"></a>4 卸载</h2><p>直接找到安装目录将其删除就好了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local</span><br><span class="line">sudo <span class="built_in">rm</span> -rf cuda</span><br><span class="line">sudo <span class="built_in">rm</span> -rf cuda-10.2</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>机器人控制</category>
        <category>专栏——机场行李筐分拣项目</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>Linux</tag>
        <tag>机器人</tag>
      </tags>
  </entry>
  <entry>
    <title>BP神经网络反向传播推导</title>
    <url>/archives/d7a626d9.html</url>
    <content><![CDATA[<p>本文将介绍经典的BP神经网络推导过程。<br><span id="more"></span></p>
<h1 id="1-神经元模型"><a href="#1-神经元模型" class="headerlink" title="1 神经元模型"></a>1 神经元模型</h1><p>单个神经元模型如下图所示。</p>
<p><img src="/images/20201020/01.png" alt="01"><br>单个神经元模型工作过程如下：输入信号 $\mathbf{x}=\begin{bmatrix}<br>x_1, &amp; x_2, &amp; \cdots, &amp; x_m \\<br>\end{bmatrix}^\text{T}$.<br>经过权重 $w_{kj}$ 加权后，传入神经元 $k$，经过引入偏置 $b_k$ 后，可以得到神经元的输出 $v_k$ ，被激活函数 ${\psi}({\cdot})$ 激励后，得到输出 $y_k$ 。</p>
<h1 id="2-单隐含层神经网络模型"><a href="#2-单隐含层神经网络模型" class="headerlink" title="2 单隐含层神经网络模型"></a>2 单隐含层神经网络模型</h1><p>对于多输入多输出，仅有一层隐含层的神经网络模型如下图所示。</p>
<p><img src="/images/20201020/02.png" alt="02"></p>
<h2 id="2-1-符号含义说明"><a href="#2-1-符号含义说明" class="headerlink" title="2.1 符号含义说明"></a>2.1 符号含义说明</h2><p>对于用到的符号含义说明如下：</p>
<p>1.输入的第$n$个样本为$\mathbf{x_{n}}$;</p>
<p>2.每个样本中包含$d$个元素 $\mathbf{x_{n}}=\left [ x_{n1},x_{n2},\cdots ,x_{nd} \right ]^\mathrm{T}\in\mathbb{R}^d$；</p>
<p>3.隐含层有$m$个神经元，隐含层神经元的输出 $\mathbf{h} = \left [ h_{1},h_{2},\cdots ,h_{m} \right ]^\mathrm{T}\in\mathbb{R}^m$，下标中的第一位数表示第1层隐含层。</p>
<p>4.为方便讨论，定义输入和输出的样本是一一对应关系，即共有$n$个输出样本 $\mathbf{y_{n}}$;</p>
<p>5.输出层有 $r$ 个神经元，对应单次样本的 $r$ 维输出 $\mathbf{y_{n}} = \left [ y_{n1},y_{n2},\cdots ,y_{nr} \right ]^\mathrm{T}\in\mathbb{R}^r$；</p>
<p>6.隐含层未经过激励函数，只有线性求和时的输出用 $\mathbf{neth} = \left [ neth_{1},neth_{2},\cdots ,neth_{m} \right ]^\mathrm{T}\in\mathbb{R}^m$表示；</p>
<p>7.输出层未经过激励函数，只有线性求和时的输出用 $\mathbf{nety} _n = \left[nety_1, nety_2, \cdots, nety_r \right]^\mathrm{T}\in \mathbb{R}^r$ 表示；</p>
<p>8.从输入层到隐含层的权重矩阵用$\mathbf{U}_{xh}\in\mathbb{R}^{m\times d}$表示；</p>
<p>9.从隐含层到输出层的权重矩阵用$\mathbf{W}_{hy}\in\mathbb{R}^{r\times m}$表示；</p>
<p>10.输入层到隐含层的偏置向量用 $\mathbf{b_1} = \left [ b_{11},b_{12},\cdots ,b_{1m} \right ]^\mathrm{T}\in\mathbb{R}^m$ 表示；<br><!-- $\mathbf{b}_1 = \left[ b_{11}, b_{12}, \cdots, b_{1m} \right]^\mathrm{T} \in \mathbb{R}^m$ 表示； --></p>
<p>11.隐含层到输出层的偏置向量用 $\mathbf{b_y} = \left [ b_{y1},b_{y2},\cdots ,b_{yr} \right ]^\mathrm{T}\in\mathbb{R}^r$ 表示；<br><!-- $\mathbf{b}_y = \left [ b_{y1},b_{y2},\cdots ,b_{yr} \right ]^\mathrm{T}\in\mathbb{R}^r$表示； --></p>
<p>12.与第$n$个输入样本对应的第$n$个目标真实值为$\mathbf{o_{n}} = \left [ o_{n1},o_{n2},\cdots ,o_{nr} \right ]^\mathrm{T}\in\mathbb{R}^r$；</p>
<p>13.第$n$个样本真实值与网络输出之间的误差为 $\mathbf{e_n} = \left [ e_{n1},e_{n2},\cdots ,e_{nr} \right ]^\mathrm{T}\in\mathbb{R}^r$ 表示；<br><!-- $\mathbf{e}_n = \left [ e_{n1},e_{n2},\cdots ,e_{nr} \right ]^\mathrm{T}\in\mathbb{R}^r$; --></p>
<p>14.损失函数为$E$。</p>
<h2 id="2-2-前向传播"><a href="#2-2-前向传播" class="headerlink" title="2.2 前向传播"></a>2.2 前向传播</h2><p>第n个样本前向传播的隐含层神经网络模型线性求和可以搭建为</p>
<script type="math/tex; mode=display">
\left\{\begin{matrix}
neth_{1} = u_{11}x_{n1}+u_{12}x_{n2}+\cdots +u_{1d}x_{nd} + b_{11}\\
neth_{2} = u_{21}x_{n1}+u_{22}x_{n2}+\cdots +u_{2d}x_{nd} + b_{12}\\
\cdots \\
neth_{m} = u_{m1}x_{n1}+u_{m2}x_{n2}+\cdots +u_{md}x_{nd} + b_{1m}
\end{matrix}\right. \tag{1}</script><p>添加激活函数的隐含层神经网络模型为</p>
<script type="math/tex; mode=display">
\left\{\begin{matrix}
h_{1} = \psi_1 \left ( u_{11}x_{n1}+u_{12}x_{n2}+\cdots +u_{1d}x_{nd} + b_{11} \right )\\
h_{2} = \psi_2 \left ( u_{21}x_{n1}+u_{22}x_{n2}+\cdots +u_{2d}x_{nd} + b_{12} \right )\\
\cdots \\
h_{m} = \psi_m \left ( u_{m1}x_{n1}+u_{m2}x_{n2}+\cdots +u_{md}x_{nd} + b_{1m} \right )
\end{matrix}\right. \tag{2}</script><p>第1个样本前向传播的输出层神经网络模型可以搭建为</p>
<script type="math/tex; mode=display">
\left\{\begin{matrix}
nety_{n1} = w_{11}h_{1} + w_{12}h_{2}+\cdots +w_{1m}h_{m} + b_{y1}\\
nety_{n2} = w_{21}h_{1} + w_{22}h_{2}+\cdots +w_{2m}h_{m} + b_{y2}\\
\cdots \\
nety_{nr} = w_{r1}h_{1}+w_{r2}h_{2}+\cdots +w_{rm}h_{m} + b_{yr
}
\end{matrix}\right. \tag{3}</script><p>添加激活函数的输出层神经网络模型为</p>
<script type="math/tex; mode=display">
\left\{\begin{matrix}
y_{n1} = f_1 \left ( w_{11}h_{1} + w_{12}h_{2}+\cdots +w_{1m}h_{m} + b_{y1} \right )\\
y_{n2} = f_2 \left ( w_{21}h_{1} + w_{22}h_{2}+\cdots +w_{2m}h_{m} + b_{y2} \right )\\
\cdots \\
y_{nr} = f_r \left ( w_{r1}h_{1}+w_{r2}h_{2}+\cdots +w_{rm}h_{m} + b_{yr} \right )
\end{matrix}\right. \tag{4}</script><p>将上式写成紧凑形式：</p>
<script type="math/tex; mode=display">
\mathbf{neth} = \mathbf{U}_{xh}\mathbf{x}_n + \mathbf{b}_1 \tag {5}</script><script type="math/tex; mode=display">
\mathbf{h} = \mathbf{\Psi} \left (\mathbf{U}_{xh}\mathbf{x}_n + \mathbf{b}_1 \right ) \tag {6}</script><script type="math/tex; mode=display">
\mathbf{nety}_n = \mathbf{W}_{hy}\mathbf{h} + \mathbf{b}_y \tag {7}</script><script type="math/tex; mode=display">
\mathbf{y}_n = \mathbf{F} \left (\mathbf{W}_{hy}\mathbf{h} + \mathbf{b}_y \right ) \tag {8}</script><p>上式中，对于输入层到隐含层的权重矩阵 $\mathbf{U}_{xh}$、从隐含层到输出层的权重 $\mathbf{W}_{hy}$ 的形式如下：</p>
<script type="math/tex; mode=display">
\mathbf{U}_{xh}=\begin{bmatrix}
u_{11} & u_{12} & \cdots & u_{1i} & \cdots & u_{1d} \\
u_{21} & u_{22} & \cdots & u_{2i} & \cdots & u_{2d}\\
\vdots & \vdots & \ddots  & \vdots & \ddots & \vdots\\
u_{j1} & u_{j2} & \cdots & u_{ji} & \cdots & u_{jd}\\
\vdots & \vdots & \ddots  & \vdots & \ddots & \vdots\\
u_{m1} & u_{m2} & \cdots & u_{mi} & \cdots & u_{md}
\end{bmatrix}
\in
\mathbb{R}^{m\times d}</script><script type="math/tex; mode=display">
\mathbf{W}_{hy}=\begin{bmatrix}
w_{11} & w_{12} & \cdots & w_{1j} & \cdots & w_{1m} \\
w_{21} & w_{22} & \cdots & w_{2j} & \cdots & w_{2m}\\
\vdots & \vdots & \ddots  & \vdots & \ddots & \vdots\\
w_{k1} & w_{k2} & \cdots & w_{kj} & \cdots & w_{km}\\
\vdots & \vdots & \ddots  & \vdots & \ddots & \vdots\\
w_{r1} & w_{r2} & \cdots & w_{rj} & \cdots & w_{rm}
\end{bmatrix}
\in
\mathbb{R}^{r\times m}</script><h2 id="2-3-误差计算"><a href="#2-3-误差计算" class="headerlink" title="2.3 误差计算"></a>2.3 误差计算</h2><p>依据2.1节的定义，第$n$个样本误差之和为</p>
<script type="math/tex; mode=display">
E = \frac{1}{2} \mathbf{e}_n^\mathrm{T} \mathbf{e}_n \tag{9}</script><p>第$n$个样本的网络输出与真实值之间的误差为</p>
<script type="math/tex; mode=display">
\mathbf{e}_n = \mathbf{x}_n - \mathbf{y}_n \tag {10}</script><h2 id="2-4-误差反向传播"><a href="#2-4-误差反向传播" class="headerlink" title="2.4 误差反向传播"></a>2.4 误差反向传播</h2><p>神经网络的目的是寻找合适的$\mathbf{U}_{xh}$、$\mathbf{W}_{hy}$，使得网络的输出值与真实值之间的误差和$E$最小。因此一个自然的想法就是，通过$E$对这两个权重求导。</p>
<p>根据标量对矩阵的求导定义，可以得到：</p>
<script type="math/tex; mode=display">
\frac{\partial E}{\partial \mathbf{U}_{xh}}=\begin{bmatrix}
\frac{\partial E}{\partial u_{11}} & \frac{\partial E}{\partial u_{12}} & \cdots & \frac{\partial E}{\partial u_{1d}}\\ 
\frac{\partial E}{\partial u_{21}} & \frac{\partial E}{\partial u_{22}} & \cdots & \frac{\partial E}{\partial u_{2d}}\\ 
 \vdots & \vdots & \ddots  & \vdots\\ 
\frac{\partial E}{\partial u_{m1}} & \frac{\partial E}{\partial u_{m2}} & \cdots & \frac{\partial E}{\partial u_{md}}\\ 
\end{bmatrix}\in\mathbb{R}^{m\times d}\tag {11}</script><script type="math/tex; mode=display">
\frac{\partial E}{\partial \mathbf{W}_{xh}}=\begin{bmatrix}
\frac{\partial E}{\partial w_{11}} & \frac{\partial E}{\partial w_{12}} & \cdots & \frac{\partial E}{\partial w_{1m}}\\
\frac{\partial E}{\partial w_{21}} & \frac{\partial E}{\partial w_{22}} & \cdots & \frac{\partial E}{\partial w_{2m}}\\
 \vdots & \vdots & \ddots  & \vdots\\
\frac{\partial E}{\partial w_{r1}} & \frac{\partial E}{\partial w_{r2}} & \cdots & \frac{\partial E}{\partial w_{rm}}\\
\end{bmatrix}\in\mathbb{R}^{r\times m} \tag {12}</script><blockquote>
<p>这里为了便于理解，采用了简单粗暴的定义法，其他求导技巧暂时不讨论。</p>
</blockquote>
<h3 id="2-4-1-对输出层权重的求导"><a href="#2-4-1-对输出层权重的求导" class="headerlink" title="2.4.1 对输出层权重的求导"></a>2.4.1 对输出层权重的求导</h3><p>从直观角度来讲，误差和$E$与输出层更为邻近，因此我们先计算 $E$ 对 $\mathbf{W}_{hy}$ 的导数。</p>
<p><img src="/images/20201020/03.png" alt="03"></p>
<p>显然，$E$ 与 $\mathbf{W}_{hy}$ 之间的联系建立方式为：$\mathbf{W}_{hy} \rightarrow \mathbf{nety}_n \rightarrow \mathbf{y}_n \rightarrow E$。依据链式求导法则有</p>
<script type="math/tex; mode=display">
\begin{aligned}
\frac{\partial E}{\partial \mathbf{W}_{hy}} = \frac{\partial E}{\partial \mathbf{y}_{n}}\cdot\frac{\partial \mathbf{y}_{n}}{\partial \mathbf{nety}_n} \cdot \frac{\partial\mathbf{nety}_n}{\partial \mathbf{W}_{hy}}
\end{aligned} \tag{13}</script><p>因为一般情况下输出层的每个神经元激励函数都相同，这里我们假设采用sigmoid函数，选择隐含层第 $j$ 个神经元到输出层第 $k$ 个神经元的权重 $w_{kj}$ 求导。</p>
<script type="math/tex; mode=display">
y_{nk} = f_k \left ( w_{k1}h_{1}+w_{k2}h_{2}+\cdots + w_{kj}h_{j} + \cdots +w_{km}h_{m} + b_{yk} \right ) \tag{14}</script><p>$E$ 与 $w_{kj}$之间的联系建立方式为：$w_{kj} \rightarrow nety_{kj} \rightarrow y_{kj} \rightarrow E$，依据链式求导法则，有</p>
<script type="math/tex; mode=display">
\begin{aligned}
\frac{\partial E}{\partial w_{kj}} &= \frac{1}{2}\cdot\frac{\partial \left ( e_{n1}^2 + e_{n2}^2 + \cdots + e_{nk}+ \cdots + e_{nr}^2 \right )}{\partial w_{11}} \\
&= \frac{1}{2}\cdot\frac{\partial e_{nk}^2}{\partial w_{kj}} \\
&= \frac{1}{2} \cdot \frac{\partial e_{nk}^2}{\partial y_{nk}} \cdot \frac{\partial y_{nk}}{\partial nety_{nk}} \cdot \frac{\partial nety_{nk}}{\partial w_{kj}} \\
&= \frac{1}{2} \cdot \frac{\partial \left ( o_{nk} - y_{nk}\right )^2}{\partial y_{nk}}
   \cdot \frac{\partial f(nety_{nk})}{nety_{nk}}
   \cdot \frac{\partial (w_{k1}h_{1} + w_{k2}h_{2}+\cdots + w_{kj}h_{j} + \cdots +w_{km}h_{m} + b_{yk})}{\partial w_{kj}}\\
&= -(o_{nk} - y_{nk}) \cdot y_{nk}(1-y_{nk}) \cdot h_j
\end{aligned} \tag{15}</script><blockquote>
<p>sigmoid激励函数求导见附录。</p>
</blockquote>
<h3 id="2-4-2-对隐含层权重的求导"><a href="#2-4-2-对隐含层权重的求导" class="headerlink" title="2.4.2 对隐含层权重的求导"></a>2.4.2 对隐含层权重的求导</h3><p>同理，$E$ 与 $\mathbf{W}_{xh}$ 建立联系的方式为： $\mathbf{W}_{xh} \rightarrow \mathbf{neth} \rightarrow \mathbf{h} \rightarrow \mathbf{nety_{n}} \rightarrow \mathbf{y}_n \rightarrow E$。</p>
<p><img src="/images/20201020/04.png" alt="04"></p>
<p>假设隐含层的激活函数也为sigmoid函数。选择式(11)中从第 $i$ 个输入到第 $j$ 个隐含层神经元的权重 $u_{ji}$ 项求导，有</p>
<script type="math/tex; mode=display">
\begin{aligned}
\frac{\partial E}{\partial u_{ji}} = \frac{\partial E}{\partial h_j}\cdot \frac{\partial h_j}{\partial neth_j} \cdot \frac{\partial neth_j}{\partial u_{ji}}
\end{aligned} \tag{16}</script><p>接下来对上式等号右边的三项依次求解。将上式中的第一项展开，<strong>因为第 $j$ 个隐含层神经元输出 $h_j$ 是所有输出层神经元输入项中的一项</strong>，因此</p>
<script type="math/tex; mode=display">
\begin{aligned}
\frac{\partial E}{\partial {h_j}} &= \frac{1}{2} \cdot 
   \frac{\partial \left[(o_{n1} - y_{n1})^2 + (o_{n2} - y_{n2})^2 + \cdots + (o_{nr} - y_{nr})^2\right]}{\partial {h_j}}\\
&= \frac{1}{2} \cdot \frac{\partial \left[ {\sum\limits_{l = 1}^r (o_{nl} - y_{nl})^2 }  \right]}{\partial {h_j}}\\
 &= \frac{1}{2} \cdot \frac{\partial \left[ {\sum\limits_{l = 1}^r {e_{nl}^2} } \right]}{\partial {h_j}}
\end{aligned} \tag{17}</script><p>提取上式求和式中的单独一项，有</p>
<script type="math/tex; mode=display">
\begin{aligned}
\frac{1}{2} \cdot \frac{\partial e_{nl}^2}{\partial {h_j}} &= \frac{1}{2} \cdot \frac{\partial \left[ {\left( o_{nl} - y_{nl} \right)}^2 \right]}{\partial {h_j}}\\
 &= \frac{1}{2} \cdot \frac{\partial \left[ \left( o_{nl} - y_{nl} \right)^2 \right]}{\partial y_{nl}} \cdot \frac{\partial y_{nl}}{\partial nety_{nl}} \cdot \frac{\partial nety_{nl}}{\partial {h_j}}\\
 &= - \left( o_{nl} - y_{nl} \right) \cdot \frac{\partial y_{nl}}{\partial nety_{nl}}
    \cdot \frac{\partial (w_{l1}h_1 + w_{l2}h_2 + \cdots + w_{lj}h_j + \cdots+ w_{lm}h_m)}{\partial h_j}\\
 &=  - \left( o_{nl} - y_{nl} \right) \cdot y_{nl}\left( 1 - y_{nl} \right) \cdot w_{lj}
\end{aligned} \tag{18}</script><p>式(16)中等号右侧第二项即激活函数（本例为sigmoid函数）求导。</p>
<blockquote>
<p>sigmoid激活函数求导见附录。</p>
</blockquote>
<p>式(16)中等号右侧第三项的计算如下</p>
<script type="math/tex; mode=display">
\frac{\partial net{h_j}}{\partial u_{ji}} = \frac{\partial \left( u_{j1}x_{n1} + u_{j2}x_{n2} + \cdots + u_{ji}x_{ni} +  \cdots  + {u_{jd}}{x_{nd}} \right)}{\partial u_{ji}} = x_{ni} \tag{19}</script><p>由式(16)~(19)可得：</p>
<script type="math/tex; mode=display">
\frac{\partial E}{\partial u_{ji}} = \left[ {\sum\limits_{l = 1}^r { - \left( o_{nl} - y_{nl} \right) \cdot y_{nl}\left( 1 - y_{nl} \right) \cdot w_{lj}} } \right] \cdot \left[ {h_j}\left( 1 - {h_j} \right) \right] \cdot x_{ni} \tag{20}</script><h2 id="2-5-权重更新"><a href="#2-5-权重更新" class="headerlink" title="2.5 权重更新"></a>2.5 权重更新</h2><p>经过2.3~2.4节分别对输入层到隐含层权重 $\mathbf{U}_{xh}$、隐含层到输出层权重 $\mathbf{W}_{hy}$求导，现在可以得到相应的权重梯度更新算法为</p>
<script type="math/tex; mode=display">
u_{ji}^+ = u_{ji} - \eta  \frac{\partial E}{\partial u_{ji}}\tag{21}</script><script type="math/tex; mode=display">
w_{kj}^+ = w_{kj} - \xi \frac{\partial E}{\partial w_{kj}}\tag{22}</script><p>式中，$\eta$、$\xi$ 表示学习因子。</p>
<p>经过上述推导应该都能搞明白BP的基本思路是什么样子了，有兴趣的读者可以尝试推导两层或多层神经网络的权重梯度下降公式。</p>
<h1 id="3-附录"><a href="#3-附录" class="headerlink" title="3 附录"></a>3 附录</h1><h2 id="3-1-sigmoid函数求导"><a href="#3-1-sigmoid函数求导" class="headerlink" title="3.1 sigmoid函数求导"></a>3.1 sigmoid函数求导</h2><p>sigmoid函数表达式如下</p>
<script type="math/tex; mode=display">
y = \frac{1}{1 + e^{ - x}}\tag{23}</script><p>求导，有</p>
<script type="math/tex; mode=display">
\begin{aligned}
\frac{\textbf{d} y}{\textbf{d} x} &= \frac{e^{ - x}}{\left( 1 + e^{ - x} \right)^2}\\
&= \frac{1}{1+e^{-x}} \cdot (1-\frac{1}{1+e^{-x}})\\
 &= y\left( 1 - y \right)
\end{aligned}
\tag{24}</script><p>simoid函数及其导数图像如下图所示。<br><img src="/images/20201020/sigmoid.png" alt="05"></p>
<h2 id="3-2-tanh函数求导"><a href="#3-2-tanh函数求导" class="headerlink" title="3.2 tanh函数求导"></a>3.2 tanh函数求导</h2><p>tanh函数表达式如下</p>
<script type="math/tex; mode=display">
\tanh(x) = \frac{e^x-e^{-x}}{e^x+e^{-x}}
\tag{25}</script><p>求导得</p>
<script type="math/tex; mode=display">
\begin{aligned}
\frac{\textbf{d}\tanh(x)}{\textbf{d}x} 
&= \frac{(e^x+e^{-x})^2 - (e^x-e^{-x})(e^x-e^{-x})}{(e^x+e^{-x})^2}\\
&=\frac{(e^x+e^{-x})^2 - (e^x-e^{-x})^2}{(e^x+e^{-x})^2}\\
&= 1 - [\tanh(x)]^2
\end{aligned}
\tag{26}</script><p>tanh函数及其导数图像如下图所示。<br><img src="/images/20201020/tanh.png" alt="06"></p>
]]></content>
      <categories>
        <category>人工智能</category>
        <category>神经网络</category>
      </categories>
      <tags>
        <tag>Library</tag>
      </tags>
  </entry>
  <entry>
    <title>opencv_contrib的安装方法</title>
    <url>/archives/85e5f27f.html</url>
    <content><![CDATA[<p>介绍OpenCV_contrib的安装方法。</p>
<span id="more"></span>
<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0 前言"></a>0 前言</h1><p>在做基于深度学习的机器人无序分拣项目中，用到了Realsense，使用该相机做图像处理的相关工作还需要安装opencv_contrib。可以从GitHub上找到与opencv版本相对应的opencv_contrib库。</p>
<h1 id="1-安装方法"><a href="#1-安装方法" class="headerlink" title="1 安装方法"></a>1 安装方法</h1><p>下载完源码后，将解压后的文件放在opencv3.4.1文件夹中，依次执行下列命令：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> opencv3.4.1文件夹</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake -D OPENCV_EXTRA_MODULES_PATH=../opencv_contrib-3.4.1/modules ../../opencv-3.4.1 ..</span><br><span class="line">make -j4</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure></p>
<h1 id="2-可能遇到的一些问题"><a href="#2-可能遇到的一些问题" class="headerlink" title="2 可能遇到的一些问题"></a>2 可能遇到的一些问题</h1><p>不出意外的话，直接编译会出现一些问题，例如：<br><img src="/images/20200715/01.jpg" alt="01"></p>
<p>在这里，直接给出我针对出现的问题进行的三步操作：</p>
<ol>
<li><p>打开<strong>opencv-3.4.1</strong>文件夹下的<em>CMakeLists.txt</em>，添加包含目录，如下图所示。<br><img src="/images/20200715/02.jpg" alt="02"></p>
</li>
<li><p>对于opencv2/xfeatures2d/cuda.hpp: No such file or directory 类问题的解决方法是：将文件中的路径更改为绝对路径<sup>[1]</sup>。<br>如报错如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/local/arm/opencv-3.4.0/opencv_contrib-3.4.0/modules/xfeatures2d/include/opencv2/xfeatures2d.hpp:42:10: </span><br><span class="line">fatal error: /opencv2/xfeatures2d.hpp: No such file or directory</span><br><span class="line"> <span class="comment">#include &quot;/opencv2/xfeatures2d.hpp&quot;</span></span><br><span class="line">          </span><br><span class="line">compilation terminated.</span><br></pre></td></tr></table></figure>
<p>根据给的路径找到xfeature2d.hpp的文件并打开，找到第42行如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">40</span> <span class="meta">#<span class="keyword">ifndef</span> __OPENCV_XFEATURES2D_HPP__</span></span><br><span class="line"><span class="number">41</span> <span class="meta">#<span class="keyword">define</span> __OPENCV_XFEATURES2D_HPP__</span></span><br><span class="line"> </span><br><span class="line"><span class="number">42</span> <span class="meta">#<span class="keyword">include</span><span class="string">&quot;/opencv2/xfeatures2d.hpp</span></span></span><br></pre></td></tr></table></figure>
<p>将第42行中的路径修改为绝对路径。所有找不到的都可以按这种方法解决。</p>
</li>
<li><p>对于boostdesc_bgm.i的问题，直接下载到需要的文件夹，如下所示<sup>[1]</sup>。<br><img src="/images/20200715/03.jpg" alt="03"><br>这些文件的下载地址：<br>链接：<a href="https://pan.baidu.com/s/1pv2P8jn14im9IUDGorIuFg">https://pan.baidu.com/s/1pv2P8jn14im9IUDGorIuFg</a><br>提取码：2jnr</p>
</li>
</ol>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/weixin_44152895/article/details/102882502">https://blog.csdn.net/weixin_44152895/article/details/102882502</a></li>
<li><a href="https://blog.csdn.net/u012321968/article/details/106654012/">https://blog.csdn.net/u012321968/article/details/106654012/</a></li>
<li><a href="https://github.com/heyvision/Documents/blob/master/Install_procedure.md">https://github.com/heyvision/Documents/blob/master/Install_procedure.md</a></li>
</ol>
]]></content>
      <categories>
        <category>机器人控制</category>
        <category>专栏——基于深度学习的机器人无序分拣</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>OpenCV</tag>
      </tags>
  </entry>
  <entry>
    <title>科研利器—— VS Code + LaTeX</title>
    <url>/archives/f7fcf26c.html</url>
    <content><![CDATA[<p><img src=" /images/20200529/00.jpeg" width=50% /><br>介绍Windows环境下使用VS Code加LaTeX的配置方法。</p>
<span id="more"></span>
<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0 前言"></a>0 前言</h1><p>对于要写论文的科研人员来说，LaTeX是必不可少的神兵利器，但是LaTeX自带的TeX编辑器界面不够美观，之前用过TeX Studio，个人感觉还比较好用。但对于已经深陷Emacs快捷键不能自拔的我来说，当然还是VS Code更香！本文所用软件环境为：Windows + VS Code + LaTeX Workshop8.9.0 + TeXLive2020 + SumatraPDF。</p>
<p>哦，我还想说一点，对于一个新的VS Code用户来讲，如何打开VS Code的配置文件(settings.json)都是一个问题，好不容易打开了，照着网上好多的教程一顿操作，发现并不能用。（别问我怎么知道的，说多了都是泪…）Anyway，在这里，你可以学到最详细的配置方法。</p>
<h1 id="1-软件安装"><a href="#1-软件安装" class="headerlink" title="1 软件安装"></a>1 软件安装</h1><h2 id="1-1-VS-Code安装"><a href="#1-1-VS-Code安装" class="headerlink" title="1.1 VS Code安装"></a>1.1 VS Code安装</h2><p>这个直接从官网上下载就好，比较简单，就不介绍啦~</p>
<h2 id="1-2-TeXLive2020安装"><a href="#1-2-TeXLive2020安装" class="headerlink" title="1.2 TeXLive2020安装"></a>1.2 TeXLive2020安装</h2><h3 id="1-2-1-下载"><a href="#1-2-1-下载" class="headerlink" title="1.2.1 下载"></a>1.2.1 下载</h3><p>如果说你还不明白CTeX、LaTeX、TeXLive之间的关系，那我悄悄地告诉你，你装TeXLive就好了。如果你还想了解它们之间的关系，知乎上有大量的入门介绍，我就不再废话了。TeXLive已经更新到了2020版，为了高速下载TeXLive，可以从清华的镜像源下载，网址是<a href="https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/Images/">https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/Images/</a>。点进去之后下载下图中红色框圈出的版本即可。<br><img src="/images/20200529/01.png" alt="01"></p>
<h3 id="1-2-2-安装"><a href="#1-2-2-安装" class="headerlink" title="1.2.2 安装"></a>1.2.2 安装</h3><p>TeXLive2020的安装，相较于我曾经用的旧版本来说，可以说是非常简单了。将安装包解压之后，双击下图中标出的<strong>install-tl-windows</strong>，一路点击<strong>下一步</strong>即可。<br><img src="/images/20200529/02.png" alt="02"></p>
<h2 id="1-3-LaTeX-Workshop插件安装"><a href="#1-3-LaTeX-Workshop插件安装" class="headerlink" title="1.3 LaTeX Workshop插件安装"></a>1.3 LaTeX Workshop插件安装</h2><p>安装好TeXLive后，在VS Code的插件商店中搜索<em>latex</em>，安装出现的第一个插件<strong>LaTeX Workshop</strong>，当前版本是8.9.0。这个插件的作用是将<code>.tex</code>格式的文件语法高亮，并通过它来沟通LaTeX，完成相应的编译、预览等工作。</p>
<h2 id="1-4-SumatraPDF安装"><a href="#1-4-SumatraPDF安装" class="headerlink" title="1.4 SumatraPDF安装"></a>1.4 SumatraPDF安装</h2><h3 id="1-4-1-介绍"><a href="#1-4-1-介绍" class="headerlink" title="1.4.1 介绍"></a>1.4.1 介绍</h3><p>SumatraPDF是一个非常迷你的PDF阅读器，安装包只有大约9M的大小。我们用它来干嘛呢？当然是预览LaTeX生产的PDF咯。为什么不用自带的呢？有两点原因：第一，因为笔记本屏幕小，用自带的，源码和PDF预览就会各占一半屏幕，无论调节哪个，都会让另一个显示不全；第二，使用这个小的PDF阅读器，可以实现从<code>.tex</code>文件中的光标跳转到PDF文件中，从PDF文件的位置双击鼠标回跳到源码处。</p>
<h3 id="1-4-2-下载与安装"><a href="#1-4-2-下载与安装" class="headerlink" title="1.4.2 下载与安装"></a>1.4.2 下载与安装</h3><p>SumatraPDF可以从<a href="https://www.sumatrapdfreader.org/downloadafter.html">官网</a>下载，安装方式也很简单，不再赘述。</p>
<h1 id="2-VS-Code的设置方法"><a href="#2-VS-Code的设置方法" class="headerlink" title="2 VS Code的设置方法"></a>2 VS Code的设置方法</h1><h2 id="2-1-已踩过的坑"><a href="#2-1-已踩过的坑" class="headerlink" title="2.1 已踩过的坑"></a>2.1 已踩过的坑</h2><p>LaTeX Workshop就是沟通VS Code与LaTeX的桥梁，与其说是VS Code的设置，不如说是LaTeX workshop的设置方法。网上有很多配置方法，上来就让修改settings.json这个配置文件，对于新用户来讲，他哪知道如何打开这个文件。有的说，通过<code>Ctrl+Shift+P</code>可以在VS Code中搜索，但是搜索到后，打开的是<strong>default settings.json</strong>文件，这个文件是只读文件。如果你从电脑中搜索到<strong>settings.json</strong>这个文件打开，将相应的配置代码复制进去，我不知道你们是什么结果，反正我的是不能使用，因为复制进去之后都会有黄线警告。那么究竟如何才能正确配置呢？赏杯咖啡就告诉你啊~</p>
<h2 id="2-2-VS-Code编辑-tex初尝试"><a href="#2-2-VS-Code编辑-tex初尝试" class="headerlink" title="2.2 VS Code编辑.tex初尝试"></a>2.2 VS Code编辑.tex初尝试</h2><p>安装好软件后，我们打开<a href="https://www.elsevier.com/authors/author-schemas/latex-instructions">Elsevier的模板</a>，打开<em>cas-dc-template.tex</em>文件，<code>.tex</code>格式的文件即Latex的源码文件。如下所示：<br><img src="/images/20200529/02-1.png" alt="02-1"><br>在上图中，可以看到侧边栏多了<strong>TEX</strong>图标，点开，如下：<br><img src="/images/20200529/02-2.png" alt="02-2"></p>
<p>如果你已经跃跃欲试，那就点击<strong>Recipe:pdflatex→bibtex→pdflatex x2</strong>进行编译吧，编译完后，再点击<strong>View in VSCode tab</strong>就可以看到编译好的PDF了。<br><img src="/images/20200529/02-3.png" alt="02-3"></p>
<blockquote>
<p>Tip: 在PDF页面中Ctrl+单击可以跳转到源文件相应的位置哦~</p>
</blockquote>
<p>一般来讲，LaTeX装好后默认的编译方式是<strong>pdflatex</strong>，但是这种方式不能编译中文源码。对于中文源码，采用的是<strong>xelatex</strong>的编译方式。对于编译中文文档有两种方式，第一种：在中文源文件首行添加：<code>% !TEX program = xelatex</code>，如果有参考文献，可以再添加<code>% !BIB options = &quot;%DOCFILE%&quot;</code>。显然，这个操作不够智能，因此，我们第一步是，添加<strong>xelatex</strong>的编译方式(2.3节)。</p>
<blockquote>
<p>上述编译的方法来自<a href="https://github.com/James-Yu/LaTeX-Workshop/wiki/Compile#latex-recipe">官方Compile解释</a>.<br><img src="/images/20200529/02-4.png" alt="02-4"></p>
</blockquote>
<p>从上面VS Code中预览PDF可以看到，整块屏幕被三分天下，左边的编译之类的提示可以再点一下<code>TEX</code>关掉，但是tex文档和PDF预览两个同时存在，无论调节哪一个，小小的笔记本屏幕都无法同时满足二者清晰呈现。因此我们需要在外面链接一个PDF阅读器(2.4节)。</p>
<h2 id="2-3-编译方式的配置"><a href="#2-3-编译方式的配置" class="headerlink" title="2.3 编译方式的配置"></a>2.3 编译方式的配置</h2><p>从VS Code中左下角的齿轮，打开设置。</p>
<p><img src="/images/20200529/03.png" alt="03"></p>
<p>在打开设置后的页面中，搜索<em>tool</em>，找到<strong>Latex-workshop&gt;Latex:Tools</strong>，如下图所示。<br><img src="/images/20200529/04.png" alt="04"></p>
<p>点击上图中的<strong>在settings.json</strong>中编辑，打开后如下图所示。<br><img src="/images/20200529/05.png" alt="05"></p>
<p>OK，恭喜一下自己吧，终于成功打开了正确的<strong>settings.json</strong>文件。你可以看到，上图中的<strong>latex-workshop.latex.tools</strong>是没有黄色波浪线提示警告的，完美！</p>
<p>事实上，从网上看到的各位大佬的settings.json配置文件源码都是Latex Workshop中的一个个配置的组合。这里建议，你从VS Code的设置页面中搜索到他们配置源码前的配置项名称，如果下方有<strong>编辑settings.json</strong>的选项，点进去就可以进入配置文件。如果没有，直接在下方的输入一些字符或者添加一两项，然后再点到配置文件settings.json中，会发现，这个配置项的名称已经加载到了配置文件中，这时可以对照着网上的一些教程修改这个配置项中的内容，不建议将配置项的文件名称复制进去，这样会有警告，无法使配置生效。这才是<strong>打开settings.json的正确姿势</strong>。</p>
<p>上图中红框的代码就是用来编译中文源码的工具，具体如下：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;xelatex&quot;</span>,</span><br><span class="line">    <span class="string">&quot;command&quot;</span>: <span class="string">&quot;xelatex&quot;</span>,</span><br><span class="line">    <span class="string">&quot;args&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;-synctex=1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-interaction=nonstopmode&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-file-line-error&quot;</span>,</span><br><span class="line">        <span class="string">&quot;%DOCFILE%&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p>
<p>添加上xelatex工具后，再从设置中搜索<code>recipe</code>，再次进入settings.json，在<code>latex-workshop.latex.recipes</code>中你可以看到Latex Workshop默认的四种编译方式，在第一种编译方式前面添加如下代码：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;xelatex&quot;</span>,</span><br><span class="line">    <span class="string">&quot;tools&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;xelatex&quot;</span></span><br><span class="line">    ],</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;xelatex ➞ bibtex ➞ xelatex × 2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;tools&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;xelatex&quot;</span>,</span><br><span class="line">        <span class="string">&quot;bibtex&quot;</span>,</span><br><span class="line">        <span class="string">&quot;xelatex&quot;</span>,</span><br><span class="line">        <span class="string">&quot;xelatex&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p>
<p>效果如下图所示：<br><img src="/images/20200529/17.png" alt="17"></p>
<blockquote>
<p>说明1：上述代码添加了两种编译方式，name可以自己定义，第一种是直接用xelatex来编译一次，适用于没有参考文献的简短论文；第二种是包含参考文献编译在内的复杂编译，先编译一次，再编译一次参考文献(bibtex)，再编译两次，防止有时候编译没有完美完成（例如图注显示不全的情况）。<br>说明2：同理，你可以屏蔽相应的编译方式。</p>
</blockquote>
<p>添加上述代码并屏蔽前三种Recipe方式后，保存<strong>settings.json</strong>文件，重启VS Code，可以看到新的编译方式如下所示：<br><img src="/images/20200529/07.png" alt="07"></p>
<h2 id="2-4-PDF阅读器的设置"><a href="#2-4-PDF阅读器的设置" class="headerlink" title="2.4 PDF阅读器的设置"></a>2.4 PDF阅读器的设置</h2><h3 id="2-4-1-关联外部PDF阅读器"><a href="#2-4-1-关联外部PDF阅读器" class="headerlink" title="2.4.1 关联外部PDF阅读器"></a>2.4.1 关联外部PDF阅读器</h3><p>在2.2节已经解释过为什么要用外置的PDF阅读器，接下来，我们介绍如何配置。</p>
<p>在设置页面搜索<strong>viewer</strong>，找到<strong>Latex-workshop→View→Pdf：Viewer</strong>，将其设置为<strong>external</strong>，这样默认的预览的时候是外部的PDF阅读器。<br><img src="/images/20200529/08-0.png" alt="08-0"></p>
<p>接下来关联外部的PDF阅读器。同样在设置页面搜索<strong>viewer</strong>，找到<strong>Latex-workshop→View→Pdf→External→Viewer:Command</strong>，将SumatraPDF.exe的安装路径填在下方的方框里。<br><img src="/images/20200529/08.png" alt="08"></p>
<h3 id="2-4-2-前向搜索与反向搜索设置"><a href="#2-4-2-前向搜索与反向搜索设置" class="headerlink" title="2.4.2 前向搜索与反向搜索设置"></a>2.4.2 前向搜索与反向搜索设置</h3><p>前向搜索，即在tex文档中找到某句话后，可以直接跳转到PDF阅读器中相应的位置。反向搜索，即从PDF文件的位置跳转到源码处。<br>在设置页面搜索<strong>viewer</strong>，找到<strong>Latex-workshop→View→Pdf：Viewer: Args</strong>。<br><img src="/images/20200529/18.png" alt="18"></p>
<p>随意添加一项后(不需要照上图添加完全)，可以在<strong>settings.json</strong>文件中观察到自动添加了这一配置项，然后复制如下代码中[ ]中的内容：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;latex-workshop.view.pdf.external.viewer.args&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;-forward-search&quot;</span>,</span><br><span class="line">    <span class="string">&quot;%TEX%&quot;</span>,</span><br><span class="line">    <span class="string">&quot;%LINE%&quot;</span>,</span><br><span class="line">    <span class="string">&quot;-reuse-instance&quot;</span>,</span><br><span class="line">    <span class="string">&quot;-inverse-search&quot;</span>,</span><br><span class="line">    <span class="string">&quot;\&quot;C:/Users/YourName/AppData/Local/Programs/Microsoft VS Code/Code.exe\&quot; \&quot;C:/Users/YourName/AppData/Local/Programs/Microsoft VS Code/resources/app/out/cli.js\&quot; -r -g \&quot;%f:%l\&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;%PDF%&quot;</span>,</span><br><span class="line">],</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>注意：只需复制[ ]中的内容，并且注意不要随便打乱顺序，记得修改路径。保存后回到设置页面的对应配置项，就会发现配置项下面已经修改为和上图一样的配置。</p>
</blockquote>
<p>在设置页面搜索<strong>Synctex</strong>，再从设置页面里找到<strong>Latex-workshop→View→Pdf→External→Synctex:Command</strong>，同样填入SumatraPDF.exe的路径。<br><img src="/images/20200529/09.png" alt="09"></p>
<p>在设置页中找到<strong>Latex-workshop→View→Pdf→External→Synctex:Args</strong>。<br><img src="/images/20200529/10.png" alt="10"></p>
<p>随意添加一项后(不需要照上图添加完全)，可以在<strong>settings.json</strong>文件中观察到自动添加了这一配置项，然后复制如下代码中[ ]中的内容：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//下面这一行不用复制，只是说明修改Synctex:Command后会自动加入这一行</span></span><br><span class="line"><span class="string">&quot;latex-workshop.view.pdf.external.synctex.command&quot;</span>: <span class="string">&quot;C:\\Users\\&lt;YourName&gt;\\AppData\\Local\\SumatraPDF\\SumatraPDF.exe&quot;</span>,</span><br><span class="line"><span class="comment">//下面一行不用复制，自动生成的</span></span><br><span class="line"><span class="string">&quot;latex-workshop.view.pdf.external.synctex.args&quot;</span>: [</span><br><span class="line">    <span class="comment">//将下面内容复制到你的settings.json中，并修改路径</span></span><br><span class="line">    <span class="string">&quot;-forward-search&quot;</span>,</span><br><span class="line">    <span class="string">&quot;%TEX%&quot;</span>,</span><br><span class="line">    <span class="string">&quot;%LINE%&quot;</span>,</span><br><span class="line">    <span class="string">&quot;-reuse-instance&quot;</span>,</span><br><span class="line">    <span class="string">&quot;-inverse-search&quot;</span>,</span><br><span class="line">    <span class="string">&quot;\&quot;C:/Users/YourName/AppData/Local/Programs/Microsoft VS Code/Code.exe\&quot; \&quot;C:/Users/YourName/AppData/Local/Programs/Microsoft VS Code/resources/app/out/cli.js\&quot; -r -g \&quot;%f:%l\&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;%PDF%&quot;</span>,</span><br><span class="line"><span class="comment">//下面一行不用复制    </span></span><br><span class="line">],</span><br></pre></td></tr></table></figure></p>
<p>实现前向搜索的方式可为：</p>
<ol>
<li>在光标处，选择<strong>Navigate, select, and edit</strong>-&gt;<strong>SyncTeX from cursor</strong>，如下图。<br><img src="/images/20200529/12.png" alt="12"></li>
<li>按下<code>Ctrl+Alt+J</code>，直接跳转至PDF对应的地方。</li>
</ol>
<p>前向搜索的效果如下所示。</p>
<p><img src="/images/20200529/13.gif" alt="13"></p>
<blockquote>
<p>说明：为了演示效果，我才将VS Code和PDF阅读器各占一半屏幕，下同。</p>
</blockquote>
<p>在PDF中<strong>双击即可跳转到源码位置</strong>。反向搜索的效果如下所示：<br><img src="/images/20200529/16.gif" alt="16"></p>
<!-- 上面的设置方法来自[官方解释](https://github.com/James-Yu/LaTeX-Workshop/wiki/View#latex-workshopsynctexpath).
![11]( /images/20200529/11.png) -->
<h3 id="2-4-3-反向搜索的PDF阅读器设置"><a href="#2-4-3-反向搜索的PDF阅读器设置" class="headerlink" title="2.4.3 反向搜索的PDF阅读器设置"></a>2.4.3 反向搜索的PDF阅读器设置</h3><p>如果上述方法不能从PDF跳转至tex文档，还可以尝试下面的方法：<br>在这里，我们需要设置的是<strong>SumatraPDF.exe</strong>。打开SumatraPDF.exe，找到设置-&gt;选项：<br><img src="/images/20200529/14.png" alt="14"></p>
<p>点开后如下图所示：</p>
<p><img src="/images/20200529/15.png" alt="15"></p>
<p>在反向搜索设置里填入下方的<strong>一行超长代码</strong>（不是两行，注意和你自己的路径要对应好）：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;\&quot;C:/Users/YourName/AppData/Local/Programs/Microsoft VS Code/Code.exe\&quot; \&quot;C:/Users/YourName/AppData/Local/Programs/Microsoft VS Code/resources/app/out/cli.js\&quot; -r -g \&quot;%f:%l\&quot;&quot;</span></span><br></pre></td></tr></table></figure><br><!-- "C:\Users\YourName\AppData\Local\Programs\Microsoft VS Code\Code.exe" "C:\Users\YourName\AppData\Local\Programs\Microsoft VS Code\resources\app\out\cli.js" -r -g "%f:%l"
 --></p>
<h1 id="3-部分快捷键"><a href="#3-部分快捷键" class="headerlink" title="3 部分快捷键"></a>3 部分快捷键</h1><p>Ctrl+Alt+X：显示LaTeX面板(左侧编译命令面板和文档大纲)。<br>Ctrl+Alt+C：清除辅助文件<br>Ctrl+Alt+V：查看编译的pdf文件(预览)<br>Ctrl+Alt+J：正向搜索</p>
<h1 id="4-一点感悟"><a href="#4-一点感悟" class="headerlink" title="4 一点感悟"></a>4 一点感悟</h1><p>OK，到这里，本篇博客主体就结束了。有一个小的感受，新手找settings.json这个配置文件是真的难。直接把网上各位大佬的配置源码粘贴进来，总是有问题，这可能是由于软件版本更新后不太适用了。当然，我的这个教程也可能会过时，所以我都写明了软件版本。我认为，从设置页面里打开的settings.json或许可以直接从网上的各位大佬的配置文件源码中复制，有兴趣的可以多多尝试~</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://github.com/James-Yu/LaTeX-Workshop/wiki/Compile#latex-recipe">编译的官方解释</a></li>
<li><a href="https://github.com/James-Yu/LaTeX-Workshop/wiki/Compile#latex-recipe">正向搜索的官方解释</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/90526218">配置VScode编辑LaTeX及正反向搜索等设置</a></li>
<li><a href="https://www.bilibili.com/video/BV1JE411K7ij?from=search&amp;seid=14793213508677945757">一个直观的VS Code+Latex视频简介</a></li>
</ol>
]]></content>
      <categories>
        <category>工科生的基本功</category>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows修改按键的方法</title>
    <url>/archives/4c622d61.html</url>
    <content><![CDATA[<p>介绍Windows环境下修改按键的方法。</p>
<span id="more"></span>
<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0 前言"></a>0 前言</h1><p>因为比较习惯Emacs的操作快捷键，因此需要在Windows下将“CapsLock”改成“Ctrl”键，以方便操作。什么，你还想要Windows下配置Emacs的方法？用VS Code，再装个Emacs的插件就好咯~</p>
<h1 id="1-Windows下将“CapsLock”修改为“Ctrl”的操作步骤"><a href="#1-Windows下将“CapsLock”修改为“Ctrl”的操作步骤" class="headerlink" title="1 Windows下将“CapsLock”修改为“Ctrl”的操作步骤"></a>1 Windows下将“CapsLock”修改为“Ctrl”的操作步骤</h1><ol>
<li>Win+R键，打开运行对话框，输入<em>regedit</em>，打开注册表；</li>
<li>找到注册表<em>HKEY_LOCAL_MACHINE\SYSTEM\ Current ControlSet\ Control\ Keyboard Layout</em>；<br><img src="/images/20200505/01.png" alt="01"></li>
<li>新建文件<strong>Scancode Map</strong>;<br><img src="/images/20200505/02.png" alt="02"><br><img src="/images/20200505/03.png" alt="03"></li>
<li>打开文件在其中依次写入下图中的内容，直接输入数字即可，会自动分隔开。<br><img src="/images/20200505/04.png" alt="04"></li>
</ol>
<h1 id="2-二进制文件中写入内容的含义："><a href="#2-二进制文件中写入内容的含义：" class="headerlink" title="2 二进制文件中写入内容的含义："></a>2 二进制文件中写入内容的含义：</h1><p>第一行数据,前8组00是版本号和头部字节，默认不用改，如果没有可以自动加上。第二行的数据如下：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>0008</th>
<th>02 00 00 00 1D 00 3A 00</th>
<th>······</th>
</tr>
</thead>
<tbody>
<tr>
<td>相对地址</td>
<td>数据</td>
<td>每对数据所对应的ASCII字符</td>
</tr>
</tbody>
</table>
</div>
<p>接下来4组表示映射数，如图所示，我填写为02 00 00 00。其中“02”表示有一组映射。<br>若要映射多组，只需增加相应的值即可，如映射3组为”04”，映射5组为”06”，其最小为值为“02”，表示只映射一组。<br>再后边每4组数据代表一个映射，每一个映射格式如下：A B。<br>B映射为A，也就是说，我们按下B键，则相当于按下了原来的A键。<strong>00 1D</strong>表示<strong>Left Ctrl</strong>，<strong>00 3A</strong>表示<strong>CapsLock</strong>，因此将<em>CapsLock</em>修改为了<em>Left Ctrl</em>。</p>
<blockquote>
<p>注意：在注册表中输入时，需要将扫描码的高低字节交换一下。</p>
</blockquote>
<h1 id="3-撤销更改的方法"><a href="#3-撤销更改的方法" class="headerlink" title="3 撤销更改的方法"></a>3 撤销更改的方法</h1><p>如果需要撤销上面的更改，只需要将新建的<em>Scancode Map</em>二进制文件删除即可。</p>
<h1 id="4-键位表"><a href="#4-键位表" class="headerlink" title="4 键位表"></a>4 键位表</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Backspace 00 0E </span><br><span class="line">Caps Lock 00 3A </span><br><span class="line">Delete E0 53 </span><br><span class="line">End E0 4F </span><br><span class="line">Enter 00 1C </span><br><span class="line">Escape 00 01 </span><br><span class="line">HOME E0 47 </span><br><span class="line">Insert E0 52 </span><br><span class="line">Left Alt 00 38 </span><br><span class="line">Left Ctrl 00 1D </span><br><span class="line">Left Shift 00 2A </span><br><span class="line">Left Windows E0 5B </span><br><span class="line">Num Lock 00 45 </span><br><span class="line">Page Down E0 51 </span><br><span class="line">Page Up E0 49 </span><br><span class="line">Power E0 5E </span><br><span class="line">PrtSc E0 37 </span><br><span class="line">Right Alt E0 38 </span><br><span class="line">Right Ctrl E0 1D </span><br><span class="line">Right Shift 00 36 </span><br><span class="line">Right Windows E0 5C </span><br><span class="line">Scroll Lock 00 46 </span><br><span class="line">Sleep E0 5F </span><br><span class="line">Space 00 39 </span><br><span class="line">Tab 00 0F </span><br><span class="line">Wake E0 63 </span><br><span class="line">0 00 52 </span><br><span class="line">1 00 4F </span><br><span class="line">2 00 50 </span><br><span class="line">3 00 51 </span><br><span class="line">4 00 4B </span><br><span class="line">5 00 4C </span><br><span class="line">6 00 4D </span><br><span class="line">7 00 47 </span><br><span class="line">8 00 48 </span><br><span class="line">9 00 49 </span><br><span class="line">- 00 4A </span><br><span class="line">/* 00 37 </span><br><span class="line">. 00 53 </span><br><span class="line">/ 00 35 </span><br><span class="line">/+ 00 4E </span><br><span class="line">Enter E0 1C </span><br><span class="line">F1 00 3B </span><br><span class="line">F2 00 3C </span><br><span class="line">F3 00 3D </span><br><span class="line">F4 00 3E </span><br><span class="line">F5 00 3F </span><br><span class="line">F6 00 40 </span><br><span class="line">F7 00 41 </span><br><span class="line">F8 00 42 </span><br><span class="line">F9 00 43 </span><br><span class="line">F10 00 44 </span><br><span class="line">F11 00 57 </span><br><span class="line">F12 00 58 </span><br><span class="line">F13 00 64 </span><br><span class="line">F14 00 65 </span><br><span class="line">F15 00 66 </span><br><span class="line">Down E0 50 </span><br><span class="line">Left E0 4B </span><br><span class="line">Right E0 4D </span><br><span class="line">Up E0 48 </span><br><span class="line">Calculator E0 21 </span><br><span class="line">E-Mail E0 6C </span><br><span class="line">Media Select E0 6D </span><br><span class="line">Messenger E0 11 </span><br><span class="line">My Computer E0 6B </span><br><span class="line">’ ” 00 28 </span><br><span class="line">- _ 00 0C </span><br><span class="line">, &lt; 00 33 </span><br><span class="line">. &gt; 00 34 </span><br><span class="line">/ ? 00 35 </span><br><span class="line">; : 00 27 </span><br><span class="line">[ &#123; 00 1A </span><br><span class="line">\ | 00 2B </span><br><span class="line">] &#125; 00 1B </span><br><span class="line">` ~ 00 29 </span><br><span class="line">= + 00 0D </span><br><span class="line">0 ) 00 0B </span><br><span class="line">1 ! 00 02 </span><br><span class="line">2 @ 00 03 </span><br><span class="line">3 # 00 04 </span><br><span class="line">4 $ 00 05 </span><br><span class="line">5 % 00 06 </span><br><span class="line">6 ^ 00 07 </span><br><span class="line">7 &amp; 00 08 </span><br><span class="line">8 * 00 09 </span><br><span class="line">9 ( 00 0A </span><br><span class="line">A 00 1E </span><br><span class="line">B 00 30 </span><br><span class="line">C 00 2E </span><br><span class="line">D 00 20 </span><br><span class="line">E 00 12 </span><br><span class="line">F 00 21 </span><br><span class="line">G 00 22 </span><br><span class="line">H 00 23 </span><br><span class="line">I 00 17 </span><br><span class="line">J 00 24 </span><br><span class="line">K 00 25 </span><br><span class="line">L 00 26 </span><br><span class="line">M 00 32 </span><br><span class="line">N 00 31 </span><br><span class="line">O 00 18 </span><br><span class="line">P 00 19 </span><br><span class="line">Q 00 10 </span><br><span class="line">R 00 13 </span><br><span class="line">S 00 1F </span><br><span class="line">T 00 14 </span><br><span class="line">U 00 16 </span><br><span class="line">V 00 2F </span><br><span class="line">W 00 11 </span><br><span class="line">X 00 2D </span><br><span class="line">Y 00 15 </span><br><span class="line">Z 00 2C </span><br><span class="line">Close E0 40 </span><br><span class="line">Fwd E0 42 </span><br><span class="line">Help E0 3B </span><br><span class="line">New E0 3E </span><br><span class="line">Office Home E0 3C </span><br><span class="line">Open E0 3F </span><br><span class="line">Print E0 58 </span><br><span class="line">Redo E0 07 </span><br><span class="line">Reply E0 41 </span><br><span class="line">Save E0 57 </span><br><span class="line">Send E0 43 </span><br><span class="line">Spell E0 23 </span><br><span class="line">Task Pane E0 3D </span><br><span class="line">Undo E0 08 </span><br><span class="line">Mute E0 20 </span><br><span class="line">Next Track E0 19 </span><br><span class="line">Play/Pause E0 22 </span><br><span class="line">Prev Track E0 10 </span><br><span class="line">Stop E0 24 </span><br><span class="line">Volume Down E0 2E </span><br><span class="line">Volume Up E0 30 </span><br><span class="line">? - 00 7D </span><br><span class="line">E0 45 </span><br><span class="line">Next to Enter E0 2B </span><br><span class="line">Next to L-Shift E0 56 </span><br><span class="line">Next to R-Shift E0 73 </span><br><span class="line">DBE_KATAKANA E0 70 </span><br><span class="line">DBE_SBCSCHAR E0 77 </span><br><span class="line">CONVERT E0 79 </span><br><span class="line">NONCONVERT E0 7B </span><br><span class="line">Internet E0 01 </span><br><span class="line">iTouch E0 13 </span><br><span class="line">Shopping E0 04 </span><br><span class="line">Webcam E0 12 </span><br><span class="line">Back E0 6A </span><br><span class="line">Favorites E0 66 </span><br><span class="line">Forward E0 69 </span><br><span class="line">HOME E0 32 </span><br><span class="line">Refresh E0 67 </span><br><span class="line">Search E0 65 </span><br><span class="line">Stop E0 68 </span><br><span class="line">My Pictures E0 64 </span><br><span class="line">My Music E0 3C </span><br><span class="line">Mute E0 20 </span><br><span class="line">Play/Pause E0 22 </span><br><span class="line">Stop E0 24 </span><br><span class="line">+ (Volume up) E0 30 </span><br><span class="line">- (Volume down) E0 2E </span><br><span class="line">Media E0 6D </span><br><span class="line">Mail E0 6C </span><br><span class="line">Web/Home E0 32 </span><br><span class="line">Messenger E0 05 </span><br><span class="line">Calculator E0 21 </span><br><span class="line">Log Off E0 16 </span><br><span class="line">Sleep E0 5F </span><br><span class="line">Help(on F1 key) E0 3B </span><br><span class="line">Undo(on F2 key) E0 08 </span><br><span class="line">Redo(on F3 key) E0 07 </span><br><span class="line">Fwd (on F8 key) E0 42 </span><br><span class="line">Send(on F9 key) E0 43</span><br></pre></td></tr></table></figure>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/lhdalhd1996/article/details/90741092">Windows10 修改键位映射</a></li>
</ol>
]]></content>
      <categories>
        <category>工科生的基本功</category>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>文献翻译利器——自定义PDF阅读器+Saladict+Quicker</title>
    <url>/archives/67f620a2.html</url>
    <content><![CDATA[<p><img src=" /images/20200501/00.png" width=30% /><br>介绍使用自定义PDF阅读器+Saladict+Quicker做文献翻译的方法。</p>
<span id="more"></span>
<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0 前言"></a>0 前言</h1><p>我阅读英文文献，除去内容上的考量外，还有两个需求：</p>
<ol>
<li>准确、便捷地翻译；</li>
<li>方便地注释。</li>
</ol>
<p>第1点需求是本文主要讨论的内容。第2点可以通过福昕PDF阅读器中自定义快捷键，实现快速划线、添加文字注释等。</p>
<h1 id="1-翻译方式的对比"><a href="#1-翻译方式的对比" class="headerlink" title="1 翻译方式的对比"></a>1 翻译方式的对比</h1><p>在看英文论文的过程中，翻译一直都是一个痛点。这里将用过的翻译方法列出来做个比较。</p>
<h2 id="1-1-在线翻译"><a href="#1-1-在线翻译" class="headerlink" title="1.1 在线翻译"></a>1.1 在线翻译</h2><p>用网页版的在线翻译。诸如谷歌翻译、必应翻译等。这种的有一些问题，例如：当自己复制pdf中的文字时，自动断行没有办法改掉。然而，自动断行对于段落翻译的准确度是有很大影响的。网页翻译的另一个问题就是只能选择这一个翻译引擎。网页翻译每次打开的时候还需要选择翻译成哪种语言，找一找简体中文挺麻烦的。<br><img src="/images/20200501/01.png" alt="01"><br><img src="/images/20200501/02.png" alt="02"></p>
<h2 id="1-2-金山词霸"><a href="#1-2-金山词霸" class="headerlink" title="1.2 金山词霸"></a>1.2 金山词霸</h2><p>用金山词霸桌面版。该软件的一大优点是，可以将翻译的输入框在桌面侧边收起，通过快捷键隐藏与显示，在阅读pdf的时候也可以采用划译的方式。<br><img src="/images/20200501/03.png" alt="03"><br><img src="/images/20200501/04.gif" alt="04"></p>
<p>翻译大段文字时，弹出的框会遮挡文字，在页面底部会存在显示不全的问题，需要手动调整翻译显示的位置；用桌面侧边的输入，需要自己复制和粘贴，不便捷；翻译引擎也存在只有一种的问题。</p>
<h2 id="1-3-知云文献翻译"><a href="#1-3-知云文献翻译" class="headerlink" title="1.3 知云文献翻译"></a>1.3 知云文献翻译</h2><p>知云文献翻译。这个我也用过一段时间，下载知云后打开pdf，在选中后就直接翻译，对于翻译整篇文章很方便。但是需要微信关注公众号，通过转发朋友圈、邀请朋友使用等获取积分，像传销似的。目前使用不收费。因为目前我已经习惯了福昕PDF阅读器中的自定义快捷键，所以感觉用它做批注也不是很方便；它的翻译没有多种词典的聚合。<br><img src="/images/20200501/14.png" alt="14"></p>
<h2 id="1-4-Chrome-Saladict"><a href="#1-4-Chrome-Saladict" class="headerlink" title="1.4 Chrome+Saladict"></a>1.4 Chrome+Saladict</h2><p>用Saladict。Saladict是Chrome的一个插件。使用这个插件，在Chrome中浏览网页的时候只要选中，就会出现Saladict的图标，点一下这个图标，就可以看到翻译。这是操作方式上的便捷之处。Saladict同时集成了多种词典，同时显示，同时具有选择多种模式的功能，在学术模式下，翻译的准确度还不错，而且可以多种词典做对比。这是准确度上的优势。但是，只用Saladict，需要通过Saladict从Chrome中打开相应的论文才能用，这意味着我们无法在pdf中做标注。这在我看来是不可接受的。</p>
<h2 id="1-5-Saladict-Quicker"><a href="#1-5-Saladict-Quicker" class="headerlink" title="1.5 Saladict+Quicker"></a>1.5 Saladict+Quicker</h2><p>用Saladict+Quicker。看到Saladict的优势，怎么能不心动？因此，针对只能在Chrome中打开pdf的问题，就想如何能在pdf阅读器中使用Saladict？幸运地是，已经有大神给出了解决方案：Saladict+Quicker。Quicker是一个小软件，通过Quicker可以快速调出Saladict实现在Chrome浏览器外调用Saladict；Quicker还可以将pdf中的文字识别为文本文字（注意这种识别还是可以消除换行符的哦，其他功能自行了解叭）。此外，Quicker的调用方式也很简单，只需快速短暂地按一下<em>Ctrl</em>键就可以调出。因此，Quicker是一个非常好用的小软件。当它配合Saladict的时候简直是如虎添翼！复制翻译、截屏翻译的效果如下图所示。<br><img src="/images/20200501/05.gif" alt="05"><br><img src="/images/20200501/06.gif" alt="06"></p>
<h2 id="1-6-总结"><a href="#1-6-总结" class="headerlink" title="1.6 总结"></a>1.6 总结</h2><p>总结一下：使用自定义PDF阅读器，就选用Saladict+Quicker，次选金山词霸；不介意阅读器，有批注需求但没有形成固定的批注习惯，Saladict+Quicker或者知云文献翻译，前者聚合了多种词典，后者我记得没有(如果有，请告诉我)；没有批注需求，Chrome+Saladict，在浏览器中阅读就可以快速翻译。</p>
<h1 id="2-Saladict-Quicker的使用方法"><a href="#2-Saladict-Quicker的使用方法" class="headerlink" title="2 Saladict+Quicker的使用方法"></a>2 Saladict+Quicker的使用方法</h1><h2 id="2-1-Saladict的安装"><a href="#2-1-Saladict的安装" class="headerlink" title="2.1 Saladict的安装"></a>2.1 Saladict的安装</h2><p>关于Saladict的下载安装、以及使用方法，可以参考<a href="https://zhuanlan.zhihu.com/p/82773763">别找了，这才是你要的英文文献翻译神器！</a>。建议科学上网之后Google搜索<em>saladict</em>，第一个应该就是可以安装在Chrome的<a href="https://chrome.google.com/webstore/detail/%E6%B2%99%E6%8B%89%E6%9F%A5%E8%AF%8D-%E8%81%9A%E5%90%88%E8%AF%8D%E5%85%B8%E5%88%92%E8%AF%8D%E7%BF%BB%E8%AF%91/cdonnmffkdaoajfknoeeecmchibpmkmg?hl=en">链接</a>。不建议下载插件到本地后再添加，因为下载下来的可能不是最新版本，而且本地添加的打开Chrome时会有一个烦人的弹窗。</p>
<h2 id="2-2-Saladict设置"><a href="#2-2-Saladict设置" class="headerlink" title="2.2 Saladict设置"></a>2.2 Saladict设置</h2><p>在Chrome中打开【chrome://extensions/shortcuts】，找到【沙拉查词-聚合词典划词翻译扩展】设置，在【独立窗口中搜索剪贴板内容】设置快捷键 alt+L，右侧选择全局。这个设置就是为了使沙拉查词可以直接读取剪贴板的内容，避免复制粘贴到沙拉查词的繁琐操作。按下<code>Alt+L</code>键后，可以在桌面打开Saladict，如果没有，记得重启Chrome哦。<br><img src="/images/20200501/13.jpg" alt="13"></p>
<h2 id="2-3-Quicker的安装"><a href="#2-3-Quicker的安装" class="headerlink" title="2.3 Quicker的安装"></a>2.3 Quicker的安装</h2><p>从<a href="https://getquicker.net/">Quicker官网</a>下载软件并安装。</p>
<h2 id="2-4-Quicker添加沙拉查词"><a href="#2-4-Quicker添加沙拉查词" class="headerlink" title="2.4 Quicker添加沙拉查词"></a>2.4 Quicker添加沙拉查词</h2><ol>
<li>从<a href="https://getquicker.net/Share">Quicker动作库</a>搜索<strong>Saladict</strong>，如图所示。<img src="/images/20200501/07.png" alt="07"></li>
<li>点击该动作，并将它复制到剪贴板。<img src="/images/20200501/08.png" alt="08"></li>
<li>安装好Quicker后，快速按下<em>Ctrl</em>键，调出Quicker，在第一排最后图标的空白位置点击<code>+</code>，注意这个符号不是很明显，比较费眼神，然后选择粘贴已复制的动作。<img src="/images/20200501/09.png" alt="09"><img src="/images/20200501/10.png" alt="10"></li>
</ol>
<h2 id="2-5-复制翻译"><a href="#2-5-复制翻译" class="headerlink" title="2.5 复制翻译"></a>2.5 复制翻译</h2><p>使用复制翻译时，有的PDF阅读器在选中文字后会出现可以复制的小图标。如果没有这种图标，在Quicker图标处点右键，打开文本悬浮窗功能。<br><img src="/images/20200501/11.png" alt="11"></p>
<p>这样在选择文字后，会出现一个小图标，鼠标移动上去后点击一下沙拉查词的图标，在沙拉查词中就可以看到翻译结果啦。<br><img src="/images/20200501/12.gif" alt="12"></p>
<h2 id="2-6-截屏翻译"><a href="#2-6-截屏翻译" class="headerlink" title="2.6 截屏翻译"></a>2.6 截屏翻译</h2><p>使用截屏翻译，快速按下<em>Ctrl</em>键，调出Quicker，点击沙拉查词图标，截屏选择文字即可。<br><img src="/images/20200501/15.gif" alt="15"></p>
<blockquote>
<p>关于Saladict+Quicker使用方法的更多介绍，可以参考<a href="https://zhuanlan.zhihu.com/p/106650743">文献翻译利器：沙拉查词 + Quicker，这或许是 Windows 上最强的聚合翻译方案</a>。</p>
</blockquote>
<h1 id="3-福昕PDF阅读器自定义快捷键设置"><a href="#3-福昕PDF阅读器自定义快捷键设置" class="headerlink" title="3 福昕PDF阅读器自定义快捷键设置"></a>3 福昕PDF阅读器自定义快捷键设置</h1><p>翻译设置好后，剩下的就是阅读器的快捷键设置了。福昕PDF快捷键设置方法如下(以高亮为例)：<br>1.在标签栏空白处右键选择<code>定制功能区</code><br><img src="/images/20200501/16.jpg" alt="16"></p>
<p>2.依次选择<code>键盘</code>-&gt;<code>注释</code>-&gt;<code>高亮</code>，在<code>输入新快捷键</code>那里按下<code>Alt+H</code>，点<code>指派</code>，再点<code>确定</code>即可。<br><img src="/images/20200501/17.png" alt="17"></p>
<p>3.我的自定义快捷键设置如下：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>快捷键</th>
<th>含义</th>
<th>快捷键</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>Alt+H</td>
<td>高亮</td>
<td>Alt+C</td>
<td>下划线</td>
</tr>
<tr>
<td>Alt+T</td>
<td>文本框</td>
<td>Alt+R</td>
<td>矩形框</td>
</tr>
<tr>
<td>Alt+Z</td>
<td>横线</td>
<td>Alt+N</td>
<td>注释框</td>
</tr>
</tbody>
</table>
</div>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://github.com/crimx/ext-saladict/issues/493">技巧分享：Quicker 调用 Saladict 实现全局『文本翻译、截图翻译、复制翻译、触边翻译』</a></li>
<li><a href="https://pencilq.com/54/">文献翻译利器：沙拉查词 + Quicker，这或许是 Windows 上最强的聚合翻译方案</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/106650743">文献翻译利器：沙拉查词 + Quicker，这或许是 Windows 上最强的聚合翻译方案</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/82773763">别找了，这才是你要的英文文献翻译神器！</a></li>
</ol>
]]></content>
      <categories>
        <category>工科生的基本功</category>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>Saladict</tag>
      </tags>
  </entry>
  <entry>
    <title>科氏力与科式加速度介绍</title>
    <url>/archives/828ce1d.html</url>
    <content><![CDATA[<p><img src=" /images/20200314/00.gif" width=30% /><br>聊聊科氏力与科式加速度～<br><span id="more"></span></p>
<h1 id="1-科氏力简介"><a href="#1-科氏力简介" class="headerlink" title="1 科氏力简介"></a>1 科氏力简介</h1><p>科氏力，全称科里奥利力，是以牛顿力学为基础的。1835年，法国气象学家和工程师科里奥利提出，为了描述旋转体系的运动，需要在运动方程中引入一个假想的力，这就是科里奥利力。引入科里奥利力之后，人们可以像处理惯性系中的运动方程一样简单地处理旋转体系中的运动方程，大大简化了旋转体系的处理方式。由于人类生活的地球本身就是一个巨大的旋转体系，因而科里奥利力很快在流体运动领域取得了成功的应用<sup>[1]</sup>。</p>
<h1 id="2-科氏力与科式加速度的推导"><a href="#2-科氏力与科式加速度的推导" class="headerlink" title="2 科氏力与科式加速度的推导"></a>2 科氏力与科式加速度的推导</h1><p>让我们开始正题吧！假定有一个圆盘，在这个圆盘的一条半径上有甲、乙两人面对面站立。因为斗地主输了，他们的脚底被第三人丙用胶水粘在了圆盘上。然后丙就跳下了圆盘，让圆盘以角速度 $\pmb\omega$ 转了起来。这样，甲和乙也跟着圆盘在转。这时，丙在圆盘外的惯性系里站好笑嘻嘻地看着他俩为科学献身。</p>
<p>过了一会儿，丙说：“傻站着干嘛？甲，你给乙从圆盘上扔个小球，看能不能打到他。”<br>甲心里默默地想：都怪乙，上来就出王炸，你固定在圆盘上都不能动，看我用小球打飞你！<br>然后甲就朝乙扔了一个质量为 $m$ 的小球，小球喷射着复仇的火花滴溜溜地朝着乙飞去。<br>乙慌了：妈呀，这撞到了我必死无疑啊，诸神保佑，诸神保佑！<br><img src="/images/20200314/01.gif" alt="01"></p>
<p>上帝就听到了他的祈祷，派科里奥利过来看看，然后乙就看到那小球球逐渐地越来越偏，狂笑不已：“看到没？我有神之力相助！”<br>丙在外看着，不乐意了：“甲，你怎么放水？”<br>甲也懵了：我特喵没有放水啊，明明朝着乙扔的啊？难道真有神之力将小球给拽跑了？<br>科里奥利本来在和牛顿喝茶，被突然安排过来，心里不爽，就朝着甲微微一笑：小甲呀，你这样扔是永远打不到他滴！你看，是这么回事：</p>
<p>上图中，黄色的虚线表示甲掷出小球时的方向，红色的线表示小球的实际运动轨迹。很明显，从甲的角度来看，有一个向右的“神之力”将小球拽跑偏了；但从丙的“上帝视角”来看，并没有这个“神之力”将小球拉偏导致打击乙失败，小球跑偏是由于离开甲时具有旋转运动的惯性导致的。因此，“神之力”是在旋转的非惯性系中才观察到的。</p>
<p>小甲，你跳出来，想象你是丙，以圆盘的径向( $r$ )和切向( $t$ )建立坐标系，从速度角度来分析：<br><img src=" /images/20200314/02.jpeg" width=50% /></p>
<p>在上图中，假设小球以极短的时间 d$t$ 从 $A$ 运动到 $B$ 点，则转过的微小角度 $\theta$ 满足：</p>
<script type="math/tex; mode=display">\theta = \omega \text{d}t   \tag{1}</script><p>因为 $\theta$ 很小，因此：</p>
<script type="math/tex; mode=display">\sin\theta = \sin\omega \text{d}t \approx \omega \text{d}t    \tag{2}</script><script type="math/tex; mode=display">\cos\theta = \cos\omega \text{d}t \approx 1    \tag{3}</script><p>小球从 $A$ 运动到 $B$ 点的过程中，径向速度一直是 $\pmb v$，因此有</p>
<script type="math/tex; mode=display">\pmb r_1 = \pmb r_0 + \pmb v\text{d}t \tag{4}</script><p>式中，$OA = \pmb r_0$, $OB = \pmb r_1$。</p>
<p>在 $A$ 点的速度有：</p>
<script type="math/tex; mode=display">\pmb v_{rA} = \pmb v  \tag{5}</script><script type="math/tex; mode=display">\pmb v_{tA} =  \omega   r_0 \tag{6}</script><p>在 $B$ 点的速度有：</p>
<script type="math/tex; mode=display">\pmb v_{rB} =  v\cos\theta - \omega r_1 \sin\theta  \\
=  v - \omega  r_1 \omega \text{d}t\\
=  v - \omega ( r_0 +  v\text{d}t)\omega \text{d}t\tag{7}</script><script type="math/tex; mode=display">\pmb v_{tB} =  v \sin\theta + \omega r_1 \cos\theta \\
= v\omega\text{d}t + \omega( r_0 +  v\text{d}t)\tag{8}</script><p>因此，可以求得加速度：</p>
<script type="math/tex; mode=display">\pmb a_r = \frac{ v_{rB} -  v_{rA}}{\text{d}t}\\
=-\omega^2r_0+O(\text{d}t)  \tag{9}</script><script type="math/tex; mode=display">\pmb a_t = \frac{v_{tB}-v_{tA}}{\text{d}t}\\
=2 \omega v \tag{10}</script><p>小甲呀，你这回知道了吧，丙看到小球的径向是有向心加速度 $\omega^2r_0$，方向指向圆心；在切向是有大小为 $2\omega v$，方向为$\pmb\omega\times\pmb v$的“神之加速度”滴！你看到的那个力，它的计算公式为：</p>
<script type="math/tex; mode=display">\pmb F = -2m\pmb\omega\times\pmb v  \tag{11}</script><p>上帝听到忍不住了：小科，你装什么装。你就想说你就是那个神呗！</p>
<p>科里奥利力来自于物体运动所具有的惯性，在旋转体系中进行直线运动的质点，由于惯性的作用，有沿着原有运动方向继续运动的趋势，但是由于体系本身是旋转的，在经历了一段时间的运动之后，体系中质点的位置会有所变化，而它原有的运动趋势的方向，如果以旋转体系的视角去观察，就会发生一定程度的偏离。<br>在惯性系中，其实是没有科氏力的，在切向存在科式加速度 $\pmb a_t = 2\pmb\omega\times\pmb v$；在旋转的非惯性系中，可以观察到科氏力 $\pmb F = -2m\pmb\omega\times\pmb v$。科里奥利加速度的方向与科里奥利力的方向相反。这是因为，科里奥利加速度是在惯性系中观察到的，由作用力产生；而科里奥利力则是在转动的参考系中观察到的，它产生的加速度是相对于非惯性系而言的。不能认为科里奥利加速度是由科里奥利力产生的<sup>[1]</sup>。</p>
<h1 id="3-讨论"><a href="#3-讨论" class="headerlink" title="3 讨论"></a>3 讨论</h1><p>通过上面的讨论，知道了科里奥利力与科式加速度，但是上述推导过程中，个人认为不是特别严谨，尤其是对于科氏力的方向与科式加速度的方向有一些模糊，只是给出了结论。如果你有非常严谨的推导方法，欢迎告诉我～</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/%E7%A7%91%E9%87%8C%E5%A5%A5%E5%88%A9%E5%8A%9B">科里奥利力-维基百科</a></li>
<li><a href="https://www.youtube.com/watch?v=hrIXgbbDB7M">Derivation of Coriolis Acceleration</a></li>
<li><a href="http://blog.udn.com/bendokt4yv5/105329780">科氏力是啥咪？</a></li>
</ol>
]]></content>
      <categories>
        <category>工科生的基本功</category>
        <category>基本数学知识</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>数学基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下VS Code的设置方法</title>
    <url>/archives/fcc8ee58.html</url>
    <content><![CDATA[<p><img src=" /images/20200308/00.png" width=20% /><br>本篇来介绍一下处于编辑器排行榜首的VS Code的个人设置。<br><span id="more"></span></p>
<h1 id="1-VS-Code简介"><a href="#1-VS-Code简介" class="headerlink" title="1. VS Code简介"></a>1. VS Code简介</h1><p>VS Code是一款由微软开发的免费编辑器，用过它的人都说好。在2018年的时候，VS Code超越了Visual Studio成为全球使用最多的编辑器。最近大半年的时间来，自己用的是Emacs来写代码，在接触VS Code后，果断弃掉Emacs。对我而言，Emacs最香的地方在于：习惯之后，敲代码，手不离键盘是真的舒服；Emacs最大的痛点是：学习的成本过高，太多的设置难找，自己又不会相应的语法规则，用别人的配置好的包后每次打开C++都会莫名其妙的加载一堆东西，而这个时间又很长，差不多一分钟的时间都在等待。这就意味着，每天我只要用emacs打开C++，就别再想关掉它了，这不是反人类吗？因此，在了解到VS Code可以配置Emacs的快捷键后，而且几乎秒开cpp文件后，果断转身拥抱VS Code～</p>
<h1 id="2-基本设置"><a href="#2-基本设置" class="headerlink" title="2. 基本设置"></a>2. 基本设置</h1><h2 id="2-1-背景色的修改"><a href="#2-1-背景色的修改" class="headerlink" title="2.1 背景色的修改"></a>2.1 背景色的修改</h2><p>打开<cite>File</cite>-&gt;<cite>Preferences</cite>-&gt;<cite>Settings</cite>，从搜索框中输入<code>color theme</code>，然后可以在Workbench：Color Theme中可以选择相应的背景。<br><img src="/images/20200308/01.png" alt="01"></p>
<h2 id="2-2-字体字号的设置"><a href="#2-2-字体字号的设置" class="headerlink" title="2.2 字体字号的设置"></a>2.2 字体字号的设置</h2><p>仍然在<cite>File</cite>-&gt;<cite>Preferences</cite>-&gt;<cite>Settings</cite>中，选择<cite>Text Editor</cite>-&gt;<cite>Font</cite>，按照个人喜好设置吧～<br><img src="/images/20200308/02.png" alt="02"></p>
<h2 id="2-3-关闭右侧的代码缩略显示"><a href="#2-3-关闭右侧的代码缩略显示" class="headerlink" title="2.3 关闭右侧的代码缩略显示"></a>2.3 关闭右侧的代码缩略显示</h2><p>因为屏幕空间本来就有限，尤其是小屏笔记本上，所以VSCode右侧的代码缩略非常占地方。这一点在分屏的时候，体验会更糟糕！因此，我们将它关掉！关掉！<br>在<cite>File</cite>-&gt;<cite>Preferences</cite>-&gt;<cite>Settings</cite>中，从搜索框输入<code>mini</code>，然后在<cite>Editor&gt;Minimap:Enabled</cite>下方，取消勾选。<br><img src="/images/20200308/03.png" alt="03"></p>
<h2 id="2-4-自动换行的设置"><a href="#2-4-自动换行的设置" class="headerlink" title="2.4 自动换行的设置"></a>2.4 自动换行的设置</h2><p>VS Code默认显示内容不会对着屏幕的宽度变化而自动换行，这在左右分屏显示的时候，体验也是极其糟糕的，因此需要进行自动换行的设置。有两种方法可以实现：</p>
<ol>
<li>默认情况下按快捷键<code>Alt+Z</code>，可以实现显示内容随着窗口屏幕的宽度自动换行，再按下可以恢复原来的单行显示。</li>
<li>我们更想要的是默认情况下进行自动换行。这可以在<cite>File</cite>-&gt;<cite>Preferences</cite>-&gt;<cite>Settings</cite>中，输入<code>wordWrap</code>，将文本的折行设置为<code>on</code>。<br><img src="/images/20200308/04.png" alt="04"></li>
</ol>
<h2 id="2-5-设置Google-C-代码风格"><a href="#2-5-设置Google-C-代码风格" class="headerlink" title="2.5 设置Google C++代码风格"></a>2.5 设置Google C++代码风格</h2><h3 id="2-5-1-设置方法"><a href="#2-5-1-设置方法" class="headerlink" title="2.5.1 设置方法"></a>2.5.1 设置方法</h3><p>李开复曾经评价Google的代码规范是最好用的，我在用了大半年后，也觉得非常不错，整洁美观。在<cite>File</cite>-&gt;<cite>Preferences</cite>-&gt;<cite>Settings</cite>中，输入<code>clang-format</code>，将<cite>C_Cpp.clang_format_fallbackStyle</cite>的值从<cite>Visual Studio</cite>修改为<code>Google</code>。<br><img src="/images/20200308/05.png" alt="05"></p>
<h3 id="2-5-2-代码自动对齐"><a href="#2-5-2-代码自动对齐" class="headerlink" title="2.5.2 代码自动对齐"></a>2.5.2 代码自动对齐</h3><p>设置好代码风格后，对于没有按该代码风格写的代码，我们可以快速将其修改掉。打开相应的文件，选中代码，然后按下快捷键<code>Ctrl+Shift+I</code>(Ubuntu环境下)，可以将代码快速自动对齐，强迫症的治愈利器！</p>
<h3 id="2-6-自动缩进设置"><a href="#2-6-自动缩进设置" class="headerlink" title="2.6 自动缩进设置"></a>2.6 自动缩进设置</h3><p>VS Code的默认代码缩进为4个空格，我习惯用2个空格，修改方式：在<em>File</em>-&gt;<em>Preferences</em>-&gt;<em>Settings</em>中，输入<code>tab size</code>，将4改为2。<br><img src="/images/20200308/05_2.png" alt="05_2"></p>
<h1 id="3-自定义快捷键的设置方法"><a href="#3-自定义快捷键的设置方法" class="headerlink" title="3. 自定义快捷键的设置方法"></a>3. 自定义快捷键的设置方法</h1><h2 id="3-1-基本设置"><a href="#3-1-基本设置" class="headerlink" title="3.1 基本设置"></a>3.1 基本设置</h2><p>这里采用Emacs的快捷键方式。要用这种风格的快捷键也很简单，在插件搜索框里搜索Emacs，然后安装第一个Emacs插件即可。</p>
<h2 id="3-2-一些冲突快捷键的解决方案"><a href="#3-2-一些冲突快捷键的解决方案" class="headerlink" title="3.2 一些冲突快捷键的解决方案"></a>3.2 一些冲突快捷键的解决方案</h2><h3 id="3-2-1-Ctrl-Space"><a href="#3-2-1-Ctrl-Space" class="headerlink" title="3.2.1 Ctrl+Space"></a>3.2.1 Ctrl+Space</h3><p>在Ubuntu里安装搜狗输入法后，切换输入法的快捷键<code>Ctrl+Space</code>与Emacs的<cite>mark set</cite>命令相冲突，导致无法选中文本。选择输入法的配置，注意不是搜狗输入法的设置，如下图所示：<br><img src="/images/20200308/06.png" alt="06"><br>原谅我按下截图键后，菜单就会消失，所以图片不是清晰的。选择<cite>configure</cite>，然后将输入法的<code>Ctrl+Space</code>修改为<code>Ctrl+Shift</code>，或者修改为你喜欢的方式。<br><img src="/images/20200308/07.png" alt="07"></p>
<blockquote>
<p>如果还不清楚，可以参考<a href="https://www.cnblogs.com/dotnetcrazy/p/9412245.html">Linux下搜狗输入法和快捷键Ctrl+Space冲突的解决</a>.<br>如果每次打开都是搜狗输入法的设置，可以Log Out一下。</p>
</blockquote>
<h3 id="3-2-2-Alt-V"><a href="#3-2-2-Alt-V" class="headerlink" title="3.2.2 Alt+V"></a>3.2.2 Alt+V</h3><p>在Emacs中，<code>Alt+V</code>是向上翻屏的快捷键，但是在VS Code里该快捷键会打开菜单栏的<cite>View</cite>菜单。打开<cite>File</cite>-&gt;<cite>Preferences</cite>-&gt;<cite>Keyboard Shortcuts</cite>，在搜索框中输入<code>Alt+V</code>，双击<cite>emacs.cursorPageUp</cite>，输入<code>Alt+C</code>，并按回车确定，就将emacs原来的<code>Alt+V</code>修改为<code>Alt+C</code>。</p>
<blockquote>
<p>说明：快捷键的修改方法都与此类似，下文直接介绍快捷键的绑定。</p>
</blockquote>
<h3 id="3-2-3-其他快捷键的修改"><a href="#3-2-3-其他快捷键的修改" class="headerlink" title="3.2.3 其他快捷键的修改"></a>3.2.3 其他快捷键的修改</h3><div class="table-container">
<table>
<thead>
<tr>
<th>Name</th>
<th>Key</th>
<th>中文说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Files: New Untitled File</td>
<td>C-x C-b</td>
<td>打开新文件</td>
</tr>
<tr>
<td>View: Toggle Activity Bar Visibility</td>
<td>Alt+B</td>
<td>最左侧的活动标签栏是否显示</td>
</tr>
<tr>
<td>Go to Definition</td>
<td>F12</td>
<td>转到定义</td>
</tr>
<tr>
<td>Go to Declaration</td>
<td>Ctrl+F12</td>
<td>转到声明</td>
</tr>
<tr>
<td>Go back</td>
<td>Ctrl+Alt+-</td>
<td>从函数跳转处返回</td>
</tr>
<tr>
<td>Focus Terminal</td>
<td>Ctrl+x J</td>
<td>切换到终端</td>
</tr>
<tr>
<td>“emacs.cursorWordRight”</td>
<td>Ctrl+Alt+F</td>
<td>光标向右移动一个词</td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<p>注意：关于Emacs的一些快捷键使用方法可以参考<a href="https://www.jianshu.com/p/8b4e1f77b686">vscode emacs 快捷键</a>。<br>说明：上面的链接中不一定所有的快捷键都有效，但是可以参考他的设置方法来做一些设置。</p>
</blockquote>
<h2 id="3-3-CapsLock键改为Ctrl键"><a href="#3-3-CapsLock键改为Ctrl键" class="headerlink" title="3.3 CapsLock键改为Ctrl键"></a>3.3 CapsLock键改为Ctrl键</h2><p>打开一个终端，输入<code>sudo gedit ~/.Xmodmap</code>，打开后在文件中写入：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">remove Lock = Caps_Lock</span><br><span class="line">keysym Caps_Lock = Control_L</span><br><span class="line">add control = Control_L</span><br></pre></td></tr></table></figure><br>保存关闭后，在终端中执行<code>xmodmap ~/.Xmodmap</code>。Ubuntu18.04 中设置开机自启动的方法：<br>在终端中执行 <code>gnome-session-properties</code>。打开后新增一条，如下所示：<br><img src="/images/20220308/08.png" alt="08"></p>
<blockquote>
<p>Note: 在Ubuntu20.04中，需要将上图中的命令写为 <code>xmodmap /home/YOURNAME/.Xmodmap</code>.</p>
</blockquote>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/weixin_42689147/article/details/87366004">vsCode中如何根据屏幕宽度自动换行</a></li>
<li><a href="https://blog.csdn.net/sinat_34524528/article/details/85878592">更改 VS Code C++ 默认代码风格为 Google C++ Style</a></li>
<li><a href="https://www.cnblogs.com/xiaopohou/articles/6572070.html">vscode 代码对齐快捷键</a></li>
<li><a href="https://www.jianshu.com/p/8b4e1f77b686">vscode emacs 快捷键</a></li>
</ol>
]]></content>
      <categories>
        <category>工科生的基本功</category>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>ROS仿真揭秘——七自由度机器人(五)</title>
    <url>/archives/5258b4f6.html</url>
    <content><![CDATA[<p><img src=" /images/20200227/00.gif" width=30% /><br>尝试一下如何用Python发布消息以控制机器人运动<br><span id="more"></span></p>
<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0 前言"></a>0 前言</h1><p>在前面的几篇博客中，我们介绍了七自由度机器人是如何运动的，解释了七自由度机器人的URDF模型描述文件，也讲解了用自带的控制器来控制七自由度机器人的运动。到目前为止，我们知道了如何通过发布topic来控制机器人运动，但是每次从终端里发布消息也未免太不方便了。因此，这篇博客我们尝试写一个Python脚本，通过这个脚本来发布topic控制机器人运动。</p>
<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h1><p>在前面的博客中已经介绍了当在Gazebo中运行机器人仿真后，具有的topic列表如下：<br><img src="/images/20200227/01.png" alt="01"></p>
<p>我们知道通过发布topic控制机器人运动的方式如下(以joint4为例)：<br><img src="/images/20200227/02.gif" alt="02"></p>
<h1 id="2-用Python来控制机器人运动"><a href="#2-用Python来控制机器人运动" class="headerlink" title="2 用Python来控制机器人运动"></a>2 用Python来控制机器人运动</h1><h2 id="2-1-Python脚本的编写"><a href="#2-1-Python脚本的编写" class="headerlink" title="2.1 Python脚本的编写"></a>2.1 Python脚本的编写</h2><p>先来编写发布消息的Python脚本。打开<code>seven_dof_arm_gazebo/scripts</code>文件夹，并在该文件夹下新建 <em>main.py</em> 文件。文件内容的编写参考<a href="http://wiki.ros.org/ROS/Tutorials/WritingPublisherSubscriber%28python%29">Writing a Simple Publisher and Subscriber (Python)</a>。这里直接给出内容：<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> std_msgs.msg <span class="keyword">import</span> Float64</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">talker</span>():</span><br><span class="line">    pub = rospy.Publisher(<span class="string">&#x27;/seven_dof_arm/joint4_position_controller/command&#x27;</span>, Float64, queue_size=<span class="number">10</span>)</span><br><span class="line">    rospy.init_node(<span class="string">&#x27;seven_dof_arm_talker&#x27;</span>, anonymous=<span class="literal">True</span>) <span class="comment"># You can rename this node</span></span><br><span class="line">    rate = rospy.Rate(<span class="number">10</span>) <span class="comment"># 10hz</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> rospy.is_shutdown():</span><br><span class="line">        <span class="comment"># hello_str = &quot;hello world %s&quot; % rospy.get_time()</span></span><br><span class="line">        <span class="comment"># position = math.pi/2</span></span><br><span class="line">        position = math.sin(i)</span><br><span class="line">        rospy.loginfo(position) <span class="comment"># print the position</span></span><br><span class="line">        pub.publish(position)   <span class="comment"># publish the position</span></span><br><span class="line">        rate.sleep()</span><br><span class="line">        i += <span class="number">0.01</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        talker()</span><br><span class="line">    <span class="keyword">except</span> rospy.ROSInterruptException:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p>
<h2 id="2-2-Python脚本的解释"><a href="#2-2-Python脚本的解释" class="headerlink" title="2.2 Python脚本的解释"></a>2.2 Python脚本的解释</h2><p>在上述程序的第4行和第8行，涉及到了消息的类型，可以在终端中用<code>rostopic info /xxx</code>查看相应消息的类型。<br><img src="/images/20200227/03.png" alt="03"></p>
<p>从上图中，我们可以看到，<em>/seven_dof_arm/joint4_position_controller/command</em> 的类型是 <em>std_msgs/Float64</em>，所以在第4行修改import数据的类型，在第8行修改topic的名字及类型。</p>
<p>在程序的第9行，可以自行指定node的名字。</p>
<p>在while循环中，指定了让关节4做正弦运动，并将位置信息发布。</p>
<h2 id="2-3-程序的运行"><a href="#2-3-程序的运行" class="headerlink" title="2.3 程序的运行"></a>2.3 程序的运行</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 假设已经启动Gazebo仿真</span></span><br><span class="line"><span class="comment"># Open a new terminal</span></span><br><span class="line"><span class="built_in">cd</span> ~/catkin_ws</span><br><span class="line">catkin_make</span><br><span class="line"><span class="built_in">source</span> devel/setup.bash</span><br><span class="line"><span class="built_in">cd</span> src/seven_dof_arm_gazebo/scripts/</span><br><span class="line"><span class="built_in">ls</span> -l</span><br><span class="line"><span class="built_in">chmod</span> a+x main.py</span><br><span class="line"><span class="built_in">ls</span> -l</span><br><span class="line">rosrun seven_dof_arm_gazebo main.py</span><br></pre></td></tr></table></figure>
<blockquote>
<p>说明：在上述命令执行<code>ls -l</code>后，查看是否和下图的结果一致，如果不一致，是因为没有赋予文件权限。</p>
</blockquote>
<p><img src="/images/20200227/04.png" alt="04"></p>
<p>程序运行的结果如下所示：<br><img src="/images/20200227/05.gif" alt="05"></p>
<blockquote>
<p>一点小小的疑问：<br>到目前为止，我们还没有介绍过七自由度机器人的两个ROS Packages中的 <a href="http://wiki.ros.org/catkin/CMakeLists.txt">ROS wiki CMakeLists.txt</a> 和 <a href="http://wiki.ros.org/catkin/package.xml">ROS wiki package.xml</a>，这两个文件都位于ROS package下的根目录。<em>CMakeLists.txt</em> 是用来编译ROS package的，会包含一些依赖项，这个大家应该都很熟悉了；<em>package.xml</em> 是描述功能包的属性，包括功能包的名字、版本号、作者、维护者、通行证等。我理解的添加Python脚本文件后，应该在这两个文件中包含 <strong>rospy</strong> 库才对。可是没有，也能直接运行？</p>
</blockquote>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/dgreh/article/details/84329293">[ROS Q&amp;A] 149 - How to command joint position of a robot in ROS using Python?</a></li>
<li><a href="http://wiki.ros.org/catkin/CMakeLists.txt">ROS wiki CMakeLists.txt</a></li>
<li><a href="http://wiki.ros.org/catkin/package.xml">ROS wiki package.xml</a></li>
<li><a href="http://wiki.ros.org/ROS/Tutorials/WritingPublisherSubscriber%28python%29">Writing a Simple Publisher and Subscriber (Python)</a></li>
</ol>
]]></content>
      <categories>
        <category>机器人控制</category>
        <category>专栏——ROS下七自由度机器人仿真的实现</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>机器人</tag>
        <tag>ROS</tag>
      </tags>
  </entry>
  <entry>
    <title>ROS仿真揭秘——七自由度机器人(四)</title>
    <url>/archives/54f3e38b.html</url>
    <content><![CDATA[<p><img src=" /images/20200226/00.gif" width=30% /><br>机器人究竟怎么动起来的呢？<br><span id="more"></span></p>
<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0 前言"></a>0 前言</h1><p>在本专栏的第二篇博客中，我们从文件组成的角度分析了七自由度机器人运行的规律，但在第2.3.2.2节，我们看到了<em>seven_dof_arm_gazebo_control.launch</em>文件中加载了<em>seven_dof_arm_gazebo_control.yaml</em> 文件，并在node中加载了controller，这些东西怎么来的，当时没有回答，现在就来回答这个问题。</p>
<h1 id="1-控制机器人运动"><a href="#1-控制机器人运动" class="headerlink" title="1 控制机器人运动"></a>1 控制机器人运动</h1><p>在本专栏的第一篇博客中，采用ROS中已经做好的相关库，使机器人运动的流程可以归纳如下：<br><img src="/images/20200226/01.png" alt="01"></p>
<p>首先是在URDF文件的transmission属性指定了<strong>hardware_interface</strong>的类型是<strong>PositionJointInterface</strong>;其次在控制器配置文件 <em>seven_dof_arm_gazebo_control.yaml</em> 中指定了    <strong>namespace</strong>是<strong>seven_dof_arm</strong>，并且指定了控制器的名字<strong>joint_state_controller</strong>和<strong>jointx_state_controller</strong>(x表示1,2,3,…,7)。<em>seven_dof_arm_gazebo_control.yaml</em>中控制器的类型和URDF文件中<strong>hardware_interface</strong>的类型是匹配的。<em>seven_dof_arm_gazebo_control.yaml</em>中控制器的名字和<em>seven_dof_arm_gazebo_launch</em>中控制器节点的参数是一致的。</p>
<p>关于控制器的类型和hardware_interface之间的匹配关系，见<a href="http://wiki.ros.org/ros_control#Controllers">ROS wiki ros_control</a>.从官方链接点进去之后可以看到github上相应的.h源文件，打开可以看到它们之间的联系。以position_controllers为例，从官网的链接打开后，可以看到<em>joint_position_controller.h</em>文件：<br><img src="/images/20200226/02.png" alt="02"></p>
<p>从.h文件中可以看到namespace是 <strong>position_controllers</strong>，hardware_interface是<strong>PositionJointInterface</strong>，类型是<strong>JointPositionController</strong>。</p>
<p>还有一点，需要注意的是，.h文件中说明了该控制器会提交一个std_msgs/Float64位的消息，该数据会作用在关节上。因此，在本专栏第一篇文章中，我们可以通过<code>rostopic pub /seven_dof_arm/joint4_position_controller/command std_msgs/Float64 &quot;data: 0.5&quot;</code>来控制机器人运动。</p>
<p>运行<code>rostopic list</code>，可以看到所有的topic：<br><img src="/images/20200226/04.png" alt="04"></p>
<blockquote>
<p>如果你不知道具体怎么写，可以尝试Tab键自动补全。</p>
</blockquote>
<p>如果是想控制多个关节，还有joint_group_position_controller.h：<br><img src="/images/20200226/03.png" alt="03"></p>
<h1 id="2-seven-dof-arm-gazebo-control-yaml"><a href="#2-seven-dof-arm-gazebo-control-yaml" class="headerlink" title="2 seven_dof_arm_gazebo_control.yaml"></a>2 seven_dof_arm_gazebo_control.yaml</h1><p><code>.yaml</code>文件是控制器的配置文件。我们一般在利用ROS已有的控制器时，会将控制器的参数写在该文件中。<em>seven_dof_arm_gazebo_control.yaml</em> 的源码如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">seven_dof_arm:</span></span><br><span class="line">  <span class="comment"># Publish all joint states -----------------------------------</span></span><br><span class="line">  <span class="attr">joint_state_controller:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">joint_state_controller/JointStateController</span></span><br><span class="line">    <span class="attr">publish_rate:</span> <span class="number">50</span>  </span><br><span class="line">  </span><br><span class="line">  <span class="comment"># Position Controllers ---------------------------------------</span></span><br><span class="line">  <span class="attr">joint1_position_controller:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">position_controllers/JointPositionController</span></span><br><span class="line">    <span class="attr">joint:</span> <span class="string">shoulder_pan_joint</span></span><br><span class="line">    <span class="attr">pid:</span> &#123;<span class="attr">p:</span> <span class="number">100.0</span>, <span class="attr">i:</span> <span class="number">0.01</span>, <span class="attr">d:</span> <span class="number">10.0</span>&#125;</span><br><span class="line">  <span class="attr">joint2_position_controller:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">position_controllers/JointPositionController</span></span><br><span class="line">    <span class="attr">joint:</span> <span class="string">shoulder_pitch_joint</span></span><br><span class="line">    <span class="attr">pid:</span> &#123;<span class="attr">p:</span> <span class="number">100.0</span>, <span class="attr">i:</span> <span class="number">0.01</span>, <span class="attr">d:</span> <span class="number">10.0</span>&#125;</span><br><span class="line">  <span class="attr">joint3_position_controller:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">position_controllers/JointPositionController</span></span><br><span class="line">    <span class="attr">joint:</span> <span class="string">elbow_roll_joint</span></span><br><span class="line">    <span class="attr">pid:</span> &#123;<span class="attr">p:</span> <span class="number">100.0</span>, <span class="attr">i:</span> <span class="number">0.01</span>, <span class="attr">d:</span> <span class="number">10.0</span>&#125;</span><br><span class="line">  <span class="attr">joint4_position_controller:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">position_controllers/JointPositionController</span></span><br><span class="line">    <span class="attr">joint:</span> <span class="string">elbow_pitch_joint</span></span><br><span class="line">    <span class="attr">pid:</span> &#123;<span class="attr">p:</span> <span class="number">100.0</span>, <span class="attr">i:</span> <span class="number">0.01</span>, <span class="attr">d:</span> <span class="number">10.0</span>&#125;</span><br><span class="line">  <span class="attr">joint5_position_controller:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">position_controllers/JointPositionController</span></span><br><span class="line">    <span class="attr">joint:</span> <span class="string">wrist_roll_joint</span></span><br><span class="line">    <span class="attr">pid:</span> &#123;<span class="attr">p:</span> <span class="number">100.0</span>, <span class="attr">i:</span> <span class="number">0.01</span>, <span class="attr">d:</span> <span class="number">10.0</span>&#125;</span><br><span class="line">  <span class="attr">joint6_position_controller:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">position_controllers/JointPositionController</span></span><br><span class="line">    <span class="attr">joint:</span> <span class="string">wrist_pitch_joint</span></span><br><span class="line">    <span class="attr">pid:</span> &#123;<span class="attr">p:</span> <span class="number">100.0</span>, <span class="attr">i:</span> <span class="number">0.01</span>, <span class="attr">d:</span> <span class="number">10.0</span>&#125;</span><br><span class="line">  <span class="attr">joint7_position_controller:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">position_controllers/JointPositionController</span></span><br><span class="line">    <span class="attr">joint:</span> <span class="string">gripper_roll_joint</span></span><br><span class="line">    <span class="attr">pid:</span> &#123;<span class="attr">p:</span> <span class="number">100.0</span>, <span class="attr">i:</span> <span class="number">0.01</span>, <span class="attr">d:</span> <span class="number">10.0</span>&#125;</span><br></pre></td></tr></table></figure>
<p>从源码中可以看出，JointStateController可以控制publish state，JointPositionController可以控制单独一个关节，并可以调节pid参数。</p>
]]></content>
      <categories>
        <category>机器人控制</category>
        <category>专栏——ROS下七自由度机器人仿真的实现</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>机器人</tag>
        <tag>ROS</tag>
      </tags>
  </entry>
  <entry>
    <title>ROS仿真揭秘——七自由度机器人(三)</title>
    <url>/archives/634af183.html</url>
    <content><![CDATA[<p><img src=" /images/20200225/00.gif" width=30% /><br>进来聊一聊URDF啊～<br><span id="more"></span></p>
<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>先放出官方文件镇楼：</p>
<ol>
<li><a href="http://wiki.ros.org/urdf/Tutorials">ROS wiki urdf Tutorials</a>.</li>
<li><a href="http://wiki.ros.org/xacro">ROS wiki xacro</a></li>
<li><a href="http://wiki.ros.org/urdf">ROS wiki urdf</a></li>
<li><a href="http://wiki.ros.org/urdf/XML">ROS wiki URDF-XML</a></li>
</ol>
<p>做机器人仿真的第一步是设计相应的模型。机器人模型可以通过AutoCAD、SolidWorks、Blender这些CAD工具来进行设计。ROS有一个用来设计和创造机器人模型的标准的元包，叫做<em>robot_model</em>，它由<em>urdf</em>, <em>kdl_parser</em>, <em>robot_state_publisher</em>, 和<em>collada_urdf</em>等软件包组成。在ROS的仿真中，我们可以用.urdf文件、.xacro文件、.sdf文件来描述机器人的模型。三者都是XML格式的描述文件，通过一个个的link、joint等标签将机器人模型搭建起来。但是三者又有一些区别。.xacro文件是对.urdf文件的一个简化，它具有宏定义以及数学运算的功能，因此在多个关节的时候可以简化文件描述的长度。据我目前了解到的，.sdf文件应该是Gazebo最终读取的格式，即使是.urdf格式，它也会被自动转换成.sdf文件来读取(这里如有错误，欢迎尽早告知)。目前，我们可以将.urdf文件和.xacro文件统称为URDF文件。并且，.xacro文件可以转为.urdf文件，.urdf文件可以转为.sdf文件(虽然到目前为止，我得到的转换效果很差)。</p>
<p>从上一篇博客中，我们看到，七自由度机器人的3D仿真模型包<em>mastering_ros_description_pkg</em>和Gazebo仿真模型包<em>seven_dof_arm_gazebo</em>的交汇点就是<em>mastering_ros_description_pkg/urdf/seven_dof_arm_gazebo.xacro</em>文件。由于该文件源码比较长，放前面影响阅读体验，我将它放在了本篇博客的后面。接下来我们会选取它的组成部分进行解读。</p>
<h1 id="2-理解URDF文件——seven-dof-arm-xacro"><a href="#2-理解URDF文件——seven-dof-arm-xacro" class="headerlink" title="2. 理解URDF文件——seven_dof_arm.xacro"></a>2. 理解URDF文件——seven_dof_arm.xacro</h1><p>URDF可以表示机器人的运动学和动态描述，机器人的视觉表示以及机器人的碰撞模型。用URDF文件来描述机器人用到的标签有：link、joint、robot、gazebo。用URDF文件来描述机器人的基本思想是：机器人每个关节都是一个link，link和link之间的链接方式是joint。</p>
<h2 id="2-1-robot标签"><a href="#2-1-robot标签" class="headerlink" title="2.1 robot标签"></a>2.1 robot标签</h2><p><code>&lt;robot&gt;...&lt;/robot&gt;</code>标签定义了我们要创建的机器人的名称，这里即seven_dof_arm。七自由度机器人的其他描述内容都会包含在该标签内。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;seven_dof_arm&quot;</span> <span class="attr">xmlns:xacro</span>=<span class="string">&quot;http://ros.org/wiki/xacro&quot;</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="2-2-material标签"><a href="#2-2-material标签" class="headerlink" title="2.2 material标签"></a>2.2 material标签</h2><p><code>&lt;material&gt;...&lt;/material&gt;</code>标签定义了整个七自由度机器人的颜色组成，方便之后调用。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;Black&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;0.0 0.0 0.0 1.0&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="2-3-property标签"><a href="#2-3-property标签" class="headerlink" title="2.3 property标签"></a>2.3 property标签</h2><p>我们可以使用 property 标签声明作为 xacro 文件中的命名值的常量或 ropers，可以在代码中的任何位置使用。这些常量定义的主要用途是，我们不是在 link 和 joint 上给出数值，而是可以保留常量，并且可以在开头就修改掉相应的数值。此处给出了使用 property 的示例。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;deg_to_rad&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.01745329251994329577&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Constants --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;M_SCALE&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.001 0.001 0.001&quot;</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;M_PI&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3.14159&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Shoulder pan link properties --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;shoulder_pan_width&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.04&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;shoulder_pan_len&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.08&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>这样，在之后需要使用到这些 property 的时候，只需要像下面的示例调用即可，property 有点类似于变量。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">&quot;$&#123;shoulder_pan_width&#125;&quot;</span> <span class="attr">length</span>=<span class="string">&quot;$&#123;shoulder_pan_len&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="2-4-macro标签"><a href="#2-4-macro标签" class="headerlink" title="2.4 macro标签"></a>2.4 macro标签</h2><p>macro 标签可以作为宏定义来使用。给出 macro 的一个示例，如下所示：<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;inertial_matrix&quot;</span> <span class="attr">params</span>=<span class="string">&quot;mass&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">inertial</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mass</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;mass&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">inertia</span> <span class="attr">ixx</span>=<span class="string">&quot;1.0&quot;</span> <span class="attr">ixy</span>=<span class="string">&quot;0.0&quot;</span> <span class="attr">ixz</span>=<span class="string">&quot;0.0&quot;</span> <span class="attr">iyy</span>=<span class="string">&quot;0.5&quot;</span> <span class="attr">iyz</span>=<span class="string">&quot;0.0&quot;</span> <span class="attr">izz</span>=<span class="string">&quot;1.0&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">inertial</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>这里使用 macro 定义了<code>&lt;inertial&gt;</code>标签，该标签中参数的 mass 定义了质量， inertia 定义了相应几何体的惯性张量。这样，在后面就无需对每个 link 的 inertial 属性进行设置，提高代码复用率。</p>
<h2 id="2-5-link标签"><a href="#2-5-link标签" class="headerlink" title="2.5 link标签"></a>2.5 link标签</h2><p>link 标签的官方解释见<a href="http://wiki.ros.org/urdf/XML/link">ROS wiki link</a>。<code>&lt;link&gt;...&lt;/link&gt;</code>标签表示机器人的单个链接。 使用这个标签，我们可以对机器人链接及其属性进行建模。 建模包括大小，形状和颜色，甚至可以导入3D网格来表示机器人链接。 我们还可以提供链接的动态属性，例如惯性矩阵和碰撞属性。对于本文的七自由度机器人，总共有12个link，如下表所示。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>No.</th>
<th>name</th>
<th>No.</th>
<th>name</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>bottom_link</td>
<td>7</td>
<td>wrist_roll_link</td>
</tr>
<tr>
<td>2</td>
<td>base_link</td>
<td>8</td>
<td>wrist_pitch_link</td>
</tr>
<tr>
<td>3</td>
<td>shoulder_pan_link</td>
<td>9</td>
<td>gripper_roll_link</td>
</tr>
<tr>
<td>4</td>
<td>shoulder_pitch_link</td>
<td>10</td>
<td>gripper_finger_link1</td>
</tr>
<tr>
<td>5</td>
<td>elbow_roll_link</td>
<td>11</td>
<td>gripper_finger_link2</td>
</tr>
<tr>
<td>6</td>
<td>elbow_pitch_link</td>
<td>12</td>
<td>grasping_frame</td>
</tr>
</tbody>
</table>
</div>
<p>上表中，第1个 bottom_link 是将七自由度机器人固定的基座，2-9是从底向上组成七自由度机器人的8个link，10-11是七自由度机器人末端的二指夹爪，第12个是二指夹爪中间的一个小方块。</p>
<p>描述 link 的内容可以分为<em>visual</em>、<em>collision</em>、<em>inertial</em>三大类。这里我们给出 base_link 的具体内容作为示例。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;base_link&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;$&#123;M_PI/2&#125; 0 0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- rotate PI/2 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">&quot;0.1 0.1 0.1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;White&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">collision</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;$&#123;M_PI/2&#125; 0 0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- rotate PI/2 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">&quot;0.1 0.1 0.1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">collision</span>&gt;</span>&gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:inertial_matrix</span> <span class="attr">mass</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>解释：</p>
<ul>
<li><em>visual</em> 标签定义了底座的外观，它是在仿真时显示出来的形态。<em>origin</em> 标签定义了 link 的起始位置，并且绕 <em>x</em> 轴旋转了 M_PI/2。<em>geometry</em> 标签定义了该 link 的几何形状为长方体 box，<em>geometry</em> 标签可定义的形状包括 cylinder, box, sphere, mesh。<em>material</em> 标签定义了 link 的颜色为白色，这在第2.2节中是有过定义的。</li>
<li><em>collision</em> 标签定义了机器人在仿真过程中实际的物理特性：真实的几何形状及大小、初始位置。一般情况下，都要保证 <em>visual</em> 标签和 <em>collision</em>标签的属性一致。</li>
<li><em>inertial</em> 标签定义了 link 的质量以及惯性张量。这里就直接调用了第2.4节中对于 inertial 的宏定义，传入的参数是 1。</li>
</ul>
<h2 id="2-6-joint标签"><a href="#2-6-joint标签" class="headerlink" title="2.6 joint标签"></a>2.6 joint标签</h2><p>joint 标签的官方解释见<a href="http://wiki.ros.org/urdf/XML/joint">ROS wiki joint</a>。<code>&lt;joint&gt;...&lt;/joint&gt;</code>标签是用来链接两个 link 的，可以理解为一个 joint 就是机器人的一个电机。joint 会包含机器人的摩擦等动力学参数。七自由度机器人包含的 joint 及其特性如下表所示。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>No.</th>
<th>Joint name</th>
<th>Joint type</th>
<th>Angle limits(in degree)</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>bottom_joint</td>
<td>fixed</td>
<td>—-</td>
</tr>
<tr>
<td>2</td>
<td>shoulder_pan_joint</td>
<td>revolute</td>
<td>[-150, 114]</td>
</tr>
<tr>
<td>3</td>
<td>shoulder_pitch_joint</td>
<td>revolute</td>
<td>[-67, 109]</td>
</tr>
<tr>
<td>4</td>
<td>elbow_roll_joint</td>
<td>revolute</td>
<td>[-150, 41]</td>
</tr>
<tr>
<td>5</td>
<td>elbow_pitch_joint</td>
<td>revolute</td>
<td>[-92, 110]</td>
</tr>
<tr>
<td>6</td>
<td>wrist_roll_joint</td>
<td>revolute</td>
<td>[-150, 150]</td>
</tr>
<tr>
<td>7</td>
<td>wrist_pitch_joint</td>
<td>revolute</td>
<td>[92, 113]</td>
</tr>
<tr>
<td>8</td>
<td>gripper_roll_joint</td>
<td>revolute</td>
<td>[150, 150]</td>
</tr>
<tr>
<td>9</td>
<td>gripper_finger_joint1</td>
<td>prismatic</td>
<td>[0, 3] cm</td>
</tr>
<tr>
<td>10</td>
<td>gripper_finger_joint2</td>
<td>prismatic</td>
<td>[0, 3] cm</td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<p>说明：在上表中， Joint type 给出了三种形式：fixed(固定)、revolute(旋转)、prismatic(平移)。对于 bottom_joint，我们是希望机器人的底座是固定在基座上的，它不可旋转；对于2-8是机器人的七个关节，是可以旋转的；9-10是二指夹爪的两个关节，可以平移。</p>
</blockquote>
<p>选取一个 joint 作为示例，如下：<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;finger_joint1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;prismatic&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;gripper_roll_link&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;gripper_finger_link1&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.0 0 0&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">axis</span> <span class="attr">xyz</span>=<span class="string">&quot;0 1 0&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">limit</span> <span class="attr">effort</span>=<span class="string">&quot;100&quot;</span> <span class="attr">lower</span>=<span class="string">&quot;0&quot;</span> <span class="attr">upper</span>=<span class="string">&quot;0.03&quot;</span> <span class="attr">velocity</span>=<span class="string">&quot;1.0&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">safety_controller</span> <span class="attr">k_position</span>=<span class="string">&quot;20&quot;</span> <span class="attr">k_velocity</span>=<span class="string">&quot;20&quot;</span> <span class="attr">soft_lower_limit</span>=<span class="string">&quot;$&#123;-0.15 &#125;&quot;</span> <span class="attr">soft_upper_limit</span>=<span class="string">&quot;$&#123; 0.0 &#125;&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dynamics</span> <span class="attr">damping</span>=<span class="string">&quot;50&quot;</span> <span class="attr">friction</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><code>&lt;joint&gt;...&lt;/joint&gt;</code>标签内的元素有 <em>name</em>, <em>type</em>, <em>parent link</em>, <em>child link</em>, <em>origin</em>, <em>axis</em>, <em>limit</em>, <em>safety_controller</em>, <em>dynamics</em> 等。其中有的元素是必须的，有的不是必须的。</p>
<ul>
<li>name：指定该 joint 的名字为 finger_joint1，这是末端夹爪的一根手指关节。</li>
<li>type：指定该关节类型为 prismatic，可以指定的 type 共有6种：<ul>
<li>continuous: 一个不受限制的, 绕着一根轴的转动副</li>
<li>revolute: 一个转动角度受到限制的, 绕着一根轴的转动副</li>
<li>prismatic: 一个沿着一根轴的滑动副, 并且有限位</li>
<li>fixed: 固定关节</li>
<li>floating: 这个关节允许六个自由度的运动, 浮动关节</li>
<li>planar: This joint allows motion in a plane perpendicular to the axis. 这个关节允许再垂直于轴的一个平面内进行运动，这里的运动应该即包括平移和旋转</li>
</ul>
</li>
<li>parent (必须)：指定关节起始的 link。</li>
<li>child (必须)：指定关节终止的 link。</li>
<li>origin (可选，默认为0)：它反应了从 parent link 到 child link 之间的一个变换。关节落在 child link 的原点。也就是说, 我在确认了 parent link 和 child link 自己的坐标系之后, 还没有确认他们之间的关系。为了描述这个关系, 以 parent link 的坐标系为一个基础, 在上面描述出 child link 的坐标系原点的位置。那么这个当中包含了两个属性:<ul>
<li>xyz (可选，默认为一个零向量): 这其实反映了两个坐标系之间的平移关系.</li>
<li>rpy (可选的，默认也是一个零向量): 这反映了两个坐标系之间旋转的一个关系, r 代表了 roll, 是绕着 <em>x</em> 轴旋转, p 代表了 pitch, 是绕着 <em>y</em> 轴旋转, y代表了yaw, 是绕着 <em>z</em> 轴旋转。</li>
</ul>
</li>
<li>axis (可选, 默认为(1, 0, 0))：相对于child link也就是joint link的坐标系。对于continuous或者revolute关节，反映了绕着哪一根轴旋转；对于prismatic关节，反映了沿着哪一根轴移动；对于planar关节，反映了沿着哪个平面(由法向量体现)移动。</li>
<li>limit (仅仅在prismatic和revolute的关节时需要设置)。其中包含如下几个属性: <ul>
<li>lower 和 upper (可选, 默认为0): 反映了关节移动的最小值或者最大值。如果关节是 continuous 类型的话, 就会被自动忽略。如果不填的话全部默认为0。</li>
<li>effort：最大关节力矩。要求(|applied effort| &lt; |effort|)。 </li>
<li>velocity：最大速度。</li>
</ul>
</li>
<li>safety_controller (可选)。包含如下属性：<ul>
<li>soft_lower_limit：指定安全控制器开始限制关节位置的下部关节边界的属性。该值要大于lower。</li>
<li>soft_upper_limit：指定安全控制器开始限制关节位置的上部关节边界的属性。该值要小于upper。</li>
<li>k_position：指定位置和速度之间的限制关系。</li>
<li>k_velocity：指定力矩和速度之间的限制关系。</li>
<li>官方以pr2机器人的<a href="http://wiki.ros.org/pr2_controller_manager/safety_limits">Joint Safety Limits Explained</a>为例介绍了这一属性。</li>
</ul>
</li>
</ul>
<h2 id="2-7-gazebo标签"><a href="#2-7-gazebo标签" class="headerlink" title="2.7 gazebo标签"></a>2.7 gazebo标签</h2><p>官方介绍见<a href="http://gazebosim.org/tutorials?tut=ros_urdf&amp;cat=connect_ros">Tutorial: Using a URDF in Gazebo</a>。该标签可以使模型在Gazebo中正常显示。在七自由度机器人的URDF文件中使用 gazebo 标签为相关的 link 添加了颜色属性。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">gazebo</span> <span class="attr">reference</span>=<span class="string">&quot;base_link&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">material</span>&gt;</span>Gazebo/White<span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="2-8-transmission标签"><a href="#2-8-transmission标签" class="headerlink" title="2.8 transmission标签"></a>2.8 transmission标签</h2><p>官方介绍见<a href="http://wiki.ros.org/urdf/XML/Transmission">ROS wiki transmissions</a>。transmission标签描述了执行器与关节之间的联系。在七自由度机器人的URDF文件中，使用macro定义了transmission。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;transmission_block&quot;</span> <span class="attr">params</span>=<span class="string">&quot;joint_name&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transmission</span> <span class="attr">name</span>=<span class="string">&quot;tran1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>transmission_interface/SimpleTransmission<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;joint_name&#125;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hardwareInterface</span>&gt;</span>hardware_interface/PositionJointInterface<span class="tag">&lt;/<span class="name">hardwareInterface</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">actuator</span> <span class="attr">name</span>=<span class="string">&quot;motor1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hardwareInterface</span>&gt;</span>hardware_interface/PositionJointInterface<span class="tag">&lt;/<span class="name">hardwareInterface</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mechanicalReduction</span>&gt;</span>1<span class="tag">&lt;/<span class="name">mechanicalReduction</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">actuator</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transmission</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>transmission标签包含的元素有：</p>
<ul>
<li>name：指定一个名字。</li>
<li>type：目前只有transmission_interface/SimpleTransmission这一种类型。</li>
<li>joint：由joint_name指定是哪个关节。<ul>
<li>hardwareInterface：指定硬件借口类型，这里的接口类型指定了控制器采用什么样的控制方式。在官方解释<a href="http://wiki.ros.org/urdf/XML/Transmission">ROS wiki transmissions</a>中，这样描述：<em>Note that the value of this tag should be EffortJointInterface when this transmission is loaded in Gazebo and hardware_interface/EffortJointInterface when this transmission is loaded in RobotHW.</em>如果有大神看到了，还请给我解释一下。</li>
</ul>
</li>
<li>actuator：transmission 连接到的执行器。名字自己取。<ul>
<li>mechanicalReduction (可选)：Specifies a mechanical reduction at the joint/actuator transmission.</li>
<li>hardwareInterface (可选)：应与joint中的一致。</li>
</ul>
</li>
</ul>
<p>宏定义后的调用方法为：<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xacro:transmission_block</span> <span class="attr">joint_name</span>=<span class="string">&quot;shoulder_pan_joint&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xacro:transmission_block</span> <span class="attr">joint_name</span>=<span class="string">&quot;shoulder_pitch_joint&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xacro:transmission_block</span> <span class="attr">joint_name</span>=<span class="string">&quot;elbow_roll_joint&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xacro:transmission_block</span> <span class="attr">joint_name</span>=<span class="string">&quot;elbow_pitch_joint&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xacro:transmission_block</span> <span class="attr">joint_name</span>=<span class="string">&quot;wrist_roll_joint&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xacro:transmission_block</span> <span class="attr">joint_name</span>=<span class="string">&quot;wrist_pitch_joint&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xacro:transmission_block</span> <span class="attr">joint_name</span>=<span class="string">&quot;gripper_roll_joint&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xacro:transmission_block</span> <span class="attr">joint_name</span>=<span class="string">&quot;finger_joint1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xacro:transmission_block</span> <span class="attr">joint_name</span>=<span class="string">&quot;finger_joint2&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="2-9-include标签"><a href="#2-9-include标签" class="headerlink" title="2.9 include标签"></a>2.9 include标签</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;$(find mastering_ros_robot_description_pkg)/urdf/sensors/xtion_pro_live.urdf.xacro&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用include标签可以包含其他的URDF文件。</p>
<h2 id="2-10-plugin"><a href="#2-10-plugin" class="headerlink" title="2.10 plugin"></a>2.10 plugin</h2><p>在添加transmission标签后，需要添加 <em>gazebo_ros_control</em> plugin 才能将 <strong>hardware interfaces</strong> 和 <strong>controller manager</strong> 联系起来。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">gazebo</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">&quot;gazebo_ros_control&quot;</span> <span class="attr">filename</span>=<span class="string">&quot;libgazebo_ros_control.so&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">robotNamespace</span>&gt;</span>/seven_dof_arm<span class="tag">&lt;/<span class="name">robotNamespace</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>在这里，<code>&lt;plugin&gt;...&lt;/plugin&gt;</code>元素指定了加载的plugin是 <em>libgazebo_ros_control.so</em>。<code>&lt;robotNamespace&gt;...&lt;/robotNamespace&gt;</code>可以指定为机器人的名字，如果不指定，会自动加载URDF文件中的 robot name。</p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol>
<li><a href="http://wiki.ros.org/urdf/XML">ROS wiki URDF-XML</a></li>
<li><a href="https://blog.csdn.net/dgreh/article/details/84329293">ROS与GAZEBO实时硬件仿真（1）——urdf的编写</a></li>
<li><a href="https://blog.csdn.net/weixin_41420355/article/details/104310896">ROS中URDF模型的joint标签详解</a></li>
<li><a href="http://gazebosim.org/tutorials?tut=ros_urdf&amp;cat=connect_ros">Tutorial: Using a URDF in Gazebo</a></li>
</ol>
<h1 id="附录：seven-dof-arm-xacro"><a href="#附录：seven-dof-arm-xacro" class="headerlink" title="附录：seven_dof_arm.xacro"></a>附录：seven_dof_arm.xacro</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;seven_dof_arm&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xacro</span>=<span class="string">&quot;http://ros.org/wiki/xacro&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Include materials --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;Black&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;0.0 0.0 0.0 1.0&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;Red&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;0.8 0.0 0.0 1.0&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;White&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;1.0 1.0 1.0 1.0&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Constants --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;deg_to_rad&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.01745329251994329577&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;M_SCALE&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.001 0.001 0.001&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;M_PI&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3.14159&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Shoulder pan link properties --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;shoulder_pan_width&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.04&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;shoulder_pan_len&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.08&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Shoulder pitch link properties --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;shoulder_pitch_len&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.14&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;shoulder_pitch_width&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.04&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;shoulder_pitch_height&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.04&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Elbow roll link properties --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;elbow_roll_width&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.02&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;elbow_roll_len&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.06&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Elbow pitch link properties --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;elbow_pitch_len&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.22&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;elbow_pitch_width&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.04&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;elbow_pitch_height&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.04&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Wrist roll link properties --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;wrist_roll_width&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.02&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;wrist_roll_len&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.04&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- wrist pitch link properties --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;wrist_pitch_len&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.06&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;wrist_pitch_width&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.04&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;wrist_pitch_height&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.04&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Gripper roll link properties --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;gripper_roll_width&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.04&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;gripper_roll_len&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.02&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Left gripper --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;left_gripper_len&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.08&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;left_gripper_width&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.01&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;left_gripper_height&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.01&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Right gripper --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;right_gripper_len&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.08&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;right_gripper_width&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.01&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;right_gripper_height&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.01&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Right gripper --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;grasp_frame_len&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.02&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;grasp_frame_width&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.02&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;grasp_frame_height&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.02&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;inertial_matrix&quot;</span> <span class="attr">params</span>=<span class="string">&quot;mass&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">inertial</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mass</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;mass&#125;&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">inertia</span> <span class="attr">ixx</span>=<span class="string">&quot;1.0&quot;</span> <span class="attr">ixy</span>=<span class="string">&quot;0.0&quot;</span> <span class="attr">ixz</span>=<span class="string">&quot;0.0&quot;</span> <span class="attr">iyy</span>=<span class="string">&quot;0.5&quot;</span> <span class="attr">iyz</span>=<span class="string">&quot;0.0&quot;</span> <span class="attr">izz</span>=<span class="string">&quot;1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">inertial</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;transmission_block&quot;</span> <span class="attr">params</span>=<span class="string">&quot;joint_name&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transmission</span> <span class="attr">name</span>=<span class="string">&quot;tran1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">type</span>&gt;</span>transmission_interface/SimpleTransmission<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;joint_name&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hardwareInterface</span>&gt;</span>hardware_interface/PositionJointInterface<span class="tag">&lt;/<span class="name">hardwareInterface</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">actuator</span> <span class="attr">name</span>=<span class="string">&quot;motor1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hardwareInterface</span>&gt;</span>hardware_interface/PositionJointInterface<span class="tag">&lt;/<span class="name">hardwareInterface</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mechanicalReduction</span>&gt;</span>1<span class="tag">&lt;/<span class="name">mechanicalReduction</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">actuator</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transmission</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- BOTTOM FIXED LINK </span></span><br><span class="line"><span class="comment">This link is the base of the arm in which arm is placed </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////// --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;bottom_link&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot; 0 0 -0.04&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 0 0&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">&quot;1 1 0.02&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;Brown&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">collision</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot; 0 0 -0.04&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 0 0&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">&quot;1 1 0.02&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collision</span>&gt;</span>&gt;</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">gazebo</span> <span class="attr">reference</span>=<span class="string">&quot;bottom_link&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">material</span>&gt;</span>Gazebo/White<span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;bottom_joint&quot;</span> <span class="attr">type</span>=<span class="string">&quot;fixed&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 0 0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;bottom_link&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////// --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- BASE LINK --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;base_link&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;$&#123;M_PI/2&#125; 0 0&quot;</span> /&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- rotate PI/2 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">&quot;0.1 0.1 0.1&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;White&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">collision</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;$&#123;M_PI/2&#125; 0 0&quot;</span> /&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- rotate PI/2 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">&quot;0.1 0.1 0.1&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collision</span>&gt;</span>&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:inertial_matrix</span> <span class="attr">mass</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">gazebo</span> <span class="attr">reference</span>=<span class="string">&quot;base_link&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">material</span>&gt;</span>Gazebo/White<span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;shoulder_pan_joint&quot;</span> <span class="attr">type</span>=<span class="string">&quot;revolute&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;shoulder_pan_link&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0.05&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 $&#123;M_PI/2&#125; $&#123;M_PI*0&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">axis</span> <span class="attr">xyz</span>=<span class="string">&quot;-1 0 0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">limit</span> <span class="attr">effort</span>=<span class="string">&quot;300&quot;</span> <span class="attr">velocity</span>=<span class="string">&quot;1&quot;</span> <span class="attr">lower</span>=<span class="string">&quot;-2.61799387799&quot;</span> <span class="attr">upper</span>=<span class="string">&quot;1.98394848567&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dynamics</span> <span class="attr">damping</span>=<span class="string">&quot;50&quot;</span> <span class="attr">friction</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////// --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- SHOULDER PAN LINK --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;shoulder_pan_link&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 $&#123;M_PI/2&#125; 0&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">&quot;$&#123;shoulder_pan_width&#125;&quot;</span> <span class="attr">length</span>=<span class="string">&quot;$&#123;shoulder_pan_len&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;Red&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">collision</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 $&#123;M_PI/2&#125; 0&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">&quot;$&#123;shoulder_pan_width&#125;&quot;</span> <span class="attr">length</span>=<span class="string">&quot;$&#123;shoulder_pan_len&#125;&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collision</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:inertial_matrix</span> <span class="attr">mass</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">gazebo</span> <span class="attr">reference</span>=<span class="string">&quot;shoulder_pan_link&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">material</span>&gt;</span>Gazebo/Red<span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;shoulder_pitch_joint&quot;</span> <span class="attr">type</span>=<span class="string">&quot;revolute&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;shoulder_pan_link&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;shoulder_pitch_link&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;-0.041 0.0021 0.0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;-$&#123;M_PI/2&#125; 0 $&#123;M_PI/2&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">axis</span> <span class="attr">xyz</span>=<span class="string">&quot;1 0 0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">limit</span> <span class="attr">effort</span>=<span class="string">&quot;300&quot;</span> <span class="attr">velocity</span>=<span class="string">&quot;1&quot;</span> <span class="attr">lower</span>=<span class="string">&quot;-1.19962513147&quot;</span> <span class="attr">upper</span>=<span class="string">&quot;1.89994105047&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dynamics</span> <span class="attr">damping</span>=<span class="string">&quot;50&quot;</span> <span class="attr">friction</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////// --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- SHOULDER PITCH LINK --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;shoulder_pitch_link&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;-0.002 0 0.04&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 $&#123;M_PI/2&#125; 0&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">&quot;$&#123;shoulder_pitch_len&#125; $&#123;shoulder_pitch_width&#125; $&#123;shoulder_pitch_height&#125;&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;White&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">collision</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;-0.002 0 0.04&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 $&#123;M_PI/2&#125; 0&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">&quot;$&#123;shoulder_pitch_len&#125; $&#123;shoulder_pitch_width&#125; $&#123;shoulder_pitch_height&#125;&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collision</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:inertial_matrix</span> <span class="attr">mass</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">gazebo</span> <span class="attr">reference</span>=<span class="string">&quot;shoulder_pitch_link&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">material</span>&gt;</span>Gazebo/White<span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;elbow_roll_joint&quot;</span> <span class="attr">type</span>=<span class="string">&quot;revolute&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;shoulder_pitch_link&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;elbow_roll_link&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;-0.002 0 0.1206&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;$&#123;M_PI&#125; $&#123;M_PI/2&#125; 0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">axis</span> <span class="attr">xyz</span>=<span class="string">&quot;-1 0 0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">limit</span> <span class="attr">effort</span>=<span class="string">&quot;300&quot;</span> <span class="attr">velocity</span>=<span class="string">&quot;1&quot;</span> <span class="attr">lower</span>=<span class="string">&quot;-2.61799387799&quot;</span> <span class="attr">upper</span>=<span class="string">&quot;0.705631162427&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dynamics</span> <span class="attr">damping</span>=<span class="string">&quot;50&quot;</span> <span class="attr">friction</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////// --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ELBOW ROLL LINK --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;elbow_roll_link&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;-0.015 0.0 -0.0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 $&#123;M_PI/2&#125; 0&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">&quot;$&#123;elbow_roll_width&#125;&quot;</span> <span class="attr">length</span>=<span class="string">&quot;$&#123;elbow_roll_len&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;Black&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">collision</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;-0.015 0.0 -0.0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 $&#123;M_PI/2&#125; 0&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">&quot;$&#123;elbow_roll_width&#125;&quot;</span> <span class="attr">length</span>=<span class="string">&quot;$&#123;elbow_roll_len&#125;&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collision</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:inertial_matrix</span> <span class="attr">mass</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">gazebo</span> <span class="attr">reference</span>=<span class="string">&quot;elbow_roll_link&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">material</span>&gt;</span>Gazebo/Black<span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;elbow_pitch_joint&quot;</span> <span class="attr">type</span>=<span class="string">&quot;revolute&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;elbow_roll_link&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;elbow_pitch_link&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;-0.035 0 0.0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0.055 $&#123;M_PI/2&#125; 0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">axis</span> <span class="attr">xyz</span>=<span class="string">&quot;1 0 0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">limit</span> <span class="attr">effort</span>=<span class="string">&quot;300&quot;</span> <span class="attr">velocity</span>=<span class="string">&quot;1&quot;</span> <span class="attr">lower</span>=<span class="string">&quot;-1.5953400194&quot;</span> <span class="attr">upper</span>=<span class="string">&quot;1.93281579274&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dynamics</span> <span class="attr">damping</span>=<span class="string">&quot;50&quot;</span> <span class="attr">friction</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////// --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- ELBOW PITCH LINK --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;elbow_pitch_link&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 -0.12&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 $&#123;M_PI/2&#125; 0&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">&quot;$&#123;elbow_pitch_len&#125; $&#123;elbow_pitch_width&#125; $&#123;elbow_pitch_height&#125;&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;Red&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">collision</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 -0.12&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 $&#123;M_PI/2&#125; 0&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">&quot;$&#123;elbow_pitch_len&#125; $&#123;elbow_pitch_width&#125; $&#123;elbow_pitch_height&#125;&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collision</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:inertial_matrix</span> <span class="attr">mass</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">gazebo</span> <span class="attr">reference</span>=<span class="string">&quot;elbow_pitch_link&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">material</span>&gt;</span>Gazebo/Red<span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;wrist_roll_joint&quot;</span> <span class="attr">type</span>=<span class="string">&quot;revolute&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;elbow_pitch_link&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;wrist_roll_link&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.0 0.0081 -.248&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 $&#123;M_PI/2&#125; $&#123;M_PI&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">axis</span> <span class="attr">xyz</span>=<span class="string">&quot;1 0 0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">limit</span> <span class="attr">effort</span>=<span class="string">&quot;300&quot;</span> <span class="attr">velocity</span>=<span class="string">&quot;1&quot;</span> <span class="attr">lower</span>=<span class="string">&quot;-2.61799387799&quot;</span> <span class="attr">upper</span>=<span class="string">&quot;2.6128806087&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dynamics</span> <span class="attr">damping</span>=<span class="string">&quot;50&quot;</span> <span class="attr">friction</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- WRIST ROLL LINK --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;wrist_roll_link&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 $&#123;M_PI/2&#125; 0&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">&quot;$&#123;elbow_roll_width&#125;&quot;</span> <span class="attr">length</span>=<span class="string">&quot;$&#123;elbow_roll_len&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;Black&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">collision</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 $&#123;M_PI/2&#125; 0&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">&quot;$&#123;elbow_roll_width&#125;&quot;</span> <span class="attr">length</span>=<span class="string">&quot;$&#123;elbow_roll_len&#125;&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collision</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:inertial_matrix</span> <span class="attr">mass</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">gazebo</span> <span class="attr">reference</span>=<span class="string">&quot;wrist_roll_link&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">material</span>&gt;</span>Gazebo/Black<span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;wrist_pitch_joint&quot;</span> <span class="attr">type</span>=<span class="string">&quot;revolute&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;wrist_roll_link&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;wrist_pitch_link&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.0 0.0 0.0001&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 $&#123;M_PI/2&#125; 0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">axis</span> <span class="attr">xyz</span>=<span class="string">&quot;1 0 0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">limit</span> <span class="attr">effort</span>=<span class="string">&quot;300&quot;</span> <span class="attr">velocity</span>=<span class="string">&quot;1&quot;</span> <span class="attr">lower</span>=<span class="string">&quot;-1.5953400194&quot;</span> <span class="attr">upper</span>=<span class="string">&quot;1.98394848567&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dynamics</span> <span class="attr">damping</span>=<span class="string">&quot;50&quot;</span> <span class="attr">friction</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////// --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- WRIST PITCH LINK --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;wrist_pitch_link&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0.04&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 $&#123;M_PI/2&#125; 0&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">&quot;$&#123;wrist_pitch_len&#125; $&#123;wrist_pitch_width&#125; $&#123;wrist_pitch_height&#125;&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;White&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">collision</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0.04 &quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 $&#123;M_PI/2&#125; 0&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">&quot;$&#123;wrist_pitch_len&#125; $&#123;wrist_pitch_width&#125; $&#123;wrist_pitch_height&#125;&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collision</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:inertial_matrix</span> <span class="attr">mass</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">gazebo</span> <span class="attr">reference</span>=<span class="string">&quot;wrist_pitch_link&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">material</span>&gt;</span>Gazebo/White<span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;gripper_roll_joint&quot;</span> <span class="attr">type</span>=<span class="string">&quot;revolute&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;wrist_pitch_link&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;gripper_roll_link&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0.080&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;$&#123;1.5*M_PI&#125; -$&#123;.5*M_PI&#125; 0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">axis</span> <span class="attr">xyz</span>=<span class="string">&quot;1 0 0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">		&lt;limit effort=&quot;300&quot; velocity=&quot;1&quot; lower=&quot;-2.61799387799&quot; upper=&quot;2.6128806087&quot; /&gt;</span></span><br><span class="line"><span class="comment">		--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">limit</span> <span class="attr">effort</span>=<span class="string">&quot;300&quot;</span> <span class="attr">velocity</span>=<span class="string">&quot;1&quot;</span> <span class="attr">lower</span>=<span class="string">&quot;-3.14&quot;</span> <span class="attr">upper</span>=<span class="string">&quot;3.14&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dynamics</span> <span class="attr">damping</span>=<span class="string">&quot;50&quot;</span> <span class="attr">friction</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////// --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- GRIPPER ROLL LINK --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;gripper_roll_link&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 $&#123;M_PI/2&#125; 0&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">&quot;$&#123;gripper_roll_width&#125;&quot;</span> <span class="attr">length</span>=<span class="string">&quot;$&#123;gripper_roll_len&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;Red&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">collision</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 $&#123;M_PI/2&#125; 0&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">&quot;$&#123;gripper_roll_width&#125;&quot;</span> <span class="attr">length</span>=<span class="string">&quot;$&#123;gripper_roll_len&#125;&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collision</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:inertial_matrix</span> <span class="attr">mass</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">gazebo</span> <span class="attr">reference</span>=<span class="string">&quot;gripper_roll_link&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">material</span>&gt;</span>Gazebo/Red<span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;finger_joint1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;prismatic&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;gripper_roll_link&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;gripper_finger_link1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.0 0 0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">axis</span> <span class="attr">xyz</span>=<span class="string">&quot;0 1 0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">limit</span> <span class="attr">effort</span>=<span class="string">&quot;100&quot;</span> <span class="attr">lower</span>=<span class="string">&quot;0&quot;</span> <span class="attr">upper</span>=<span class="string">&quot;0.03&quot;</span> <span class="attr">velocity</span>=<span class="string">&quot;1.0&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">safety_controller</span> <span class="attr">k_position</span>=<span class="string">&quot;20&quot;</span> <span class="attr">k_velocity</span>=<span class="string">&quot;20&quot;</span> <span class="attr">soft_lower_limit</span>=<span class="string">&quot;$&#123;-0.15 &#125;&quot;</span> <span class="attr">soft_upper_limit</span>=<span class="string">&quot;$&#123; 0.0 &#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dynamics</span> <span class="attr">damping</span>=<span class="string">&quot;50&quot;</span> <span class="attr">friction</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////// --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- LEFT GRIPPER AFT LINK --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;gripper_finger_link1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.04 -0.03 0&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">&quot;$&#123;left_gripper_len&#125; $&#123;left_gripper_width&#125; $&#123;left_gripper_height&#125;&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;White&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:inertial_matrix</span> <span class="attr">mass</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">gazebo</span> <span class="attr">reference</span>=<span class="string">&quot;l_gripper_aft_link&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">material</span>&gt;</span>Gazebo/White<span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Joint between Wrist roll and finger 2 --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;finger_joint2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;prismatic&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;gripper_roll_link&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;gripper_finger_link2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.0 0 0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">axis</span> <span class="attr">xyz</span>=<span class="string">&quot;0 1 0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">limit</span> <span class="attr">effort</span>=<span class="string">&quot;1&quot;</span> <span class="attr">lower</span>=<span class="string">&quot;-0.03&quot;</span> <span class="attr">upper</span>=<span class="string">&quot;0&quot;</span> <span class="attr">velocity</span>=<span class="string">&quot;1.0&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    &lt;mimic joint=&quot;gripper_finger_joint&quot; multiplier=&quot;-1.0&quot; offset=&quot;0.0&quot; /&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dynamics</span> <span class="attr">damping</span>=<span class="string">&quot;50&quot;</span> <span class="attr">friction</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////// --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- RIGHT GRIPPER AFT LINK --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;gripper_finger_link2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.04 0.03 0&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">&quot;$&#123;right_gripper_len&#125; $&#123;right_gripper_width&#125; $&#123;right_gripper_height&#125;&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;White&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:inertial_matrix</span> <span class="attr">mass</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">gazebo</span> <span class="attr">reference</span>=<span class="string">&quot;r_gripper_aft_link&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">material</span>&gt;</span>Gazebo/White<span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Grasping frame --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;grasping_frame&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">inertial</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 0 0&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mass</span> <span class="attr">value</span>=<span class="string">&quot;0.0001&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">cuboid_inertia</span> <span class="attr">mass</span>=<span class="string">&quot;0.0001&quot;</span> <span class="attr">x</span>=<span class="string">&quot;0.001&quot;</span> <span class="attr">y</span>=<span class="string">&quot;0.001&quot;</span> <span class="attr">z</span>=<span class="string">&quot;0.001&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">inertia</span> <span class="attr">ixx</span>=<span class="string">&quot;1.0&quot;</span> <span class="attr">ixy</span>=<span class="string">&quot;0.0&quot;</span> <span class="attr">ixz</span>=<span class="string">&quot;0.0&quot;</span> <span class="attr">iyy</span>=<span class="string">&quot;100.0&quot;</span> <span class="attr">iyz</span>=<span class="string">&quot;0.0&quot;</span> <span class="attr">izz</span>=<span class="string">&quot;1.0&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">inertial</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">&quot;$&#123;grasp_frame_len&#125; $&#123;grasp_frame_width&#125; $&#123;grasp_frame_height&#125;&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;White&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;grasping_frame_joint&quot;</span> <span class="attr">type</span>=<span class="string">&quot;fixed&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;gripper_roll_link&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;grasping_frame&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.08 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 0 0&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;$(find mastering_ros_robot_description_pkg)/urdf/sensors/xtion_pro_live.urdf.xacro&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////// --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Transmissions for ROS Control --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:transmission_block</span> <span class="attr">joint_name</span>=<span class="string">&quot;shoulder_pan_joint&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:transmission_block</span> <span class="attr">joint_name</span>=<span class="string">&quot;shoulder_pitch_joint&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:transmission_block</span> <span class="attr">joint_name</span>=<span class="string">&quot;elbow_roll_joint&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:transmission_block</span> <span class="attr">joint_name</span>=<span class="string">&quot;elbow_pitch_joint&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:transmission_block</span> <span class="attr">joint_name</span>=<span class="string">&quot;wrist_roll_joint&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:transmission_block</span> <span class="attr">joint_name</span>=<span class="string">&quot;wrist_pitch_joint&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:transmission_block</span> <span class="attr">joint_name</span>=<span class="string">&quot;gripper_roll_joint&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:transmission_block</span> <span class="attr">joint_name</span>=<span class="string">&quot;finger_joint1&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xacro:transmission_block</span> <span class="attr">joint_name</span>=<span class="string">&quot;finger_joint2&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- ros_control plugin --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">gazebo</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">&quot;gazebo_ros_control&quot;</span> <span class="attr">filename</span>=<span class="string">&quot;libgazebo_ros_control.so&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">robotNamespace</span>&gt;</span>/seven_dof_arm<span class="tag">&lt;/<span class="name">robotNamespace</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">robotNamespace</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>机器人控制</category>
        <category>专栏——ROS下七自由度机器人仿真的实现</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>机器人</tag>
        <tag>ROS</tag>
      </tags>
  </entry>
  <entry>
    <title>ROS仿真揭秘——七自由度机器人(二)</title>
    <url>/archives/d0432caf.html</url>
    <content><![CDATA[<p><img src=" /images/20200224/00.gif" width=30% /><br>这一篇我们来了解一下组成七自由度机器人的文件系统，并对launch文件做一个解读。<br><span id="more"></span></p>
<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0 前言"></a>0 前言</h1><p>如果你对ROS的基础知识有所欠缺，可以参考：</p>
<ul>
<li><a href="https://colainlibrary.com/93ffe1ad.html">ROS文件系统概述</a></li>
<li><a href="https://colainlibrary.com/92e37bf7.html">ROS节点之间的基本通讯方式</a></li>
</ul>
<p>如果你不清楚七自由度机器人机器人仿真的运行方式，可以参考：</p>
<ul>
<li><a href="https://colainlibrary.com/7f72b7cd.html">ROS仿真揭秘——七自由度机器人(一)</a></li>
</ul>
<h1 id="1-组成模型的文件"><a href="#1-组成模型的文件" class="headerlink" title="1 组成模型的文件"></a>1 组成模型的文件</h1><p>关于工作空间建立好后有的文件，因为都是统一的格式，这里不予过多介绍。我们关注的是，每一个仿真模型的文件组成。依据上一篇的介绍，我们在下载模型时从github上下载了两个文件，一个是机器人3D模型，另一个是机器人控制器。</p>
<h2 id="1-1-3D模型的文件组成"><a href="#1-1-3D模型的文件组成" class="headerlink" title="1.1 3D模型的文件组成"></a>1.1 3D模型的文件组成</h2><p>3D模型<code>mastering_ros_robot_description_pkg</code>的组成如下图所示。<br><img src="/images/20200224/01.png" alt="01"></p>
<h2 id="1-2-控制器的文件组成"><a href="#1-2-控制器的文件组成" class="headerlink" title="1.2 控制器的文件组成"></a>1.2 控制器的文件组成</h2><p>七自由度机器人控制器<code>seven_dof_arm_gazebo</code>的组成如下图所示。<br><img src="/images/20200224/02.png" alt="02"></p>
<h1 id="2-launch文件解读"><a href="#2-launch文件解读" class="headerlink" title="2 launch文件解读"></a>2 launch文件解读</h1><p>从上面的两组文件以及在上一篇第3节运行程序的过程中，可以看出，二者从文件组成方面似乎没有一个直观的交集。莫急，我们顺着它程序运行的流程做一个探究。从上一篇博客中，我们知道通过两条<em>roslaunch</em>的命令分别启动了Rviz和Gazebo，我们就从这里开始研究吧！</p>
<h2 id="2-1-launch文件的使用方法"><a href="#2-1-launch文件的使用方法" class="headerlink" title="2.1 launch文件的使用方法"></a>2.1 launch文件的使用方法</h2><p>launch文件的使用格式是：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ roslaunch package_name launch_file_name</span><br></pre></td></tr></table></figure><br>launch文件是XML文件，所有内容都包含在<code>&lt;launch&gt;....&lt;/launch&gt;</code>这一对标签之内。对于七自由度机器人，首先是只在Rviz下显示的程序，我们在上节直接通过执行<code>roslaunch mastering_ros_robot_description_pkg view_arm.launch</code>这一条指令将程序跑了起来。从这条指令中可以看到，它运行的是<strong>mastering_ros_robot_descripion_pkg</strong>中的<strong>launch/view_arm.launch</strong>文件。其次，在上节通过<code>roslaunch seven_dof_arm_gazebo seven_dof_arm_gazebo_control.launch</code>这一条指令在Gazebo中将模型显示了出来。这条指令运行的是<strong>seven_dof_arm_gazebo</strong>中的<strong>launch/seven_dof_arm_gazebo_control.launch</strong>文件。</p>
<blockquote>
<p>说明：对于上一篇中将机器人运动的那条指令在这里先不介绍，后面到控制机器人运动的时候再做介绍。</p>
</blockquote>
<h2 id="2-2-view-arm-launch文件解读"><a href="#2-2-view-arm-launch文件解读" class="headerlink" title="2.2 view_arm.launch文件解读"></a>2.2 view_arm.launch文件解读</h2><h3 id="2-2-1-源码"><a href="#2-2-1-源码" class="headerlink" title="2.2.1 源码"></a>2.2.1 源码</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;model&quot;</span> /&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- Parsing xacro and setting robot_description parameter --&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;robot_description&quot;</span> <span class="attr">command</span>=<span class="string">&quot;$(find xacro)/xacro --inorder $(find mastering_ros_robot_description_pkg)/urdf/seven_dof_arm.xacro&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- Setting gui parameter to true for display joint slider --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;use_gui&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- Starting Joint state publisher node which will publish the joint values --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;joint_state_publisher&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;joint_state_publisher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;joint_state_publisher&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- Starting robot state publish which will publish tf --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;state_publisher&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- Launch visualization in rviz --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">type</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">args</span>=<span class="string">&quot;-d $(find mastering_ros_robot_description_pkg)/urdf.rviz&quot;</span> <span class="attr">required</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-2-2-view-arm-launch文件释义"><a href="#2-2-2-view-arm-launch文件释义" class="headerlink" title="2.2.2 view_arm.launch文件释义"></a>2.2.2 view_arm.launch文件释义</h3><h4 id="2-2-2-1-arg标签"><a href="#2-2-2-1-arg标签" class="headerlink" title="2.2.2.1 arg标签"></a>2.2.2.1 arg标签</h4><p>argument类似于launch文件内部的局部变量，仅限于launch文件使用，便于launch文件的重构，和ROS节点内部的实现没有关系。</p>
<p>设置argument使用<code>&lt;arg&gt;</code>标签元素，语法如下：<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">”arg-name”</span> <span class="attr">default</span>=<span class="string">”arg-value”/</span>&gt;</span></span><br></pre></td></tr></table></figure><br>name是参数的名称，还可以在后面添加参数value或者default。value是参数的值，default设定预设值，命令行方式可以覆盖default的值，但是不能覆盖value。</p>
<p>launch文件中需要使用到argument时，可以使用如下方式调用：<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;paramname=&quot;foo&quot; value=&quot;$(argarg-name)&quot; /&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;node&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;package&quot;</span> <span class="attr">type</span>=<span class="string">&quot;type &quot;</span><span class="attr">args</span>=<span class="string">&quot;$(arg arg-name)&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>回到<em>view_arm.launch</em>文件中：<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;model&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>这里定义了一个名为model的参数。</p>
<h4 id="2-2-2-2-param标签"><a href="#2-2-2-2-param标签" class="headerlink" title="2.2.2.2 param标签"></a>2.2.2.2 param标签</h4><p>parameter是ROS系统运行中的参数，存储在参数服务器中。在launch文件中通过<code>&lt;param&gt;</code>元素加载parameter；launch文件执行后，parameter就加载到ROS的参数服务器上了。每个活跃的节点都可以通过 ros::param::get()接口来获取parameter的值，用户也可以在终端中通过rosparam命令获得parameter的值。</p>
<p><code>&lt;param&gt;</code>的使用方法如下：<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;output_frame&quot;</span> <span class="attr">value</span>=<span class="string">&quot;odom&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><br>运行launch文件后，output_frame这个parameter的值就设置为odom，并且加载到ROS参数服务器上了。但是在很多复杂的系统中，参数的数量很多，如果这样一个一个的设置会非常麻烦，ROS也为我们提供了另外一种类似的参数加载方式——<code>&lt;rosparam&gt;</code>：<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;rosparamfile=&quot;$(find 2dnav_pr2)/config/costmap_common_params.yaml&quot; command=&quot;load&quot; ns=&quot;local_costmap&quot; /&gt;</span><br></pre></td></tr></table></figure><br><code>&lt;rosparam&gt;</code>可以帮助我们将一个yaml格式文件中的参数全部加载到ROS参数服务器中，需要设置command属性为“load”，还可以选择设置命名空间“ns”。</p>
<p>回到view_arm.launch文件中：<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;robot_description&quot;</span> <span class="attr">command</span>=<span class="string">&quot;$(find xacro)/xacro --inorder $(find mastering_ros_robot_description_pkg)/urdf/seven_dof_arm.xacro&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;use_gui&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>依据上述原理，我们知道第一句话的意思是<em>robot_description</em>这个参数，会加载在<strong>mastering_ros_robot_description</strong>中的<strong>urdf/seven_dof_arm_.xacro</strong>文件，该文件即为七自由度机器人的模型描述文件。第二句话的意思是设置一个GUI参数，从效果上来说就是会出现上一篇博客3.1节中的GUI界面。</p>
<h4 id="2-2-2-3-node标签"><a href="#2-2-2-3-node标签" class="headerlink" title="2.2.2.3 node标签"></a>2.2.2.3 node标签</h4><p>启动文件的核心是启动ROS节点，采用<code>&lt;node&gt;</code>标签定义，语法如下：<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;package-name&quot;</span><span class="attr">type</span>=<span class="string">&quot;executable-name&quot;</span> <span class="attr">name</span>=<span class="string">&quot;node-name&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>从上边的定义规则可以看出，在启动文件中启动一个节点需要三个属性：pkg、type和name。其中pkg定义节点所在的功能包名称，type定义节点的可执行文件名称，这两个属性等同于在终端中使用rosrun命令执行节点时的输入参数。name属性用来定义节点运行的名称，将覆盖节点中init()赋予节点的名称。这是三个最常用的属性，在某些情况下，我们还有可能用到以下属性：</p>
<ul>
<li>output = “screen”：将节点的标准输出打印到终端屏幕，默认输出为日志文档；</li>
<li>respawn = “true”：复位属性，该节点停止时，会自动重启，默认为false；</li>
<li>required = “true”：必要节点，当该节点终止时，launch文件中的其他节点也被终止；</li>
<li>ns = “namespace”：命名空间，为节点内的相对名称添加命名空间前缀；</li>
<li>args = “arguments”：节点需要的输入参数。</li>
</ul>
<p>在<em>view_arm.launch</em>文件中：<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;joint_state_publisher&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;joint_state_publisher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;joint_state_publisher&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;state_publisher&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">type</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">args</span>=<span class="string">&quot;-d $(find mastering_ros_robot_description_pkg)/urdf.rviz&quot;</span> <span class="attr">required</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>最后的这三个node：第一个node是<a href="http://wiki.ros.org/joint_state_publisher">joint_state_publisher</a>，它和GUI关联在一起；第二个是<a href="http://wiki.ros.org/robot_state_publisher">robot_state_publisher</a>；第三个是rviz，它来启动Rviz，并且输入<em>urdf.rviz</em>这个参数，以使模型正常显示。</p>
<p>在一个新终端中输入<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rosrun rqt_graph rqt_graph</span><br></pre></td></tr></table></figure></p>
<p>可以看到：<br><img src="/images/20200224/05.png" alt="05"></p>
<h2 id="2-3-seven-dof-arm-gazebo-control-launch文件解读"><a href="#2-3-seven-dof-arm-gazebo-control-launch文件解读" class="headerlink" title="2.3 seven_dof_arm_gazebo_control.launch文件解读"></a>2.3 seven_dof_arm_gazebo_control.launch文件解读</h2><h3 id="2-3-1-源码"><a href="#2-3-1-源码" class="headerlink" title="2.3.1 源码"></a>2.3.1 源码</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Launch Gazebo  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">&quot;$(find seven_dof_arm_gazebo)/launch/seven_dof_arm_world.launch&quot;</span> /&gt;</span>   </span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Load joint controller configurations from YAML file to parameter server --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">file</span>=<span class="string">&quot;$(find seven_dof_arm_gazebo)/config/seven_dof_arm_gazebo_control.yaml&quot;</span> <span class="attr">command</span>=<span class="string">&quot;load&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- load the controllers --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;controller_spawner&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;controller_manager&quot;</span> <span class="attr">type</span>=<span class="string">&quot;spawner&quot;</span> <span class="attr">respawn</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">output</span>=<span class="string">&quot;screen&quot;</span> <span class="attr">ns</span>=<span class="string">&quot;/seven_dof_arm&quot;</span> <span class="attr">args</span>=<span class="string">&quot;joint_state_controller</span></span></span><br><span class="line"><span class="string"><span class="tag">					  joint1_position_controller</span></span></span><br><span class="line"><span class="string"><span class="tag">					  joint2_position_controller</span></span></span><br><span class="line"><span class="string"><span class="tag">					  joint3_position_controller</span></span></span><br><span class="line"><span class="string"><span class="tag">					  joint4_position_controller</span></span></span><br><span class="line"><span class="string"><span class="tag">					  joint5_position_controller</span></span></span><br><span class="line"><span class="string"><span class="tag">					  joint6_position_controller</span></span></span><br><span class="line"><span class="string"><span class="tag">					  joint7_position_controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- convert joint states to TF transforms for rviz, etc --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;robot_state_publisher&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">respawn</span>=<span class="string">&quot;false&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">remap</span> <span class="attr">from</span>=<span class="string">&quot;/joint_states&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/seven_dof_arm/joint_states&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="2-3-2-解读"><a href="#2-3-2-解读" class="headerlink" title="2.3.2 解读"></a>2.3.2 解读</h3><h4 id="2-3-2-1-include标签"><a href="#2-3-2-1-include标签" class="headerlink" title="2.3.2.1 include标签"></a>2.3.2.1 include标签</h4><p>复杂系统有很多launch文件，它们之间存在依赖关系，可以复用已经有的launch文件。<br>大多数时候，include 使用find命令来搜索程序包，代替一个明确的完整路径：<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">&quot;$(find package-name)/launch-file-name&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><br>include 也支持 ns 属性，可以让这个文件里的内容推送到一个命名空间里面：<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">&quot;...&quot;</span> <span class="attr">ns</span>=<span class="string">&quot;namespace&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>example：<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">&quot;$(find realsense2_camera)/launch/rs_camera.launch&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;align_depth&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;unite_imu_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;linear_interpolation&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>在<em>seven_dof_arm_gazebo_control.launch</em>文件中：<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">&quot;$(find seven_dof_arm_gazebo)/launch/seven_dof_arm_world.launch&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>通过加载<em>seven_dof_arm_world.launch</em>文件，启动了Gazebo。</p>
<h4 id="2-3-2-2-控制器节点"><a href="#2-3-2-2-控制器节点" class="headerlink" title="2.3.2.2 控制器节点"></a>2.3.2.2 控制器节点</h4><p>中间的两句：<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">file</span>=<span class="string">&quot;$(find seven_dof_arm_gazebo)/config/seven_dof_arm_gazebo_control.yaml&quot;</span> <span class="attr">command</span>=<span class="string">&quot;load&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;controller_spawner&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;controller_manager&quot;</span> <span class="attr">type</span>=<span class="string">&quot;spawner&quot;</span> <span class="attr">respawn</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">output</span>=<span class="string">&quot;screen&quot;</span> <span class="attr">ns</span>=<span class="string">&quot;/seven_dof_arm&quot;</span> <span class="attr">args</span>=<span class="string">&quot;joint_state_controller</span></span></span><br><span class="line"><span class="string"><span class="tag">				  joint1_position_controller</span></span></span><br><span class="line"><span class="string"><span class="tag">				  joint2_position_controller</span></span></span><br><span class="line"><span class="string"><span class="tag">				  joint3_position_controller</span></span></span><br><span class="line"><span class="string"><span class="tag">				  joint4_position_controller</span></span></span><br><span class="line"><span class="string"><span class="tag">				  joint5_position_controller</span></span></span><br><span class="line"><span class="string"><span class="tag">				  joint6_position_controller</span></span></span><br><span class="line"><span class="string"><span class="tag">				  joint7_position_controller&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>第一句加载了<em>seven_dof_arm_gazebo_control.yaml</em>文件，该文件包含了七自由度机器人控制器的一些配置，我们之后再做介绍。第二句是控制器的节点，对应的pkg是<a href="http://wiki.ros.org/controller_manager">controller_manager</a>，type是spawner，还包含了joint_state_controller与7个关节对应的位置控制器，这些名字是怎么来的，我们以后再讲。</p>
<h4 id="2-3-2-3-remap标签"><a href="#2-3-2-3-remap标签" class="headerlink" title="2.3.2.3 remap标签"></a>2.3.2.3 remap标签</h4><p>ROS的设计目标是提高代码的复用率，所以ROS社区中的很多功能包我们都可以拿来直接使用，而不需要关注功能包的内部实现。那么问题就来了，别人功能包的接口不一定和我们的系统兼容呀？</p>
<p>ROS提供一种重映射的机制，简单来说就是取别名，类似于C++中的别名机制，我们不需要修改别人功能包的接口，只需要将接口名称重映射一下，取个别名，我们的系统就认识了（接口的数据类型必须相同）。launch文件中的<code>&lt;remap&gt;</code>标签可以帮我们实现这个重映射的功能。</p>
<p>在<em>seven_dof_arm_gazebo_control.launch</em>文件中的最后一个节点：<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;robot_state_publisher&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">respawn</span>=<span class="string">&quot;false&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">remap</span> <span class="attr">from</span>=<span class="string">&quot;/joint_states&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/seven_dof_arm/joint_states&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>上述robot_state_publisher节点中，将ROS自带的joint_states映射到了/seven_dof_arm/joint_states。<br><img src="/images/20200224/06.png" alt="06"></p>
<h2 id="2-4-seven-dof-arm-world-launch解读"><a href="#2-4-seven-dof-arm-world-launch解读" class="headerlink" title="2.4 seven_dof_arm_world.launch解读"></a>2.4 seven_dof_arm_world.launch解读</h2><h3 id="2-4-1-源码"><a href="#2-4-1-源码" class="headerlink" title="2.4.1 源码"></a>2.4.1 源码</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Part 1: --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- these are the arguments you can pass this launch file, for example paused:=true --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;paused&quot;</span> <span class="attr">default</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;use_sim_time&quot;</span> <span class="attr">default</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;gui&quot;</span> <span class="attr">default</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;headless&quot;</span> <span class="attr">default</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;debug&quot;</span> <span class="attr">default</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Part 2: --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- We resume the logic in empty_world.launch --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">&quot;$(find gazebo_ros)/launch/empty_world.launch&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;debug&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(arg debug)&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;gui&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(arg gui)&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;paused&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(arg paused)&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;use_sim_time&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(arg use_sim_time)&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;headless&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(arg headless)&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Part 3: --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Load the URDF into the ROS Parameter Server --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;robot_description&quot;</span> <span class="attr">command</span>=<span class="string">&quot;$(find xacro)/xacro --inorder &#x27;$(find mastering_ros_robot_description_pkg)/urdf/seven_dof_arm.xacro&#x27;&quot;</span> /&gt;</span> </span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Part 4: --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;urdf_spawner&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;gazebo_ros&quot;</span> <span class="attr">type</span>=<span class="string">&quot;spawn_model&quot;</span> <span class="attr">respawn</span>=<span class="string">&quot;false&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">args</span>=<span class="string">&quot;-urdf -model seven_dof_arm -param robot_description&quot;</span>/&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-4-2-解读"><a href="#2-4-2-解读" class="headerlink" title="2.4.2 解读"></a>2.4.2 解读</h3><p>从源码中可以看出，可以将该文件分为四块来解读。Part1是一部分针对仿真环境的默认参数设置；Part2是启动Gazebo的world模型及相关参数设置；Part3是设置一个名为robot_description的参数，对应的正是<em>mastering_ros_robot_description_pkg/urdf/seven_dof_arm.xacro</em>文件，因此这里将<strong>mastering_ros_robot_description_pkg</strong>和<strong>seven_dof_arm_gazebo</strong>两个ROS Package联系了起来；Part4则是通过节点urdf_spawner加载Part3中的参数robot_description。</p>
<h2 id="2-5-launch文件的其他语法格式"><a href="#2-5-launch文件的其他语法格式" class="headerlink" title="2.5 launch文件的其他语法格式"></a>2.5 launch文件的其他语法格式</h2><p>因为我们主要是依据七自由度机器人来介绍，所以这里只介绍了目前用到launch文件中的已有标签，但是launch文件的语法格式除了这些外，还有其他的标签，比如remap、group等标签，请自行查阅相关的参考链接。</p>
<h1 id="3-七自由度机器人文件流程图"><a href="#3-七自由度机器人文件流程图" class="headerlink" title="3 七自由度机器人文件流程图"></a>3 七自由度机器人文件流程图</h1><p>在第2节我们从roslaunch命令入手，一窥七自由度机器人的第一步运行过程。我将两个ROS Package的运行过程分别做了一个简单的流程图，如下所示：</p>
<p><img src="/images/20200224/03.png" alt="03"><br><img src="/images/20200224/04.png" alt="04"></p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/qq_21950671/article/details/101703451">ROS Launch 文件语法和例子讲解</a></li>
<li><a href="https://www.guyuehome.com/2195">ROS探索总结（五十六）—— launch文件</a></li>
<li><a href="http://wiki.ros.org/joint_state_publisher">joint_state_publisher</a></li>
<li><a href="http://wiki.ros.org/robot_state_publisher">robot_state_publisher</a></li>
<li><a href="http://wiki.ros.org/controller_manager">controller_manager</a></li>
</ol>
]]></content>
      <categories>
        <category>机器人控制</category>
        <category>专栏——ROS下七自由度机器人仿真的实现</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>机器人</tag>
        <tag>ROS</tag>
      </tags>
  </entry>
  <entry>
    <title>ROS仿真揭秘——七自由度机器人(一)</title>
    <url>/archives/7f72b7cd.html</url>
    <content><![CDATA[<p><img src=" /images/20200223/00.gif" width=30% /><br>从本篇开始，介绍一个ROS仿真平台下的七自由度机器人实例。这一篇，我们先让它动起来！<br><span id="more"></span></p>
<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0 前言"></a>0 前言</h1><p>由于工作需要来做一下实物仿真，只用MATLAB感觉有些不够，在机器人领域又有专门的ROS来做仿真，因此，还是系统的来学习一下ROS做仿真的流程吧。掌握之后，可以通过仿真来快速验证自己的算法，也还是不错的。本专栏以《Mastering ROS for Robotics Programming—Second Edition》中的七自由度机器人为例，旨在让初学者可以快速掌握ROS仿真的搭建过程。系统环境：Ubuntu16.04 + ROS kinetic + gazebo7。</p>
<h1 id="1-初始环境配置"><a href="#1-初始环境配置" class="headerlink" title="1 初始环境配置"></a>1 初始环境配置</h1><p>关于ROS环境的安装，请参考<a href="https://colainlibrary.com/archives/25595.html">ROS(kinetic)有用指令集</a>。如果在添加key时出错，请从官网查找适合软件源、适合ros版本的key。建议安装desktop-full的版本，这样会把gazebo等相关软件安装好。</p>
<p>装好ros后，需要创建一个工作空间。简单来说，每一个仿真模型我们都可以将其放在一个文件夹里，而工作空间就包含了这些文件夹，然后经过统一编译，便可以执行形式一致的命令来控制模型。下面给出常用的一些基本命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /opt/ros/kinetic/setup.bash		<span class="comment"># sourced your environment</span></span><br><span class="line"><span class="built_in">mkdir</span> -p ~/catkin_ws/src              <span class="comment"># 创建catkin_ws工作空间，建立一个src文件夹来存放模型源码</span></span><br><span class="line"><span class="built_in">cd</span> ~/catkin_ws/                       <span class="comment"># 打开工作空间</span></span><br><span class="line">catkin_make                           <span class="comment"># 编译</span></span><br><span class="line"><span class="built_in">source</span> devel/setup.bash</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$ROS_PACKAGE_PATH</span> 					      <span class="comment"># 确认环境变量包含了目录</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>说明：<code>catkin_make</code>是编译工作空间的命令，当每次新添加仿真模型后，都需要执行这条命令；<code>source devel/setup.bash</code>这条指令最好在每次打开工作空间后就执行一次，不然在新开的终端中执行<code>roslaunch</code>命令时往往会提示<code>[seven_dof_arm_gazebo_control.launch] is neither a launch file in package [seven_dof_arm_gazebo] nor is [seven_dof_arm_gazebo] a launch file name</code>之类的错误。</p>
</blockquote>
<h1 id="2-添加七自由度机器人模型"><a href="#2-添加七自由度机器人模型" class="headerlink" title="2 添加七自由度机器人模型"></a>2 添加七自由度机器人模型</h1><p>在第一节创建了工作空间后，向其中添加仿真模型有两种方法，一种是自行创建新程序包，即新的仿真模型；另一种是对于别人已经写好的仿真模型，直接复制或下载。</p>
<h1 id="2-1-自行创建新模型"><a href="#2-1-自行创建新模型" class="headerlink" title="2.1 自行创建新模型"></a>2.1 自行创建新模型</h1><p>使用下面的命令可以创建新的程序包：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/catkin_ws/src</span><br><span class="line">catkin_create_pkg beginner_tutorials std_msgs rospy roscpp</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure></p>
<p>上述命令的第2条意思是使用<code>catkin_create_pkg</code>命令来创建一个名为<code>beginner_tutorials</code>的新程序包，这个程序包依赖于<code>std_msgs</code>、<code>roscpp</code>和<code>rospy</code>。如果有其他的依赖项，在后面继续添加即可。</p>
<p>这里需要注意一下，Gazebo是安装ROS完整版时一起安装的一个仿真环境。为了正常使用，我们还需要安装一些其他的依赖：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装gazebo需要的一些依赖包</span></span><br><span class="line">sudo apt-get install ros-kinetic-gazebo-rospkgs ros-kinetic-gazebo-msgs ros-kinetic-gazebo-plugins ros-kinetic-gazeboros-control</span><br></pre></td></tr></table></figure></p>
<h1 id="2-2-下载七自由度机器人仿真模型"><a href="#2-2-下载七自由度机器人仿真模型" class="headerlink" title="2.2 下载七自由度机器人仿真模型"></a>2.2 下载七自由度机器人仿真模型</h1><p>对于我们所要用的例子，该书的作者已经帮我编写好了程序，我们可以将其直接下载拿来应用。在以后，我们会逐一介绍模型搭建的原理和实现控制模型的方法。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开工作空间下的src文件夹</span></span><br><span class="line"><span class="built_in">cd</span> ~/catkin_ws/src</span><br><span class="line"><span class="comment"># 下载机器人模型</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/jocacace/mastering_ros_robot_description_pkg.git</span><br><span class="line"><span class="comment"># 下载机器人仿真及控制器源码</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/jocacace/seven_dof_arm_gazebo.git</span><br><span class="line"><span class="comment"># 返回上一层目录</span></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure></p>
<h1 id="3-先让机器人动起来"><a href="#3-先让机器人动起来" class="headerlink" title="3 先让机器人动起来"></a>3 先让机器人动起来</h1><h2 id="3-1-Rviz中显示七自由度机器人"><a href="#3-1-Rviz中显示七自由度机器人" class="headerlink" title="3.1 Rviz中显示七自由度机器人"></a>3.1 Rviz中显示七自由度机器人</h2><p>我们可以先用Rviz对七自由度机器人做一个显示。关于Rviz是个什么东东，本篇就不讲了，目前只需知道它可以做机器人的显示即可。打开一个终端，执行<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/catkin_ws</span><br><span class="line"><span class="built_in">source</span> devel/setup.bash</span><br><span class="line">roslaunch mastering_ros_robot_description_pkg view_arm.launch </span><br></pre></td></tr></table></figure><br>打开后我们会看到Rviz中的一个七自由度机器人模型，并且有一个简单的GUI界面可以让我们手动操作机器人，如下图所示。<br><img src="/images/20200223/03.gif" alt="03"></p>
<blockquote>
<p>说明：本节对应的是2.2节中下载下来的<em>mastering_ros_robot_description_pkg</em>。该Package包含了一些机器人的显示模型，但不包含控制器。<br>注意：如果下载下来的程序在运行过程中提示有错，一般是在<em>mastering_ros_robot_description_pkg/urdf/seven_dof_arm.xacro</em>文件中屏蔽掉了<strong>grasping_frame</strong>的<strong>geometry</strong>属性，将该标签下的属性解除屏蔽即可。新手可参照其他<em>link</em>的<strong>geometry</strong>属性。其实，不解决这个错误也没关系，它只是七自由度机器人模型最上方的那个小白方块的显示，暂时不影响大局。</p>
</blockquote>
<h2 id="3-2-Gazebo中对机器人做仿真"><a href="#3-2-Gazebo中对机器人做仿真" class="headerlink" title="3.2 Gazebo中对机器人做仿真"></a>3.2 Gazebo中对机器人做仿真</h2><p>Rviz一般是用来做显示的工具，Gazebo则是物体仿真的一个环境。</p>
<ol>
<li><p>打开一个终端，执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/catkin_ws</span><br><span class="line"><span class="built_in">source</span> devel/setup.bash</span><br><span class="line">roslaunch seven_dof_arm_gazebo seven_dof_arm_gazebo_control.launch</span><br></pre></td></tr></table></figure>
<p>打开后我们会看到gazebo中的一个七自由度机器人模型，如下图所示。<br><img src="/images/20200223/01.png" alt="01"></p>
</li>
<li><p>打开第二个终端，执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/catkin_ws</span><br><span class="line"><span class="built_in">source</span> devel/setup.bash</span><br><span class="line">rtopic pub /seven_dof_arm/joint4_position_controller/command std_msgs/Float64 1.0</span><br></pre></td></tr></table></figure>
<p>执行时，注意观察gazebo中的运动效果，可以看到机器人第4关节进行了如下效果的运动。<br><img src="/images/20200223/02.png" alt="02"></p>
</li>
</ol>
<blockquote>
<p>说明：本节对应的是2.2节中下载下来的<em>seven_dof_arm_gazebo</em>安装包。该Package包含了一些七自由度机器人的控制器。</p>
</blockquote>
<p>经过上述的操作，应该已经让机器人成功运动起来了。什么？动完之后觉得索然无味？废话！都不打赏怎么能有意思？(皮一下，逃～)不知其所以然，怎么能体会到其中的奥妙！还不赶紧看后面的博客！</p>
]]></content>
      <categories>
        <category>机器人控制</category>
        <category>专栏——ROS下七自由度机器人仿真的实现</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>机器人</tag>
      </tags>
  </entry>
  <entry>
    <title>ros_control介绍</title>
    <url>/archives/cf0a378a.html</url>
    <content><![CDATA[<p><img src=" /images/20200221/00.png" width=50% /><br>仿真模型究竟是怎么样控制的呢？这一节我们来谈一谈用ros_control来控制gazebo中的仿真模型吧。<br><span id="more"></span></p>
<blockquote>
<p>本篇内容主要转自<a href="https://www.guyuehome.com/890">古月居ROS探索总结（三十一）——ros_control</a>。</p>
</blockquote>
<h1 id="1-ros-control概述"><a href="#1-ros-control概述" class="headerlink" title="1.ros_control概述"></a>1.ros_control概述</h1><p>ROS中提供了丰富的机器人应用：SLAM、导航、MoveIt……但是你可能一直有一个疑问，这些功能包到底应该怎么样用到我们的机器人上，也就是说在应用和实际机器人或者机器人仿真器之间，缺少一个连接两者的东西。这个可以形象地用上图中的！！！部分描述。</p>
<p>ros_control就是ROS为用户提供的应用与机器人之间的中间件，包含一系列控制器接口、传动装置接口、硬件接口、控制器工具箱等等，可以帮助机器人应用快速落地，提高开发效率。我们将上图填充完整后，是如下效果：<br><img src="/images/20200221/01.png" alt="01"></p>
<p>从上图中可以看出，ros确实是一个框架。ros_control可以提供多种类型的控制器(底盘、机械臂等)，但是这些控制器的接口各不相同，为了提高代码的复用率，ros_control还提供一个硬件的抽象层(Robot hardware abstraction)。硬件抽象层负责机器人硬件资源的管理;而controller从抽象层请求资源即可，并不直接接触硬件。<br><img src="/images/20200221/03.png" alt="03"></p>
<p>上图是ros_control的数据流图，可以更加清晰的看到每个层次包含的功能：</p>
<ul>
<li>Controller Manager：每个机器人可能有多个controller，所以这里有一个控制器管理器的概念，提供一种通用的接口来管理不同的controller。controller manager的输入就是ROS上层应用的输出。</li>
<li>Controller：controller可以完成每个joint的控制，请求下层的硬件资源，并且提供了PID控制器，读取硬件资源接口中的状态，在发布控制命令。</li>
<li>Hardware Rescource：为上下两层提供硬件资源的接口。</li>
<li>RobotHW：硬件抽象层和硬件直接打交道，通过write和read方法来完成硬件的操作，这一层也包含关节限位、力矩转换、状态转换等功能。</li>
<li>Real Robot：实际的机器人上也需要有自己的嵌入式控制器，接收到命令后需要反映到执行器上，比如接收到位置1的命令后，那就需要让执行器快速、稳定的到达位置1。</li>
</ul>
<h1 id="2-Controllers"><a href="#2-Controllers" class="headerlink" title="2. Controllers:"></a>2. Controllers:</h1><p>ros_controllers这个功能包提供了已有的一些controllers：</p>
<ol>
<li><a href="https://github.com/ros-controls/ros_controllers/tree/melodic-devel/effort_controllers/include/effort_controllers">effort_controllers</a> - Command a desired force/torque to joints.<ul>
<li>joint_effort_controller</li>
<li>joint_position_controller</li>
<li>joint_velocity_controller</li>
</ul>
</li>
<li><a href="https://github.com/ros-controls/ros_controllers/tree/melodic-devel/joint_state_controller/include/joint_state_controller">joint_state_controller</a> - Read all joint positions.<ul>
<li>joint_state_controller</li>
</ul>
</li>
<li><a href="https://github.com/ros-controls/ros_controllers/tree/melodic-devel/position_controllers/include/position_controllers">position_controllers</a> - Set one or multiple joint positions at once.<ul>
<li>joint_position_controller</li>
<li>joint_group_position_controller</li>
</ul>
</li>
<li><a href="https://github.com/ros-controls/ros_controllers/tree/melodic-devel/velocity_controllers/include/velocity_controllers">velocity_controllers</a> - Set one or multiple joint velocities at once.<ul>
<li>joint_velocity_controller</li>
<li>joint_group_velocity_controller</li>
</ul>
</li>
<li><a href="https://github.com/ros-controls/ros_controllers/tree/melodic-devel/joint_trajectory_controller">joint_trajectory_controllers</a> - Extra functionality for splining an entire trajectory.<ul>
<li>position_controller</li>
<li>velocity_controller</li>
<li>effort_controller</li>
<li>position_velocity_controller</li>
<li>position_velocity_acceleration_controller</li>
</ul>
</li>
</ol>
<p>当然，我们也可以根据自己的需求，创建需要的controller，然后通过controller来管理自己创建的controller，可以参考<a href="https://github.com/ros-controls/ros_control/wiki/controller_interface">https://github.com/ros-controls/ros_control/wiki/controller_interface</a>.</p>
<h1 id="3-Hardware-Interface"><a href="#3-Hardware-Interface" class="headerlink" title="3.Hardware Interface"></a>3.Hardware Interface</h1><p>Hardware Interface是controller和RobotHw沟通的接口，基本上和controllers的种类是对应的，同样可以自己创建需要的接口，可以参考：<a href="https://github.com/ros-controls/ros_control/wiki/hardware_interface">https://github.com/ros-controls/ros_control/wiki/hardware_interface</a>.</p>
<ol>
<li>Joint Command Interfaces<ul>
<li>Effort Joint Interface</li>
<li>Velocity Joint Interface</li>
<li>Position Joint Interface</li>
</ul>
</li>
<li>Joint State Interfaces</li>
<li>Actuator State Interfaces</li>
<li>Actuator Command Interfaces<ul>
<li>Effort Actuator Interface</li>
<li>Velocity Actuator Interface</li>
<li>Position Actuator Interface</li>
</ul>
</li>
<li>Force-torque sensor Interface</li>
<li>IMU sensor Interface</li>
</ol>
<h1 id="4-Transmissions"><a href="#4-Transmissions" class="headerlink" title="4. Transmissions"></a>4. Transmissions</h1><p>Transmissions就是机器人的传动系统，机器人每个需要运动的关节都需要配置相应的Transmission，可以通过代码完成<a href="https://github.com/ros-controls/ros_control/wiki/transmission_interface">https://github.com/ros-controls/ros_control/wiki/transmission_interface</a>，但大部分情况下，都会在URDF文件中直接添加<a href="http://ros.org/wiki/urdf/XML/Transmission">http://ros.org/wiki/urdf/XML/Transmission</a>。关于Transmissions的更多介绍可以参考<a href="https://blog.csdn.net/sunbibei/article/details/53287975">ROS Control之Transmission</a></p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://www.guyuehome.com/890">古月居ROS探索总结（三十一）——ros_control</a></li>
<li><a href="http://wiki.ros.org/ros_control">ros_control官网</a></li>
<li><a href="http://gazebosim.org/tutorials/?tut=ros_control">Gazebo: ros_control官网</a></li>
</ol>
]]></content>
      <categories>
        <category>机器人控制</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>机器人</tag>
        <tag>ROS</tag>
      </tags>
  </entry>
  <entry>
    <title>ROS节点之间基本的通讯方式介绍</title>
    <url>/archives/92e37bf7.html</url>
    <content><![CDATA[<p><img src=" /images/20200220/00.jpg" width=50% /><br>这一篇我们来聊一聊ROS的通讯方式。<br><span id="more"></span></p>
<h1 id="1-Understanding-the-ROS-computation-graph-level"><a href="#1-Understanding-the-ROS-computation-graph-level" class="headerlink" title="1 Understanding the ROS computation graph level"></a>1 Understanding the ROS computation graph level</h1><p>这篇我们来理解一下ROS中的Nodes、Master、Parameter server、Messages、Topics、Services，以及Bags。不理解这些ros的基本概念，后面没有办法继续给ROS盖楼。我理解的这个是ROS的通讯方式，但是为什么在书中叫做computation graph(计算图)？Anyway，与ROS通信相关的软件包包括核心客户端库（例如roscpp和rospython）以及概念的实现（例如topics，nodes，parameters和services），都包含在称为<a href="http://wiki.ros.org/ros_comm">ros_comm</a>的堆栈中。该堆栈还包含rostopic，rosparam，rosservice和rosnode之类的工具。ros_comm堆栈包含ROS通信中间件程序包，这些程序包统称为ROS Graph层：<br><img src="/images/20200220/01.png" alt="01"></p>
<p>接下来对上图中的这些概念予以说明。</p>
<ul>
<li>Nodes：节点是执行计算的过程。每个ROS节点都是使用ROS客户端库编写的。使用客户端库API，我们可以实现不同的ROS功能，例如节点之间的通信方法，当我们的机器人的不同节点必须在它们之间交换信息时，该功能特别有用。使用ROS通信方法，它们可以相互通信并交换数据。 ROS节点的目的之一是构建简单的过程，而不是具有所有功能的大型过程。 ROS节点结构简单，易于调试。</li>
<li>Master：ROS主机为其余节点提供名称注册和查找。没有ROS Master，节点将无法找到彼此，交换消息或调用服务。在分布式系统中，我们应该在一台计算机上运行主机，其他远程节点可以通过与该主机进行通信来找到彼此。</li>
<li>Parameter server：参数服务器使您可以将数据存储在中央位置。所有节点都可以访问和修改这些值。参数服务器是ROS Master的一部分。</li>
<li>Messages：节点之间通过消息进行通信。消息只是包含类型字段的数据结构，该字段可以保存一组数据，并且可以发送到另一个节点。有标准的基本类型（整数，浮点型，布尔型等），ROS消息支持这些类型。我们还可以使用这些标准类型构建自己的消息类型。</li>
<li>Topics：主题。ROS中的每个消息都是使用称为主题的命名总线传输的。当节点通过主题发送消息时，可以说该节点正在发布主题。当节点通过主题接收消息时，可以说该节点正在订阅主题。发布节点和订阅节点不知道彼此的存在。我们甚至可以订阅可能没有任何发布者的主题。简而言之，信息的产生和信息的消耗是分离的。每个主题都有一个唯一的名称，只要节点具有正确的消息类型，任何节点都可以访问该主题并通过该主题发送数据。</li>
<li>Services：在某些机器人应用程序中，发布/订阅通信模型可能不合适。 例如，在某些情况下，我们需要一种请求/响应交互，其中一个节点可以要求对另一个节点执行快速过程(例如，要求快速计算)。 ROS service交互就像一个远程过程调用。</li>
<li>Logging：ROS提供了一个日志记录系统，用于存储数据（例如传感器数据），这些数据可能很难收集，但是对于开发和测试机器人算法（bagfile）是必需的。 当我们使用复杂的机器人机制时，bagfile是非常有用的功能。</li>
</ul>
<p>OK，上述是直接从《Mastering ROS for Robotics Programming-Second Edition》翻译过来的。咱们还是说点人话吧<sup>1</sup>。</p>
<ul>
<li>Nodes几乎是无处不在，这个东西相当于可执行文件，目前我更愿意把它当做cpp文件，通过catkin_make之后生成可执行文件。</li>
<li>Messages就像是血液一样，将Nodes连接起来，没有Messages，就成了哑巴，是无法建立起传递机制的。</li>
<li>Topics就像是QQ群一样，提供一个平台。当有人发了一条消息后，QQ群告诉任何一个加群的人，有没有红包啥的。显然这是一种通过第三方传递的方式，也就是间接传递。发红包的人就是publisher，看群消息的人就是subscriber，然后是MESSAGE传递，这就很简单了，就是水群。Topics适用于流式传输连续的数据流，例如传感器数据。 例如，播放游戏手柄数据以遥控机器人，发布机器人测距法，发布来自摄像机的视频流。</li>
<li>Services有点像两人私聊的意思，或者是很多人找一个人私聊。跳过了Topics平台，它与Topics区别就在于是消息直接传递还是间接传递。水群就是间接传递，多对多传递。私聊就是直接传递，一对一。Services适用于使得执行程序快速终止。 例如，保存传感器的校准参数，保存机器人在导航过程中生成的地图或加载参数文件。</li>
</ul>
<h1 id="2-ROS-computation-graph-实战"><a href="#2-ROS-computation-graph-实战" class="headerlink" title="2 ROS computation graph 实战"></a>2 ROS computation graph 实战</h1><p>了解了通讯的基本构建后，不来点实际的怎么能过瘾呢？</p>
<h2 id="2-1-Topics实战"><a href="#2-1-Topics实战" class="headerlink" title="2.1 Topics实战"></a>2.1 Topics实战</h2><h3 id="2-1-1-创建ros-package"><a href="#2-1-1-创建ros-package" class="headerlink" title="2.1.1 创建ros package"></a>2.1.1 创建ros package</h3><p>Topics是两个nodes间最基本的通讯方式。本节我们来聊聊Topics的工作方式。首先，自行创建一个示例包<code>demo_pkg</code>。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/catkin_ws/src</span><br><span class="line">catkin_create_pkg demo_pkg roscpp std_msgs actionlib actionlib_msgs</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure><br>新包创建完成后的目录如下图所示：</p>
<p><img src="/images/20200220/02.png" alt="02"></p>
<p>因为在创建<code>demo_pkg</code>时，添加了依赖项<code>roscpp</code>，因此会有一个<code>src</code>文件，用来存放cpp源文件。我们创建的这个ros package，它的功能是：一个Publisher node通过名为<code>/numbers</code>的topic来传递一个整型值，Subscriber node将这个值打印在屏幕上。</p>
<h3 id="2-1-2-创建源文件"><a href="#2-1-2-创建源文件" class="headerlink" title="2.1.2 创建源文件"></a>2.1.2 创建源文件</h3><h4 id="2-1-2-1-Publisher-node"><a href="#2-1-2-1-Publisher-node" class="headerlink" title="2.1.2.1 Publisher node"></a>2.1.2.1 Publisher node</h4><p>在<code>src</code>文件夹下新建一个名为<code>demo_topic_publisher.cpp</code>的文件(该文件即为<em>Publisher node</em>)，其内容为：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//roscpp Core header</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"><span class="comment">//Header of Int32 standard message</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;std_msgs/Int32.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//Initializing ROS node with a name of demo_topic_publisher</span></span><br><span class="line">	ros::<span class="built_in">init</span>(argc, argv,<span class="string">&quot;demo_topic_publisher&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Created a node handle object</span></span><br><span class="line">	ros::NodeHandle node_obj;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Created a publisher objec and named the topic /numbers with a message type std_msgs::Int32. The second argument is the buffer size.</span></span><br><span class="line"></span><br><span class="line">	ros::Publisher number_publisher = node_obj.<span class="built_in">advertise</span>&lt;std_msgs::Int32&gt;(<span class="string">&quot;/numbers&quot;</span>,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Created a rate object</span></span><br><span class="line">	<span class="function">ros::Rate <span class="title">loop_rate</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Variable of the number initializing as zero</span></span><br><span class="line">	<span class="type">int</span> number_count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//While loop for incrementing number and publishing to topic /numbers</span></span><br><span class="line">	<span class="keyword">while</span> (ros::<span class="built_in">ok</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//Created a Int32 message</span></span><br><span class="line">		std_msgs::Int32 msg;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//Inserted data to message header</span></span><br><span class="line">		msg.data = number_count;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//Printing message data</span></span><br><span class="line">		<span class="built_in">ROS_INFO</span>(<span class="string">&quot;%d&quot;</span>,msg.data);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//Publishing the msg to topic /numbers</span></span><br><span class="line">		number_publisher.<span class="built_in">publish</span>(msg);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//Spinning once for doing the  all operation once</span></span><br><span class="line">		ros::<span class="built_in">spinOnce</span>();</span><br><span class="line"></span><br><span class="line">		<span class="comment">//Sleeping for sometime</span></span><br><span class="line">		loop_rate.<span class="built_in">sleep</span>();</span><br><span class="line"></span><br><span class="line">		<span class="comment">//Incrementing the count</span></span><br><span class="line">		++number_count;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="2-1-2-2-Subscriber-node"><a href="#2-1-2-2-Subscriber-node" class="headerlink" title="2.1.2.2 Subscriber node"></a>2.1.2.2 Subscriber node</h4><p>在<code>src</code>文件夹下新建一个名为<code>demo_topic_subscriber.cpp</code>的文件(该文件即为<em>Subscriber node</em>)，其内容为：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;std_msgs/Int32.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Callback of the topic /numbers</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">number_callback</span><span class="params">(<span class="type">const</span> std_msgs::Int32::ConstPtr&amp; msg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">ROS_INFO</span>(<span class="string">&quot;Recieved  [%d]&quot;</span>,msg-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//Initializing ROS node with a name of demo_topic_subscriber</span></span><br><span class="line">	ros::<span class="built_in">init</span>(argc, argv,<span class="string">&quot;demo_topic_subscriber&quot;</span>);</span><br><span class="line">	<span class="comment">//Created a nodehandle object</span></span><br><span class="line">	ros::NodeHandle node_obj;</span><br><span class="line">	<span class="comment">//Create a publisher object</span></span><br><span class="line">	ros::Subscriber number_subscriber = node_obj.<span class="built_in">subscribe</span>(<span class="string">&quot;/numbers&quot;</span>,<span class="number">10</span>,number_callback);</span><br><span class="line">	<span class="comment">//Spinning the node</span></span><br><span class="line">	ros::<span class="built_in">spin</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><em>Subscriber node</em>通过<em>number_callback</em>将数字打印出来。</p>
<h3 id="2-1-3-编译"><a href="#2-1-3-编译" class="headerlink" title="2.1.3 编译"></a>2.1.3 编译</h3><p>首先，将ROS package中的<code>CMakeLists.txt</code>文件内容修改为：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 2.8.3)</span><br><span class="line">project(demo_pkg)</span><br><span class="line"></span><br><span class="line">find_package(catkin REQUIRED COMPONENTS</span><br><span class="line">  roscpp</span><br><span class="line">  rospy</span><br><span class="line">  std_msgs</span><br><span class="line">	actionlib</span><br><span class="line">  actionlib_msgs</span><br><span class="line">  message_generation</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">## System dependencies are found with CMake&#x27;s conventions</span></span><br><span class="line">find_package(Boost REQUIRED COMPONENTS system)</span><br><span class="line"></span><br><span class="line">catkin_package(</span><br><span class="line">  CATKIN_DEPENDS roscpp std_msgs actionlib actionlib_msgs</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># This will create executables of the nodes</span></span><br><span class="line">include_directories( include <span class="variable">$&#123;catkin_INCLUDE_DIRS&#125;</span> <span class="variable">$&#123;Boost_INCLUDE_DIRS&#125;</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment"># This will generate message header file before building the target</span></span><br><span class="line">add_executable(test_topic_publisher src/demo_topic_publisher.cpp)</span><br><span class="line">add_executable(test_topic_subscriber src/demo_topic_subscriber.cpp)</span><br><span class="line"></span><br><span class="line"><span class="comment"># This will link executables to the appropriate libraries</span></span><br><span class="line">add_dependencies(test_topic_publisher demo_pkg_generate_messages_cpp)</span><br><span class="line">add_dependencies(test_topic_subscriber demo_pkg_generate_messages_cpp)</span><br><span class="line"></span><br><span class="line">target_link_libraries(test_topic_publisher <span class="variable">$&#123;catkin_LIBRARIES&#125;</span>)</span><br><span class="line">target_link_libraries(test_topic_subscriber <span class="variable">$&#123;catkin_LIBRARIES&#125;</span>)</span><br></pre></td></tr></table></figure></p>
<p>编写好<code>CMakeLists.txt</code>文件后，回到Terminal，执行：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/catkin_ws</span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure></p>
<h3 id="2-1-4-运行程序"><a href="#2-1-4-运行程序" class="headerlink" title="2.1.4 运行程序"></a>2.1.4 运行程序</h3><ol>
<li>打开一个Terminal，执行<code>roscore</code>；</li>
<li>再开一个Terminal，执行：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/catkin_ws/</span><br><span class="line"><span class="built_in">source</span> devel/setup.bash</span><br><span class="line">rosrun demo_pkg test_topic_publisher</span><br></pre></td></tr></table></figure></li>
<li>打开第三个Terminal，执行：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/catkin_ws/</span><br><span class="line"><span class="built_in">source</span> devel/setup.bash</span><br><span class="line">rosrun demo_pkg test_topic_subscriber</span><br></pre></td></tr></table></figure></li>
<li>程序运行结果如下：<br><img src="/images/20200220/03.png" alt="03"></li>
</ol>
<h3 id="2-1-4-查看节点信息"><a href="#2-1-4-查看节点信息" class="headerlink" title="2.1.4 查看节点信息"></a>2.1.4 查看节点信息</h3><ol>
<li><code>rosnode list</code>：列出活动节点<br><img src="/images/20200220/04.png" alt="04"></li>
<li><code>rosnode info demo_topic_publisher</code>：获取publisher node的信息<br><img src="/images/20200220/05.png" alt="05"></li>
<li><code>rostopic echo /numbers</code>：获取通过topic /numbers传递的数值<br><img src="/images/20200220/06.png" alt="06"></li>
<li><code>rostopic type /numbers</code>：获取通过topic /numbers传递的数据类型<br><img src="/images/20200220/07.png" alt="07"></li>
</ol>
<h2 id="2-2-添加message"><a href="#2-2-添加message" class="headerlink" title="2.2 添加message"></a>2.2 添加message</h2><p>本节来聊聊如何向现有的ROS package中添加messages(.msg文件)。这种格式的文件可以告知ROS从node传来的数据类型。当一个message被添加时，ROS会将其定义转为等效的C++代码，这样我们可以将它包含在nodes中。</p>
<h3 id="2-2-1-创建源文件"><a href="#2-2-1-创建源文件" class="headerlink" title="2.2.1 创建源文件"></a>2.2.1 创建源文件</h3><h4 id="2-2-1-1-定义message"><a href="#2-2-1-1-定义message" class="headerlink" title="2.2.1.1 定义message"></a>2.2.1.1 定义message</h4><p>假定我们要通过message传递一个字符串，一个整型数据。首先，在现有的ROS包中创建一个文件夹<code>msg</code>，在其中新建一个文件<code>demo_msg.msg</code>，并在其中写入以下内容：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">string greeting</span><br><span class="line">int32 number</span><br></pre></td></tr></table></figure></p>
<p>这样，我们就定义好了message。接下来，要把这个message包含在nodes中。需要做的是将它在ROS package中申明。怎么做呢？打开<code>package.xml文件</code>，添加依赖项：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;build_depend&gt;message_generation&lt;/build_depend&gt;</span><br><span class="line">&lt;exec_depend&gt;message_runtime&lt;/exec_depend&gt;</span><br></pre></td></tr></table></figure></p>
<h4 id="2-2-1-2-创建message-publisher"><a href="#2-2-1-2-创建message-publisher" class="headerlink" title="2.2.1.2 创建message publisher"></a>2.2.1.2 创建message publisher</h4><p>在<code>demo_pkg</code>中打开<code>src</code>文件夹，新建一个<code>demo_msg_publisher.cpp</code>文件用来发布我们自定义的message。其内容如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;std_msgs/Int32.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;demo_pkg/demo_msg.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Defining namespace using in this code</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//using namespace ros;</span></span><br><span class="line"><span class="comment">//using namespace std_msgs;</span></span><br><span class="line"><span class="comment">//using namespace demo_pkg;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//Initializing ROS node with a name of demo_topic_publisher</span></span><br><span class="line">	ros::<span class="built_in">init</span>(argc, argv,<span class="string">&quot;demo_msg_publisher&quot;</span>);</span><br><span class="line">	<span class="comment">//Created a nodehandle object</span></span><br><span class="line">	ros::NodeHandle node_obj;</span><br><span class="line">	<span class="comment">//Create a publisher object</span></span><br><span class="line">	ros::Publisher number_publisher = node_obj.<span class="built_in">advertise</span>&lt;demo_pkg::demo_msg&gt;(<span class="string">&quot;/demo_msg_topic&quot;</span>,<span class="number">10</span>);</span><br><span class="line">	<span class="comment">//Create a rate object</span></span><br><span class="line">	<span class="function">ros::Rate <span class="title">loop_rate</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">	<span class="comment">//Variable of the number initializing as zero</span></span><br><span class="line">	<span class="type">int</span> number_count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//While loop for incrementing number and publishing to topic /numbers</span></span><br><span class="line">	<span class="keyword">while</span> (ros::<span class="built_in">ok</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//Created a Int32 message</span></span><br><span class="line">		demo_pkg::demo_msg msg;</span><br><span class="line">		<span class="comment">//Inserted data to message header</span></span><br><span class="line"></span><br><span class="line">        std::stringstream ss;</span><br><span class="line">	    ss &lt;&lt; <span class="string">&quot;hello world &quot;</span>;</span><br><span class="line">	    msg.greeting = ss.<span class="built_in">str</span>();</span><br><span class="line"></span><br><span class="line">		msg.number = number_count;</span><br><span class="line">		<span class="comment">//Printing message data</span></span><br><span class="line">		<span class="built_in">ROS_INFO</span>(<span class="string">&quot;%d&quot;</span>,msg.number);</span><br><span class="line">		<span class="built_in">ROS_INFO</span>(<span class="string">&quot;%s&quot;</span>,msg.greeting.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">		<span class="comment">//Publishing the message</span></span><br><span class="line">		number_publisher.<span class="built_in">publish</span>(msg);</span><br><span class="line">		<span class="comment">//Spining once for doing the  all operation once</span></span><br><span class="line">		ros::<span class="built_in">spinOnce</span>();</span><br><span class="line">		<span class="comment">//Setting the loop rate</span></span><br><span class="line">		loop_rate.<span class="built_in">sleep</span>();</span><br><span class="line">		<span class="comment">//Increamenting the count</span></span><br><span class="line">		++number_count;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="2-2-1-3-创建message-subscriber"><a href="#2-2-1-3-创建message-subscriber" class="headerlink" title="2.2.1.3 创建message subscriber"></a>2.2.1.3 创建message subscriber</h4><p>在<code>demo_pkg</code>中打开<code>src</code>文件夹，新建一个<code>demo_msg_subscriber.cpp</code>文件用来接收我们自定义的message。其内容如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;demo_pkg/demo_msg.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">number_callback</span><span class="params">(<span class="type">const</span> demo_pkg::demo_msg::ConstPtr&amp; msg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">ROS_INFO</span>(<span class="string">&quot;Recieved  greeting [%s]&quot;</span>,msg-&gt;greeting.<span class="built_in">c_str</span>());</span><br><span class="line">	<span class="built_in">ROS_INFO</span>(<span class="string">&quot;Recieved  [%d]&quot;</span>,msg-&gt;number);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//Initializing ROS node with a name of demo_topic_subscriber</span></span><br><span class="line">	ros::<span class="built_in">init</span>(argc, argv,<span class="string">&quot;demo_msg_subscriber&quot;</span>);</span><br><span class="line">	<span class="comment">//Created a nodehandle object</span></span><br><span class="line">	ros::NodeHandle node_obj;</span><br><span class="line">	<span class="comment">//Create a publisher object</span></span><br><span class="line">	ros::Subscriber number_subscriber = node_obj.<span class="built_in">subscribe</span>(<span class="string">&quot;/demo_msg_topic&quot;</span>,<span class="number">10</span>,number_callback);</span><br><span class="line">	<span class="comment">//Spinning the node</span></span><br><span class="line">	ros::<span class="built_in">spin</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这时候的文件目录如下所示：</p>
<p><img src="/images/20200220/08.png" alt="08"></p>
<h3 id="2-2-2-编译"><a href="#2-2-2-编译" class="headerlink" title="2.2.2 编译"></a>2.2.2 编译</h3><ol>
<li>打开<code>CMakeLists.txt</code>，添加自定义的message，如下：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">add_message_files(</span><br><span class="line">	FILES</span><br><span class="line">	demo_msg.msg</span><br><span class="line">)</span><br><span class="line"><span class="comment"># Generate added messages and services with any dependencies listed here</span></span><br><span class="line">generate_messages(</span><br><span class="line">	DEPENDENCIES</span><br><span class="line">	std_msgs</span><br><span class="line">	actionlib_msgs</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
<li><p>打开<code>CMakeLists.txt</code>，添加依赖项及生成项：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">add_executable(test_msg_publisher src/demo_msg_publisher.cpp)</span><br><span class="line">add_executable(test_msg_subscriber src/demo_msg_subscriber.cpp)</span><br><span class="line">add_dependencies(test_msg_publisher demo_pkg_generate_messages_cpp)</span><br><span class="line">add_dependencies(test_msg_subscriber demo_pkg_generate_messages_cpp)</span><br><span class="line">target_link_libraries(test_msg_publisher <span class="variable">$&#123;catkin_LIBRARIES&#125;</span>)</span><br><span class="line">target_link_libraries(test_msg_subscriber <span class="variable">$&#123;catkin_LIBRARIES&#125;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>编译</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/catkin_ws/</span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="2-2-3-运行"><a href="#2-2-3-运行" class="headerlink" title="2.2.3 运行"></a>2.2.3 运行</h3><ol>
<li><p>打开一个Terminal，执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">roscore</span><br></pre></td></tr></table></figure>
</li>
<li><p>再开一个Terminal，执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/catkin_ws/</span><br><span class="line"><span class="built_in">source</span> devel/setup.bash</span><br><span class="line">rosrun demo_pkg test_msg_publisher</span><br></pre></td></tr></table></figure>
</li>
<li><p>打开第三个Terminal，执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/catkin_ws/</span><br><span class="line"><span class="built_in">source</span> devel/setup.bash</span><br><span class="line">rosrun demo_pkg test_msg_subscriber</span><br></pre></td></tr></table></figure>
</li>
<li><p>程序运行结果如下：<br><img src="/images/20200220/09.png" alt="09"></p>
</li>
</ol>
<h2 id="2-3-Service实战"><a href="#2-3-Service实战" class="headerlink" title="2.3 Service实战"></a>2.3 Service实战</h2><h3 id="2-3-1-创建源文件"><a href="#2-3-1-创建源文件" class="headerlink" title="2.3.1 创建源文件"></a>2.3.1 创建源文件</h3><h4 id="2-3-1-1-定义service"><a href="#2-3-1-1-定义service" class="headerlink" title="2.3.1.1 定义service"></a>2.3.1.1 定义service</h4><p>类似于第2.2.1.1节定义message，这里也在现有的ROS package中创建一个文件夹<code>srv</code>，在其中新建一个文件<code>demo_srv.srv</code>，并在其中写入以下内容：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">string in</span><br><span class="line">---</span><br><span class="line">string out</span><br></pre></td></tr></table></figure></p>
<p>这样定义了通过service传递的是两个字符串。同时，也需要将它包含在ROS package中。做法同message一样。打开<code>package.xml文件</code>，添加依赖项：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;build_depend&gt;message_generation&lt;/build_depend&gt;</span><br><span class="line">&lt;exec_depend&gt;message_runtime&lt;/exec_depend&gt;</span><br></pre></td></tr></table></figure></p>
<h4 id="2-3-1-2-创建service-server"><a href="#2-3-1-2-创建service-server" class="headerlink" title="2.3.1.2 创建service server"></a>2.3.1.2 创建service server</h4><p>在<code>demo_pkg</code>中打开<code>src</code>文件夹，新建一个<code>demo_service_server.cpp</code>文件用来发布我们自定义的service。其内容如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;demo_pkg/demo_srv.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Defining namespace using in this code</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//using namespace ros;</span></span><br><span class="line"><span class="comment">//using namespace std_msgs;</span></span><br><span class="line"><span class="comment">//using namespace demo_pkg;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">demo_service_callback</span><span class="params">(demo_pkg::demo_srv::Request  &amp;req,</span></span></span><br><span class="line"><span class="params"><span class="function">         demo_pkg::demo_srv::Response &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//  ROS_INFO(&quot;From Client  [%s], Server says [%s]&quot;,req.in.c_str(),ss.c_str());</span></span><br><span class="line"></span><br><span class="line">  std::stringstream ss;</span><br><span class="line">  ss &lt;&lt; <span class="string">&quot;Received  Here&quot;</span>;</span><br><span class="line">  res.out = ss.<span class="built_in">str</span>();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">ROS_INFO</span>(<span class="string">&quot;From Client  [%s], Server says [%s]&quot;</span>,req.in.<span class="built_in">c_str</span>(),res.out.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ros::<span class="built_in">init</span>(argc, argv, <span class="string">&quot;demo_service_server&quot;</span>);</span><br><span class="line">  ros::NodeHandle n;</span><br><span class="line"></span><br><span class="line">  ros::ServiceServer service = n.<span class="built_in">advertiseService</span>(<span class="string">&quot;demo_service&quot;</span>, demo_service_callback);</span><br><span class="line">  <span class="built_in">ROS_INFO</span>(<span class="string">&quot;Ready to receive from client.&quot;</span>);</span><br><span class="line">  ros::<span class="built_in">spin</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="2-3-1-3-创建service-client"><a href="#2-3-1-3-创建service-client" class="headerlink" title="2.3.1.3 创建service client"></a>2.3.1.3 创建service client</h4><p>在<code>demo_pkg</code>中打开<code>src</code>文件夹，新建一个<code>demo_service_client.cpp</code>文件用来接收我们自定义的service。其内容如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;std_msgs/Int32.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;demo_pkg/demo_srv.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Defining namespace using in this code</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ros::<span class="built_in">init</span>(argc, argv, <span class="string">&quot;demo_service_client&quot;</span>);</span><br><span class="line">  ros::NodeHandle n;</span><br><span class="line">  <span class="function">ros::Rate <span class="title">loop_rate</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  ros::ServiceClient client = n.<span class="built_in">serviceClient</span>&lt;demo_pkg::demo_srv&gt;(<span class="string">&quot;demo_service&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (ros::<span class="built_in">ok</span>())</span><br><span class="line">	&#123;</span><br><span class="line">	  demo_pkg::demo_srv srv;</span><br><span class="line">	  std::stringstream ss;</span><br><span class="line">	  ss &lt;&lt; <span class="string">&quot;Sending from Here&quot;</span>;</span><br><span class="line">	  srv.request.in = ss.<span class="built_in">str</span>();</span><br><span class="line"></span><br><span class="line">	  <span class="keyword">if</span> (client.<span class="built_in">call</span>(srv))</span><br><span class="line">	  &#123;</span><br><span class="line">	    <span class="built_in">ROS_INFO</span>(<span class="string">&quot;From Client  [%s], Server says [%s]&quot;</span>,srv.request.in.<span class="built_in">c_str</span>(),srv.response.out.<span class="built_in">c_str</span>());</span><br><span class="line">	  &#125;</span><br><span class="line">	  <span class="keyword">else</span></span><br><span class="line">	  &#123;</span><br><span class="line">	    <span class="built_in">ROS_ERROR</span>(<span class="string">&quot;Failed to call service&quot;</span>);</span><br><span class="line">	    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	  &#125;</span><br><span class="line"></span><br><span class="line">	ros::<span class="built_in">spinOnce</span>();</span><br><span class="line">	<span class="comment">//Setting the loop rate</span></span><br><span class="line">	loop_rate.<span class="built_in">sleep</span>();</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>此时的ROS package目录如下图所示：</p>
<p><img src="/images/20200220/10.png" alt="10"></p>
<h3 id="2-3-2-编译"><a href="#2-3-2-编译" class="headerlink" title="2.3.2 编译"></a>2.3.2 编译</h3><ol>
<li>打开<code>CMakeLists.txt</code>，添加自定义的message，如下：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Generate services in the &#x27;srv&#x27; folder</span></span><br><span class="line">add_service_files(</span><br><span class="line">	FILES</span><br><span class="line">	demo_srv.srv</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">catkin_package(CATKIN_DEPENDS roscpp std_msgs actionlib actionlib_msgs message_runtime)</span><br></pre></td></tr></table></figure></li>
<li><p>打开<code>CMakeLists.txt</code>，添加依赖项及生成项：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">add_executable(test_service_server src/demo_service_server.cpp)</span><br><span class="line">add_executable(test_service_client src/demo_service_client.cpp)</span><br><span class="line">add_dependencies(test_service_server demo_pkg_generate_messages_cpp)</span><br><span class="line">add_dependencies(test_service_client demo_pkg_generate_messages_cpp)</span><br><span class="line">target_link_libraries(test_service_server <span class="variable">$&#123;catkin_LIBRARIES&#125;</span>)</span><br><span class="line">target_link_libraries(test_service_client <span class="variable">$&#123;catkin_LIBRARIES&#125;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>编译</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/catkin_ws/</span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="2-3-3-运行"><a href="#2-3-3-运行" class="headerlink" title="2.3.3 运行"></a>2.3.3 运行</h3><ol>
<li><p>打开一个Terminal，执行:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">roscore</span><br></pre></td></tr></table></figure>
</li>
<li><p>再开一个Terminal，执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/catkin_ws/</span><br><span class="line"><span class="built_in">source</span> devel/setup.bash</span><br><span class="line">rosrun demo_pkg test_service_server</span><br></pre></td></tr></table></figure></li>
<li><p>打开第三个Terminal，执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/catkin_ws/</span><br><span class="line"><span class="built_in">source</span> devel/setup.bash</span><br><span class="line">rosrun demo_pkg test_service_client</span><br></pre></td></tr></table></figure>
</li>
<li><p>程序运行结果如下：<br><img src="/images/20200220/11.png" alt="11"></p>
</li>
<li><p>通过<code>rosservice list</code>可以查看当前ROS services。</p>
</li>
</ol>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/qq_37193603/article/details/72901716">ROS节点，消息，话题，服务的介绍</a></li>
</ol>
]]></content>
      <categories>
        <category>机器人控制</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>机器人</tag>
        <tag>ROS</tag>
      </tags>
  </entry>
  <entry>
    <title>ROS文件系统概述</title>
    <url>/archives/93ffe1ad.html</url>
    <content><![CDATA[<p><img src=" /images/20200219/00.jpg" width=50% /><br>这一篇我们来简单了解一下组成ROS的文件系统。<br><span id="more"></span></p>
<h1 id="1-ROS-Package的组成"><a href="#1-ROS-Package的组成" class="headerlink" title="1 ROS Package的组成"></a>1 ROS Package的组成</h1><p>当我们创建好工作空间后，对于每一个模型都是一个Package。组成这个ROS Package的文件通常包括：<em>config</em>文件夹，<em>launch</em>文件夹，<em>meshes</em>文件夹，<em>src</em>文件夹，<em>scripts</em>文件夹，<em>urdf</em>文件夹，<em>worlds</em>文件夹，<em>package.xml</em>，<em>CMakeLists.txt</em>。接下来依次予以说明。 </p>
<ul>
<li>config文件夹。该文件夹下所有文件的后缀名为<code>.yaml</code>，这种格式的文件将机器人控制器与每个关节链接起来。关节状态控制器将发布手臂的关节状态，并且关节位置控制器可以为每个关节接收目标位置并可以移动每个关节。</li>
<li>launch文件夹。该文件夹下所有文件的后缀名为<code>.launch</code>，我们称之为launch(启动)文件。launch文件是一种基于XML格式的文件。当我们将多个节点(node)写在一个launch文件中，就可以用<code>roslaunch</code>来启动，而不用通过Terminal一个一个来启动。</li>
<li>meshes文件夹。该文件夹下是模型用到的一些外部设备。例如，sensor中的<code>xtion_pro_live</code>是一个图像传感器。然后将这些东西集成起来写在urdf文件中。</li>
<li>src文件夹。此文件夹用来保存一些cpp源码。</li>
<li>scripts文件夹。此文件夹保留可执行的Python脚本。</li>
<li>urdf文件夹。该文件下的文件为<code>.urdf</code>和<code>.xacro</code>两种格式。urdf文件描述了系统模型的组成。xacro文件则是urdf文件的另一种精简形式，但是据说ros对xacro文件的支持更好。在一些工具的帮助下，xacro文件可以转为urdf文件。</li>
<li>worlds文件夹。该文件下的文件是整体的世界模型。</li>
<li>package.xml文件。该文件是元软件包(metapackages)，它是ROS中的专用软件包，仅包含一个文件。这是此软件包的软件包清单文件。</li>
<li>CMakeLists.txt。编译该包需要的依赖项。</li>
</ul>
<p>除上述介绍的文件组成外，可能还会包含：</p>
<ul>
<li>urdf.rviz。新版的RViz配置文件。</li>
<li>urdf.vcg。旧版的RViz配置文件。如果在当前版本的launch文件中使用这种格式的文件，会报错：ERROR: the config file ‘/home/yrm/smartcar/src/smartcar_description/urdf.vcg’ is a .vcg file, which is the old rviz config format.</li>
<li>README.md。该文件是模型包的说明文档。</li>
</ul>
<h1 id="2-ROS文件系统-ROS-File-System-："><a href="#2-ROS文件系统-ROS-File-System-：" class="headerlink" title="2 ROS文件系统(ROS File System)："></a>2 ROS文件系统(ROS File System)：</h1><p>ROS不仅仅是一个开发框架。 我们可以将ROS称为元操作系统，因为它不仅提供工具和库，而且还提供类似于OS的功能，例如硬件抽象，程序包管理和开发人员工具链。 像真实的操作系统一样，ROS文件以特定的方式组织在硬盘上，如下图所示：</p>
<p><img src="/images/20200219/01.png" alt="01"></p>
<p>上图中的文件系统解释如下：</p>
<ul>
<li>Packages(软件包)：ROS软件包是ROS软件的最基本单元。它们包含一个或多个ROS程序（节点nodes），库，配置文件等，它们一起组织为一个单元。 Packages是ROS软件中的基本构建项目和发布项目。软件包包含有关软件包，作者，许可证，依赖项，编译标志等的信息。</li>
<li>Packages manifest(包清单)：包含有关软件包，作者，许可证，依赖项，编译标志等的信息。 ROS软件包中的package.xml文件是该软件包的清单文件。</li>
<li>Metapackages(元包)：元包是指一个或多个相关的程序包，可以将它们松散地分组在一起。 原则上，元包是虚拟包，不包含任何源代码或通常在包中找到的典型文件。</li>
<li>Metapackages manifest(元软件包清单)：元软件包清单类似于软件包清单，不同之处在于它可能在其中包含作为运行时依赖项的软件包并声明一个导出标签。</li>
<li>Messages(.msg)：消息。ROS消息是从一个ROS进程发送到另一个ROS进程的一种信息。 我们可以在包（my_package / msg / MyMessageType.msg）的msg文件夹内定义自定义消息。 消息文件的扩展名是.msg。</li>
<li>Services(.srv)：服务。ROS服务是一种请求/答复交互进程之间。 可以在包内的srv文件夹中定义回复和请求数据类型（my_package / srv / MyServiceType.srv）。</li>
</ul>
]]></content>
      <categories>
        <category>机器人控制</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>机器人</tag>
        <tag>ROS</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下Terminator的美化方法</title>
    <url>/archives/fa944c8c.html</url>
    <content><![CDATA[<p><img src=" /images/20200218/00.png" width=50% /><br>本篇来介绍一下Terminator的一些美化方法<br><span id="more"></span></p>
<h1 id="1-Terminator简介"><a href="#1-Terminator简介" class="headerlink" title="1. Terminator简介"></a>1. Terminator简介</h1><p>因为Ubuntu自带的Terminal在需要多终端协同操作时不是很好用，因此换了新终端，名为Terminator。它的优势至于：可以方便地切割终端，便捷地在多窗口中快速移动。例如：在使用ROS时，往往需要一个终端先开启<code>roscore</code>，再用一个终端来打开相应的操作程序，再用第3个终端来输入控制命令，甚至再用第4个终端来查看相应的程序信息。这种情况下，使用Terminator就会很方便。</p>
<h1 id="2-Terminator美化"><a href="#2-Terminator美化" class="headerlink" title="2. Terminator美化"></a>2. Terminator美化</h1><h2 id="2-1-下载"><a href="#2-1-下载" class="headerlink" title="2.1 下载"></a>2.1 下载</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">sudo apt-get install terminator</span><br></pre></td></tr></table></figure>
<h2 id="2-2-自带属性修改"><a href="#2-2-自带属性修改" class="headerlink" title="2.2 自带属性修改"></a>2.2 自带属性修改</h2><p>打开Terminator后，点击右键，选择<cite>Preferences</cite>，大部分的属性可以在这里找到并修改。这里给出一些基本介绍：</p>
<ol>
<li>字体修改。在<cite>Preferences</cite>-&gt;<cite>Profiles</cite>-&gt;<cite>General</cite>标签中可以修改字体及大小。推荐12号的<cite>Monospace</cite>字体，比较自然。</li>
</ol>
<p><img src="/images/20200218/01.png" alt="01"></p>
<ol>
<li>背景色修改。在<cite>Preferences</cite>-&gt;<cite>Profiles</cite>-&gt;<cite>Colors</cite>标签中可以修改背景色；在<cite>Preferences</cite>-&gt;<cite>Profiles</cite>-&gt;<cite>Background</cite>标签中可以修改透明度。</li>
</ol>
<p><img src="/images/20200218/02-1.png" alt="02-1"><br><img src="/images/20200218/02.png" alt="02"></p>
<ol>
<li>快捷键修改。在<cite>Preferences</cite>-&gt;<cite>Keybindings</cite>中可以查看默认的快捷键设置并修改。</li>
</ol>
<p><img src="/images/20200218/03.png" alt="03"></p>
<p>这里给出几个常用快捷键的默认设置：</p>
<ul>
<li>Shift+Ctrl+W：关闭当前窗口</li>
<li>Shift+Ctrl+Q：关闭终端</li>
<li>Shift+Ctrl+E：水平方向分割终端</li>
<li>Shift+Ctrl+O：垂直方向分割终端</li>
<li>Alt+Up/Down/Left/Rignt：光标在窗口间移动</li>
</ul>
<h2 id="2-3-修改打开Terminator时的默认窗口大小"><a href="#2-3-修改打开Terminator时的默认窗口大小" class="headerlink" title="2.3 修改打开Terminator时的默认窗口大小"></a>2.3 修改打开Terminator时的默认窗口大小</h2><p>由于默认的Terminator打开时窗口很小，因此想修改下。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">sudo gedit ~/.config/terminator/config</span><br></pre></td></tr></table></figure><br>打开后找到<cite>[[[window0]]]</cite>标签，在下面添加：<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">size = <span class="number">800</span>, <span class="number">450</span></span><br></pre></td></tr></table></figure><br>如下图所示：<br><img src="/images/20200218/04.png" alt="05"></p>
<h2 id="2-4-修改用户名的颜色"><a href="#2-4-修改用户名的颜色" class="headerlink" title="2.4 修改用户名的颜色"></a>2.4 修改用户名的颜色</h2><p>Terminator默认的用户名颜色与命令颜色一致，很不方便查阅。执行命令打开.bashrc文件：<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">sudo gedit ~/.bashrc</span><br></pre></td></tr></table></figure><br>打开文件后，找到下图所示的位置。<br><img src="/images/20200218/05.png" alt="05"></p>
<p>上图中，修改<code>PS1=....</code>，可以更改颜色。将原来的可以屏蔽掉，添加自己的设置：<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">PS1=<span class="string">&quot;\[\e[01;32;36m\]\u\[\e[37;33m\]@\h: \[\e[36;32m\]\w\[\e[0m\]\\$ &quot;</span></span><br></pre></td></tr></table></figure><br>上述命令中[01;32;36m]表示[状态值;前景色;背景色]。可以根据自己需求，把下方表格的值换过去。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>状态值</th>
<th>状态</th>
<th>前景色</th>
<th>背景色</th>
<th>颜色</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>OFF</td>
<td>30</td>
<td>40</td>
<td>黑色</td>
</tr>
<tr>
<td>1</td>
<td>高亮</td>
<td>31</td>
<td>41</td>
<td>红色</td>
</tr>
<tr>
<td>4</td>
<td>下划线</td>
<td>32</td>
<td>42</td>
<td>绿色</td>
</tr>
<tr>
<td>5</td>
<td>闪烁</td>
<td>33</td>
<td>43</td>
<td>黄色</td>
</tr>
<tr>
<td>7</td>
<td>反白显示</td>
<td>34</td>
<td>44</td>
<td>蓝色</td>
</tr>
<tr>
<td>8</td>
<td>不可见</td>
<td>35</td>
<td>45</td>
<td>紫红色</td>
</tr>
<tr>
<td>0</td>
<td>OFF</td>
<td>36</td>
<td>46</td>
<td>青蓝色</td>
</tr>
<tr>
<td>0</td>
<td>OFF</td>
<td>37</td>
<td>47</td>
<td>白色</td>
</tr>
<tr>
<td>0</td>
<td>OFF</td>
<td>1</td>
<td>1</td>
<td>透明</td>
</tr>
</tbody>
</table>
</div>
<p>我的设置效果如下图：<br><img src="/images/20200218/06.png" alt="06"></p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/zhangkzz/article/details/90524066">Terminator的安装和配置(颜色和字体)</a></li>
<li><a href="https://www.cnblogs.com/cnnnnnn/p/9813833.html">修改linux终端用户名的颜色</a></li>
</ol>
]]></content>
      <categories>
        <category>工科生的基本功</category>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>一起走</title>
    <url>/archives/5b61e368.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="55d54e3c2148391ffb15874ae186a7113a34f12c52d6df5062ab48cd92493315">d5fdb4cfe9e5d4e0d52fab75efc123e25c3798867377a3c908bea89217d2c0fa2e38eacef6864404456599991c0d046d01085f885bfc37cd659dbe8aa6d9471c77b0b6fe807d0f55c83538f072ee55467bcddecf756220859e974939069d4a199275ec840435ed90bdb72d683f163021caa7664f6e0e994aa22606731bd4e77e19a127ee0ad93fdb30be783478f5116477a4c7620ed9465c1f76213952ae9fac73caf63a37869b452de1c48bdae20da92998ba9b14abdfaaa138d0c4f6ba1d6f8740c581892b7977df03847f09ad962af1268f8644192c365710b01755ee6629bb77dfa3cb90a2841bd541a3de673552ad84cebe2227ab713f369f33967c07c9da226adb30d60c05ee8488099f1972d9b09ac409f17f1427462251026b7487b4ecf13da5da9eadd5a1dab153fcf8678c3b8658ba78f54ca05ac1bda8529750467e1d87636501d30d36749571f600cf15541bb63ad8b5b7c0652b4ac9f7fa64a19393e4a2e65abb52085535b4be8a033447b460c95e99706eec323dcae9f939541a55453e242ae40d4f6f98c276c22f0c37a3db78ac72d54072e30cfe98e829f73b46c4a75f29d7eb7cb85c23b5df7f58939f09fec2b62a99992aa790cf58d4e54717bcbbf725023bdcfc15b3ccc081b65d39978c5236355c3a480c219b82cd052832f118fb5a5295e956d7592edf38b4</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">猜猜密码？</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>茶余裨谈</category>
      </categories>
      <tags>
        <tag>茶余裨谈</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬取小说</title>
    <url>/archives/c386cf1b.html</url>
    <content><![CDATA[<p><img src=" /images/20200207_2/00.jpeg" width=50% /><br>Python爬取网络小说实战。<br><span id="more"></span></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在搭建好Python爬虫的环境后，接下来开始Python做爬虫的实战！</p>
<h1 id="一、requests的用法"><a href="#一、requests的用法" class="headerlink" title="一、requests的用法"></a>一、requests的用法</h1><h1 id="1-1-request-get的用法"><a href="#1-1-request-get的用法" class="headerlink" title="1.1 request.get的用法"></a>1.1 request.get的用法</h1><p>首先给出爬取豆瓣的一个示例程序：<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">response = requests.get(<span class="string">&#x27;https://www.douban.com&#x27;</span>)</span><br><span class="line">response.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure><br>在上述示例程序中第二行，requests.get除了直接获取网址外，还可以加入参数，使用方法：<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">requests.get(url, para)</span><br></pre></td></tr></table></figure><br>接下来给出带参数访问的示例程序：<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="built_in">dict</span> = &#123;<span class="string">&#x27;q&#x27;</span>:<span class="string">&#x27;java&#x27;</span>&#125;                <span class="comment"># 传递的参数,构造在豆瓣中搜索java时的网址</span></span><br><span class="line"><span class="comment"># dict = &#123;&#x27;q&#x27;:&#x27;java&#x27;, &#x27;cat&#x27;:1001&#125;     # 构造两个参数，在豆瓣的书籍中搜索java</span></span><br><span class="line"><span class="comment"># dict = &#123;&#x27;user&#x27;:&#x27;colainlibrary&#x27;,&#x27;password&#x27;:&#x27;1234&#x27;&#125;</span></span><br><span class="line">response = requests.get(<span class="string">&#x27;https://www.douban.com&#x27;</span>, params = <span class="built_in">dict</span>)</span><br><span class="line">response = requests.post(<span class="string">&quot;https://www.douban.com/login&quot;</span>, data = <span class="built_in">dict</span>)</span><br><span class="line"></span><br><span class="line">response.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(response.url)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure></p>
<h1 id="1-2-requests-post的用法"><a href="#1-2-requests-post的用法" class="headerlink" title="1.2 requests.post的用法"></a>1.2 requests.post的用法</h1><p>requests.post可以用来模拟登录。<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="built_in">dict</span> = &#123;<span class="string">&#x27;user&#x27;</span>:<span class="string">&#x27;riyueguanghua&#x27;</span>,<span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;12345678&#x27;</span>&#125;</span><br><span class="line">response = requests.post(<span class="string">&#x27;https://www.douban.com/&#x27;</span>, data = <span class="built_in">dict</span>)</span><br><span class="line"><span class="built_in">print</span>(response.status_code)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line"><span class="comment"># 返回值表示HTTP状态码，2字头表示请求已被服务器接收、理解并接受，3字头表示重定向，4字头代表客户端看起来发生了错误，5/6字头表示服务器在处理的过程中有错误或者异常状态发生。</span></span><br></pre></td></tr></table></figure></p>
<h1 id="1-3-定制请求头"><a href="#1-3-定制请求头" class="headerlink" title="1.3 定制请求头"></a>1.3 定制请求头</h1><p>定制请求头，模拟浏览器，反爬虫。因为很多网站会通过请求的头部来判断是否为机器人。cookies上传的时候需要以字典的形式上传。</p>
<h1 id="二、爬取小说"><a href="#二、爬取小说" class="headerlink" title="二、爬取小说"></a>二、爬取小说</h1><p>本节内容的学习参考<a href="https://www.bilibili.com/video/av59692994">零基础教学：python爬取小说网站所有小说！</a>。</p>
<h2 id="2-1-爬取一章小说"><a href="#2-1-爬取一章小说" class="headerlink" title="2.1 爬取一章小说"></a>2.1 爬取一章小说</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> parsel <span class="keyword">import</span> Selector</span><br><span class="line">response = requests.get(<span class="string">&#x27;http://www.xbiquge.la/10/10489/4535761.html&#x27;</span>)</span><br><span class="line">response.encoding = response.apparent_encoding</span><br><span class="line"><span class="comment"># xpath css选择器 提取网页数据结构(html)</span></span><br><span class="line">sel = Selector(response.text)</span><br><span class="line"><span class="comment"># pip install parsel</span></span><br><span class="line"><span class="comment"># 打开文件 创建文件</span></span><br><span class="line">title = sel.css(<span class="string">&#x27;h1::text&#x27;</span>).get()</span><br><span class="line"><span class="comment"># 定义f为打开的文件对象</span></span><br><span class="line">f = <span class="built_in">open</span>(title + <span class="string">&#x27;.txt&#x27;</span>, mode = <span class="string">&#x27;w&#x27;</span>, encoding = <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="comment"># print(sel.css(&#x27;#content::text&#x27;),getall())</span></span><br><span class="line">f.write(title)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> sel.css(<span class="string">&#x27;#content::text&#x27;</span>).getall():</span><br><span class="line">    <span class="built_in">print</span>(line.strip(), file = f)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>
<h2 id="2-2-爬取一本小说"><a href="#2-2-爬取一本小说" class="headerlink" title="2.2 爬取一本小说"></a>2.2 爬取一本小说</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> parsel <span class="keyword">import</span> Selector</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_one_chapter</span>(<span class="params">chapter_url</span>):</span><br><span class="line">    response = requests.get(chapter_url)</span><br><span class="line">    response.encoding = response.apparent_encoding</span><br><span class="line">    <span class="comment"># xpath css选择器 提取网页数据结构(html)</span></span><br><span class="line">    sel = Selector(response.text)</span><br><span class="line">    <span class="comment"># pip install parsel</span></span><br><span class="line">    <span class="comment"># 打开文件 创建文件</span></span><br><span class="line">    title = sel.css(<span class="string">&#x27;h1::text&#x27;</span>).get()</span><br><span class="line">    <span class="comment"># 定义f为打开的文件对象,w是覆盖，a是添加，可以实现整本小说写在一个txt里</span></span><br><span class="line">    f = <span class="built_in">open</span>(title + <span class="string">&#x27;.txt&#x27;</span>, mode = <span class="string">&#x27;w&#x27;</span>, encoding = <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="comment"># print(sel.css(&#x27;#content::text&#x27;),getall())</span></span><br><span class="line">    f.write(title)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> sel.css(<span class="string">&#x27;#content::text&#x27;</span>).getall():</span><br><span class="line">        <span class="built_in">print</span>(line.strip(), file = f)</span><br><span class="line">    f.close</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求索引页的数据</span></span><br><span class="line">response = requests.get(<span class="string">&#x27;http://www.xbiquge.la/10/10489/&#x27;</span>)</span><br><span class="line">response.encoding = response.apparent_encoding</span><br><span class="line">sel = Selector(response.text)</span><br><span class="line">index = sel.css(<span class="string">&#x27;#list a::attr(href)&#x27;</span>).getall()</span><br><span class="line"><span class="comment">#print(index) # 获取所有的章节链接后缀</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> index:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;http://www.xbiquge.la&#x27;</span>+line)  <span class="comment"># 获取所有章节链接</span></span><br><span class="line">    download_one_chapter(<span class="string">&#x27;http://www.xbiquge.la&#x27;</span>+line) <span class="comment"># 爬取所有章节</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工科生的基本功</category>
        <category>快乐码农</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>Linux</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>基于深度学习的机器人无序分拣环境安装汇总</title>
    <url>/archives/51886f65.html</url>
    <content><![CDATA[<p><img src=" /images/20200207/00.png" width=50% /><br>对机器人无序分拣项目所需要的软件环境安装进行汇总。<br><span id="more"></span></p>
<h1 id="〇、前言"><a href="#〇、前言" class="headerlink" title="〇、前言"></a>〇、前言</h1><p>这里对机器人无序分拣项目用到的所有软件环境进行汇总，方便复现。</p>
<p>硬件需求：计算机、NVIDIA显卡、realsense D435i、气动夹爪及相应控制器。</p>
<p>软件需求：Ubuntu16.04、显卡驱动、相机驱动、Anaconda2、opencv3.4.1、boost1.58、Qt5.8。</p>
<h1 id="一、软件环境汇总"><a href="#一、软件环境汇总" class="headerlink" title="一、软件环境汇总"></a>一、软件环境汇总</h1><h1 id="1-1-Ubuntu安装"><a href="#1-1-Ubuntu安装" class="headerlink" title="1.1 Ubuntu安装"></a>1.1 Ubuntu安装</h1><p>详细过程参考<a href="https://colainlibrary.com/archives/292fe4d9.html">Windows下采用U盘安装Ubuntu双系统详细过程</a>。</p>
<h1 id="1-2-显卡驱动的安装"><a href="#1-2-显卡驱动的安装" class="headerlink" title="1.2 显卡驱动的安装"></a>1.2 显卡驱动的安装</h1><p>参考<a href="https://colainlibrary.com/archives/745f5887.html">Ubuntu安装NVIDIA显卡驱动</a>。</p>
<h1 id="1-3-Realsense相机驱动的安装"><a href="#1-3-Realsense相机驱动的安装" class="headerlink" title="1.3 Realsense相机驱动的安装"></a>1.3 Realsense相机驱动的安装</h1><p>参考<a href="https://colainlibrary.com/archives/5086b3d.html">Ubuntu安装Realsense的驱动</a>。</p>
<h1 id="1-4-boost1-58的安装"><a href="#1-4-boost1-58的安装" class="headerlink" title="1.4 boost1.58的安装"></a>1.4 boost1.58的安装</h1><p>参考<a href="https://colainlibrary.com/archives/45371.html">Linux下boost库的安装</a>。</p>
<h1 id="1-5-USB设备固定端口的方法"><a href="#1-5-USB设备固定端口的方法" class="headerlink" title="1.5 USB设备固定端口的方法"></a>1.5 USB设备固定端口的方法</h1><p>参考<a href="https://colainlibrary.com/archives/fc2ebf29.html">Ubuntu下固定USB设备名称的方法</a></p>
<h1 id="1-6-Qt5-8的安装"><a href="#1-6-Qt5-8的安装" class="headerlink" title="1.6 Qt5.8的安装"></a>1.6 Qt5.8的安装</h1><p>参考<a href="https://colainlibrary.com/archives/24574.html">Linux下QT环境的配置</a>。</p>
<h1 id="1-7-OpenCV3-4-1的安装"><a href="#1-7-OpenCV3-4-1的安装" class="headerlink" title="1.7 OpenCV3.4.1的安装"></a>1.7 OpenCV3.4.1的安装</h1><p>参考<a href="https://colainlibrary.com/archives/56535.html">Linux下OpenCV库的安装</a>。</p>
<h1 id="1-8-OpenCV-contrib的安装"><a href="#1-8-OpenCV-contrib的安装" class="headerlink" title="1.8 OpenCV_contrib的安装"></a>1.8 OpenCV_contrib的安装</h1><p>参考<a href="https://colainlibrary.com/archives/85e5f27f.html">opencv_contrib的安装方法</a>。</p>
<h1 id="1-9-Anaconda2与tensorflow的安装"><a href="#1-9-Anaconda2与tensorflow的安装" class="headerlink" title="1.9 Anaconda2与tensorflow的安装"></a>1.9 Anaconda2与tensorflow的安装</h1><ol>
<li>官网下载相应的安装包</li>
<li>执行<code>bash Anaconda2-2019.10-Linux-x86_64.sh</code>，按照提示回车或输入yes，最后一部选择yes</li>
<li>验证安装完成。执行<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">cd home/(YourUserName)/anaconda2/<span class="built_in">bin</span></span><br><span class="line">source activate</span><br></pre></td></tr></table></figure>
如果在终端的用户名a前出现<code>(base)</code>，表示安装成功。</li>
<li>虚拟环境中tensorflow和opencv的安装：<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">conda install tensorflow-gpu==<span class="number">1.12</span><span class="number">.0</span></span><br><span class="line">conda install --channel https://conda.anaconda.org/menpo opencv</span><br></pre></td></tr></table></figure></li>
<li>如果每次打开终端前面都会有（base）,可以执行下列两句：<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">conda config --show</span><br><span class="line">conda config --<span class="built_in">set</span> auto_activate_base <span class="literal">False</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="1-10-安装Eigen库"><a href="#1-10-安装Eigen库" class="headerlink" title="1.10 安装Eigen库"></a>1.10 安装Eigen库</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libeigen3-dev</span><br></pre></td></tr></table></figure>
<h1 id="1-11-设置-sh文件一键启动"><a href="#1-11-设置-sh文件一键启动" class="headerlink" title="1.11 设置.sh文件一键启动"></a>1.11 设置.sh文件一键启动</h1><p>为了省掉打开多个终端需要输命令启动的步骤，将它们都写在一个.sh文件中，设置为双击运行。设置方法：</p>
<ol>
<li>新建xx.sh文件，例如JK_Sort.sh，并写入相应的内容，存放在桌面上；</li>
<li>执行下列命令：<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">cd /home/YourUserName/Desktop</span><br><span class="line">chmod +x JK_Sort.sh</span><br><span class="line">gnome-terminal  -x /home/YourUserName/Desktop/JK_Sort.sh</span><br></pre></td></tr></table></figure></li>
<li>打开桌面文件夹，并全屏化，从<code>Edit</code>-&gt;<code>Prefrences</code>中设置文件的操作方式为：双击打开项目、打开项目时运行文件。</li>
</ol>
]]></content>
      <categories>
        <category>机器人控制</category>
        <category>专栏——基于深度学习的机器人无序分拣</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>Linux</tag>
        <tag>机器人</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫的环境搭建</title>
    <url>/archives/6aa96330.html</url>
    <content><![CDATA[<p><img src=" /images/20200206_2/00.jpg" width=50% /><br>介绍Python爬虫。<br><span id="more"></span></p>
<h1 id="〇、前言"><a href="#〇、前言" class="headerlink" title="〇、前言"></a>〇、前言</h1><p>近年来，用Python做爬虫的大为流行，用Python分析数据亦极为方便，因此在Cola的力荐下，对此做了学习。</p>
<h1 id="一、Linux下环境安装"><a href="#一、Linux下环境安装" class="headerlink" title="一、Linux下环境安装"></a>一、Linux下环境安装</h1><h2 id="1-1-Anaconda的安装"><a href="#1-1-Anaconda的安装" class="headerlink" title="1.1 Anaconda的安装"></a>1.1 Anaconda的安装</h2><p>首先到<a href="https://www.anaconda.com/distribution/">官网</a>下载最新版的Anaconda安装包，然后执行下列命令进行安装：<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">cd 安装包存放路径</span><br><span class="line">bash Anaconda2-<span class="number">2019.10</span>-Linux-x86_64.sh</span><br></pre></td></tr></table></figure></p>
<p>在安装过程中按照提示一路回车或yes，在最后问是否要初始化的时候选择no。验证安装成功：<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">cd ~/anaconda3/<span class="built_in">bin</span>/</span><br><span class="line">source activate</span><br></pre></td></tr></table></figure><br>如果终端中自己的用户名前面出现了(base)就表示安装成功。</p>
<h2 id="1-2-创建虚拟环境"><a href="#1-2-创建虚拟环境" class="headerlink" title="1.2 创建虚拟环境"></a>1.2 创建虚拟环境</h2><ol>
<li><p>执行<code>sudo gedit ~/.bashrc</code>,打开后在其中添加下列语句：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">export PATH=/home/(your_user_name)/anaconda3/<span class="built_in">bin</span>:$PATH</span><br></pre></td></tr></table></figure>
<p>保存关闭后，执行<code>source ~/.bashrc</code>激活。</p>
</li>
<li><p>执行<code>conda create -n your_env_name python=X.X（2.7、3.7等）</code>创建虚拟环境，例如<code>conda create -n test python=3.7</code></p>
</li>
<li><p>进入虚拟环境。依次执行下列命令：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">source activate</span><br><span class="line">conda activate test</span><br></pre></td></tr></table></figure>
<p>在终端中自己的用户名前依次显示<code>(base)</code>和<code>(test)</code>表示进入了自己的虚拟环境，参照下图。</p>
</li>
<li><p>如果需要退出虚拟环境，可以执行：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">conda deactivate</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="1-3-安装requests"><a href="#1-3-安装requests" class="headerlink" title="1.3 安装requests"></a>1.3 安装requests</h2><p>在第1.2节第3步进入虚拟环境后，执行<code>pip install requests</code>安装requests。</p>
<p><img src="/images/20200206_2/01.png" alt="01"></p>
<h2 id="1-4、爬虫示例"><a href="#1-4、爬虫示例" class="headerlink" title="1.4、爬虫示例"></a>1.4、爬虫示例</h2><p>创建一个.py文件，以简单地爬取百度为例，向其中写入下面内容：<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">response = requests.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line">response.encoding = response.apparent_encoding  <span class="comment"># 转换为自动编码，防止乱码</span></span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure><br>爬取结果如下：<br><img src="/images/20200206_2/02.png" alt="02"></p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/weixin_38705903/article/details/86533863">conda: command not found解决办法</a></li>
<li><a href="https://www.jianshu.com/p/cd0096b24b43">Anaconda使用conda activate激活环境出错</a></li>
<li><a href="https://blog.csdn.net/clksjx/article/details/84192626">linux创建conda虚拟环境</a></li>
</ol>
]]></content>
      <categories>
        <category>工科生的基本功</category>
        <category>快乐码农</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>Linux</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu下固定USB设备名称的方法</title>
    <url>/archives/fc2ebf29.html</url>
    <content><![CDATA[<p><img src=" /images/20200206/00.jpeg" width=50% /><br>介绍机器人无序分拣项目的第三个环境安装——固定USB设备的方法。<br><span id="more"></span></p>
<h1 id="〇、前言"><a href="#〇、前言" class="headerlink" title="〇、前言"></a>〇、前言</h1><p>在机器人无序分拣项目中，需要用气动夹爪来抓取被识别的物体。计算机通过USB转485的方式来控制气动夹爪的开合。一个项目中往往会有多个USB设备，如果是默认的方式，它会以ttyUSB0、ttyUSB1…的方式来命名。但是这样有一个问题，如果插的顺序换了，会导致控制混乱。因此，需要将USB设备插在U口上后，给它起一个其他的名字，不要用默认的名字。</p>
<h1 id="一、固定USB设备的方法"><a href="#一、固定USB设备的方法" class="headerlink" title="一、固定USB设备的方法"></a>一、固定USB设备的方法</h1><ol>
<li>使用指令<code>lsusb</code>查看USB设备。</li>
<li>运行<code>sudo gedit /etc/udev/rules.d/usb.rules</code>，其中<code>usb.rules</code>是USB设备规则的名字，名称可以自己取，但后缀必须是<code>.rules</code>。</li>
<li>在打开的文件中写入：<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">KERNEL==<span class="string">&quot;ttyUSB*&quot;</span>, ATTRS&#123;idVendor&#125;==<span class="string">&quot;067b&quot;</span>, ATTRS&#123;idProduct&#125;==<span class="string">&quot;2303&quot;</span>, MODE:=<span class="string">&quot;0777&quot;</span>, SYMLINK+=<span class="string">&quot;GasHand&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>说明：<code>idVendor</code>是USB设备的id，<code>idProduct</code>是USB设备的产品号，最后的<code>GasHand</code>是自己给USB设备起的名字。</p>
</blockquote>
</li>
<li>保存并退出。</li>
<li>执行<code>sudo udevadm trigger</code>，更新设备。</li>
<li>重新拔插USB设备。</li>
</ol>
<h1 id="二、验证绑定成功的方法"><a href="#二、验证绑定成功的方法" class="headerlink" title="二、验证绑定成功的方法"></a>二、验证绑定成功的方法</h1><p>在系统的根目录下，打开<code>dev</code>文件夹，查看是否有一个<code>GasHand</code>的文件，如果有，则绑定成功。</p>
<h1 id="三、存在的问题"><a href="#三、存在的问题" class="headerlink" title="三、存在的问题"></a>三、存在的问题</h1><p>这种方式对于不同厂家的USB设备是可行的，如果是相同厂家的多个USB设备，那它们的id和产品号是相同的，因此这种方式会失败。这种情况参考<a href="https://blog.csdn.net/walleva96/article/details/78347612">在ubuntu上，绑定usb串口的几种方式（udev）</a>(这种的目前没有试过是否可行)。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://blog.csdn.net/scx837685002/article/details/80316176">为 USB设备绑定固定的设备名</a></li>
<li><a href="https://www.jianshu.com/p/7e8789eb6991">ubuntu绑定usb设备固定路径</a></li>
<li><a href="https://blog.csdn.net/walleva96/article/details/78347612">在ubuntu上，绑定usb串口的几种方式（udev）</a></li>
</ol>
]]></content>
      <categories>
        <category>机器人控制</category>
        <category>专栏——基于深度学习的机器人无序分拣</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>Linux</tag>
        <tag>机器人</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu安装Realsense的驱动</title>
    <url>/archives/5086b3d.html</url>
    <content><![CDATA[<p><img src=" /images/20200205/00.png" width=50% /><br>介绍机器人无序分拣项目的第二个环境安装——Realsense相机的驱动安装。<br><span id="more"></span></p>
<h1 id="〇、前言"><a href="#〇、前言" class="headerlink" title="〇、前言"></a>〇、前言</h1><p>笔者在做机器人无序分拣的项目时，采用Intel的Realsense D435i深度相机来采集图像。本篇来介绍该相机的驱动的安装方法，其实主要是把<a href="https://github.com/IntelRealSense/librealsense">官方Github</a>上用到的安装指令给出。</p>
<p>环境：Ubuntu16.04.</p>
<h1 id="一、Realsense驱动安装方法"><a href="#一、Realsense驱动安装方法" class="headerlink" title="一、Realsense驱动安装方法"></a>一、Realsense驱动安装方法</h1><p>打开Terminal，依次执行下列命令：<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">sudo apt-key adv --keyserver keys.gnupg.net --recv-key F6E65AC044F831AC80A06380C8B3A55A6F3EFCDE || sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:<span class="number">80</span> --recv-key F6E65AC044F831AC80A06380C8B3A55A6F3EFCDE</span><br><span class="line">sudo add-apt-repository <span class="string">&quot;deb http://realsense-hw-public.s3.amazonaws.com/Debian/apt-repo xenial main&quot;</span> -u</span><br><span class="line">sudo apt-get install librealsense2-dkms</span><br><span class="line">sudo apt-get install librealsense2-utils</span><br><span class="line">sudo apt-get install librealsense2-dev</span><br><span class="line">sudo apt-get install librealsense2-dbg</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>说明：上面的指令来自<a href="https://github.com/IntelRealSense/librealsense/blob/master/doc/distribution_linux.md">官方Github上Linux的安装方法</a>。采用该方法的好处是，不需要考虑realsense驱动版本，以防和realsense固件版本不匹配。</p>
</blockquote>
<h1 id="二、验证安装成功"><a href="#二、验证安装成功" class="headerlink" title="二、验证安装成功"></a>二、验证安装成功</h1><p>将realsense相机连接到电脑上，在终端中输入<code>realsense-viewer</code>，可以打开相应的官方软件显示，有三个按钮，打开可以看到相应的图像，即表示安装成功。</p>
<p><img src="/images/20200205/01.png" alt="01"></p>
<blockquote>
<p>注意：连接相机的USB口必须是USB3.0/3.1/3.2。</p>
</blockquote>
<h1 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h1><ol>
<li><a href="https://github.com/IntelRealSense/librealsense">IntelRealsense SDK</a></li>
</ol>
]]></content>
      <categories>
        <category>机器人控制</category>
        <category>专栏——基于深度学习的机器人无序分拣</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>Linux</tag>
        <tag>机器人</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu安装NVIDIA显卡驱动</title>
    <url>/archives/745f5887.html</url>
    <content><![CDATA[<p><img src=" /images/20200204/00.jpg" width=50% /><br>介绍机器人无序分拣项目的第一个环境安装——显卡驱动安装方式。<br><span id="more"></span></p>
<h1 id="〇、前言"><a href="#〇、前言" class="headerlink" title="〇、前言"></a>〇、前言</h1><p>近段时间做了一下用机器人做分拣的项目，现把相应的环境配置记录下来，方便后续再做这类项目时快速复现环境。从本篇开始，将它以专栏的形式记录下来。这里用一块显卡的原因是，深度学习训练完后的数据，在做机器人抓取时，需要用显卡来处理一些图像相关的数据。</p>
<p>需要的环境：Ubuntu16.04+NVIDIA GTX 1060。</p>
<h1 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h1><p>Ubuntu系统安装的教程参见<a href="https://colainlibrary.com/archives/292fe4d9.html">Windows下采用U盘安装Ubuntu双系统详细过程</a>。首先，根据显卡的型号(可以尝试用<code>sudo lspci | grep -i nvidia</code>命令来查看)，到官网相应的驱动。以我用的GTX 1060为例,到<a href="https://www.geforce.cn/drivers">NVIDIA的GTX驱动官网</a>找到对应的驱动版本，其中带有(Notebook)的是笔记本版本的，不带的是台式机的，下载时需要注意，如下图所示。</p>
<p><img src="/images/20200204/01.png" alt="01"></p>
<p>下载完成后记住驱动软件保存的路径，本文以(~/Downloads/Nvidiaxxx.run)为例。</p>
<h1 id="二、卸载旧的驱动"><a href="#二、卸载旧的驱动" class="headerlink" title="二、卸载旧的驱动"></a>二、卸载旧的驱动</h1><p>如果原来已经安装过显卡驱动，需要先行卸载掉旧驱动。</p>
<ul>
<li><p>如果是从终端中以<code>apt-get install</code>方式安装的，执行下列语句进行卸载。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">sudo apt-get --purge remove nvidia-*</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果之前是以<code>.run</code>文件方式安装的，执行下列语句进行卸载。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">cd 存放旧的Nvixxx.run路径</span><br><span class="line">sudo ./Nxxxx.run --uninstall  <span class="comment">#./Nxxx.run可以按tab键补全</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="三、安装新的显卡驱动"><a href="#三、安装新的显卡驱动" class="headerlink" title="三、安装新的显卡驱动"></a>三、安装新的显卡驱动</h1><ol>
<li>运行<code>sudo gedit /etc/modprobe.d/blacklist.conf</code>，在打开的文件末尾添加：<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">blacklist nouveau</span><br><span class="line">options nouveau modeset=<span class="number">0</span></span><br></pre></td></tr></table></figure>
添加完后保存关闭。</li>
<li>运行<code>sudo update-initramfs -u</code>更新系统，更新完成后重启系统(一定要重启)。</li>
<li>验证nouveau是否禁用成功。执行<code>lsmod | grep nouveau</code>，若无任何输出，则禁用成功。</li>
<li>在第2步可能重启系统后无法正常进入桌面，不用担心，无论系统是否正常进入，都需要按下<code>Ctrl+Alt+F1</code>，在出现的界面依次输入用户名和回车。</li>
<li>依次执行下列命令：<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">sudo service lightdm stop  <span class="comment">#禁用图形界面</span></span><br><span class="line">cd ~/Downloads             <span class="comment">#打开存放驱动文件的路径</span></span><br><span class="line">chmod +x ./NVIDIA-Linux-x86_64-<span class="number">1060.</span>run     <span class="comment">#给驱动文件修改权限</span></span><br></pre></td></tr></table></figure></li>
<li>安装显卡驱动的命令如下。执行下面的命令后，一路默认安装即可。<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">sudo ./NVIDIA-Linux-x86_64-<span class="number">1060.</span>run -no-x-check -no-nouveau-check -no-opengl-files</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：如果上面的命令不添加最后的<code>-no-opengl-files</code>，安装完成后会出现循环登录的问题。或者说，如果出现了循环登录的问题，那就准备重装显卡驱动吧。</p>
</blockquote>
</li>
<li>安装完成后，执行<code>sudo service lightdm start</code>，打开图形用户界面，之后正常登录即可。</li>
</ol>
<h1 id="四、验证显卡驱动是否安装成功"><a href="#四、验证显卡驱动是否安装成功" class="headerlink" title="四、验证显卡驱动是否安装成功"></a>四、验证显卡驱动是否安装成功</h1><p>显卡驱动安装完成后，可以执行<code>nvidia-smi</code>命令来查看显卡驱动是否安装成功，如果出现下面类似的画面表示显卡驱动安装成功。</p>
<p><img src="/images/20200204/02.png" alt="02"></p>
<blockquote>
<p>说明：上面的图片是网上随便找的，逃～</p>
</blockquote>
]]></content>
      <categories>
        <category>机器人控制</category>
        <category>专栏——基于深度学习的机器人无序分拣</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>Linux</tag>
        <tag>机器人</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows下采用U盘安装Ubuntu双系统详细过程</title>
    <url>/archives/292fe4d9.html</url>
    <content><![CDATA[<p><img src=" /images/20200201/00.jpg" width=50% /><br>详细介绍Windows下安装Ubuntu双系统的方法。<br><span id="more"></span></p>
<h1 id="〇、前言"><a href="#〇、前言" class="headerlink" title="〇、前言"></a>〇、前言</h1><p>需要的硬件设备：一台已装好Windows的电脑、8G或更大的U盘、网络。</p>
<p>需要的软件环境：Ubuntu16.04安装包。</p>
<h1 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h1><h2 id="1-1-Windows下进行磁盘划分"><a href="#1-1-Windows下进行磁盘划分" class="headerlink" title="1.1 Windows下进行磁盘划分"></a>1.1 Windows下进行磁盘划分</h2><p>首先，进入Windows，对于win10，直接在左下角的搜索栏里搜索<code>磁盘管理</code>(或者右键<code>此电脑</code>-&gt;<code>管理</code>-&gt;<code>磁盘管理</code>)，找到电脑的磁盘划分。<br><img src="/images/20200201/01.jpg" alt="01"></p>
<p>上图显示，此电脑有两块硬盘组成，一块是500G的SSD，一块是2T的机械硬盘。SSD上已经装了Win10，为了系统的快速响应，我们将Ubuntu也装在SSD上。因此，选择500G的SSD，右键-&gt;<code>压缩卷</code>，在弹出的对话框中输入压缩空间200G(204800M)，点击<code>压缩</code>，压缩完成后，会有一块200G的未分配区域，如下图所示。</p>
<p><img src="/images/20200201/02.jpeg" alt="02"></p>
<h2 id="1-2-U盘的处理"><a href="#1-2-U盘的处理" class="headerlink" title="1.2 U盘的处理"></a>1.2 U盘的处理</h2><p>在Ubuntu官网找到相应的系统镜像文件(.iso文件)，将解压后的文件复制到U盘。</p>
<blockquote>
<p>注意：对于UEFI格式的电脑，不要将U盘做成系统盘，只需要将系统镜像文件拷贝到U盘即可。这样做的好处是，U盘可见空间不会缩小，以后想再用该U盘直接删除Ubuntu系统文件即可。那哪些电脑是UEFI格式的电脑呢？事实上，现在(2020年)买到的新电脑几乎都是UEFI格式的。</p>
</blockquote>
<h1 id="二、安装Ubuntu"><a href="#二、安装Ubuntu" class="headerlink" title="二、安装Ubuntu"></a>二、安装Ubuntu</h1><p>1.准备工作完成后，准备安装Ubuntu。关机，并将装有Ubuntu的U盘插入，开机连续按F12(这里是Dell电脑，不同品牌电脑不一样)进入引导项选择，如下图所示。</p>
<p><img src="/images/20200201/03.png" alt="03"></p>
<p>2.选择自己的U盘启动，上图中是第一项<code>UEFI: KingstonData...</code>，进入Ubuntu的准备安装页面。</p>
<p><img src="/images/20200201/04.png" alt="04"></p>
<p>3.在这里可以选择第一项<code>Try Ubuntu</code>，会进入类似WindowsPE的系统，进去之后可以尝试Ubuntu的功能，也可以选择继续安装Ubuntu；选择第二项<code>Install Ubuntu</code>，可以直接开始安装。建议选择第一项，因为可以看到硬盘的情况，有个基本确认，这里可能遇到的问题会在第三节介绍。</p>
<p>4.顺利进入<code>Try Ubuntu</code>后，会出现正常的桌面如下图所示。</p>
<p><img src="/images/20200201/05.png" alt="05"></p>
<p>在上图中，看左侧的侧边栏最下方，有两块硬盘图标，一块是Windows系统盘，另一块是本机的机械硬盘。点击桌面上的第二个图标<code>Install Ubuntu 16.04 LTS</code>，开始安装Ubuntu。</p>
<p>5.接下来的四个小步骤忘记了顺序，但都会出现。</p>
<ul>
<li>选择语言，建议选择默认的英语，这样在以后用系统过程中，系统的系统文件夹及路径都是英文，会很方便；</li>
<li>选择地区：Shanghai；</li>
<li>选择是否更新以及安装其他的东西，都不选择。</li>
</ul>
<p><img src="/images/20200201/06.png" alt="06"></p>
<ul>
<li>选择安装方式，选第四个Something else，进入自定义的安装方式，这样会保留下Windows。</li>
</ul>
<p><img src="/images/20200201/07.png" alt="07"></p>
<p>6.进入硬盘，选择安装系统引导项的位置。</p>
<p><img src="/images/20200201/08.png" alt="08"></p>
<p>上图最下方<code>Device for boot loader installation</code>的下拉列表，是选择安装Ubuntu系统引导项的地方，点开后看到有一系列的选择，可以看到有两块硬盘，分别标有512GB、2.0TB，选择标有512GB的那一项，表示把Ubuntu系统引导项安装在512GB的SSD上。</p>
<p>7.Ubuntu分区。作为新手，只需要分两个区，一个是<code>swap</code>，一个是<code>/</code>。在第6步的图片中，可以看到有一个214769MB的<code>free space</code>，这个是在Windows下分出来装Ubuntu的空间。选中它，并点击<code>+</code>，如下图所示。</p>
<p><img src="/images/20200201/09.png" alt="09"></p>
<ul>
<li>设置swap area。在<code>size</code>处填内存的大小，16G即16384M,一般填8192MB即可。选则主分区，<code>Use as</code>处打开下拉列表，选择<code>swap area</code>，如下图所示。</li>
</ul>
<p><img src="/images/20200201/10.png" alt="10"></p>
<p>点击OK，设置好后如下图所示。从下图可以看出，<code>swap area</code>已经分好。</p>
<p><img src="/images/20200201/09-2.png" alt="09-2"></p>
<ul>
<li>设置<code>/</code>。上图中的<code>free space</code>已经从原来的214769MB缩小为198385MB，再点击这块<code>free space</code>，点击<code>+</code>。在弹出的对话框中，<code>size</code>处默认全部大小全给<code>/</code>，选择逻辑分区，<code>Use as</code>选择<code>Ext4</code>，<code>Mount Point</code>选择<code>/</code>，如下图所示。</li>
</ul>
<p><img src="/images/20200201/11.png" alt="11"></p>
<p>分好后如下图所示。可以看到，原来的那块<code>free space</code>已经消失了。</p>
<p><img src="/images/20200201/12.png" alt="12"></p>
<p>8.开始安装。点击上图中右下角的<code>Install now</code>，出现下图，点击<code>Continue</code>。</p>
<p><img src="/images/20200201/13.png" alt="13"></p>
<p>9.等待安装完成，一般用几分钟的时间即可。安装完成后，重启系统，开机时出现下图所示的页面，有<code>Ubuntu</code>和<code>Windows Boot Manager</code>两个，表示双系统已经安装好咯，大功告成！</p>
<p><img src="/images/20200201/14.png" alt="14"></p>
<h1 id="三、遇到的问题"><a href="#三、遇到的问题" class="headerlink" title="三、遇到的问题"></a>三、遇到的问题</h1><h2 id="3-1-硬盘缺失"><a href="#3-1-硬盘缺失" class="headerlink" title="3.1 硬盘缺失"></a>3.1 硬盘缺失</h2><p>在第二节中选择<code>Try Ubuntu</code>进入系统后，如果侧边栏左下角没有出现硬盘，如下图所示。</p>
<p><img src="/images/20200201/15.png" alt="15"></p>
<p>继续选择安装，会出现：</p>
<p><img src="/images/20200201/16.png" alt="16"></p>
<p>这表明进入Ubuntu安装时根本没有找到系统的硬盘。造成这样的原因是，Dell电脑的BIOS中<code>SATA Operation</code>中设置有问题。</p>
<p>解决方案：重启电脑，按<code>F2</code>进入BIOS，选择<code>SATA Operation</code>，选择<code>AHCI</code>，确认后重启，再进入后按照第二节的步骤安装即可。</p>
<h2 id="3-2-Windows进入失败"><a href="#3-2-Windows进入失败" class="headerlink" title="3.2 Windows进入失败"></a>3.2 Windows进入失败</h2><p>在第3.1节中，修改了<code>SATA Operation</code>后，Windows的引导项还在，但是无法进入了。解决方案：</p>
<ol>
<li>先将<code>AHCI</code>模式改为<code>Raid on</code>模式，正常进入Windows，按下<code>Windows+R</code>键，输入<code>msconfig</code>，选择<code>引导</code>，弹出如下对话框。</li>
</ol>
<p><img src="/images/20200201/17.png" alt="17"></p>
<ol>
<li>选择<code>安全引导</code>，勾选<code>最小</code>，点击<code>确定</code>按钮，如果提示重启，暂不重启。</li>
<li>单击<code>开始</code>菜单，选择<code>设置</code>，进入后选择<code>系统</code>，再选择<code>电源和睡眠</code>，选择<code>其他电源设置</code>。</li>
<li>打开<code>电源选项</code>，找到<code>更改电源按钮的功能</code>，进入后，点击上方<code>更改当前不可用的设置</code>，接着在窗口下方<code>关机设置</code>中取消勾选第一项<code>启用快速启动(推荐)</code>，点击<code>保存修改</code>，然后重启电脑。</li>
<li>重启时按<code>F2</code>，再将<code>Raid on</code>改为<code>AHCI</code>模式，正常启动后进入安全模式，再按下<code>Windows+R</code>键，输入<code>msconfig</code>，在引导界面取消勾选<code>安全引导</code>和<code>最小</code>。</li>
<li>保存后，重启电脑，大功告成！</li>
</ol>
]]></content>
      <categories>
        <category>工科生的基本功</category>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>加密文档测试</title>
    <url>/archives/c9238145.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="a79378abdca2747fe2f3cbe78029c8ff04b81730ed04280be862c5d9326480e7">779a84996ae6e2ad3cbee6d214b4c0aecee23d950f273606ff17142ad2bcc0a7511994a346b02631b9788883e9b2865a0bb3d5d82bd9cb5d71b087705c8cf0c47597e0f5edb837f0a68a6b2c239d58f6f454a2f69dc590edcee84abba7e615b3</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>工科生的基本功</category>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Library</tag>
      </tags>
  </entry>
  <entry>
    <title>多设备管理个人博客</title>
    <url>/archives/3a0407be.html</url>
    <content><![CDATA[<p>对于新电脑，如何管理已经搭建好的个人博客呢？<br><span id="more"></span></p>
<blockquote>
<p>下文适用于next主题下的设置,在2022年8月17日更换butterfly主题后,配置可参考[<a href="https://tzy1997.com/articles/hexo1606/">链接</a>]需要在原来的npm基础上继续安装一些插件:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink --save  <span class="comment"># 修复abbrlink无法自动生成的问题</span></span><br><span class="line">npm audit fix</span><br><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure><br>关于博客外挂标签的一个更好的教程: [<a href="https://akilar.top/posts/615e2dec/">链接</a>]</p>
</blockquote>
<h1 id="〇、前言"><a href="#〇、前言" class="headerlink" title="〇、前言"></a>〇、前言</h1><p>当我们更换了一台电脑后，想更新博客内容，如果每次都新建一次网站，未免过于繁琐，因此需要一种方法来管理博客。</p>
<h1 id="一、原理"><a href="#一、原理" class="headerlink" title="一、原理"></a>一、原理</h1><p>使用hexo搭建的个人博客是静态网页，如果能将网页的静态文件和生产网页的源文件分开管理，那将非常方便。Github本身的分支给我们提供了很好的解决思路。在Github上建立的个人网站的仓库，默认分支是<code>master</code>分支，个人网站的内容也是从这个分支生成的。我们可以新建一个<code>source</code>分支，来存放源文件。这样做有两个好处：</p>
<ol>
<li>将网页的静态文件与源文件分开管理；</li>
<li>在新电脑上克隆源文件的时候，文件夹中的<code>.git</code>是相同的，如果是新建文件夹，那么这个不一样，会导致无法上传。</li>
</ol>
<h1 id="二、操作方法"><a href="#二、操作方法" class="headerlink" title="二、操作方法"></a>二、操作方法</h1><h2 id="2-1-源电脑上的操作方法"><a href="#2-1-源电脑上的操作方法" class="headerlink" title="2.1 源电脑上的操作方法"></a>2.1 源电脑上的操作方法</h2><p>直接在github的仓库中，找到<code>Branch：master</code>后的小箭头，输入<code>source</code>新建该分支。为了方便，将该分支在<code>Settings</code>-&gt;<code>Branches</code>中，将<code>source</code>分支设置为default，并Update。</p>
<p>使用<code>git clone https://github.com/ColaInLibrary/ColaInLibrary.github.io</code>在电脑的其他位置克隆一个名为<code>ColaInLibrary.github.io</code>的文件夹，并将存放博客源文件全拷贝到该文件夹。</p>
<p>使用<code>git branch</code>命令可以查看当前分支。依次执行<code>git add .</code>、<code>git commit -m &quot;自己修改的内容说明&quot;</code>、<code>git push origin source</code>，将网站的源文件提交至<code>source</code>分支。</p>
<h2 id="2-2-新电脑上的操作方法"><a href="#2-2-新电脑上的操作方法" class="headerlink" title="2.2 新电脑上的操作方法"></a>2.2 新电脑上的操作方法</h2><h3 id="2-2-1-SSH的添加"><a href="#2-2-1-SSH的添加" class="headerlink" title="2.2.1 SSH的添加"></a>2.2.1 SSH的添加</h3><p>1.配置本机全局git环境<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-deployer-git</span><br><span class="line">git config --<span class="keyword">global</span> user.email <span class="string">&quot;YourEmail&quot;</span></span><br><span class="line">git config --<span class="keyword">global</span> user.name <span class="string">&quot;ColaInLibrary&quot;</span></span><br></pre></td></tr></table></figure></p>
<p>2.生成SSH密钥<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">less ~/.ssh/id_rsa.pub          <span class="comment"># 验证是否之前生成过ssh的key，若有，则会出现一串秘钥</span></span><br><span class="line">ssh-keygen -t rsa -C YourEmail    <span class="comment"># 若无，则重新生成秘钥</span></span><br></pre></td></tr></table></figure><br>3.Github网页配置<br>从网页上打开<a href="https://github.com/">github</a>，没有注册的话需要注册一个账号，注册后正常登录，从头像那里选择<code>settings</code>-&gt;<code>SSH and GPG keys</code>，填入刚刚生成的SSH秘钥，名字可以自己填。在Terminal中输入下列命令测试是否成功。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<p>如果成功，会提示<code>Hi ColaInLibrary! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code></p>
<h3 id="2-2-2-新电脑上博客的配置与发布"><a href="#2-2-2-新电脑上博客的配置与发布" class="headerlink" title="2.2.2 新电脑上博客的配置与发布"></a>2.2.2 新电脑上博客的配置与发布</h3><ol>
<li>cd 欲存放源文件的目录</li>
<li><code>git clone https://github.com/ColaInLibrary/ColaInLibrary.github.io</code></li>
<li>打开<code>ColaInLibrary.github.io</code>文件夹，右键打开Terminal(Windows环境是Git Bash)，依次执行<code>npm install hexo</code>、<code>hexo init</code>、<code>npm install</code> 和 <code>npm install hexo-deployer-git</code>，将该文件夹配置为hexo相关环境</li>
<li>安装相应的插件<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">npm install hexo-symbols-count-time --save</span><br><span class="line">npm install hexo-related-popular-posts --save</span><br><span class="line">npm install hexo-douban --save</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br><span class="line">npm install hexo-baidu-url-submit --save</span><br><span class="line">npm install hexo-generator-feed --save</span><br><span class="line">npm install hexo-generator-searchdb --save</span><br><span class="line">npm uninstall hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-index-pin-top --save</span><br><span class="line">npm install hexo-blog-encrypt --save</span><br><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure></li>
<li>编写新的博客内容后，本地调试：<code>hexo clean &amp;&amp; hexo douban -bgm &amp;&amp; hexo g &amp;&amp; hexo s</code></li>
<li>将静态网页推送到github：<code>hexo clean &amp;&amp; hexo douban -bgm &amp;&amp; hexo g &amp;&amp; hexo deploy</code></li>
<li>如果所有文件均不涉密，依次执行<code>git add .</code>、<code>git commit -m &quot;自己修改的内容说明&quot;</code>、<code>git push origin source</code>，将网站的源文件提交至<code>source</code>分支。如果有博客内容加密，可以选择不执行这一步操作，即不更新source分支。</li>
</ol>
<blockquote>
<p>注意：在新电脑上第二次及以后更新博客内容时，在第2步时可以执行<code>git pull</code>来更新自己电脑的本地仓库，如果有加密博客而博客源码又未存放至github，注意需要将加密博客从源电脑拷贝到新电脑的博客文件夹中才行。上述操作的第6步会将将静态网页文件推送到<code>master</code>分支，第7步会将源文件推送到<code>source</code>分支。</p>
</blockquote>
<h3 id="2-2-3-数学公式mathjax的配置"><a href="#2-2-3-数学公式mathjax的配置" class="headerlink" title="2.2.3 数学公式mathjax的配置"></a>2.2.3 数学公式mathjax的配置</h3><p>插件安装<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure><br>安装好后，找到./node_modules/kramed/lib/rules/inline.js,修改<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  escape: /^\\([\\`*&#123;&#125;\[\]()#$+\-.!_&gt;])/, 原第11行</span></span><br><span class="line">  <span class="attr">escape</span>: <span class="regexp">/^\\([`*\[\]()#$+\-.!_&gt;])/</span>,</span><br><span class="line">  <span class="comment">//  em: /^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,  原第20行</span></span><br><span class="line">  <span class="attr">em</span>: <span class="regexp">/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,</span><br></pre></td></tr></table></figure><br>注意：</p>
<ol>
<li>在主题的配置文件中将mathjax开关打开</li>
<li>在博文的开始加上 <strong>mathjax: true</strong></li>
<li>上述代码的最后逗号不能少</li>
</ol>
<h3 id="2-2-4-node报warning-no-module"><a href="#2-2-4-node报warning-no-module" class="headerlink" title="2.2.4 node报warning: no module"></a>2.2.4 node报warning: no module</h3><p>node 报Warning: Accessing non-existent property xxxx of module exports inside circular dependency</p>
<p>解决方案：<br>找到 <em>./node_modules/stylus/lib/nodes/index.js</em>，代码最前面加入<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span>.<span class="property">lineno</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">column</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">filename</span> = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure></p>
<h3 id="2-2-5-目录不能跳转的解决方案："><a href="#2-2-5-目录不能跳转的解决方案：" class="headerlink" title="2.2.5 目录不能跳转的解决方案："></a>2.2.5 目录不能跳转的解决方案：</h3><p><code>blog/themes/next7-7/source/js/utils.js</code>中删除两条代码（红色），增加两条代码(绿色)，具体参考[<a href="https://github.com/theme-next/hexo-theme-next/pull/1540/files">链接</a>]。<br><img src="/images/20200130/mulu.png" alt="mulu"></p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p>1.<a href="https://www.zhihu.com/question/21193762/answer/79109280">使用hexo，如果换了电脑怎么更新博客？</a><br>2.<a href="https://www.jianshu.com/p/7ab21c7f0674">在Hexo中渲染MathJax数学公式</a><br>3.<a href="https://blog.csdn.net/weixin_42405223/article/details/106270431">Warning: Accessing non-existent property xxxx of module exports inside circular dependency</a></p>
]]></content>
      <categories>
        <category>工科生的基本功</category>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Library</tag>
      </tags>
  </entry>
  <entry>
    <title>使用hexo+NexT+GitHub搭建个人博客</title>
    <url>/archives/36e68834.html</url>
    <content><![CDATA[<span id="more"></span>
<h1 id="〇、前言"><a href="#〇、前言" class="headerlink" title="〇、前言"></a>〇、前言</h1><p>新换了一台电脑后，重搭建了一次博客，记录一些关键步骤及参考网页。本文实践的环境：Ubuntu16.04、NexT7.7、hexo。</p>
<h1 id="一、安装环境"><a href="#一、安装环境" class="headerlink" title="一、安装环境"></a>一、安装环境</h1><p>1.移除hexo：<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">cd /usr/<span class="built_in">bin</span></span><br><span class="line">npm uninstall hexo -g</span><br></pre></td></tr></table></figure><br>2.移除node和npm<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># apt method</span></span><br><span class="line">sudo apt remove node</span><br><span class="line">sudo apt remove nodejs</span><br><span class="line">sudo apt remove npm</span><br><span class="line"></span><br><span class="line"><span class="comment"># nvm method</span></span><br><span class="line">nvm deactivate</span><br><span class="line">nvm uninstall node</span><br><span class="line"></span><br><span class="line"><span class="comment"># delete nvm</span></span><br><span class="line">rm -rf ~/.nvm</span><br><span class="line"><span class="comment"># 再删除 ~/.bashrc 文件中 export NVM_DIR= 这一行和它的下一行。</span></span><br></pre></td></tr></table></figure></p>
<p>3.安装git</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure>
<p>4.安装nvm<br>这里的nvm实际上是node的包版本控制工具，在这里你可以找到各种你想要的版本，这里我们想要成功搭建肯定后面要安装稳定版的node了。直接在终端中执行下列语句</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">&quot;<span class="variable">$HOME</span>/.nvm&quot;</span> &amp;&amp; (</span><br><span class="line">  git <span class="built_in">clone</span> https://github.com/creationix/nvm.git <span class="string">&quot;<span class="variable">$NVM_DIR</span>&quot;</span></span><br><span class="line">  <span class="built_in">cd</span> <span class="string">&quot;<span class="variable">$NVM_DIR</span>&quot;</span></span><br><span class="line">  git checkout `git describe --abbrev=0 --tags --match <span class="string">&quot;v[0-9]*&quot;</span> origin`</span><br><span class="line">) &amp;&amp; . <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span></span><br></pre></td></tr></table></figure>
<p>5.配置开机自启<br>在你的<code>~/.bashrc</code>, <code>~/.profile</code>,或者<code>~/.zshrc</code>中加入如下配置<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gedit ~/.bashrc  <span class="comment"># 打开该文件，并将下面的语句直接复制到文件末尾，保存关闭</span></span><br><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">&quot;<span class="variable">$HOME</span>/.nvm&quot;</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> ] &amp;&amp; . <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span></span><br></pre></td></tr></table></figure></p>
<p>6.使用nvm安装node和npm<br>如果执行完上面的命令都没有问题，这里就应该要使用nvm来安装node和npm了，首先先检查远程仓库的版本<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm ls-remote</span><br></pre></td></tr></table></figure><br>如果网不好的情况下这一步骤可能会失败，如果失败再多试几次，或者找个网好的地方就能更下来了，我之前网络情况不太好大概执行了4/5次才刷出来。</p>
<p>7.安装稳定版<br>如果上面那一步没问题的话，这里就开始安装node的稳定版了。<br><strong>实践证明，在2022年4月份的时候，用最新版本的会报一些警告出来，比较稳妥的解决方式是使用12.22.1版本的</strong><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm install 12.22.1</span><br><span class="line"><span class="comment"># or install stable version</span></span><br><span class="line"><span class="comment"># nvm install stable</span></span><br><span class="line">nvm use node            <span class="comment"># 启用安装好的版本</span></span><br><span class="line">nvm <span class="built_in">alias</span> default node  <span class="comment"># 设置为默认版本</span></span><br></pre></td></tr></table></figure></p>
<p>8.安装hexo<br>如果nvm安装完成且成功配置好稳定版以后，就可以安装hexo了，安装hexo的过程其实和大家之前搜的没什么不同，之前安装失败的主要问题，要么是版本不匹配，要么是版本过低，在github也搜索过作者回答大致是低一点的版本是会有bug，不过高版本已经修复了。这边还是再重复一遍吧。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli         <span class="comment"># 安装hexo</span></span><br><span class="line"><span class="built_in">mkdir</span> blog                      <span class="comment"># 新建一个文件夹用来存放博客</span></span><br><span class="line">hexo init blog                  <span class="comment"># 用hexoa初始化文件夹</span></span><br><span class="line"><span class="built_in">cd</span> blog                         <span class="comment"># 打开博客文件夹</span></span><br><span class="line">npm install                     <span class="comment"># 安装npm</span></span><br><span class="line">npm update -g                   <span class="comment"># 更新npm</span></span><br><span class="line">hexo g                          <span class="comment"># 生成静态界面</span></span><br><span class="line">hexo s                          <span class="comment"># 开启本地服务</span></span><br></pre></td></tr></table></figure>
<p>顺利的话,经过上述操作,可以在浏览器中通过网址<code>http://localhost:4000</code>打开一个静态网页,作为调试所用。</p>
<h1 id="二、Git的环境配置"><a href="#二、Git的环境配置" class="headerlink" title="二、Git的环境配置"></a>二、Git的环境配置</h1><p>1.配置本机全局git环境<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-deployer-git</span><br><span class="line">git config --global user.email <span class="string">&quot;YourEmail&quot;</span></span><br><span class="line">git config --global user.name <span class="string">&quot;YourName&quot;</span></span><br></pre></td></tr></table></figure></p>
<p>2.生成SSH密钥<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">less ~/.ssh/id_rsa.pub          <span class="comment"># 验证是否之前生成过ssh的key，若有，则会出现一串秘钥</span></span><br><span class="line">ssh-keygen -t rsa -C YourEmail    <span class="comment"># 若无，则重新生成秘钥</span></span><br></pre></td></tr></table></figure><br>3.Github网页配置<br>从网页上打开<a href="https://github.com/">github</a>，没有注册的话需要注册一个账号，注册后正常登录，从头像那里选择<code>settings</code>-&gt;<code>SSH and GPG keys</code>，填入刚刚生成的SSH秘钥，名字可以自己填。在Terminal中输入下列命令测试是否成功。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<p>如果成功，会提示<code>Hi YourName! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code></p>
<p>4.博客文件夹与GitHub关联<br>打开blog文件夹，在根目录下有一个主题配置文件<code>_config.yml</code>，打开后，找到<code>deploy</code>，并加入下面的内容：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:YourName/YourName.github.io.git</span> <span class="comment"># 用户名改成你自己的</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<h1 id="三、推送博客到GitHub"><a href="#三、推送博客到GitHub" class="headerlink" title="三、推送博客到GitHub"></a>三、推送博客到GitHub</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure>
<h1 id="四、安装插件"><a href="#四、安装插件" class="headerlink" title="四、安装插件"></a>四、安装插件</h1><p>安装插件及配置参考<a href="https://tding.top/archives/567debe0.html">小丁的博客使用的插件</a>。对于非重新建立网站，只需安装插件：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-symbols-count-time --save</span><br><span class="line">npm install hexo-related-popular-posts --save</span><br><span class="line">npm install hexo-douban --save</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br><span class="line">npm install hexo-baidu-url-submit --save</span><br><span class="line">npm install hexo-generator-feed --save</span><br><span class="line">npm install hexo-generator-searchdb --save</span><br><span class="line">npm uninstall hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-index-pin-top --save</span><br><span class="line">npm install hexo-blog-encrypt --save</span><br><span class="line">npm install hexo-neat --save</span><br><span class="line">hexo clean &amp;&amp; hexo douban -bgm &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure></p>
<h1 id="五、一些其他的修改"><a href="#五、一些其他的修改" class="headerlink" title="五、一些其他的修改"></a>五、一些其他的修改</h1><ol>
<li>底部增加网站运行时间，修改位置:<code>blog/themes/next/layout/_partials/footer.swig</code>。</li>
<li>底部增加总访问量，修改掉主题配置文件中busuanzi的计数，增加提示语，修改位置：<code>blog/themes/next/layout/_partials/footer.swig</code>。</li>
<li>文章置顶：只需在博客源文件xx.md开始部分的<code>tags</code>后再添加一个<code>top: 100</code>，这个数字越大越靠前。置顶图标的设置：<code>blog/themes/next/layout/_macro/post.swig</code>文件，在<code>&lt;div class=&quot;post-meta&quot;&gt;</code> 的第一个 <code>&lt;span&gt;</code> 标签下的一段代码。</li>
<li>文章加密：在博客源文件xx.md开始部分添加如下内容：<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">password: abcd</span><br><span class="line">abstract: 这是一篇加密的博客哦～</span><br><span class="line">message: 请输入密码</span><br></pre></td></tr></table></figure></li>
<li>博客字体的修改. 参见<a href="https://hexo-next.readthedocs.io/zh_CN/latest/next/advanced/%E5%AD%97%E4%BD%93%E8%AE%BE%E7%BD%AE/">链接5</a></li>
</ol>
<h1 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h1><p>1.<a href="https://tding.top">小丁的个人博客</a><br>2.<a href="https://blog.csdn.net/pan861190079/article/details/80860153">Ubuntu 上使用hexo+github打造个人blog</a><br>3.<a href="https://www.jianshu.com/p/a6d03d13788b">linux 下 Hexo + GitHub 搭建个人博客</a><br>4.<a href="https://www.jianshu.com/p/f2285d63b3a8">在github上搭建hexo个人博客（Linux-Ubuntu）</a><br>5.<a href="https://hexo-next.readthedocs.io/zh_CN/latest/next/advanced/%E5%AD%97%E4%BD%93%E8%AE%BE%E7%BD%AE/">Next中文字体设置</a></p>
]]></content>
      <categories>
        <category>工科生的基本功</category>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Library</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>基于深度学习的3D无序分拣</title>
    <url>/archives/d44b8445.html</url>
    <content><![CDATA[<!-- b站分享按钮下"嵌入" -->
<!-- <iframe src="//player.bilibili.com/player.html?aid=248891855&bvid=BV17v411H7Dm&cid=362984310&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe> -->
<div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"> 
<iframe src="//player.bilibili.com/player.html?aid=931395500&bvid=BV1GM4y1g7dt&cid=363028795&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> 
</iframe> 
</div>

<span id="more"></span>
<p>项目目标:将混在一起的物体,经过图像识别后依次分开.</p>
<p>项目结果:</p>
<ol>
<li>图像识别成功率可达 99% 以上</li>
<li>可以将待分拣的六种物体(随机摆放)分为水果/玩具/电子产品.</li>
</ol>
<p>为方便复现,相关的安装环境见:<a href="https://colainlibrary.com/archives/51886f65.html">基于深度学习的机器人无序分拣环境安装汇总</a></p>
]]></content>
      <categories>
        <category>机器人控制</category>
        <category>专栏——基于深度学习的机器人无序分拣</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>机器人</tag>
      </tags>
  </entry>
  <entry>
    <title>常用的数学基础知识集锦</title>
    <url>/archives/8586.html</url>
    <content><![CDATA[<p><img src=" /images/20191023/00.png" width=50% /><br>介绍在机器人控制中常用的基础数学知识。(持续更新中….)</p>
<span id="more"></span>
<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>泰勒级数、矩阵指数函数、向量的斜对称矩阵、向量叉乘是在机器人控制中常用的基本数学知识，本文对这些知识做一个汇总，为将来的机器人研究做铺垫。为了能正常浏览公式，推荐使用Chrome浏览器，并添加一款名为<code>TeX All the Things</code>的插件。在Markdown文本中编写公式的语法参见如下链接：<a href="https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference">Markdown文本中编辑数学公式的语法规则</a></p>
<p>通过上述语法规则所编写的大部分公式可以通过浏览器正常观看，但是矩阵除外。为了能正确显示矩阵，可以通过<a href="https://www.codecogs.com/latex/eqneditor.php">在线LaTeX公式编辑器</a>将公式转为.png(建议分辨率为120)，再插入文中。</p>
<p>如果仍然觉得麻烦，可以到我的CSDN查看同步文章，链接如下：</p>
<p><a href="https://blog.csdn.net/ColaInLibrary/article/details/102770706" class="LinkCard">常用的数学基础知识集锦</a></p>
<h1 id="二、矩阵指数函数及泰勒级数"><a href="#二、矩阵指数函数及泰勒级数" class="headerlink" title="二、矩阵指数函数及泰勒级数"></a>二、矩阵指数函数及泰勒级数</h1><p>常用的矩阵指数函数如下所示。</p>
<script type="math/tex; mode=display">e^{\pmb{A}t} = \sum_{k=0}^\infty \frac{\pmb{A}^{k} t^k}{k!} = \pmb{I} + \pmb{A}^{t} + \frac{(\pmb{A}t)^2}{2!} + \frac{(\pmb{A}t)^3}{3!} + \cdots \tag {2-1}</script><script type="math/tex; mode=display">\sin\pmb{A}{t} = \sum_{k=0}^\infty \frac{(-1)^k \pmb{A}^{2k+1} t^{2k+1}}{(2k+1)!} \tag {2-2}</script><script type="math/tex; mode=display">\cos\pmb{A}{t} = \sum_{k=0}^\infty \frac{(-1)^k \pmb{A}^{2k} t^{2k}}{(2k)!} \tag {2-3}</script><p>正弦、余弦函数的泰勒级数展开如式(2-4)~(2-5)所示。</p>
<script type="math/tex; mode=display">\sin x = \sum_{k=0}^\infty \frac{(-1)^k}{(2k+1)!} x^{2k+1} \tag {2-4}</script><script type="math/tex; mode=display">\cos x = \sum_{k=0}^\infty \frac{(-1)^k}{(2k)!} x^{2k} \tag {2-5}</script><!--![01]( /images/20191023/01.gif)-->
<h1 id="三、一阶线性微分方程的解法"><a href="#三、一阶线性微分方程的解法" class="headerlink" title="三、一阶线性微分方程的解法"></a>三、一阶线性微分方程的解法</h1><p>给出一个一阶线性微分方程:</p>
<script type="math/tex; mode=display">\dot{y}(t) = xy(t) \tag {3-1}</script><p>即：</p>
<script type="math/tex; mode=display">\frac{\mathrm{d} y(t)}{\mathrm{d}t} = xy(t) \tag {3-2}</script><p>将式(3-2)变形，可得：</p>
<script type="math/tex; mode=display">\frac{1}{y(t)}\mathrm{d}y(t) = x\mathrm{d}t \tag {3-3}</script><p>对上式两边进行积分：</p>
<script type="math/tex; mode=display">\int {\frac{1}{y(t)}\mathrm{d}y(t)} = \int {x\mathrm{d}t}  \tag {3-4}</script><p>即：</p>
<script type="math/tex; mode=display">\ln y(t) = xt + C\tag {3-5}</script><p>上式中，$C$是常数，对上式两边取指数，有：</p>
<script type="math/tex; mode=display">y(t) = e^{xt}y(0) \tag {3-6}</script><p>式(3-6)中，$y(0)$表示$y(t)$在零时刻的取值。</p>
<!--![02]( /images/20191023/02.gif)-->
<h1 id="四、斜对称矩阵的定义及性质"><a href="#四、斜对称矩阵的定义及性质" class="headerlink" title="四、斜对称矩阵的定义及性质"></a>四、斜对称矩阵的定义及性质</h1><p>定义向量 $\pmb\omega =<br>\begin{bmatrix}<br>\omega_1 &amp; \omega_2 &amp; \omega_3<br>\end{bmatrix}^{\mathrm T}$ 及其斜对称矩阵(又称为反对称矩阵) $\pmb{\bf{\hat \omega }}$ 为：</p>
<!-- ![03.png]( /images/20191023/03.png) $\tag {4-1}$  -->
<script type="math/tex; mode=display">
\pmb{\bf{\hat \omega }}=
\begin{bmatrix}
0 & -\omega_3 & \omega_2 \\
\omega_3 & 0 & -\omega_1 \\
\omega_2 & \omega_1 & 0 \\
\end{bmatrix} \tag {4-1}</script><p>斜对称矩阵的性质如下：</p>
<script type="math/tex; mode=display">\pmb{\bf{\hat \omega }}^\mathrm{T} = -\pmb{\bf{\hat \omega }} \tag {4-2}</script><!-- $$\pmb{A}\pmb{\bf{\hat \omega }}\pmb{A}^\mathrm{T} = (\pmb{A} \pmb{\bf{\hat \omega }})^\mathrm{T} \tag {4-3}$$ -->
<script type="math/tex; mode=display">\pmb{\bf{\hat \omega }}^2 = \pmb{\bf{ \omega }}\pmb{\bf{ \omega }}^\mathrm{T} - {\lVert \pmb\omega \rVert}^2 \pmb{I} \tag{4-3}</script><script type="math/tex; mode=display">\pmb{\bf{\hat \omega }}^3 = -{\lVert \pmb\omega \rVert}^2 \pmb{A}\pmb{\bf{\hat \omega }} \tag{4-4}</script><!--![03]( /images/20191023/03.gif)-->
<h1 id="五、向量的叉乘"><a href="#五、向量的叉乘" class="headerlink" title="五、向量的叉乘"></a>五、向量的叉乘</h1><p>向量的叉乘，又称为向量积。</p>
<h2 id="1-向量积的模长"><a href="#1-向量积的模长" class="headerlink" title="1.向量积的模长"></a>1.向量积的模长</h2><p>两个平面向量$\pmb a$、$\pmb b$的叉乘记为$\pmb a \times\pmb b$，模长的计算方法如下：</p>
<script type="math/tex; mode=display">{\lvert \pmb a \times\pmb b\rvert} = {\lvert \pmb a\rvert} \cdot {\lvert \pmb b\rvert} \cdot \sin\theta \tag{5-1}</script><!--   ![04]( /images/20191023/04.gif)  -->
<h2 id="2-向量积的方向"><a href="#2-向量积的方向" class="headerlink" title="2.向量积的方向"></a>2.向量积的方向</h2><p>方向为：向量积的方向与这两个向量所在平面垂直，且遵守右手定则。（一个简单的确定满足“右手定则”的结果向量的方向的方法是这样的：若坐标系是满足右手定则的，当右手的四指从 $\pmb a$ 以不超过180度的转角转向 $\pmb b$ 时，竖起的大拇指指向是叉乘的方向。）</p>
<p><img src=" /images/20191023/CrossProduct.png" width=50% /><br><!--![05]( /images/20191023/CrossProduct.png ) --></p>
<p>在上图中，$\pmb a \times\pmb b$ 的方向是垂直指向屏幕外侧。</p>
<h2 id="3-向量积的物理意义"><a href="#3-向量积的物理意义" class="headerlink" title="3.向量积的物理意义"></a>3.向量积的物理意义</h2><p>物理意义：向量的叉乘常用来表示平行四边形的面积。从上图可以看出：$\pmb a \times\pmb b$ 表示的是平行四边形面积，$\pmb a \times\pmb c$ 表示的是矩形面积，显然有：</p>
<script type="math/tex; mode=display">\pmb a \times\pmb b  = \pmb a \times\pmb c \tag{5-2}</script><p>这意味着，$\pmb a$ 与任意以 $\pmb a$ 所在直线上一点为起点、以 $\pmb b$ 的终点为终点的向量进行叉乘，得到的结果都是一样的。</p>
<h2 id="4-向量积与斜对称矩阵"><a href="#4-向量积与斜对称矩阵" class="headerlink" title="4.向量积与斜对称矩阵"></a>4.向量积与斜对称矩阵</h2><p>将二维平面内的向量拓展到三维空间，若$\pmb a =<br>\begin{bmatrix}<br>a_1 &amp; a_2 &amp; a_3<br>\end{bmatrix}^{\mathrm T}$与$\pmb b =<br>\begin{bmatrix}<br>b_1 &amp; b_2 &amp; b_3<br>\end{bmatrix}^{\mathrm T}$进行叉乘，则有如下结果：</p>
<p><img src="/images/20191023/05.png" alt="06">$\tag{5-3}$</p>
<p>上式建立起了向量叉乘与向量斜对称矩阵之间的联系。</p>
]]></content>
      <categories>
        <category>工科生的基本功</category>
        <category>基本数学知识</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>数学基础</tag>
      </tags>
  </entry>
  <entry>
    <title>坐标旋转</title>
    <url>/archives/5096.html</url>
    <content><![CDATA[<blockquote>
<p>详细介绍坐标旋转的过程。开发环境： MATLAB 2016b + Robotics Toolbox 10.2.</p>
</blockquote>
<span id="more"></span>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>坐标旋转是机器人控制、航天器控制中不可缺少的基本功。在与其他同行交流的过程中，因坐标旋转而发生争论，特此将坐标旋转的推导过程记录，以防再发生混乱。</p>
<h1 id="坐标旋转的推导过程"><a href="#坐标旋转的推导过程" class="headerlink" title="坐标旋转的推导过程"></a>坐标旋转的推导过程</h1><p>首先建立坐标系，假定坐标系$ OX_1Y_1Z_1 $（以下简称1系）由坐标系$ OX_0Y_0Z_0 $（以下简称0系）绕$ Z_0 $轴逆时针旋转$ \theta $所得(右手旋转方向为正)。略去Z方向，在XY平面的示意图如下（这是由于在三维空间中是绕轴旋转，二维空间中绕点旋转）：<br><img src=" /images/20191013/01.jpg" width=40% /><br><!-- ![01.jpg]( /images/20191013/01.jpg) --></p>
<p>上图中，P点在0系中的坐标为$ (x_0, y_0) $，在1系中的坐标为$ (x_1, y_1) $。易得：</p>
<script type="math/tex; mode=display">OA = x_0, OB = y_0, OC = x_1, OD = y_1</script><p>作$ AM \bot OC $，根据几何知识，易得：</p>
<script type="math/tex; mode=display">\angle AOC = \angle CPN = \angle MAN = \theta</script><p>根据几何知识，易有：</p>
<p><img src="/images/20191013/02.gif" alt="02"> $ \tag{1} $</p>
<p><img src="/images/20191013/03.gif" alt="03"> $ \tag{2} $</p>
<p>由上式可得：</p>
<script type="math/tex; mode=display">{y_1} =  - {x_0}\sin \theta  + {y_0}\cos \theta \tag{3}</script><p>由于绕$Z$轴旋转，因此有：</p>
<script type="math/tex; mode=display">{z_1} = {z_0} \tag{4}</script><p>将上述结论式(1)、(3)~(4)整理成矩阵形式，有：<br><img src="/images/20191013/04.gif" alt="04"> $ \tag{5} $</p>
<p>上式中，$T$的下角标表示参考坐标系，上角标表示旋转后的坐标系。由此可得到从0系绕$Z$轴旋转$\theta$到1系的旋转矩阵：</p>
<p><img src="/images/20191013/13.gif" alt="05"> $ \tag{6} $</p>
<p>同理，可得从0系绕 Y 轴或 X 轴旋转到1系的旋转矩阵为：</p>
<p><img src="/images/20191013/12.gif" alt="06"> $ \tag{7} $</p>
<p>式(6)~(7)可以理解为用0系的坐标来得到1系的坐标。</p>
<p>同理，可以得到从1系到0系的旋转$-\theta$矩阵为：</p>
<p><img src="/images/20191013/14.gif" alt="07"> $ \tag{8} $</p>
<p>上式可以理解为用1系的坐标来得到0系。</p>
<p>从式(6)~(8)可以看出：</p>
<script type="math/tex; mode=display">T_0^1 = (T_1^0)^T \tag{9}</script><p>值得注意的是，说是旋转矩阵不同，其实最本质的还是在于所求坐标在哪个系的表达方式的问题，如式(10)所示。</p>
<p><img src="/images/20191013/15.gif" alt="15"> <script type="math/tex">\tag{10}</script></p>
<p>因此，与其费尽心思去记容易混淆的坐标旋转矩阵，不如懂得原理之后，每逢遇到旋转矩阵，就在脑海里想象整个的坐标旋转公式，搞明白等式左边的坐标是在哪个坐标系中表示。</p>
<h1 id="在航天器和机器人中的坐标旋转"><a href="#在航天器和机器人中的坐标旋转" class="headerlink" title="在航天器和机器人中的坐标旋转"></a>在航天器和机器人中的坐标旋转</h1><p>上节讲述了坐标旋转的推导过程，这在航天器和机器人两个领域是常用到的。但两个领域不同之处在于，航天器中往往采用的是用参考坐标系坐标来得到旋转后坐标系坐标的描述方式，机器人中则更习惯采用用旋转后坐标系坐标得到参考坐标系坐标的描述方式。</p>
<p>在经典的《机器人建模和控制》中，给出坐标旋转的定义方式如下图所示：</p>
<p><img src="/images/20191013/05.jpg" alt="08"><br><img src="/images/20191013/06.jpg" alt="09"></p>
<blockquote>
<p>注意在上图中，作者声明了上角标表示参考坐标系，下角标表示旋转后的坐标系。</p>
</blockquote>
<p>在《Robotics Modeling, Planning and Control》中，坐标旋转的描述方式为：</p>
<p><img src="/images/20191013/07.jpg" alt="10"><br><img src="/images/20191013/08.jpg" alt="11"><br><img src="/images/20191013/09.jpg" alt="12"></p>
<p>从以上的三张图中可以看出，其推导方式与上一节一致，但采用了用旋转后的坐标来得到参考坐标系中的坐标的描述方式。</p>
<p>上述两种描述方式在MTATLAB中均有相应的函数来实现：</p>
<p><img src="/images/20191013/10.jpg" alt="13"><br><img src="/images/20191013/11.jpg" alt="14"></p>
<p>除了上述MATLAB自带的坐标旋转函数外，通过额外安装 Robotics Toolbox，可以更方便地求得坐标旋转的结果，如下图所示。</p>
<p><img src="/images/20191013/16.jpg" alt="16"></p>
<p>Robotics Toolbox的下载地址：<a href="http://petercorke.com/wordpress/toolboxes/robotics-toolbox">http://petercorke.com/wordpress/toolboxes/robotics-toolbox</a></p>
<p>笔者使用MATLAB2016b + RTB-10.2.zip(November 13, 2017)，可以正常安装，其他的安装包存在文件缺失或者与MATLAB版本不匹配的问题。安装方法是将该压缩包解压到MATLAB的安装目录bin下面(或者打开MATLAB后，将解压的安装包直接拷贝到MATLAB的文件浏览器中)，然后打开文件夹，运行文件：rvctools/startup_rvc.m。</p>
<p>关于该工具箱的使用方法，请参考由Cola倾情推荐的<a href="https://link.springer.com/content/pdf/10.1007%2F978-3-319-54413-7.pdf">Robotics, vision and control</a>。</p>
]]></content>
      <categories>
        <category>机器人控制</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>MATLAB</tag>
        <tag>数学基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Gazebo8的安装</title>
    <url>/archives/35676.html</url>
    <content><![CDATA[<blockquote>
<p>本文中的环境为Ubuntu16.04LTS + ROS(kinetic).</p>
</blockquote>
<span id="more"></span>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>对于kinetic版本的ROS，默认安装Gazebo版本是7。但是现在需要用到版本为8的Gazebo仿真环境。经过一番查找，找到了相应的方法。</p>
<h1 id="Gazebo7的卸载"><a href="#Gazebo7的卸载" class="headerlink" title="Gazebo7的卸载"></a>Gazebo7的卸载</h1><p>查看Gazebo的版本：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">gazebo -v</span><br><span class="line">``</span><br><span class="line"></span><br><span class="line">将gazebo7卸载：</span><br><span class="line">```py</span><br><span class="line">$ sudo apt-get remove ros-kinetic-gazebo*</span><br><span class="line">$ sudo apt-get remove libgazebo*</span><br><span class="line">$ sudo apt-get remove gazebo*</span><br></pre></td></tr></table></figure>
<h1 id="Gazebo8的安装"><a href="#Gazebo8的安装" class="headerlink" title="Gazebo8的安装"></a>Gazebo8的安装</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">sudo sh -c <span class="string">&#x27;echo &quot;deb http://packages.osrfoundation.org/gazebo/ubuntu-stable `lsb_release -cs` main&quot; &gt; /etc/apt/sources.list.d/gazebo-stable.list&#x27;</span></span><br><span class="line">wget http://packages.osrfoundation.org/gazebo.key -O - | sudo apt-key add -</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install gazebo8 </span><br><span class="line">sudo apt-get install libgazebo8-dev</span><br><span class="line">sudo apt-get install ros-kinetic-gazebo8-*</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>机器人控制</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>机器人</tag>
        <tag>ROS</tag>
      </tags>
  </entry>
  <entry>
    <title>C++中作用域符号的使用</title>
    <url>/archives/30969.html</url>
    <content><![CDATA[<blockquote>
<p>开发环境：Microsoft VS2017。</p>
</blockquote>
<span id="more"></span>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>::运算符，是作用域运算符，是C++语言中优先级最高的运算符。该运算符的用法主要有包括以下三个方面：</p>
<ol>
<li>代码块的作用域。</li>
<li>类的静态成员访问。</li>
<li>命名空间成员访问。</li>
</ol>
<h1 id="代码块的作用域"><a href="#代码块的作用域" class="headerlink" title="代码块的作用域"></a>代码块的作用域</h1><p>在函数内如果有一个与全局变量重名的变量，可以用 ::a 的形式访问（a是全局变量名）。示例如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;	</span><br><span class="line">	<span class="type">int</span> a = <span class="number">2</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;这个a是局部变量： a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;这个a是全局变量： a = &quot;</span> &lt;&lt; ::a &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果如下：<br><img src="/images/20190831/01.png" alt="01"></p>
<h1 id="类的静态成员访问"><a href="#类的静态成员访问" class="headerlink" title="类的静态成员访问"></a>类的静态成员访问</h1><h2 id="类的静态成员变量访问"><a href="#类的静态成员变量访问" class="headerlink" title="类的静态成员变量访问"></a>类的静态成员变量访问</h2><ol>
<li><p>静态成员变量属于整个类所有。因为静态成员变量并不属于某个对象，所以我们可以通过类名来直接访问公有静态成员变量。也可以通过对象名访问公有成员变量。</p>
</li>
<li><p>静态成员变量的特性与全局变量相同。静态成员变量实际在类外单独分配空间，在程序内部存储于全局数据区；静态成员变量的生命期为程序运行期，不依赖于任何对象。</p>
</li>
<li><p>在定义时直接通过static关键字修饰。静态成员变量需要在类外进行赋值，不能在构造函数中进行赋值。</p>
</li>
</ol>
<h3 id="pch-h"><a href="#pch-h" class="headerlink" title="pch.h"></a>pch.h</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> PCH_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PCH_H</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">MyClass</span>();</span><br><span class="line">	~<span class="built_in">MyClass</span>();</span><br><span class="line">	<span class="type">int</span> a;</span><br><span class="line">	<span class="type">static</span> <span class="type">int</span> b;</span><br><span class="line">	<span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">funcTest</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//PCH_H</span></span></span><br></pre></td></tr></table></figure>
<h3 id="pch-cpp"><a href="#pch-cpp" class="headerlink" title="pch.cpp"></a>pch.cpp</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">MyClass::funcTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;这是MyClass类中的一个静态函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyClass::<span class="built_in">MyClass</span>()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyClass::~<span class="built_in">MyClass</span>()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> MyClass::b = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;	</span><br><span class="line">	<span class="type">int</span> a = <span class="number">2</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;这个a是局部变量： a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;这个a是全局变量： a = &quot;</span> &lt;&lt; ::a &lt;&lt; endl;</span><br><span class="line">	MyClass obj;</span><br><span class="line">	<span class="comment">//int MyClass::b = 3;		//error!</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;直接调用类中的静态成员变量MyClass::b： b = &quot;</span> &lt;&lt; MyClass::b &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;通过类定义的对象来访问静态成员变量：   b = &quot;</span> &lt;&lt; obj.b &lt;&lt; endl;</span><br><span class="line">	obj.b = a;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;通过类定义的对象来  修改  静态成员变量的值： b = &quot;</span> &lt;&lt; obj.b &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;直接调用类中的静态成员变量MyClass::b： b = &quot;</span> &lt;&lt; MyClass::b &lt;&lt; endl;	</span><br><span class="line">	MyClass::b = ::a;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;通过类定义的对象来访问静态成员变量的值： b = &quot;</span> &lt;&lt; obj.b &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;直接调用类中的静态成员变量MyClass::b： b = &quot;</span> &lt;&lt; MyClass::b &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<p>1.Q：第6行的程序为什么要在全局声明？</p>
<p>  A：静态成员变量是在类外进行初始化的，静态成员变量一定要类外进行声明。这是因为声明描述了如何分配内存，但并不分配内存。这是因为静态类成员是单独存储的，而不是对象的组成部分，所以不是在创建类对象时被定义的，因此不能在类中进行初始化，否则每创建一个对象都会初始化静态成员了。</p>
<p>2.注意使用::来改变作用域会同时改变掉类定义的对象中的该静态成员变量值。</p>
<h3 id="程序运行结果"><a href="#程序运行结果" class="headerlink" title="程序运行结果"></a>程序运行结果</h3><p><img src="/images/20190831/02.png" alt="02"></p>
<h2 id="类的静态成员函数访问"><a href="#类的静态成员函数访问" class="headerlink" title="类的静态成员函数访问"></a>类的静态成员函数访问</h2><p>静态成员函数是类中的特殊的成员函数。属于属于整个类所有。因为静态成员函数并不属于某个对象，所以我们可以通过类名来直接访问公有静态成员函数。也可以通过对象名访问公有成员函数。</p>
<h3 id="main-cpp-1"><a href="#main-cpp-1" class="headerlink" title="main.cpp"></a>main.cpp</h3><p>pch.h和pch.cpp同上节。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> MyClass::b = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;	</span><br><span class="line">	MyClass obj;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\n通过作用域直接访问静态成员函数：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	MyClass::<span class="built_in">funcTest</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\n通过类定义的对象访问静态成员函数：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	obj.<span class="built_in">funcTest</span>();</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：在静态函数中不能访问非静态成员变量，例如在上述funcTest()函数中，是不能直接调用类中的成员变量a的，但是可以直接访问类中的静态成员变量b。</p>
</blockquote>
<h3 id="程序运行结果-1"><a href="#程序运行结果-1" class="headerlink" title="程序运行结果"></a>程序运行结果</h3><p><img src="/images/20190831/03.png" alt="03"></p>
<h1 id="命名空间成员访问"><a href="#命名空间成员访问" class="headerlink" title="命名空间成员访问"></a>命名空间成员访问</h1><p>访问命名空间中的成员时，要用 namespace_name::member_name 的方式访问。当然，也可以用 using 关键字省去命名空间名和作用域运算符。如上节的<code>main.cpp</code>程序中，给出第3行的程序，在接下来的程序中直接使用<code>cout</code>即可，如果没有该声明，则需要写为<code>std::cout</code>才可以。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/weixin_41461277/article/details/85117624?utm_source=app">C++的运算符（一）—— ::（作用域运算符）</a></p>
<p><a href="https://blog.csdn.net/small_prince_/article/details/80492500?utm_source=app">对象和类——类的静态成员</a></p>
]]></content>
      <categories>
        <category>工科生的基本功</category>
        <category>快乐码农</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>2019世界机器人大会参观总结</title>
    <url>/archives/16667.html</url>
    <content><![CDATA[<blockquote>
<p>2019年8月23日于北京亦庄参观世界机器人大会。 </p>
</blockquote>
<span id="more"></span>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文主要记录在参观2019年世界机器人大会时的一些感受。</p>
<h1 id="机械臂篇"><a href="#机械臂篇" class="headerlink" title="机械臂篇"></a>机械臂篇</h1><p>在A展厅，主要看了各公司的机械臂，就从工业机器人和协作机器人两个角度来讲好了。工业机器人方面，展会中的大型工业机器人，如KUKA、安川的大型机械臂，<br>运行非常稳定，也很流畅，说明国外在工业机械臂这个方面做的确实很成熟。格力用机械臂来演奏交响乐，别有一番风味，而且格力也开始自己制造机器人用的电机和<br>驱动器。虽然不知道性能怎么样，但是作为国内的大厂，最起码说明已经在做这些东西，已经在朝这个方向前进。KEBA用四台机械臂做物料分拣，基本可以确定物料<br>能被全部被分拣到，速度也很快，但是动起来架子有点晃动。</p>
<p>协作机器人方面，有两种实现力控的方式。一种是，通过在工业机器人末端增加一个力传感器，再将力信号反馈到机器人进行解算，从而实现力控；另一种就是，通过<br>在各关节装力传感器来实现。毫无疑问。后者的精度会比前者高很多，同时，成本也会高很多。协作机器人的应用方面，比较好的也是在做物料的分拣以及通过视觉伺服<br>来做抓取。还有一个就是和移动平台相结合，可以用来做厂房的安全巡视，这方面做的比较好的是京东数科，用移动平台加UR，在UR末端装一个摄像头来查看厂房设备情况。</p>
<h1 id="其他机器人篇"><a href="#其他机器人篇" class="headerlink" title="其他机器人篇"></a>其他机器人篇</h1><p>仿狗形机器人，在展会中看到了宇树科技的Laika狗和Alien狗，上交的六足机器狗(一前两后或两前一后做运动)，以及航天科技(或者是航天科工？)的油动大狗。宇树科技<br>的狗形机器人确实已经做的很好了，当三只狗形机器人一起在地面行走时，确实有一种《黑镜(子弹头)》的即视感。还有一只萌萌的迷你机器狗。油动大狗应该是最初为了<br>军队行军驮运重物而研制的，但是油动的声音太大了。剩下的狗形机器人，主要是用来做巡视方面的工作。除此外，暂没有特别好的应用场景。当然，做这种用途的，除了<br>狗形机器人，就是移动的车形机器人了。移动车形机器人的另一个用途，或者说研究方向是，用来做无人送货小车，京东美团都有在做。</p>
<p>还有一些仿鸟形、仿鱼形的仿生机器人，没有过多区研究。</p>
<h1 id="研究热点篇"><a href="#研究热点篇" class="headerlink" title="研究热点篇"></a>研究热点篇</h1><p>对于机械臂方向，主要的困境还是算法。因为大家都用的是差不多的硬件，那么采用什么样的算法能让机械臂抖动更小是大家目前亟待解决的一个问题。对于移动平台方向，<br>从二维平面到三维空间的建模是一个问题，slam的精度等也是一些问题。虽然不要求要精确到几毫米，但是如果非常不精确，会导致机械臂无法完成相应的任务。</p>
]]></content>
      <categories>
        <category>茶余裨谈</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>机器人</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下OpenCV库的安装</title>
    <url>/archives/56535.html</url>
    <content><![CDATA[<blockquote>
<p>开发环境：Ubuntu16.04 LTS、 OpenCV3.4.1。 </p>
</blockquote>
<span id="more"></span>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>OpenCV 是一个开源的计算机视觉库，可以从 <a href="http://opencv.org">http://opencv.org</a> 获取。OpenCV包含的模块以及组成结构参见：<a href="http://c.biancheng.net/view/1101.html。">http://c.biancheng.net/view/1101.html。</a></p>
<h1 id="OpenCV库的安装"><a href="#OpenCV库的安装" class="headerlink" title="OpenCV库的安装"></a>OpenCV库的安装</h1><h2 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h2><p>官网下载sources版本(For Linux)：<a href="http://opencv.org/releases.html。">http://opencv.org/releases.html。</a></p>
<p>解压，并进入解压后的目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unzip opencv-3.4.1.zip 			<span class="comment"># 解压安装包，也可以右键解压</span></span><br><span class="line"><span class="built_in">cd</span> opencv-3.4.1				<span class="comment"># 打开安装包存放路径</span></span><br></pre></td></tr></table></figure>
<h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><p>在Terminal中，打开安装包存放路径，执行下列语句进行安装。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install build-essential libgtk2.0-dev libavcodec-dev libavformat-dev libjpeg.dev libtiff4.dev libswscale-dev libjasper-dev</span><br><span class="line">					<span class="comment"># 上述指令是为了安装依赖库</span></span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build 		//打开编译目录并进入</span><br><span class="line">cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local ..	</span><br><span class="line">					<span class="comment"># 编译目录</span></span><br><span class="line">					<span class="comment"># 或者cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D WITH_TBB=ON -D BUILD_NEW_PYTHON_SUPPORT=ON -D WITH_V4L=ON -D WITH_QT=ON -D WITH_OPENGL=ON ..</span></span><br><span class="line">make -j$(<span class="built_in">nproc</span>)				<span class="comment"># 编译</span></span><br><span class="line">sudo make install 			<span class="comment"># 安装</span></span><br><span class="line">sudo /bin/bash -c <span class="string">&#x27;echo &quot;/usr/local/lib&quot; &gt; /etc/ld.so.conf.d/opencv.conf&#x27;</span>	</span><br><span class="line">					<span class="comment"># 环境配置添加库路径</span></span><br><span class="line">sudo ldconfig				<span class="comment"># 更新系统库</span></span><br><span class="line">sudo gedit /etc/bash.bashrc 		<span class="comment"># 配置bash，打开后在末尾添加下面两句：</span></span><br><span class="line">					<span class="comment"># PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib/pkgconfig  (不要复制符号 #)</span></span><br><span class="line">					<span class="comment"># export PKG_CONFIG_PATH  （不要复制符号 #）</span></span><br><span class="line">					<span class="comment"># 保存并退出</span></span><br><span class="line">sudo -s </span><br><span class="line"><span class="built_in">source</span> /etc/bash.bashrc			<span class="comment"># 激活配置</span></span><br><span class="line">sudo updatedb  				<span class="comment"># 更新database</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>参考链接：<a href="https://docs.opencv.org/master/d7/d9f/tutorial_linux_install.html">官网安装(英文版)</a>.<br>         <a href="https://www.cnblogs.com/Shuqing-cxw/p/9195303.html">Ubuntu16.04安装Opencv3.4.1教程</a>.<br>         <a href="https://blog.csdn.net/ezbuy/article/details/80570189">sudo: source: command not found</a>.</p>
</blockquote>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>自己新建一个文件夹，用来存放工程文件，目录如下：</p>
<p><img src="/images/20190805OpenCV/01.png" alt="01.png"></p>
<blockquote>
<p>其中，lena.jpg由自己保存一张图片并以该名字命名，与.cpp存放于同级目录。</p>
</blockquote>
<h2 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cmake_minimum_required</span>(VERSION <span class="number">2.8</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">project</span>( DisplayImage )</span><br><span class="line"></span><br><span class="line"><span class="built_in">find_package</span>( OpenCV REQUIRED )</span><br><span class="line"></span><br><span class="line"><span class="built_in">add_executable</span>( opencv_test opencv_test.cpp )</span><br><span class="line"></span><br><span class="line"><span class="built_in">target_link_libraries</span>( opencv_test $&#123;OpenCV_LIBS&#125; )</span><br></pre></td></tr></table></figure>
<h2 id="opencv-test-cpp"><a href="#opencv-test-cpp" class="headerlink" title="opencv_test.cpp"></a>opencv_test.cpp</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( argc != <span class="number">2</span> ) &#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Need to load a picture...&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Mat image;</span><br><span class="line">    image = <span class="built_in">imread</span>(argv[<span class="number">1</span>], <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> ( image.<span class="built_in">empty</span>() ) &#123;</span><br><span class="line">	cout &lt;&lt;<span class="string">&quot;No image data!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">namedWindow</span>(<span class="string">&quot;Display Image&quot;</span>, WINDOW_AUTOSIZE);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;Display Image&quot;</span>, image);</span><br><span class="line">    <span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>在build文件夹中编译，运行程序：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake ..						</span><br><span class="line">make</span><br><span class="line">./opencv_test ../lena.jpg		<span class="comment"># 运行可执行程序，并输入图片名作为参数。其中../表示上一级目录，./表示本级目录下的可执行程序。</span></span><br></pre></td></tr></table></figure>
<p>执行上述程序后，可看到自己保存的图片lena.jpg。</p>
]]></content>
      <categories>
        <category>工科生的基本功</category>
        <category>快乐码农</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>Linux</tag>
        <tag>C++</tag>
        <tag>OpenCV</tag>
      </tags>
  </entry>
  <entry>
    <title>ROS(kinetic)有用指令集</title>
    <url>/archives/25595.html</url>
    <content><![CDATA[<blockquote>
<p>本文中的环境为Ubuntu16.04LTS + ROS(kinetic).</p>
</blockquote>
<span id="more"></span>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于从ROS的官网上的教程并没有实时更新，上面混杂了一些旧版本的东西，看起来有些麻烦，而且有的介绍过于繁琐，因此本篇博客旨在介绍笔者使用版本的精简指令集。关于指令的详细介绍，还需从官网上查看相关内容。</p>
<h1 id="指令介绍"><a href="#指令介绍" class="headerlink" title="指令介绍"></a>指令介绍</h1><h2 id="ROS安装指令"><a href="#ROS安装指令" class="headerlink" title="ROS安装指令"></a>ROS安装指令</h2><p>在执行下面的指令前，请注意先将源换位内地源，推荐清华源。</p>
<blockquote>
<p>2021.08.09由于一些原因，官方的安装教程有所改变：<br>ROS 官方教程：<a href="http://wiki.ros.org/ROS/Tutorials">http://wiki.ros.org/ROS/Tutorials</a><br>ROS kinetic 版本安装：<a href="http://wiki.ros.org/kinetic/Installation/Ubuntu">http://wiki.ros.org/kinetic/Installation/Ubuntu</a><br>ROS rosdep 的问题<br>执行<code>sudo rosdep init</code> 出错，参考 <a href="https://zhuanlan.zhihu.com/p/77483614">解决方案1</a> <a href="https://blog.csdn.net/haoruilin/article/details/104360432?utm_medium=distribute.pc_relevant_download.none-task-blog-baidujs-1.nonecase&amp;depth_1-utm_source=distribute.pc_relevant_download.none-task-blog-baidujs-1.nonecase">解决方案2</a><br>上一步正确后，执行 <code>rosdep update</code>的问题，这个一般是由于Python版本不兼容造成的。注意，这时候系统不应存在已经加载的Python3环境（实际环境中有多个Python版本注意切换，双系统的虚拟环境，则应该关闭虚拟环境，还不行就要重启系统再尝试）<br>上述操作建议科学上网后再进行。</p>
</blockquote>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">sudo sh -c <span class="string">&#x27;echo &quot;deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#x27;</span></span><br><span class="line">sudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:<span class="number">80</span> --recv-key <span class="number">0xB01FA116</span></span><br><span class="line">sudo apt-get update	<span class="comment">#如果更新失败提示GPT error，输入sudo apt-key adv --recv-keys --keyserver keyserver.ubuntu.com F42ED6FBAB17C654</span></span><br><span class="line">sudo apt-get install ros-kinetic-desktop-full</span><br><span class="line">sudo rosdep init</span><br><span class="line">rosdep update</span><br><span class="line">echo <span class="string">&quot;source /opt/ros/kinetic/setup.bash&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class="line">source ~/.bashrc</span><br><span class="line">sudo apt install python-rosinstall python-rosinstall-generator python-wstool build-essential</span><br></pre></td></tr></table></figure>
<h2 id="UR5的仿真环境安装与使用"><a href="#UR5的仿真环境安装与使用" class="headerlink" title="UR5的仿真环境安装与使用"></a>UR5的仿真环境安装与使用</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">sudo apt-get install ros-kinetic-universal-robot</span><br><span class="line">roslaunch ur_gazebo ur5.launch	</span><br><span class="line">roslaunch ur5_moveit_config ur5_moveit_planning_execution.launch sim:=<span class="literal">true</span></span><br><span class="line">roslaunch ur5_moveit_config moveit_rviz.launch config:=<span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h2 id="ROS文件系统介绍"><a href="#ROS文件系统介绍" class="headerlink" title="ROS文件系统介绍"></a>ROS文件系统介绍</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">sudo apt-get install ros-kinetic-ros-tutorials		<span class="comment">//安装ros-tutorials程序包</span></span><br><span class="line">rospack find roscpp									<span class="comment">//rospack find [包名称]  rospack (/rospack)允许你获取软件包的有关信息。在本教程中，我们只涉及到rospack中find参数选项，该选项可以返回软件包的路径信息。</span></span><br><span class="line">roscd roscpp										<span class="comment">//roscd [本地包名称[/子目录]]   直接切换工作目录到某个软件包或者软件包集当中</span></span><br><span class="line">pwd													<span class="comment">//输出当前工作目录</span></span><br><span class="line">echo $ROS_PACKAGE_PATH								<span class="comment">//查看ROS_PACKAGE_PATH</span></span><br><span class="line">roscd log											<span class="comment">//切换到ROS保存日记文件的目录下。如果你没有执行过任何ROS程序，系统会报错说该目录不存在。</span></span><br><span class="line">rosls roscpp_tutorials								<span class="comment">//rosls [本地包名称[/子目录]] 直接按软件包的名称而不是绝对路径来罗列目录</span></span><br></pre></td></tr></table></figure>
<h2 id="使用catkin创建工作空间"><a href="#使用catkin创建工作空间" class="headerlink" title="使用catkin创建工作空间"></a>使用catkin创建工作空间</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">source /opt/ros/kinetic/setup.bash					<span class="comment">//sourced your environment</span></span><br><span class="line">mkdir -p ~/catkin_ws/src</span><br><span class="line">cd ~/catkin_ws/</span><br><span class="line">catkin_make</span><br><span class="line">source devel/setup.bash</span><br><span class="line">echo $ROS_PACKAGE_PATH 								<span class="comment">//确认环境变量包含了目录</span></span><br></pre></td></tr></table></figure>
<h2 id="创建ROS程序包"><a href="#创建ROS程序包" class="headerlink" title="创建ROS程序包"></a>创建ROS程序包</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cd ~/catkin_ws/src</span><br><span class="line">catkin_create_pkg beginner_tutorials std_msgs rospy roscpp 		<span class="comment">//使用catkin_create_pkg命令来创建一个名为&#x27;beginner_tutorials&#x27;的新程序包，这个程序包依赖于std_msgs、roscpp和rospy</span></span><br><span class="line">rospack depends1 beginner_tutorials 							<span class="comment">//使用rospack命令来查看一级依赖包</span></span><br><span class="line">rospack depends beginner_tutorials								<span class="comment">//使用rospack可以递归检测出所有的依赖包</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>本节还介绍了.xml文件的书写方法</p>
</blockquote>
<h2 id="编译ROS程序包"><a href="#编译ROS程序包" class="headerlink" title="编译ROS程序包"></a>编译ROS程序包</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">source /opt/ros/kinetic/setup.bash					<span class="comment">//先source你的环境配置(setup)文件</span></span><br><span class="line">cd catkin工作空间</span><br><span class="line">catkin_make											<span class="comment">//编译</span></span><br><span class="line">catkin_make --source my_src							<span class="comment">//编译存放在了my_src中，而非在默认工作空间中（~/catkin_ws/src)的源代码</span></span><br></pre></td></tr></table></figure>
<h2 id="理解ROS节点"><a href="#理解ROS节点" class="headerlink" title="理解ROS节点"></a>理解ROS节点</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">sudo apt-get install ros-kinetic-ros-tutorials		<span class="comment">//安装龟龟模拟器</span></span><br><span class="line">roscore												<span class="comment">//运行所有ROS程序前首先要运行的命令</span></span><br><span class="line">rosnode list										<span class="comment">//列出活跃的节点，本例为/rosout</span></span><br><span class="line">rosnode info /rosout 								<span class="comment">//返回特定节点的信息</span></span><br><span class="line">rosrun turtlesim turtlesim_node						<span class="comment">//打开新终端，运行turtlesim。    rosrun [package_name] [node_name]</span></span><br><span class="line">rosnode list										<span class="comment">//打开新终端，查看节点：/rosout  /turtlesim</span></span><br><span class="line">rosrun turtlesim turtlesim_node __name:=my_turtle   <span class="comment">//关闭原来的turtlesim，打开新终端运行。改变节点名称</span></span><br><span class="line">rosnode list 										<span class="comment">//查看新的节点名称：/rosout /my_turtle</span></span><br><span class="line">rosnode ping my_turtle								<span class="comment">//使用另一个节点来ping该节点</span></span><br></pre></td></tr></table></figure>
<h2 id="理解ROS话题"><a href="#理解ROS话题" class="headerlink" title="理解ROS话题"></a>理解ROS话题</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">roscore 							<span class="comment">//新开一个终端，打开ros</span></span><br><span class="line">rosrun turtlesim turtlesim_node		<span class="comment">//新开一个终端。这是接受消息的节点</span></span><br><span class="line">rosrun turtlesim turtle_teleop_key	<span class="comment">//新开一个终端，通过键盘来控制龟龟运动。这也是发布消息的节点</span></span><br><span class="line">rosrun rqt_graph rqt_graph			<span class="comment">//新开一个终端，创建一个显示当前系统运行情况的动态图形</span></span><br><span class="line">rostopic -h							<span class="comment">//新开一个终端，查看rostopic的子命令</span></span><br><span class="line">rostopic echo /turtle1/cmd_vel		<span class="comment">//你可能看不到任何东西因为现在还没有数据发布到该话题上。接下来我们通过按下方向键使turtle_teleop_key节点发布数据。可以返回rqt_graph中刷新查看</span></span><br><span class="line">rostopic list -v 					<span class="comment">//查看有关所发布和订阅的话题及其类型的详细信息</span></span><br><span class="line">rostopic type /turtle1/cmd_vel		<span class="comment">//查看发布在某个话题上的消息类型，会看到：geometry_msgs/Twist</span></span><br><span class="line">rosmsg show geometry_msgs/Twist		<span class="comment">//查看消息的详细情况。根据该结果可以知道turtlesim节点所期望的消息类型(可看到包含linear和angular两个值)，接下来我们就可以给turtle发布命令了</span></span><br><span class="line">rostopic pub <span class="number">-1</span> /turtle1/cmd_vel geometry_msgs/Twist -- <span class="string">&#x27;[2.0, 0.0, 0.0]&#x27;</span> <span class="string">&#x27;[0.0, 0.0, 1.8]&#x27;</span></span><br><span class="line">									<span class="comment">//rostopic pub可以把数据发布到当前某个正在广播的话题上。用法:rostopic pub [topic] [msg_type] [args]</span></span><br><span class="line">									<span class="comment">//以上命令会发送一条消息给turtlesim，告诉它以2.0大小的线速度和1.8大小的角速度开始移动。</span></span><br><span class="line">									<span class="comment">//-1: （单个破折号）这个参数选项使rostopic发布一条消息后马上退出。</span></span><br><span class="line">									<span class="comment">///turtle1/cmd_vel: 消息所发布到的话题名称</span></span><br><span class="line">									<span class="comment">//geometry_msgs/Twist: 所发布消息类型</span></span><br><span class="line">									<span class="comment">//--: 双破折号）这会告诉命令选项解析器接下来的参数部分都不是命令选项。这在参数里面包含有破折号-（比如负号）时是必须要添加的</span></span><br><span class="line">									<span class="comment">//&#x27;[2.0, 0.0, 0.0]&#x27; &#x27;[0.0, 0.0, 1.8]&#x27;: 正如之前提到的，在一个geometry_msgs/Twist消息里面包含有两个浮点型元素：linear和angular。</span></span><br><span class="line">									<span class="comment">//在本例中，&#x27;[2.0, 0.0, 0.0]&#x27;是linear的值，&#x27;[0.0, 0.0, 1.8]&#x27;是angular的值。这些参数其实是按照YAML语法格式编写的，这在YAML文档 (/ROS/YAMLCommandLine)中有更多的描述。</span></span><br><span class="line">rostopic pub /turtle1/cmd_vel geometry_msgs/Twist -r <span class="number">1</span> -- <span class="string">&#x27;[2.0, 0.0, 0.0]&#x27;</span> <span class="string">&#x27;[0.0, 0.0, 1.8]&#x27;</span></span><br><span class="line">									<span class="comment">//这条命令以1Hz的频率发布速度命令到速度话题上。使用rostopic pub -r命令来发布一个稳定的命令流</span></span><br><span class="line">rostopic hz /turtle1/pose			<span class="comment">//rostopic hz命令可以用来查看数据发布的频率。	rostopic hz [topic]	</span></span><br><span class="line">rostopic type /turtle1/pose | rosmsg show</span><br><span class="line">									<span class="comment">//结合rostopic type和rosmsg show命令来获取关于某个话题的更深层次的信息	</span></span><br><span class="line">									<span class="comment">//可以看到pose下有五个信息: x y theta linear_velocity angular_velocity</span></span><br><span class="line">rosrun rqt_plot rqt_plot			<span class="comment">//使用rqt_plot命令来绘制正在发布到/turtle1/pose话题上的数据变化图形	</span></span><br><span class="line">									<span class="comment">//这会弹出一个新窗口，在窗口左上角的一个文本框里面你可以添加需要绘制的话题。在里面输入/turtle1/pose/x后之前处于禁用状态的加号按钮将会被使能变亮。按一下该按钮，并</span></span><br><span class="line">									<span class="comment">//对/turtle1/pose/y重复相同的过程。现在你会在图形中看到turtle的x-y位置坐标图。</span></span><br><span class="line">									<span class="comment">//按下减号按钮会显示一组菜单让你隐藏图形中指定的话题。现在隐藏掉你刚才添加的话题并添加/turtle1/pose/theta											</span></span><br></pre></td></tr></table></figure>
<h2 id="理解ROS服务和参数"><a href="#理解ROS服务和参数" class="headerlink" title="理解ROS服务和参数"></a>理解ROS服务和参数</h2><p>在小乌龟仍然启动的基础上：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">rosservice list						<span class="comment">//输出可用服务的信息</span></span><br><span class="line">rosservice call						<span class="comment">//调用带参数的服务</span></span><br><span class="line">rosservice type 					<span class="comment">//输出服务类型</span></span><br><span class="line">rosservice find 					<span class="comment">//依据类型寻找服务find services by service type </span></span><br><span class="line">rosservice uri 						<span class="comment">//输出服务的ROSRPC uri		</span></span><br><span class="line">rosservice type clear				<span class="comment">//查看clear服务类型，clear是rosservice list中的一种服务类型。rosservice type [service]</span></span><br><span class="line">rosservice call clear				<span class="comment">//代用clear服务，该服务清除了turtlesim_node的背景上的轨迹。rosservice call [service] [args]</span></span><br><span class="line">rosservice type spawn| rossrv show 	<span class="comment">//查看再生（spawn）服务的信息</span></span><br><span class="line">rosservice call spawn <span class="number">2</span> <span class="number">2</span> <span class="number">0.2</span> <span class="string">&quot;&quot;</span> 	<span class="comment">//调用再生服务，在给定的位置和角度生成一只新的乌龟。名字参数是可选的，这里我们不设具体的名字，让turtlesim自动创建一个。</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">rosparam set 						<span class="comment">//设置参数</span></span><br><span class="line">rosparam get 						<span class="comment">//获取参数</span></span><br><span class="line">rosparam load 						<span class="comment">//从文件读取参数</span></span><br><span class="line">rosparam dump 						<span class="comment">//向文件中写入参数</span></span><br><span class="line">rosparam <span class="keyword">delete</span> 					<span class="comment">//删除参数</span></span><br><span class="line">rosparam list 						<span class="comment">//列出节点在服务器上的参数名</span></span><br><span class="line">rosparam set background_r <span class="number">150</span>		<span class="comment">//修改背景颜色的红色通道。	rosparam set [param_name]</span></span><br><span class="line">rosservice call clear				<span class="comment">//上述指令修改了参数的值，现在我们调用清除服务使得修改后的参数生效</span></span><br><span class="line">rosparam get background_g			<span class="comment">//获取背景的绿色通道的值。 rosparam get [param_name]</span></span><br><span class="line">rosparam get /						<span class="comment">//显示参数服务器上的所有内容</span></span><br><span class="line">rosparam dump params.yaml 			<span class="comment">//将所有的参数写入params.yaml文件。 rosparam dump [file_name]</span></span><br><span class="line">rosparam load params.yaml copy		<span class="comment">//将yaml文件重载入新的命名空间，比如说copy空间。 rosparam load [file_name] [namespace]</span></span><br><span class="line">rosparam get copy/background_b		<span class="comment">//获取copy空间的蓝色背景参数</span></span><br></pre></td></tr></table></figure>
<h2 id="使用-rqt-console-和-roslaunch"><a href="#使用-rqt-console-和-roslaunch" class="headerlink" title="使用 rqt_console 和 roslaunch"></a>使用 rqt_console 和 roslaunch</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">sudo apt-get install ros-kinetic-rqt ros-kinetic-rqt-common-plugins ros-kinetic-turtlesim</span><br><span class="line">														<span class="comment">//预先安装需要的程序包，若安装，请忽略</span></span><br><span class="line">rosrun rqt_console rqt_console							<span class="comment">//新终端中运行。 rqt_console属于ROS日志框架(logging framework)的一部分，用来显示节点的输出信息</span></span><br><span class="line">rosrun rqt_logger_level rqt_logger_level				<span class="comment">//新终端中运行。 rqt_logger_level允许我们修改节点运行时输出信息的日志等级（logger levels）（包括 DEBUG、WARN、INFO和ERROR）。</span></span><br><span class="line">rosrun turtlesim turtlesim_node							<span class="comment">//新终端中运行。启动turtlesim</span></span><br><span class="line">rostopic pub /turtle1/cmd_vel geometry_msgs/Twist -r <span class="number">1</span> -- <span class="string">&#x27;[2.0, 0.0, 0.0]&#x27;</span> <span class="string">&#x27;[0.0, 0.0, 0.0]&#x27;</span></span><br><span class="line">														<span class="comment">//小龟龟动起来再查看rqt_console中的输出</span></span><br><span class="line">roscd beginner_tutorials								<span class="comment">//打开之前创建的beginner_tutorials包，如果打不开，有两种办法解决：</span></span><br><span class="line">														<span class="comment">//1.输入绝对路径：cd ~/catkin_ws/src/beginner_tutorials	</span></span><br><span class="line">														<span class="comment">//2.设置当前终端环境路径：export ROS_PACKAGE_PATH=~/catkin_ws/src:$ROS_PACKAGE_PATH。 成功后再输入：roscd beginner_tutorials	</span></span><br><span class="line">mkdir launch &amp;&amp; cd launch 								<span class="comment">//创建并打开launch文件夹											</span></span><br></pre></td></tr></table></figure>
<p>新建一个空文件，命名为<code>turtlemimic.launch</code>，并在其中写入：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;launch&gt;</span><br><span class="line"></span><br><span class="line">	&lt;group ns=<span class="string">&quot;turtlesim1&quot;</span>&gt;</span><br><span class="line"> 		&lt;node pkg=<span class="string">&quot;turtlesim&quot;</span> name=<span class="string">&quot;sim&quot;</span> type=<span class="string">&quot;turtlesim_node&quot;</span>/&gt;</span><br><span class="line"> 	&lt;/group&gt;</span><br><span class="line"></span><br><span class="line">	&lt;group ns=<span class="string">&quot;turtlesim2&quot;</span>&gt;</span><br><span class="line"> 		&lt;node pkg=<span class="string">&quot;turtlesim&quot;</span> name=<span class="string">&quot;sim&quot;</span> type=<span class="string">&quot;turtlesim_node&quot;</span>/&gt;</span><br><span class="line"> 	&lt;/group&gt;</span><br><span class="line"></span><br><span class="line"> 	&lt;node pkg=<span class="string">&quot;turtlesim&quot;</span> name=<span class="string">&quot;mimic&quot;</span> type=<span class="string">&quot;mimic&quot;</span>&gt;</span><br><span class="line">	 &lt;remap from=<span class="string">&quot;input&quot;</span> to=<span class="string">&quot;turtlesim1/turtle1&quot;</span>/&gt;</span><br><span class="line">	 &lt;remap from=<span class="string">&quot;output&quot;</span> to=<span class="string">&quot;turtlesim2/turtle1&quot;</span>/&gt;</span><br><span class="line"> 	&lt;/node&gt;</span><br><span class="line"></span><br><span class="line">&lt;/launch&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在3~9行我们创建了两个节点分组并以’命名空间（namespace)’标签来区分，其中一个名为turtulesim1，另一个名为turtlesim2，两个组里面都使用相同的turtlesim节点并命名为’sim’。这样可以让我们同时启动两个turtlesim模拟器而不会产生命名冲突。在11~14行我们启动模仿节点，并将所有话题的输入和输出分别重命名为turtlesim1和turtlesim2，这样就会使turtlesim2模仿turtlesim1。第1行和第16行分别表示luanch文件的开始标签和结束标签。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">roslaunch beginner_tutorials turtlemimic.launch			<span class="comment">//通过roslaunch命令启动launch文件，从而启动多个节点</span></span><br><span class="line">rostopic pub /turtlesim1/turtle1/cmd_vel geometry_msgs/Twist -r <span class="number">1</span> -- <span class="string">&#x27;[2.0, 0.0, 0.0]&#x27;</span> <span class="string">&#x27;[0.0, 0.0, -1.8]&#x27;</span></span><br><span class="line">														<span class="comment">//在一个新终端中使用rostopic命令发送速度设定消息</span></span><br></pre></td></tr></table></figure>
<h2 id="使用rosed编辑ROS中的文件"><a href="#使用rosed编辑ROS中的文件" class="headerlink" title="使用rosed编辑ROS中的文件"></a>使用rosed编辑ROS中的文件</h2><p>如果习惯使用emacs，需要先将emacs设为默认编辑器，如果习惯使用vim，需要安装vim。这里以设置emacs为例。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">emacs .bashrc				<span class="comment">//新开一个终端。在.bashrc文件的最后一行写入：export EDITOR=&#x27;emacs -nw&#x27;</span></span><br><span class="line">echo $EDITOR				<span class="comment">//打开一个新终端，看是否定义了EDITOR。注意：.bashrc文件的改变，只会在新的终端才有效。已经打开的终端不受环境变量的影响。正常情况下回输出:emacs -nw</span></span><br><span class="line">rosed roscpp Logger.msg 	<span class="comment">//rosed可以直接通过package名来获取到待编辑的文件而无需指定该文件的存储路径了. rosed [package_name] [filename]</span></span><br></pre></td></tr></table></figure>
<h2 id="创建ROS消息和ROS服务"><a href="#创建ROS消息和ROS服务" class="headerlink" title="创建ROS消息和ROS服务"></a>创建ROS消息和ROS服务</h2><h3 id="使用ROSmsg"><a href="#使用ROSmsg" class="headerlink" title="使用ROSmsg"></a>使用ROSmsg</h3><h4 id="创建一个rosmsg"><a href="#创建一个rosmsg" class="headerlink" title="创建一个rosmsg"></a>创建一个rosmsg</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cd ~/catkin_ws/src/beginner_tutorials			<span class="comment">//打开之前创建的package</span></span><br><span class="line">mkdir msg 										<span class="comment">//创建msg文件夹</span></span><br><span class="line">echo <span class="string">&quot;int64 num&quot;</span> &gt; msg/Num.msg 					<span class="comment">//写入到Num.msg文件中</span></span><br></pre></td></tr></table></figure>
<p>确保msg文件被转为C++，Python和其他语言的源代码。查看package.xml, 确保它包含以下两条语句。若没有，手动添加。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;build_depend&gt;message_generation&lt;/build_depend&gt;</span><br><span class="line">&lt;exec_depend&gt;message_runtime&lt;/exec_depend&gt;</span><br></pre></td></tr></table></figure>
<h4 id="修改-beginner-tutorials-CMakeLists-txt"><a href="#修改-beginner-tutorials-CMakeLists-txt" class="headerlink" title="修改./beginner_tutorials/CMakeLists.txt:"></a>修改./beginner_tutorials/CMakeLists.txt:</h4><p>1.寻找find_package，向其中添加message_generation。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">find_package</span>(catkin REQUIRED COMPONENTS </span><br><span class="line">	         roscpp </span><br><span class="line">	         rospy </span><br><span class="line">	         std_msgs </span><br><span class="line">	         message_generation</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>2.寻找catkin_package，设置运行依赖。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">catkin_package</span>(</span><br><span class="line">#  INCLUDE_DIRS include</span><br><span class="line">#  LIBRARIES beginner_tutorials</span><br><span class="line">#  CATKIN_DEPENDS roscpp rospy std_msgs</span><br><span class="line">#  DEPENDS system_lib</span><br><span class="line">  CATKIN_DEPENDS message_runtime</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>3.将add_message_files代码块去掉注释，并用自己的Num.msg代替Messag1.msg，如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">add_message_files</span>(</span><br><span class="line">   FILES</span><br><span class="line">   Num.msg</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>4.取消generate_messages()的注释，如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">generate_messages</span>(</span><br><span class="line">   DEPENDENCIES</span><br><span class="line">   std_msgs</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h4 id="使用rosmsg"><a href="#使用rosmsg" class="headerlink" title="使用rosmsg"></a>使用rosmsg</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">rosmsg show beginner_tutorials/Num 				<span class="comment">//通过rosmsg show命令，检查ROS是否能够识消息。正确情况下会输出：int64 num。</span></span><br><span class="line">												<span class="comment">//如果不正常，需要设置path，输入指令：export ROS_PACKAGE_PATH=~/catkin_ws/src:$ROS_PACKAGE_PATH。再次输入show命令。</span></span><br></pre></td></tr></table></figure>
<h3 id="使用ROSsrv"><a href="#使用ROSsrv" class="headerlink" title="使用ROSsrv"></a>使用ROSsrv</h3><h4 id="创建一个srv"><a href="#创建一个srv" class="headerlink" title="创建一个srv"></a>创建一个srv</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">roscd beginner_tutorials</span><br><span class="line">mkdir srv</span><br><span class="line">roscp rospy_tutorials AddTwoInts.srv srv/AddTwoInts.srv</span><br><span class="line">												<span class="comment">//roscp [package_name] [file_to_copy_path] [copy_path]</span></span><br><span class="line">												<span class="comment">//roscp是一个很实用的命令行工具，它实现了将文件从一个package复制到另外一个package的功能。</span></span><br></pre></td></tr></table></figure>
<p>同样，需要确保srv文件被转换为C++和其他语言的源代码。</p>
<h4 id="修改CMakeLists-txt"><a href="#修改CMakeLists-txt" class="headerlink" title="修改CMakeLists.txt:"></a>修改CMakeLists.txt:</h4><p>1.和ROSmsg一样添加对message_generation的依赖。(message_generation 对msg和srv都起作用)</p>
<p>2.将add_message_files代码块去掉注释，并添加自己的srv文件，如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">add_service_files</span>(</span><br><span class="line">   FILES</span><br><span class="line">   AddTwoInts.srv</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>3.取消generate_messages()的注释，同ROSmsg，如下：</p>
<h4 id="使用ROSsrv-1"><a href="#使用ROSsrv-1" class="headerlink" title="使用ROSsrv"></a>使用ROSsrv</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">rossrv show beginner_tutorials/AddTwoInts 		<span class="comment">//通过rosmsg show命令，检查ROS是否能够识该服务。 rossrv show &lt;service type&gt;。跟rosmsg类似, 你也可以不指定具体的package名来查找服务文件</span></span><br></pre></td></tr></table></figure>
<h3 id="新开一个终端，打开工作空间并编译："><a href="#新开一个终端，打开工作空间并编译：" class="headerlink" title="新开一个终端，打开工作空间并编译："></a>新开一个终端，打开工作空间并编译：</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cd catkin_ws</span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure>
<p>所有在msg路径下的.msg文件都将转换为ROS所支持语言的源代码。生成的C++头文件将会放置在~/catkin_ws/devel/include/beginner_tutorials。</p>
<h2 id="编写简单的消息发布器和订阅器-C"><a href="#编写简单的消息发布器和订阅器-C" class="headerlink" title="编写简单的消息发布器和订阅器 (C++)"></a>编写简单的消息发布器和订阅器 (C++)</h2><p>创建一个发布器节点(“talker”)，它将不断的在ROS网络中广播消息。创建一个接收器节点(“listener”)，它来接收ROS网络中的广播消息。</p>
<h3 id="beginner-tutorials-src-talker-cpp"><a href="#beginner-tutorials-src-talker-cpp" class="headerlink" title="./beginner_tutorials/src/talker.cpp"></a>./beginner_tutorials/src/talker.cpp</h3><blockquote>
<p>为了减少篇幅，将源码中的大段英文注释删除。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ros/ros.h&quot;</span>					<span class="comment">//ros/ros.h 是一个实用的头文件，它引用了 ROS 系统中大部分常用的头文件。</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;std_msgs/String.h&quot;</span>			<span class="comment">//这引用了 std_msgs/String 消息, 它存放在 std_msgs package 里，是由 String.msg 文件自动生成的头文件。</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This tutorial demonstrates simple sending of messages over the ROS system.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  ros::<span class="built_in">init</span>(argc, argv, <span class="string">&quot;talker&quot;</span>);		<span class="comment">//初始化 ROS 。它允许 ROS 通过命令行进行名称重映射——然而这并不是现在讨论的重点。在这里，我们也可以指定节点的名称——运行过程中，节点的名称必须唯一。</span></span><br><span class="line">										<span class="comment">//这里的名称必须是一个 base name ，也就是说，名称内不能包含 / 等符号。</span></span><br><span class="line"></span><br><span class="line">  ros::NodeHandle n;					<span class="comment">//为这个进程的节点创建一个句柄。第一个创建的 NodeHandle 会为节点进行初始化，最后一个销毁的 NodeHandle 则会释放该节点所占用的所有资源。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   *告诉 master 我们将要在 chatter（话题名） 上发布 std_msgs/String 消息类型的消息。这样 master 就会告诉所有订阅了 chatter *话题的节点，将要有数据发布。第二个参数是发布序列的大小。如果我们发布的消息的频率太高，缓冲区中的消息在大于 1000 个的时候就会开始丢弃先前发布的消息。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   *NodeHandle::advertise() 返回一个 ros::Publisher 对象,它有两个作用： 1) 它有一个 publish() 成员函数可以让你在topic上发布消息； 2) 如果消息类型不对,它会拒绝发布。</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  ros::Publisher chatter_pub = n.<span class="built_in">advertise</span>&lt;std_msgs::String&gt;(<span class="string">&quot;chatter&quot;</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function">ros::Rate <span class="title">loop_rate</span><span class="params">(<span class="number">10</span>)</span></span>;				<span class="comment">//ros::Rate 对象可以允许你指定自循环的频率。它会追踪记录自上一次调用 Rate::sleep() 后时间的流逝，并休眠直到一个频率周期的时间。这个例子中，我们让它以 10Hz 的频率运行。</span></span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (ros::<span class="built_in">ok</span>())						<span class="comment">//roscpp 会默认生成一个 SIGINT 句柄，它负责处理 Ctrl-C 键盘操作——使得 ros::ok() 返回 false。</span></span><br><span class="line">  &#123;</span><br><span class="line">    std_msgs::String msg;				<span class="comment">//使用一个由 msg file 文件产生的『消息自适应』类在 ROS 网络中广播消息。现在我们使用标准的String消息，它只有一个数据成员 &quot;data&quot;。</span></span><br><span class="line"></span><br><span class="line">    std::stringstream ss;</span><br><span class="line">    ss &lt;&lt; <span class="string">&quot;hello world &quot;</span> &lt;&lt; count;</span><br><span class="line">    msg.data = ss.<span class="built_in">str</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">ROS_INFO</span>(<span class="string">&quot;%s&quot;</span>, msg.data.<span class="built_in">c_str</span>());	<span class="comment">//ROS_INFO 和其他类似的函数可以用来代替 printf/cout 等函数。</span></span><br><span class="line"></span><br><span class="line">    chatter_pub.<span class="built_in">publish</span>(msg);			<span class="comment">//向所有订阅 chatter 话题的节点发送消息。</span></span><br><span class="line"></span><br><span class="line">    ros::<span class="built_in">spinOnce</span>();					<span class="comment">//在这个例子中并不是一定要调用 ros::spinOnce()，因为我们不接受回调。然而，如果你的程序里包含其他回调函数，最好在这里加上 </span></span><br><span class="line">    									<span class="comment">//ros::spinOnce()这一语句，否则你的回调函数就永远也不会被调用了。				</span></span><br><span class="line"></span><br><span class="line">    loop_rate.<span class="built_in">sleep</span>();					<span class="comment">//调用 ros::Rate 对象来休眠一段时间以使得发布频率为 10Hz。</span></span><br><span class="line">    ++count;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="beginner-tutorials-src-listener-cpp"><a href="#beginner-tutorials-src-listener-cpp" class="headerlink" title="./beginner_tutorials/src/listener.cpp"></a>./beginner_tutorials/src/listener.cpp</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;std_msgs/String.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This tutorial demonstrates simple receipt of messages over the ROS system.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">chatterCallback</span><span class="params">(<span class="type">const</span> std_msgs::String::ConstPtr&amp; msg)</span>				<span class="comment">//这是一个回调函数，当接收到 chatter 话题的时候就会被调用。消息是以 boost shared_ptr 指针的形式传输，这就意味着你可以存储它而又不需要复制数据。</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">ROS_INFO</span>(<span class="string">&quot;I heard: [%s]&quot;</span>, msg-&gt;data.<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  ros::<span class="built_in">init</span>(argc, argv, <span class="string">&quot;listener&quot;</span>);</span><br><span class="line"></span><br><span class="line">  ros::NodeHandle n;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 告诉 master 我们要订阅 chatter 话题上的消息。当有消息发布到这个话题时，ROS 就会调用 chatterCallback() 函数。第二个参数是队列大小，以防我们处理消息的速度不够快，当缓存达到 1000 </span></span><br><span class="line"><span class="comment">   * 条消息后，再有新的消息到来就将开始丢弃先前接收的消息。</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * NodeHandle::subscribe() 返回 ros::Subscriber 对象,你必须让它处于活动状态直到你不再想订阅该消息。当这个对象销毁时，它将自动退订 chatter 话题的消息。</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * 有各种不同的 NodeHandle::subscribe() 函数，允许你指定类的成员函数，甚至是 Boost.Function 对象可以调用的任何数据类型。</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  ros::Subscriber sub = n.<span class="built_in">subscribe</span>(<span class="string">&quot;chatter&quot;</span>, <span class="number">1000</span>, chatterCallback);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * ros::spin() 进入自循环，可以尽可能快的调用消息回调函数。如果没有消息到达，它不会占用很多 CPU，所以不用担心。一旦 ros::ok() 返回 false，ros::spin() 就会立刻跳出自循环。</span></span><br><span class="line"><span class="comment">   * 这有可能是 ros::shutdown() 被调用，或者是用户按下了 Ctrl-C，使得 master 告诉节点要终止运行。也有可能是节点被人为关闭的。</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  ros::<span class="built_in">spin</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下边，我们来总结一下:</p>
<ul>
<li>初始化ROS系统</li>
<li>订阅 chatter 话题</li>
<li>进入自循环，等待消息的到达</li>
<li>当消息到达，调用 chatterCallback() 函数</li>
</ul>
<h3 id="beginner-tutorials-CMakeLists-txt"><a href="#beginner-tutorials-CMakeLists-txt" class="headerlink" title="./beginner_tutorials/CMakeLists.txt"></a>./beginner_tutorials/CMakeLists.txt</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required(VERSION <span class="number">2.8</span><span class="number">.3</span>)</span><br><span class="line">project(beginner_tutorials)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Find catkin and any catkin packages</span></span><br><span class="line">find_package(catkin REQUIRED COMPONENTS roscpp rospy std_msgs genmsg)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Declare ROS messages and services</span></span><br><span class="line">add_message_files(FILES Num.msg)</span><br><span class="line">add_service_files(FILES AddTwoInts.srv)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Generate added messages and services</span></span><br><span class="line">generate_messages(DEPENDENCIES std_msgs)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Declare a catkin package</span></span><br><span class="line">catkin_package()</span><br><span class="line"></span><br><span class="line"><span class="comment">## Build talker and listener</span></span><br><span class="line">include_directories(include $&#123;catkin_INCLUDE_DIRS&#125;)</span><br><span class="line"></span><br><span class="line">add_executable(talker src/talker.cpp)</span><br><span class="line">target_link_libraries(talker $&#123;catkin_LIBRARIES&#125;)</span><br><span class="line">add_dependencies(talker beginner_tutorials_generate_messages_cpp)</span><br><span class="line"></span><br><span class="line">add_executable(listener src/listener.cpp)</span><br><span class="line">target_link_libraries(listener $&#123;catkin_LIBRARIES&#125;)</span><br><span class="line">add_dependencies(listener beginner_tutorials_generate_messages_cpp)</span><br></pre></td></tr></table></figure>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>在工作空间目录下进行编译，并运行。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">roscore									<span class="comment">//新开一个终端</span></span><br><span class="line">cd catkin_ws							<span class="comment">//新开一个终端</span></span><br><span class="line">catkin_make</span><br><span class="line">source ./devel/setup.bash       		<span class="comment">//在运行你自己的程序前，已经source了catkin工作空间下的setup.sh文件</span></span><br><span class="line">rosrun beginner_tutorials talker 		<span class="comment">//启动发布器</span></span><br><span class="line"></span><br><span class="line">cd catkin_ws							<span class="comment">//新开一个终端，并打开工作空间</span></span><br><span class="line">source ./devel/setup.bash       		<span class="comment">//在运行你自己的程序前，已经source了catkin工作空间下的setup.sh文件</span></span><br><span class="line">rosrun beginner_tutorials listener 		<span class="comment">//启动订阅器</span></span><br></pre></td></tr></table></figure>
<h2 id="编写简单的服务器和客户端-C"><a href="#编写简单的服务器和客户端-C" class="headerlink" title="编写简单的服务器和客户端(C++)"></a>编写简单的服务器和客户端(C++)</h2><h3 id="beginner-tutorials-src-add-two-ints-server-cpp"><a href="#beginner-tutorials-src-add-two-ints-server-cpp" class="headerlink" title="./beginner_tutorials/src/add_two_ints_server.cpp"></a>./beginner_tutorials/src/add_two_ints_server.cpp</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;beginner_tutorials/AddTwoInts.h&quot;</span>								<span class="comment">//beginner_tutorials/AddTwoInts.h是由编译系统自动根据我们先前创建的srv文件生成的对应该srv文件的头文件。</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 这个函数提供两个int值求和的服务，int值从request里面获取，而返回数据装入response内，这些数据类型都定义在srv文件内部，函数返回一个boolean值。</span></span><br><span class="line"><span class="comment">  * 两个int值进行相加，并存入response。然后一些关于request和response的信息被记录下来。最后，service完成计算后返回true值。</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">add</span><span class="params">(beginner_tutorials::AddTwoInts::Request  &amp;req,</span></span></span><br><span class="line"><span class="params"><span class="function">         beginner_tutorials::AddTwoInts::Response &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  res.sum = req.a + req.b;</span><br><span class="line">  <span class="built_in">ROS_INFO</span>(<span class="string">&quot;request: x=%ld, y=%ld&quot;</span>, (<span class="type">long</span> <span class="type">int</span>)req.a, (<span class="type">long</span> <span class="type">int</span>)req.b);</span><br><span class="line">  <span class="built_in">ROS_INFO</span>(<span class="string">&quot;sending back response: [%ld]&quot;</span>, (<span class="type">long</span> <span class="type">int</span>)res.sum);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ros::<span class="built_in">init</span>(argc, argv, <span class="string">&quot;add_two_ints_server&quot;</span>);</span><br><span class="line">  ros::NodeHandle n;</span><br><span class="line"></span><br><span class="line">  ros::ServiceServer service = n.<span class="built_in">advertiseService</span>(<span class="string">&quot;add_two_ints&quot;</span>, add);	<span class="comment">//建立service，并在ROS内发布出来。</span></span><br><span class="line">  <span class="built_in">ROS_INFO</span>(<span class="string">&quot;Ready to add two ints.&quot;</span>);</span><br><span class="line">  ros::<span class="built_in">spin</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="beginner-tutorials-src-add-two-ints-client-cpp"><a href="#beginner-tutorials-src-add-two-ints-client-cpp" class="headerlink" title="./beginner_tutorials/src/add_two_ints_client.cpp"></a>./beginner_tutorials/src/add_two_ints_client.cpp</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;beginner_tutorials/AddTwoInts.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ros::<span class="built_in">init</span>(argc, argv, <span class="string">&quot;add_two_ints_client&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (argc != <span class="number">3</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">ROS_INFO</span>(<span class="string">&quot;usage: add_two_ints_client X Y&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ros::NodeHandle n;</span><br><span class="line">  ros::ServiceClient client = n.<span class="built_in">serviceClient</span>&lt;beginner_tutorials::AddTwoInts&gt;(<span class="string">&quot;add_two_ints&quot;</span>);		<span class="comment">//这段代码为add_two_ints service创建一个client。ros::ServiceClient 对象待会用来调用service。</span></span><br><span class="line">  beginner_tutorials::AddTwoInts srv;																<span class="comment">//这里，我们实例化一个由ROS编译系统自动生成的service类，并给其request成员赋值。</span></span><br><span class="line">  srv.request.a = <span class="built_in">atoll</span>(argv[<span class="number">1</span>]);																	<span class="comment">// 一个service类包含两个成员request和response。同时也包括两个类定义Request和Response。</span></span><br><span class="line">  srv.request.b = <span class="built_in">atoll</span>(argv[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 这段代码是在调用service。由于service的调用是模态过程（调用的时候占用进程阻止其他代码的执行），一旦调用完成，将返回调用结果。</span></span><br><span class="line"><span class="comment">   * 如果service调用成功，call()函数将返回true，srv.response里面的值将是合法的值。</span></span><br><span class="line"><span class="comment">   * 如果调用失败，call()函数将返回false，srv.response里面的值将是非法的。 </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">if</span> (client.<span class="built_in">call</span>(srv))</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">ROS_INFO</span>(<span class="string">&quot;Sum: %ld&quot;</span>, (<span class="type">long</span> <span class="type">int</span>)srv.response.sum);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">ROS_ERROR</span>(<span class="string">&quot;Failed to call service add_two_ints&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="beginner-tutorials-CMakeLists-txt-1"><a href="#beginner-tutorials-CMakeLists-txt-1" class="headerlink" title="./beginner_tutorials/CMakeLists.txt"></a>./beginner_tutorials/CMakeLists.txt</h3><p>在上一节的CMakeLists.txt后添加：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">add_executable(add_two_ints_server src/add_two_ints_server.cpp)</span><br><span class="line">target_link_libraries(add_two_ints_server $&#123;catkin_LIBRARIES&#125;)</span><br><span class="line">add_dependencies(add_two_ints_server beginner_tutorials_gencpp)</span><br><span class="line"></span><br><span class="line">add_executable(add_two_ints_client src/add_two_ints_client.cpp)</span><br><span class="line">target_link_libraries(add_two_ints_client $&#123;catkin_LIBRARIES&#125;)</span><br><span class="line">add_dependencies(add_two_ints_client beginner_tutorials_gencpp)</span><br></pre></td></tr></table></figure>
<h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p>在工作空间目录下进行编译，并运行。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">roscore												<span class="comment">//新开一个终端</span></span><br><span class="line">cd catkin_ws										<span class="comment">//新开一个终端</span></span><br><span class="line">catkin_make</span><br><span class="line">source ./devel/setup.bash       					<span class="comment">//在运行你自己的程序前，已经source了catkin工作空间下的setup.sh文件</span></span><br><span class="line">rosrun beginner_tutorials add_two_ints_server 		<span class="comment">//启动服务器</span></span><br><span class="line"></span><br><span class="line">cd catkin_ws										<span class="comment">//新开一个终端，并打开工作空间</span></span><br><span class="line">source ./devel/setup.bash       					<span class="comment">//在运行你自己的程序前，已经source了catkin工作空间下的setup.sh文件</span></span><br><span class="line">rosrun beginner_tutorials add_two_ints_client <span class="number">1</span> <span class="number">3</span> 	<span class="comment">//启动客户端</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>机器人控制</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>机器人</tag>
        <tag>ROS</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware下Ubuntu的磁盘扩容问题</title>
    <url>/archives/48591.html</url>
    <content><![CDATA[<blockquote>
<p>本文中的环境为Ubuntu16.04LTS + VMware10 + gparted-live-1.0.0-3.</p>
</blockquote>
<span id="more"></span>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于刚开始使用虚拟机时，随便分配了一块硬盘大小，至今发现虚拟机下的Ubuntu硬盘空间告急，因此需要在不损失原有硬盘文件的情况下进行扩容。在VMware10中对虚拟机进行扩容主要分为两部分：</p>
<ol>
<li><p>在VMware中进行设置，修改预设磁盘大小；</p>
</li>
<li><p>将额外划分出来的磁盘与原虚拟机中Ubuntu的磁盘进行合并(本文介绍)或添加。</p>
</li>
</ol>
<blockquote>
<p>在进行扩容前，需要下载好gparted-live-1.0.0-3.iso文件，注意这不是在Ubuntu的Terminal中用apt-get来下载。文件下载链接<a href="https://sourceforge.net/projects/gparted/files/">请点这里</a>。(该网页下载速度缓慢，可能需要开启VPN或者另寻他处)</p>
</blockquote>
<h1 id="扩容方法"><a href="#扩容方法" class="headerlink" title="扩容方法"></a>扩容方法</h1><p>1.首先将下载好的gparted-live.iso文件装载到虚拟机的虚拟光驱中，如下图所示。这是由于在Ubuntu正常开启状态时，磁盘处于mount状态，无法扩容。因此，需要采用类似用U盘安装系统那样来启动系统进行磁盘扩容。</p>
<p><img src="/images/20190731VMware/01.png" alt="01.png"></p>
<p>2.点击：虚拟机 —&gt; 设置，对硬盘进行扩容，如下所示，要从“实用工具”的下拉列表中选择“扩展”，等待扩展完成(笔者是从60G扩展到70G的，但是前面几张图是后补的，所以直接显示是70G)。</p>
<p><img src="/images/20190731VMware/02.png" alt="02.png"><br><img src="/images/20190731VMware/03.png" alt="03.png"><br><img src="/images/20190731VMware/04.png" alt="04.png"></p>
<p>3.打开虚拟机，在下面画面出现时快速按下 ESC 键。</p>
<p><img src="/images/20190731VMware/05.png" alt="05.png"></p>
<p>出现 Boot Menu，从中选择 CD-ROM Drive，如下所示。</p>
<p><img src="/images/20190731VMware/07.png" alt="07.png"></p>
<p>4.CD启动的就是GParted Live，如下所示：</p>
<p><img src="/images/20190731VMware/08.png" alt="08.png"></p>
<p>选择第一个，弹出下面的画面：</p>
<p><img src="/images/20190731VMware/09.png" alt="09.png"></p>
<p>直接点回车即可，接下来进入语言选择。</p>
<p><img src="/images/20190731VMware/10.png" alt="10.png"></p>
<p>在上图的圆圈处输入<code>26</code>，选择中文。稍后出现下面的画面，并输入<code>0</code>。</p>
<p><img src="/images/20190731VMware/11.png" alt="11.png"></p>
<p>5.之后即可正常进入CD启动的系统，如没有自动进入下面画面，请在桌面点击<code>GParted</code>，进入。</p>
<p><img src="/images/20190731VMware/12.png" alt="12.png"></p>
<p>从上图可以看到，已经使用57.99G，有10G未分配，还有2G是用来做swap区的。依次将第一个下面的<code>extended</code>和<code>linux-swap</code>都删除，可以得到下面的图片。</p>
<p><img src="/images/20190731VMware/13.png" alt="13.png"></p>
<p>从上图可以看到，未分配的空间已经从10G变成了12G。接下来，就准备对sda1进行扩容。右键点击，选择调整大小，留下2G空间作swap，如下图所示。</p>
<p><img src="/images/20190731VMware/14.png" alt="14.png"></p>
<p>扩容后的效果如下图所示。</p>
<p><img src="/images/20190731VMware/15.png" alt="15.png"></p>
<p>从上图中，可以看到sda1已经由原来的58G变为68G，说明扩容成功。还剩下2G，需要分配为<code>linux-swap</code>。在未分配的区域右键选择新建，将其创建为<code>扩展分区</code>，如下图所示。</p>
<p><img src="/images/20190731VMware/16.png" alt="16.png"></p>
<p>创建好后的效果如下图所示。</p>
<p><img src="/images/20190731VMware/17.png" alt="17.png"></p>
<p>再从上图的未分配磁盘处右键选择新建，将其创建为<code>逻辑分区</code>，文件系统选为<code>linux-swap</code>，如下图所示。</p>
<p><img src="/images/20190731VMware/18.png" alt="18.png"></p>
<p>创建好后的效果如下图所示。</p>
<p><img src="/images/20190731VMware/19.png" alt="19.png"></p>
<p>接下来，按下对勾，完成扩容操作。</p>
<p><img src="/images/20190731VMware/20.png" alt="20.png"></p>
<p>6.扩容完成后的效果如下图所示，在下图中，点击圈出来的底部区域，可返回桌面，选择退出。</p>
<p><img src="/images/20190731VMware/21.png" alt="21.png"><br><img src="/images/20190731VMware/22.png" alt="22.png"><br><img src="/images/20190731VMware/23.png" alt="23.png"></p>
<p>此时，可点击虚拟机 —&gt; 设置，将CD/DVD的启动挂载取消掉，如下图所示。</p>
<p><img src="/images/20190731VMware/24.png" alt="24.png"></p>
<p>在GParted退出时出现的页面直接点击回车即可。</p>
<p><img src="/images/20190731VMware/25.png" alt="25.png"></p>
<p>扩容完成后的效果如下图所示。</p>
<p><img src="/images/20190731VMware/26.png" alt="26.png"></p>
<h1 id="ubuntu16-04开机等待1分30秒-1min30s-解决方法"><a href="#ubuntu16-04开机等待1分30秒-1min30s-解决方法" class="headerlink" title="ubuntu16.04开机等待1分30秒(1min30s)解决方法"></a>ubuntu16.04开机等待1分30秒(1min30s)解决方法</h1><p>在扩容后，笔者开启Ubuntu启动出现了需要等待1min30s的情况，参照<a href="https://jingyan.baidu.com/article/63acb44ac9c05b61fdc17e61.html">ubuntu16.04开机等待1分30秒(1min30s)解决方法</a>进行解决。</p>
<blockquote>
<p>参考链接<a href="https://www.linuxidc.com/Linux/2015-08/121674.htm">VMware11下对虚拟机Ubuntu14.10系统所在分区sda1进行磁盘扩容</a></p>
</blockquote>
]]></content>
      <categories>
        <category>工科生的基本功</category>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>VMware</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下共享内存的使用方法</title>
    <url>/archives/10600.html</url>
    <content><![CDATA[<blockquote>
<p>开发环境：Ubuntu16.04 LTS。 </p>
</blockquote>
<span id="more"></span>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>共享存储允许两个或多个进程共享一个给定的存储区，是进程间通信最快的一种方式。不要同时对共享存储空间进行写操作。通常，可以将信号量用于同步共享存储访问。</p>
<p>最简单的共享内存的使用流程如下：</p>
<ol>
<li><p>ftok函数生成键值</p>
</li>
<li><p>shmget函数创建共享内存空间</p>
</li>
<li><p>shmat函数获取第一个可用共享内存空间的地址</p>
</li>
<li><p>shmdt函数进行分离（对共享存储段操作结束时的步骤，并不是从系统中删除共享内存和结构）</p>
</li>
<li><p>shmctl函数进行删除共享存储空间</p>
</li>
</ol>
<p>上述的五个函数都是系统自带的函数，接下来对它们一一介绍。</p>
<h1 id="系统函数介绍"><a href="#系统函数介绍" class="headerlink" title="系统函数介绍"></a>系统函数介绍</h1><h2 id="ftok函数"><a href="#ftok函数" class="headerlink" title="ftok函数"></a>ftok函数</h2><p>1.功能：生成键值。每一个共享存储段都有一个对应的键值（key）相关联（消息队列、信号量也同样需要）。</p>
<p>2.所需头文件：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/ipc.h&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>3.函数原型：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">key_t</span> <span class="title">ftok</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path ,<span class="type">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>path为一个已存在的路径名；id为0~255之间的一个数值，代表项目ID。</p>
</blockquote>
<p>4.返回值：成功返回键值（相当于32位的int），出错返回-1。</p>
<p>5.示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">key_t</span> key = <span class="built_in">ftok</span>( “/tmp”, <span class="number">66</span>);</span><br></pre></td></tr></table></figure>
<h2 id="shmget函数"><a href="#shmget函数" class="headerlink" title="shmget函数"></a>shmget函数</h2><p>1.功能：创建共享存储空间并返回一个共享存储标识符。</p>
<p>2.所需头文件：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/shm.h&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>3.函数原型：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">shmget</span><span class="params">(<span class="type">key_t</span> key, <span class="type">size_t</span> size,<span class="type">int</span> flag)</span></span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>key为ftok生成的键值。<br>size为共享内存的长度，以字节为单位。<br>flag为所需要的操作和权限，可以用来创建一个共享存储空间并返回一个标识符或者获得一个共享标识符。所取值可为IPC_CREAT、IPC_CREAT | IPC_EXCL。<br>flag的值为IPC_CREAT：如果不存在key值的共享存储空间，且权限不为0，则创建共享存储空间，并返回一个共享存储标识符。如果存在，则直接返回共享存储标识符。<br>flag的值为 IPC_CREAT | IPC_EXCL：如果不存在key值的共享存储空间，且权限不为0，则创建共享存储空间，并返回一个共享存储标识符。如果存在，则产生错误。</p>
</blockquote>
<p>4.返回值：成功返回共享存储ID，出错返回-1。</p>
<p>5.示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> id = <span class="built_in">shmget</span>(key,<span class="number">4096</span>,IPC_CREAT|<span class="number">0666</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>说明：创建一个大小为4096个字节的权限为0666（所有用户可读可写，具体查询linux权限相关内容）的共享存储空间，并返回一个共享存储标识符，如果key值已经存在有共享存储空间了，则直接返回一个共享存储标识符。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> id = <span class="built_in">shmget</span>(key, <span class="number">4096</span>, IPC_CREAT|IPC_EXCL|<span class="number">0666</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>说明：创建一个大小为4096个字节的权限为0666（所有用户可读可写，具体查询linux权限相关内容）的共享存储空间，并返回一个整形共享存储标识符，如果key值已经存在有共享存储空间了，则出错返回-1。</p>
</blockquote>
<h2 id="shmat函数"><a href="#shmat函数" class="headerlink" title="shmat函数"></a>shmat函数</h2><p>1.功能：获取第一个可用共享内存空间的地址。</p>
<p>2.所需头文件：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/shm.h&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>3.函数原型：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> *<span class="title">shmat</span><span class="params">(<span class="type">int</span> shmid, <span class="type">const</span> <span class="type">void</span> *addr, <span class="type">int</span> flag)</span></span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>shmid为shmget生成的共享存储标识符。<br>addr指定共享内存出现在进程内存地址的什么位置，直接指定为NULL让内核自己决定一个合适的地址位置。<br>flag为对数据的操作，如果指定为SHM_RDONLY则以只读方式连接此段，其他值为读写方式连接此段。<br>翻阅linux下shm.c文件得到#define SHM_RDONLY      010000  // read-only access 。<br>flag的值为 IPC_CREAT | IPC_EXCL：如果不存在key值的共享存储空间，且权限不为0，则创建共享存储空间，并返回一个共享存储标识符。如果存在，则产生错误。</p>
</blockquote>
<p>4.返回值：成功返回指向共享存储段的指针；错误返回-1（打印出指针的值为全F）。</p>
<p>5.示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> *addr  = <span class="built_in">shmat</span>(id, <span class="literal">NULL</span>, <span class="number">0</span>);      <span class="comment">//返回第一个可用的共享内存地址的指针的值给addr </span></span><br></pre></td></tr></table></figure>
<h2 id="shmdt函数"><a href="#shmdt函数" class="headerlink" title="shmdt函数"></a>shmdt函数</h2><p>1.功能：当不需要对此共享内存进行操作时候，调用shmdt函数进行分离，不是删除此共享存储空间哟。</p>
<p>2.所需头文件：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/shm.h&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>3.函数原型：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">shmdt</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *addr)</span></span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>addr为shmat函数返回的地址指针。</p>
</blockquote>
<p>4.返回值：成功返回0；错误返回-1。</p>
<p>5.示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> ret = <span class="built_in">shmdt</span>(addr);</span><br></pre></td></tr></table></figure>
<h2 id="shmctl函数"><a href="#shmctl函数" class="headerlink" title="shmctl函数"></a>shmctl函数</h2><p>1.功能：对共享内存进行控制。最简单的操作就是删除共享存储空间了，也可以获取和改变共享内存的状态。</p>
<p>2.所需头文件：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/shm.h&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>3.函数原型：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">shmctl</span><span class="params">(<span class="type">int</span> shmid, <span class="type">int</span> cmd, <span class="keyword">struct</span> shmid_ds *buf)</span></span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>shmid就是shmget函数返回的共享存储标识符。<br>cmd有三个:IPC_RMID——删除共享内存；<br>         IPC_STAT——得到共享内存的状态，把共享内存的shmid_ds结构复制到buf中；<br>         IPC_SET——改变共享内存的状态，把buf所指的shmid_ds结构中的uid、gid、mode复制到共享内存的shmid_ds结构内。（内核为每个共享存储段维护着一个结构，结构名为shmid_ds，这里就不讲啦，里面存放着共享内存的大小，pid，存放时<br>         间等一些参数）<br>buf就是结构体shmid_ds。</p>
</blockquote>
<p>4.返回值：成功返回0；错误返回-1。</p>
<p>5.示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> ret = <span class="built_in">shmctl</span>(id, IPC_RMID,<span class="literal">NULL</span>);    <span class="comment">//删除id号的共享存储空间</span></span><br></pre></td></tr></table></figure>
<h1 id="Linux共享内存的查看方法"><a href="#Linux共享内存的查看方法" class="headerlink" title="Linux共享内存的查看方法"></a>Linux共享内存的查看方法</h1><p>1.使用<code>ipcs -m</code>命令可以查看当前系统所有的共享内存空间信息，如下图所示。</p>
<p><img src="/images/20190731shrmm/01.png" alt="01"></p>
<p>2.如果程序创建了一个共享内存段，但没有被正确销毁，可能在下次打开程序时出现错误，这时可使用<code>ipcrm -m shmid</code>命令先删除共享内存段。例如要删除上图中的最后一块共享内存，可使用命令<code>ipcrm -m 6455308</code>，删除后的效果如下图所示。</p>
<p><img src="/images/20190731shrmm/02.png" alt="02"></p>
<p>3.在Linux下，如果你申请24字节大小的共享存储空间，系统还是会默认给你分配一页的大小，但你还是只能使用这一页上24字节的空间。使用<code>getconf PAGE_SIZE</code>命令就能显示出一页的大小。</p>
<h1 id="共享内存使用示例程序"><a href="#共享内存使用示例程序" class="headerlink" title="共享内存使用示例程序"></a>共享内存使用示例程序</h1><h2 id="整体介绍"><a href="#整体介绍" class="headerlink" title="整体介绍"></a>整体介绍</h2><p>本例采用两个独立程序(server与client)来进行共享内存测试。首次打开程序时，先用server开辟一段共享内存，再用client连接到该共享内存；之后使用时，server与client可以互相向共享内存中读和写。两个程序都具有如下目录结构：</p>
<p><img src="/images/20190731shrmm/07.png" alt="07"></p>
<p>两个程序的区别是在main.cpp和CMakeLists.txt中。</p>
<h2 id="CKX-h"><a href="#CKX-h" class="headerlink" title="CKX.h"></a>CKX.h</h2><p>该头文件只是定义一个数据类，用来向内存中写入姓名和年龄。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span>  __CKX_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  __CKX_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NAME_LEN  20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ckx</span> &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="type">char</span> name[NAME_LEN];</span><br><span class="line">  <span class="type">int</span> age;</span><br><span class="line">  <span class="built_in">ckx</span>() &#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// __CKX_H_</span></span></span><br></pre></td></tr></table></figure>
<h2 id="CShareMemory-h"><a href="#CShareMemory-h" class="headerlink" title="CShareMemory.h"></a>CShareMemory.h</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span>  __CSHAREMEMORY_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  __CSHAREMEMORY_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span>  <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span>  <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span>  <span class="string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CShareMemory</span> &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">CShareMemory</span>() &#123;addr = <span class="literal">NULL</span>; shmid=<span class="number">0</span>; size=<span class="number">0</span>;&#125;;</span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">create_ipc</span><span class="params">(<span class="type">int</span> key_id, <span class="type">int</span> ipc_size)</span></span>;</span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">get_ipc</span><span class="params">(<span class="type">int</span> key_id, <span class="type">int</span> ipc_size)</span></span>;</span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">destroy_sharememory</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">close_shm</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="type">void</span>* <span class="title">get_address</span><span class="params">()</span></span>;</span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  <span class="type">int</span> shmid;</span><br><span class="line">  <span class="type">int</span> size;</span><br><span class="line">  <span class="type">void</span>* addr;</span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">sharememory</span><span class="params">(<span class="type">int</span> key_id, <span class="type">int</span> ipc_size, <span class="type">int</span> flag)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// __CSHAREMEMORY_H_</span></span></span><br></pre></td></tr></table></figure>
<h2 id="CShareMemory-cpp"><a href="#CShareMemory-cpp" class="headerlink" title="CShareMemory.cpp"></a>CShareMemory.cpp</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CShareMemory.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CShareMemory::sharememory</span><span class="params">(<span class="type">int</span> key_id, <span class="type">int</span> ipc_size, <span class="type">int</span> flag)</span> </span>&#123;</span><br><span class="line">  <span class="type">key_t</span> key = <span class="built_in">ftok</span>(<span class="string">&quot;/tmp&quot;</span>, key_id);</span><br><span class="line">  <span class="keyword">if</span> (key &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;get key error\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  shmid = <span class="built_in">shmget</span>(key, ipc_size, flag);</span><br><span class="line">  addr = <span class="built_in">shmat</span>(shmid, (<span class="type">void</span> *)<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> (shmid &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;get shmid error\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> shmid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CShareMemory::create_ipc</span><span class="params">(<span class="type">int</span> key_id, <span class="type">int</span> ipc_size)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">sharememory</span>(key_id, ipc_size, IPC_CREAT|IPC_EXCL|<span class="number">0666</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CShareMemory::get_ipc</span><span class="params">(<span class="type">int</span> key_id, <span class="type">int</span> ipc_size)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">sharememory</span>(key_id, ipc_size, IPC_CREAT|<span class="number">0666</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CShareMemory::destroy_sharememory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">shmctl</span>(shmid, IPC_RMID, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief  free the share memory</span></span><br><span class="line"><span class="comment"> * &lt;long-description&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param</span></span><br><span class="line"><span class="comment"> * @return &lt;ReturnValue&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CShareMemory::close_shm</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> rtn;</span><br><span class="line">    rtn = <span class="built_in">shmdt</span>(addr);</span><br><span class="line">    <span class="keyword">return</span> rtn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief get address of share memory</span></span><br><span class="line"><span class="comment"> * &lt;long-description&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param</span></span><br><span class="line"><span class="comment"> * @return &lt;ReturnValue&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">CShareMemory::get_address</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (addr == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">void</span>*) addr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="Server的main-cpp"><a href="#Server的main-cpp" class="headerlink" title="Server的main.cpp"></a>Server的main.cpp</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CKX.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CShareMemory.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> key = <span class="number">66</span>;</span><br><span class="line">  ckx *p2 = <span class="keyword">new</span> <span class="built_in">ckx</span>();</span><br><span class="line">  CShareMemory shmm;</span><br><span class="line">  <span class="type">int</span> id = shmm.<span class="built_in">create_ipc</span>(key, <span class="built_in">sizeof</span>(*p2));</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;sizeof *p2 is: &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(*p2) &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;id = &quot;</span> &lt;&lt; id &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">if</span> (id &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Create sharememory error!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n\n1.input data to sharememory\n2.get sharememory data\n3.destroy sharememory\ninput select:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; i;</span><br><span class="line">    <span class="keyword">if</span>(i &gt; <span class="number">3</span> || i &lt; <span class="number">1</span>) &#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;Input error!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    id = shmm.<span class="built_in">get_ipc</span>(key, <span class="built_in">sizeof</span>(*p2));</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;id = &quot;</span> &lt;&lt; id &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span>(id &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;Get sharememory error!&quot;</span> &lt;&lt; endl;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    p2 = (ckx *)<span class="built_in">shmat</span>(id, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(p2 &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;Get sharememory address error!&quot;</span> &lt;&lt; endl;</span><br><span class="line">      p2 = <span class="literal">NULL</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">switch</span> (i) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">	<span class="type">char</span> name[NAME_LEN];</span><br><span class="line">	<span class="type">int</span> age = <span class="number">0</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Input name:&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">fflush</span>(stdin);</span><br><span class="line">	<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="built_in">gets</span>(name);</span><br><span class="line">	<span class="built_in">strcpy</span>(p2-&gt;name, name);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Input age: &quot;</span> &lt;&lt; endl;</span><br><span class="line">	cin &gt;&gt; age;</span><br><span class="line">	p2-&gt;age = age;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Write success!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;name: &quot;</span> &lt;&lt; p2-&gt;name &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; <span class="string">&quot;age: &quot;</span> &lt;&lt; p2-&gt;age &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>: &#123;</span><br><span class="line">	<span class="keyword">if</span>(shmm.<span class="built_in">destroy_sharememory</span>() == <span class="number">-1</span>)</span><br><span class="line">	  cout &lt;&lt; <span class="string">&quot;-1&quot;</span> &lt;&lt; endl;</span><br><span class="line">	id = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(shmm.<span class="built_in">close_shm</span>() == <span class="number">-1</span>) &#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;shmdt error!&quot;</span> &lt;&lt; endl;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(id == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="Server的CMakeLists-txt"><a href="#Server的CMakeLists-txt" class="headerlink" title="Server的CMakeLists.txt"></a>Server的CMakeLists.txt</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cmake_minimum_required</span>(VERSION <span class="number">3.1</span><span class="number">.0</span>)</span><br><span class="line"><span class="built_in">project</span>(shrmmTestServer)</span><br><span class="line"><span class="built_in">set</span> (CMAKE_CXX_STANDARD <span class="number">11</span>)</span><br><span class="line"><span class="built_in">include_directories</span>(<span class="string">&quot;./include/&quot;</span>)</span><br><span class="line"><span class="built_in">add_executable</span>(shrmmTestServer main.cpp ./src/CShareMemory.cpp)</span><br></pre></td></tr></table></figure>
<h2 id="Client的main-cpp"><a href="#Client的main-cpp" class="headerlink" title="Client的main.cpp"></a>Client的main.cpp</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CKX.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CShareMemory.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> key = <span class="number">66</span>;</span><br><span class="line">  ckx *p2 = <span class="keyword">new</span> <span class="built_in">ckx</span>();</span><br><span class="line">  CShareMemory shmm;</span><br><span class="line">  <span class="type">int</span> id = <span class="number">0</span>;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;sizeof *p2 is: &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(*p2) &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;id = &quot;</span> &lt;&lt; id &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (id &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Create sharememory error!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n\n1.input data to sharememory\n2.get sharememory data\n3.destroy sharememory\ninput select:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; i;</span><br><span class="line">    <span class="keyword">if</span>(i &gt; <span class="number">3</span> || i &lt; <span class="number">1</span>) &#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;Input error!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    id = shmm.<span class="built_in">get_ipc</span>(key, <span class="built_in">sizeof</span>(*p2));</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;id = &quot;</span> &lt;&lt; id &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span>(id &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;Get sharememory error!&quot;</span> &lt;&lt; endl;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    p2 = (ckx *)<span class="built_in">shmat</span>(id, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(p2 &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;Get sharememory address error!&quot;</span> &lt;&lt; endl;</span><br><span class="line">      p2 = <span class="literal">NULL</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">switch</span> (i) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">	<span class="type">char</span> name[NAME_LEN];</span><br><span class="line">	<span class="type">int</span> age = <span class="number">0</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Input name:&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">fflush</span>(stdin);</span><br><span class="line">	<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="built_in">gets</span>(name);</span><br><span class="line">	<span class="built_in">strcpy</span>(p2-&gt;name, name);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Input age: &quot;</span> &lt;&lt; endl;</span><br><span class="line">	cin &gt;&gt; age;</span><br><span class="line">	p2-&gt;age = age;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Write success!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;name: &quot;</span> &lt;&lt; p2-&gt;name &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; <span class="string">&quot;age: &quot;</span> &lt;&lt; p2-&gt;age &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>: &#123;</span><br><span class="line">	<span class="keyword">if</span>(shmm.<span class="built_in">destroy_sharememory</span>() == <span class="number">-1</span>)</span><br><span class="line">	  cout &lt;&lt; <span class="string">&quot;-1&quot;</span> &lt;&lt; endl;</span><br><span class="line">	id = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(shmm.<span class="built_in">close_shm</span>() == <span class="number">-1</span>) &#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;shmdt error!&quot;</span> &lt;&lt; endl;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(id == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Client的CMakeLists-txt"><a href="#Client的CMakeLists-txt" class="headerlink" title="Client的CMakeLists.txt"></a>Client的CMakeLists.txt</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cmake_minimum_required</span>(VERSION <span class="number">3.1</span><span class="number">.0</span>)</span><br><span class="line"><span class="built_in">project</span>(shrmmTestClient)</span><br><span class="line"><span class="built_in">set</span> (CMAKE_CXX_STANDARD <span class="number">11</span>)</span><br><span class="line"><span class="built_in">include_directories</span>(<span class="string">&quot;./include/&quot;</span>)</span><br><span class="line"><span class="built_in">add_executable</span>(shrmmTestClient main.cpp ./src/CShareMemory.cpp)</span><br></pre></td></tr></table></figure>
<h2 id="程序运行结果"><a href="#程序运行结果" class="headerlink" title="程序运行结果"></a>程序运行结果</h2><p>1.从server中输入名字和年龄存储到共享内存中，并从client中读取：</p>
<p><img src="/images/20190731shrmm/03.png" alt="03"><br><img src="/images/20190731shrmm/04.png" alt="04"></p>
<p>2.从client中输入名字和年龄存储到共享内存中，并从server中读取：</p>
<p><img src="/images/20190731shrmm/05.png" alt="05"><br><img src="/images/20190731shrmm/06.png" alt="06"></p>
<blockquote>
<p>Note：自己创建build文件夹并进行编译！</p>
<p>参考链接<a href="https://blog.csdn.net/qq_27664167/article/details/81277096">Linux下共享内存编程(共享存储空间)</a></p>
</blockquote>
]]></content>
      <categories>
        <category>工科生的基本功</category>
        <category>快乐码农</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>Linux</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下boost库的安装</title>
    <url>/archives/45371.html</url>
    <content><![CDATA[<blockquote>
<p>开发环境：Ubuntu16.04 LTS、 boost 1.69。 </p>
</blockquote>
<span id="more"></span>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>boost库是子Linux环境下用来做串口通信的一个库，本篇主要介绍该库的安装方法。</p>
<h1 id="boost库的安装"><a href="#boost库的安装" class="headerlink" title="boost库的安装"></a>boost库的安装</h1><h2 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h2><p>可以从<a href="https://sourceforge.net/projects/boost/files/boost/1.69.0/">此链接</a>下载相应的boost 1.69的安装包，也可以自行从官网上下载安装包。下载完成后，右键解压，极好存放的路径。</p>
<h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><p>在Terminal中，打开安装包存放路径，执行下列语句进行安装。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> 安装包存放路径</span><br><span class="line">./bootstrap.sh          <span class="comment">## 注意检查文件名拼写是否和解压后的文件夹中的名字一样</span></span><br><span class="line">./b2</span><br><span class="line">sudo ./b2 --prefix=/usr/local install</span><br></pre></td></tr></table></figure>
<blockquote>
<p>参考链接<a href="https://www.linuxidc.com/Linux/2019-03/157605.htm">Linux下编译安装boost 1.69库全过程</a></p>
</blockquote>
<h1 id="低版本boost库的安装"><a href="#低版本boost库的安装" class="headerlink" title="低版本boost库的安装"></a>低版本boost库的安装</h1><p>由于在学习中科院的ROS安装过程中，编译时出现了如下错误，看错误应该是在/usr/local/boost库中调用出错，查资料应该是boost库安装版本过高(当然也可能是由于安装时路径出错，应该在/usr/local路径中)。</p>
<p><img src="/images/20190730boost/03.png" alt="03.png"></p>
<p><img src="/images/20190730boost/02.png" alt="02.png"></p>
<p>于是本节开始提到的两个路径中使用<code>sudo rm -rf boost</code>强制删掉boost，重新在/usr/local路径中安装boost，再次编译，通过！</p>
<p><img src="/images/20190730boost/01.png" alt="01.png"></p>
]]></content>
      <categories>
        <category>工科生的基本功</category>
        <category>快乐码农</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下QT环境的配置</title>
    <url>/archives/24574.html</url>
    <content><![CDATA[<blockquote>
<p>开发环境：Ubuntu16.04 LTS、 QT Creator 5.8。 </p>
</blockquote>
<span id="more"></span>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>QT Creator是一款可以用来编写界面的IDE，而QT则是库。本文旨在说明QT Creator 5.8的安装方法，以及用cmake来编译创建的QT工程。用cmake的原因是，当开发的<br>程序是包含了大量的第三方库时，QT自带的qmake并不实用，还是跨平台编译工具cmake好用。</p>
<h1 id="QT-Creator-5-8-及其他库的安装"><a href="#QT-Creator-5-8-及其他库的安装" class="headerlink" title="QT Creator 5.8 及其他库的安装"></a>QT Creator 5.8 及其他库的安装</h1><h2 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h2><p>不知道为啥QT官方的安装过程整的很麻烦，需要用户注册，嗯，注册完还不能直接下载，各(zhen)种(ma)绕(fan)。下载QT的安装包可以从<a href="http://download.qt.io/">QT镜像下载</a>。下面直接给出下载过程，关于整个下载页面的说明，请参考<a href="https://blog.csdn.net/weixin_38090427/article/details/83827678">Qt Creator的下载和安装</a>。</p>
<p>打开网页后，依次点击<code>archive/</code> -&gt; <code>qt/</code> -&gt; <code>5.8/</code> -&gt; <code>qt-opensource-linux-x64-5.8.0.run</code>，下载安装包。</p>
<h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><p>在Terminal中，打开安装包存放路径，执行下列语句进行安装。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">chmod +x qt-opensource-linux-x64<span class="number">-5.8</span><span class="number">.0</span>.run</span><br><span class="line">./qt-opensource-linux-x64<span class="number">-5.8</span><span class="number">.0</span>.run</span><br></pre></td></tr></table></figure>
<p>执行完上述语句后，会弹出QT Creator的安装界面，如下图。<br><img src="/images/20190716QT/01.png" alt="01.png"></p>
<p>点击Next，在下面的输入登录信息点击Skip即可。<br><img src="/images/20190716QT/02.png" alt="02.png"></p>
<p>继续点击Next。<br><img src="/images/20190716QT/03.png" alt="03.png"></p>
<p>在下面的页面中，选择自己要安装的位置，再点Next。<br><img src="/images/20190716QT/04.png" alt="04.png"></p>
<p>在下面的页面中，默认是不安装<code>Sources</code>的，由于笔者第一次使用，不明白这里不安装会有什么问题，故而选择了安装。<br><img src="/images/20190716QT/05.png" alt="05.png"></p>
<p>同意协议。<br><img src="/images/20190716QT/06.png" alt="06.png"></p>
<p>在下面的页面中，点击Install，开始安装，等待安装完成即可。<br><img src="/images/20190716QT/07.png" alt="07.png"></p>
<h2 id="其他库的安装"><a href="#其他库的安装" class="headerlink" title="其他库的安装"></a>其他库的安装</h2><p>以上过程只是安装了QT Creator 5.8，为了能正常使用，还需要安装一些其他的库，依次执行下列语句即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">sudo apt-get install g++</span><br><span class="line">sudo apt-get install libx11-dev libxext-dev libxtst-dev</span><br><span class="line">sudo apt-get install libgl1-mesa-dev</span><br><span class="line">sudo apt-get install build-essential</span><br><span class="line">sudo apt-get install libqt4-dev</span><br><span class="line">sudo apt-get install git build-essential cmake qt5-<span class="keyword">default</span> qtscript5-dev libssl-dev qttools5-dev qttools5-dev-tools qtmultimedia5-dev libqt5svg5-dev libqt5webkit5-dev libsdl2-dev libasound2 libxmu-dev libxi-dev freeglut3-dev libasound2-dev libjack-jackd2-dev libxrandr-dev libqt5xmlpatterns5-dev libqt5xmlpatterns5 libqt5xmlpatterns5-<span class="keyword">private</span>-dev</span><br></pre></td></tr></table></figure>
<p>说明：上述的命令是通过参考一些帖子得来的，前5条命令笔者并不知道是否为必须，最后一条命令是必须要安装的。事实上，最后一条是包含了前面部分的库的。</p>
<h1 id="HelloWorld案例介绍"><a href="#HelloWorld案例介绍" class="headerlink" title="HelloWorld案例介绍"></a>HelloWorld案例介绍</h1><p>本节介绍使用QT来创建一个例子HelloWorld，首先使用QT Creator来编写程序，弹出如下的页面，再介绍添加cmake来实现同样的功能。<br><img src="/images/20190716QT/08.png" alt="08.png"></p>
<h2 id="QT-Creator的创建过程"><a href="#QT-Creator的创建过程" class="headerlink" title="QT Creator的创建过程"></a>QT Creator的创建过程</h2><h3 id="工程的创建"><a href="#工程的创建" class="headerlink" title="工程的创建"></a>工程的创建</h3><p>打开QT Creator，创建一个新的工程，选择相应的存放路径。如下图所示。<br><img src="/images/20190716QT/09.png" alt="09.png"><br><img src="/images/20190716QT/10.png" alt="10.png"><br><img src="/images/20190716QT/11.png" alt="11.png"></p>
<p>选择默认的Kits。<br><img src="/images/20190716QT/12.png" alt="12.png"></p>
<p>在<code>Class Information</code>中的<code>Base Class</code>中选择<code>QWidget</code>，如下图所示。<br><img src="/images/20190716QT/13.png" alt="13.png"></p>
<p>点击<code>Finish</code>完成工程创建。<br><img src="/images/20190716QT/14.png" alt="14.png"></p>
<p>创建完工程后，QT Creator中的目录如下：<br><img src="/images/20190716QT/15.png" alt="15.png"></p>
<h3 id="程序的编写"><a href="#程序的编写" class="headerlink" title="程序的编写"></a>程序的编写</h3><p>在上图中，<code>widget.ui</code>是整个的显示页面程序，<code>widget.cpp</code>是页面程序中的处理方法，<code>main.cpp</code>包含了主函数。</p>
<p>双击<code>widget.ui</code>，打开如下界面，找到<code>Display Widgets</code>下的<code>Label</code>，用鼠标左键按住拖动至右面的框中，将显示文本修改为“Hello QT and CMAKE!”。</p>
<p>双击<code>widget.cpp</code>，修改程序如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_widget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent) :</span><br><span class="line">    <span class="built_in">QWidget</span>(parent),</span><br><span class="line">    <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//窗体标题</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">setWindowTitle</span>(<span class="string">&quot;Qt5.1 窗体应用&quot;</span>);</span><br><span class="line">    <span class="comment">//窗体 ICO 图片,如图不起别名,后缀直接写图片全名。</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">setWindowIcon</span>(<span class="built_in">QIcon</span>(<span class="string">&quot;:/new/prefix1/ico.png&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>点击上图中左下角的第一个绿色三角，即可运行程序。至此，使用QT Creator创建了第一个界面程序。</p>
<h3 id="使用cmake对程序进行编译"><a href="#使用cmake对程序进行编译" class="headerlink" title="使用cmake对程序进行编译"></a>使用cmake对程序进行编译</h3><p>在HelloWorld工程中右键，添加新文件，选择<code>General</code> -&gt; <code>Empty File</code>，命名为<code>CMakeLists.txt</code>，如图所示。<br><img src="/images/20190716QT/16.png" alt="16.png"></p>
<p>并在<code>CMakeLists.txt</code>中添加如下内容：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cmake_minimum_required</span>(VERSION <span class="number">2.8</span><span class="number">.11</span> FATAL_ERROR)</span><br><span class="line"><span class="built_in">project</span>(QtHelloWorld)</span><br><span class="line"><span class="built_in">set</span>(CMAKE_INCLUDE_CURRENT_DIR ON)</span><br><span class="line"><span class="built_in">set</span>(CMAKE_AUTOMOC ON)</span><br><span class="line"><span class="built_in">set</span>(CMAKE_AUTOUIC ON)</span><br><span class="line"><span class="built_in">set</span>(CMAKE_AUTORCC ON)</span><br><span class="line"></span><br><span class="line"><span class="built_in">find_package</span>(Qt5 REQUIRED Widgets)</span><br><span class="line"> <span class="built_in">qt5_wrap_cpp</span>( MOC widget.h)</span><br><span class="line"><span class="built_in">qt5_wrap_ui</span>( UIC widget.ui)</span><br><span class="line"><span class="built_in">add_executable</span>(QtHelloWorld main.cpp widget.cpp widget.h widget.ui $&#123;RESOURCE_DIR&#125;)</span><br><span class="line"><span class="built_in">target_link_libraries</span>(QtHelloWorld Qt5::Widgets)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>接下来尝试使用cmake对工程进行编译。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cd 工程所在目录</span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">make -j2</span><br><span class="line">./QtHelloWorld</span><br></pre></td></tr></table></figure>
<h1 id="程序运行结果"><a href="#程序运行结果" class="headerlink" title="程序运行结果"></a>程序运行结果</h1><p><img src="/images/20190716QT/08.png" alt="08.png"></p>
<p>至此，完成了通过QT Creator创建工程并通过IDE直接运行或者使用cmake来编译运行工程的示例。</p>
]]></content>
      <categories>
        <category>工科生的基本功</category>
        <category>快乐码农</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>C++</tag>
        <tag>QT</tag>
      </tags>
  </entry>
  <entry>
    <title>C++中配置文件的读取</title>
    <url>/archives/22984.html</url>
    <content><![CDATA[<blockquote>
<p>开发环境：Ubuntu16.04 LTS。 需要的库：Eigen3。 额外的文件:inifile.h、inifile.cpp。</p>
</blockquote>
<span id="more"></span>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>使用配置文件是提高项目开发效率的一个重要方法。如果不使用配置文件，当我们需要不断调整程序中的参数时，就会造成每修改一次参数需要进行一次编译的情况，<br>而当项目代码很庞大时，编译往往会耗费大量时间。为了节约项目开发时间，提高工作效率，就需要将待调整参数存放至配置文件中。这样做，在修改时只需要修改配<br>置文件中的参数，而不必对整个项目进行编译。</p>
<h1 id="完整程序源码"><a href="#完整程序源码" class="headerlink" title="完整程序源码"></a>完整程序源码</h1><p>完整程序目录入下图所示：<br><img src="/images/20190711/iniTestTree.PNG" alt="iniTestTree"></p>
<h2 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cmake_minimum_required</span>(VERSION <span class="number">2.8</span>)</span><br><span class="line"><span class="built_in">project</span>(iniTest)   </span><br><span class="line"><span class="built_in">set</span> (CMAKE_CXX_STANDARD <span class="number">11</span>) </span><br><span class="line"><span class="built_in">include_directories</span>(	<span class="string">&quot;./include/&quot;</span></span><br><span class="line">			<span class="string">&quot;/usr/include/eigen3&quot;</span>	)</span><br><span class="line"><span class="built_in">add_executable</span>(iniTest main.cpp ./src/inifile.cpp) </span><br></pre></td></tr></table></figure>
<p>说明：</p>
<ol>
<li><p><code>include_directories</code>是指添加所需头文件的目录，一些常规文件可自行添加，本例中为添加<code>inifile.h</code>需要加上”./include/“，还需手动添加”/usr/include/eigen3”。</p>
</li>
<li><p><code>add_executable</code>是指添加需要执行的cpp文件，注意需要将不同文件夹下的源文件包含进来。</p>
</li>
</ol>
<h2 id="test-ini"><a href="#test-ini" class="headerlink" title="test.ini"></a>test.ini</h2><p>配置文件test.ini内容如下，主要包含两个标题，每个标题下有两个标签。(标题、标签说法可能不专业)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">[ObjectType]</span><br><span class="line"># Obj0</span><br><span class="line">minHSV0=<span class="number">0</span> <span class="number">15</span> <span class="number">10</span></span><br><span class="line">maxHSV0=<span class="number">10</span> <span class="number">25</span> <span class="number">20</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[Motion]</span><br><span class="line">CoeffJv=<span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1.5</span> <span class="number">1.5</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line">Pos=<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span></span><br></pre></td></tr></table></figure>
<h2 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;inifile.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Eigen/Core&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Eigen/Dense&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> inifile;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Eigen;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Vector7d Matrix<span class="string">&lt;double, 7, 1&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Vector3d Matrix<span class="string">&lt;double, 3, 1&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Vector7d a;</span><br><span class="line">  a &lt;&lt; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>;</span><br><span class="line">  Vector7d &amp;coeffJv = a;</span><br><span class="line">  Vector3d b;</span><br><span class="line">  Vector3d &amp;minHSV0 = b;</span><br><span class="line">  IniFile ini;</span><br><span class="line">  <span class="type">int</span> rtn;</span><br><span class="line">  string file = <span class="string">&quot;../test.ini&quot;</span>;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span>* fileName = file.<span class="built_in">c_str</span>();</span><br><span class="line">  <span class="keyword">if</span> (ini.<span class="built_in">load</span>(fileName) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;No such file!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;Load file succeed!&quot;</span> &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;\na : &quot;</span> &lt;&lt; a.<span class="built_in">transpose</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">  string str1, str2;</span><br><span class="line">  string title = <span class="string">&quot;Motion&quot;</span>;</span><br><span class="line">  string label = <span class="string">&quot;CoeffJv&quot;</span>;</span><br><span class="line">  str1 = ini.<span class="built_in">getStringValue</span>(title.<span class="built_in">c_str</span>(), label.<span class="built_in">c_str</span>(), rtn);</span><br><span class="line"></span><br><span class="line">  title = <span class="string">&quot;ObjectType&quot;</span>;</span><br><span class="line">  label = <span class="string">&quot;minHSV0&quot;</span>;</span><br><span class="line">  str2 = ini.<span class="built_in">getStringValue</span>(title.<span class="built_in">c_str</span>(), label.<span class="built_in">c_str</span>(), rtn);</span><br><span class="line">  <span class="keyword">if</span> (rtn != <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">sscanf</span>(str1.<span class="built_in">c_str</span>(), <span class="string">&quot;%lf %lf %lf %lf %lf %lf %lf&quot;</span>, &amp;coeffJv[<span class="number">0</span>],</span><br><span class="line">  	 &amp;coeffJv[<span class="number">1</span>], &amp;coeffJv[<span class="number">2</span>], &amp;coeffJv[<span class="number">3</span>],</span><br><span class="line">	 &amp;coeffJv[<span class="number">4</span>], &amp;coeffJv[<span class="number">5</span>], &amp;coeffJv[<span class="number">6</span>]);</span><br><span class="line">  <span class="built_in">sscanf</span>(str2.<span class="built_in">c_str</span>(), <span class="string">&quot;%lf %lf %lf&quot;</span>, &amp;minHSV0[<span class="number">0</span>],</span><br><span class="line">  	 &amp;minHSV0[<span class="number">1</span>], &amp;minHSV0[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;\nCoeffJv : &quot;</span> &lt;&lt; coeffJv.<span class="built_in">transpose</span>() &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;\na: &quot;</span> &lt;&lt; a.<span class="built_in">transpose</span>() &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;\nminHSV0 : &quot;</span> &lt;&lt; minHSV0.<span class="built_in">transpose</span>() &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;\nb: &quot;</span> &lt;&lt; b.<span class="built_in">transpose</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<p>1.Q：为什么要用引用？</p>
<p>  A：用引用的目的是为了最后通过<code>sscanf</code>函数将配置文件中的参数写到自己的变量中，不用引用会写入失败。<code>sscanf</code>函数的用法目前尚不十分明确，因此这里只是<br>     给出一种能用的方法。使用引用时必须初始化，因此首先定义了a、b两个变量，引用只是这两个变量的两个别名，修改引用的值会改掉a、b的值。</p>
<p>2.Q：c_str()的作用是啥？</p>
<p>  A：c_str()是string类下的一个函数，返回类型是<code>const char*</code>，这个类型在load()、getStringValue()类型中都需要用到。而直接用<code>const char*</code>来定义，将会<br>     导致字符串无法修改。</p>
<p>3.Q：transpose()的作用为何？</p>
<p>  A：这是matrix中的一个函数，将矩阵进行转置。</p>
<h2 id="include-inifile-h"><a href="#include-inifile-h" class="headerlink" title="../include/inifile.h"></a>../include/inifile.h</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _INIFILE_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _INIFILE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">namespace</span> inifile</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> RET_OK  = <span class="number">0</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> RET_ERR = <span class="number">-1</span>;</span><br><span class="line"><span class="type">const</span> string delim = <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">IniItem</span> &#123;</span><br><span class="line">    string key;</span><br><span class="line">    string value;</span><br><span class="line">    string comment;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">IniSection</span> &#123;</span><br><span class="line">    <span class="keyword">typedef</span> vector&lt;IniItem&gt;::iterator iterator;</span><br><span class="line">    <span class="function">iterator <span class="title">begin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items.<span class="built_in">begin</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">iterator <span class="title">end</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items.<span class="built_in">end</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    string name;</span><br><span class="line">    string comment;</span><br><span class="line">    vector&lt;IniItem&gt; items;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IniFile</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">IniFile</span>();</span><br><span class="line">    ~<span class="built_in">IniFile</span>() &#123;</span><br><span class="line">        <span class="built_in">release</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> map&lt;string, IniSection *&gt;::iterator iterator;</span><br><span class="line"></span><br><span class="line">    <span class="function">iterator <span class="title">begin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sections_.<span class="built_in">begin</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">iterator <span class="title">end</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sections_.<span class="built_in">end</span>();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/* 打开并解析一个名为fname的INI文件 */</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">load</span><span class="params">(<span class="type">const</span> string &amp;fname)</span></span>;</span><br><span class="line">    <span class="comment">/*将内容保存到当前文件*/</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/*将内容另存到一个名为fname的文件*/</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">saveas</span><span class="params">(<span class="type">const</span> string &amp;fname)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*获取section段第一个键为key的值,并返回其string型的值*/</span></span><br><span class="line">    <span class="function">string <span class="title">getStringValue</span><span class="params">(<span class="type">const</span> string &amp;section, <span class="type">const</span> string &amp;key, <span class="type">int</span> &amp;ret)</span></span>;</span><br><span class="line">    <span class="comment">/*获取section段第一个键为key的值,并返回其int型的值*/</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getIntValue</span><span class="params">(<span class="type">const</span> string &amp;section, <span class="type">const</span> string &amp;key, <span class="type">int</span> &amp;ret)</span></span>;</span><br><span class="line">    <span class="comment">/*获取section段第一个键为key的值,并返回其double型的值*/</span></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getDoubleValue</span><span class="params">(<span class="type">const</span> string &amp;section, <span class="type">const</span> string &amp;key, <span class="type">int</span> &amp;ret)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*获取section段第一个键为key的值,并将值赋到value中*/</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getValue</span><span class="params">(<span class="type">const</span> string &amp;section, <span class="type">const</span> string &amp;key, string &amp;value)</span></span>;</span><br><span class="line">    <span class="comment">/*获取section段第一个键为key的值,并将值赋到value中,将注释赋到comment中*/</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getValue</span><span class="params">(<span class="type">const</span> string &amp;section, <span class="type">const</span> string &amp;key, string &amp;value, string &amp;comment)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*获取section段所有键为key的值,并将值赋到values的vector中*/</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getValues</span><span class="params">(<span class="type">const</span> string &amp;section, <span class="type">const</span> string &amp;key, vector&lt;string&gt; &amp;values)</span></span>;</span><br><span class="line">    <span class="comment">/*获取section段所有键为key的值,并将值赋到values的vector中,,将注释赋到comments的vector中*/</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getValues</span><span class="params">(<span class="type">const</span> string &amp;section, <span class="type">const</span> string &amp;key, vector&lt;string&gt; &amp;value, vector&lt;string&gt; &amp;comments)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">hasSection</span><span class="params">(<span class="type">const</span> string &amp;section)</span> </span>;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">hasKey</span><span class="params">(<span class="type">const</span> string &amp;section, <span class="type">const</span> string &amp;key)</span> </span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取section段的注释 */</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getSectionComment</span><span class="params">(<span class="type">const</span> string &amp;section, string &amp;comment)</span></span>;</span><br><span class="line">    <span class="comment">/* 设置section段的注释 */</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">setSectionComment</span><span class="params">(<span class="type">const</span> string &amp;section, <span class="type">const</span> string &amp;comment)</span></span>;</span><br><span class="line">    <span class="comment">/*获取注释标记符列表*/</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">getCommentFlags</span><span class="params">(vector&lt;string&gt; &amp;flags)</span></span>;</span><br><span class="line">    <span class="comment">/*设置注释标记符列表*/</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setCommentFlags</span><span class="params">(<span class="type">const</span> vector&lt;string&gt; &amp;flags)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*同时设置值和注释*/</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">setValue</span><span class="params">(<span class="type">const</span> string &amp;section, <span class="type">const</span> string &amp;key, <span class="type">const</span> string &amp;value, <span class="type">const</span> string &amp;comment = <span class="string">&quot;&quot;</span>)</span></span>;</span><br><span class="line">    <span class="comment">/*删除段*/</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">deleteSection</span><span class="params">(<span class="type">const</span> string &amp;section)</span></span>;</span><br><span class="line">    <span class="comment">/*删除特定段的特定参数*/</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">deleteKey</span><span class="params">(<span class="type">const</span> string &amp;section, <span class="type">const</span> string &amp;key)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/*去掉str后面的c字符*/</span></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">trimleft</span><span class="params">(string &amp;str, <span class="type">char</span> c = <span class="string">&#x27; &#x27;</span>)</span></span>;</span><br><span class="line">    <span class="comment">/*去掉str前面的c字符*/</span></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">trimright</span><span class="params">(string &amp;str, <span class="type">char</span> c = <span class="string">&#x27; &#x27;</span>)</span></span>;</span><br><span class="line">    <span class="comment">/*去掉str前面和后面的空格符,Tab符等空白符*/</span></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">trim</span><span class="params">(string &amp;str)</span></span>;</span><br><span class="line">    <span class="comment">/*将字符串str按分割符delim分割成多个子串*/</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function">IniSection *<span class="title">getSection</span><span class="params">(<span class="type">const</span> string &amp;section = <span class="string">&quot;&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">release</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getline</span><span class="params">(string &amp;str, FILE *fp)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isComment</span><span class="params">(<span class="type">const</span> string &amp;str)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">parse</span><span class="params">(<span class="type">const</span> string &amp;content, string &amp;key, string &amp;value, <span class="type">char</span> c = <span class="string">&#x27;=&#x27;</span>)</span></span>;</span><br><span class="line">    <span class="comment">//for dubug</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    map&lt;string, IniSection *&gt; sections_;</span><br><span class="line">    string fname_;</span><br><span class="line">    vector&lt;string&gt; flags_;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<h2 id="src-inifile-cpp"><a href="#src-inifile-cpp" class="headerlink" title="../src/inifile.cpp"></a>../src/inifile.cpp</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _INIFILE_CPP</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _INIFILE_CPP</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;inifile.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> inifile &#123;</span><br><span class="line"><span class="type">int</span> INI_BUF_SIZE = <span class="number">2048</span>;</span><br><span class="line"></span><br><span class="line">IniFile::<span class="built_in">IniFile</span>() &#123;</span><br><span class="line">  flags_.<span class="built_in">push_back</span>(<span class="string">&quot;#&quot;</span>);</span><br><span class="line">  flags_.<span class="built_in">push_back</span>(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">IniFile::parse</span><span class="params">(<span class="type">const</span> string &amp;content, string &amp;key, string &amp;value, <span class="type">char</span> c<span class="comment">/*= &#x27;=&#x27;*/</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> len = content.<span class="built_in">length</span>();</span><br><span class="line">  <span class="keyword">while</span> (i &lt; len &amp;&amp; content[i] != c) &#123;</span><br><span class="line">    ++i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (i &gt;= <span class="number">0</span> &amp;&amp; i &lt; len) &#123;</span><br><span class="line">    key = <span class="built_in">string</span>(content.<span class="built_in">c_str</span>(), i);</span><br><span class="line">    value = <span class="built_in">string</span>(content.<span class="built_in">c_str</span>() + i + <span class="number">1</span>, len - i - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">trim</span>(key);</span><br><span class="line">    <span class="built_in">trim</span>(value);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">IniFile::getline</span><span class="params">(string &amp;str, FILE *fp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> plen = <span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> buf_size = INI_BUF_SIZE * <span class="built_in">sizeof</span>(<span class="type">char</span>);</span><br><span class="line"></span><br><span class="line">  <span class="type">char</span> *buf = (<span class="type">char</span> *) <span class="built_in">malloc</span>(buf_size);</span><br><span class="line">  <span class="type">char</span> *pbuf = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="type">char</span> *p = buf;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (buf == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;no enough memory!exit!\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(buf, <span class="number">0</span>, buf_size);</span><br><span class="line">  <span class="type">int</span> total_size = buf_size;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">fgets</span>(p, buf_size, fp) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    plen = <span class="built_in">strlen</span>(p);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (plen &gt; <span class="number">0</span> &amp;&amp; p[plen - <span class="number">1</span>] != <span class="string">&#x27;\n&#x27;</span> &amp;&amp; !<span class="built_in">feof</span>(fp)) &#123;</span><br><span class="line"></span><br><span class="line">      total_size = <span class="built_in">strlen</span>(buf) + buf_size;</span><br><span class="line">      pbuf = (<span class="type">char</span> *)<span class="built_in">realloc</span>(buf, total_size);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (pbuf == <span class="literal">NULL</span>) &#123;</span><br><span class="line">	<span class="built_in">free</span>(buf);</span><br><span class="line">	<span class="built_in">fprintf</span>(stderr, <span class="string">&quot;no enough memory!exit!\n&quot;</span>);</span><br><span class="line">	<span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      buf = pbuf;</span><br><span class="line"></span><br><span class="line">      p = buf + <span class="built_in">strlen</span>(buf);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  str = buf;</span><br><span class="line">  <span class="built_in">free</span>(buf);</span><br><span class="line">  buf = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">return</span> str.<span class="built_in">length</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">IniFile::load</span><span class="params">(<span class="type">const</span> string &amp;filename)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">release</span>();</span><br><span class="line">  fname_ = filename;</span><br><span class="line">  IniSection *section = <span class="literal">NULL</span>;</span><br><span class="line">  FILE *fp = <span class="built_in">fopen</span>(filename.<span class="built_in">c_str</span>(), <span class="string">&quot;r&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  string line;</span><br><span class="line">  string comment;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//增加默认段section = new IniSection();</span></span><br><span class="line">  sections_[<span class="string">&quot;&quot;</span>] = section;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">getline</span>(line, fp) &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">trimright</span>(line, <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="built_in">trimright</span>(line, <span class="string">&#x27;\r&#x27;</span>);</span><br><span class="line">    <span class="built_in">trim</span>(line);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">isComment</span>(line)) &#123;</span><br><span class="line">      string subline;</span><br><span class="line">      string tmp = line;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; flags_.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        subline = line.<span class="built_in">substr</span>(<span class="number">0</span>, line.<span class="built_in">find</span>(flags_[i]));</span><br><span class="line">        line = subline;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      comment += tmp.<span class="built_in">substr</span>(line.<span class="built_in">length</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">trim</span>(line);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (line.<span class="built_in">length</span>() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (line[<span class="number">0</span>] == <span class="string">&#x27;[&#x27;</span>) &#123;</span><br><span class="line">      section = <span class="literal">NULL</span>;</span><br><span class="line">      <span class="type">int</span> index = line.<span class="built_in">find_first_of</span>(<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (index == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">fclose</span>(fp);</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;没有找到匹配的]\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="type">int</span> len = index - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (len &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;段为空\n&quot;</span>);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function">string <span class="title">s</span><span class="params">(line, <span class="number">1</span>, len)</span></span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">getSection</span>(s.<span class="built_in">c_str</span>()) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">fclose</span>(fp);</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;此段已存在:%s\n&quot;</span>, s.<span class="built_in">c_str</span>());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      section = <span class="keyword">new</span> <span class="built_in">IniSection</span>();</span><br><span class="line">      sections_[s] = section;</span><br><span class="line"></span><br><span class="line">      section-&gt;name = s;</span><br><span class="line">      section-&gt;comment = comment;</span><br><span class="line">      comment = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isComment</span>(line)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (comment != <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">        comment += delim + line;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        comment = line;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      string key, value;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">parse</span>(line, key, value)) &#123;</span><br><span class="line">        IniItem item;</span><br><span class="line">        item.key = key;</span><br><span class="line">        item.value = value;</span><br><span class="line">        item.comment = comment;</span><br><span class="line"></span><br><span class="line">        section-&gt;items.<span class="built_in">push_back</span>(item);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;解析参数失败[%s]\n&quot;</span>, line.<span class="built_in">c_str</span>());</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      comment = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">fclose</span>(fp);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">IniFile::save</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">saveas</span>(fname_); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">IniFile::saveas</span><span class="params">(<span class="type">const</span> string &amp;filename)</span> </span>&#123;</span><br><span class="line">  string data = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (iterator sect = sections_.<span class="built_in">begin</span>(); sect != sections_.<span class="built_in">end</span>(); ++sect) &#123;</span><br><span class="line">    <span class="keyword">if</span> (sect-&gt;second-&gt;comment != <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">      data += sect-&gt;second-&gt;comment;</span><br><span class="line">      data += delim;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sect-&gt;first != <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">      data += <span class="built_in">string</span>(<span class="string">&quot;[&quot;</span>) + sect-&gt;first + <span class="built_in">string</span>(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">      data += delim;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (IniSection::iterator item = sect-&gt;second-&gt;items.<span class="built_in">begin</span>();</span><br><span class="line">         item != sect-&gt;second-&gt;items.<span class="built_in">end</span>(); ++item) &#123;</span><br><span class="line">      <span class="keyword">if</span> (item-&gt;comment != <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">        data += item-&gt;comment;</span><br><span class="line">        data += delim;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      data += item-&gt;key + <span class="string">&quot;=&quot;</span> + item-&gt;value;</span><br><span class="line">      data += delim;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  FILE *fp = <span class="built_in">fopen</span>(filename.<span class="built_in">c_str</span>(), <span class="string">&quot;w&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fwrite</span>(data.<span class="built_in">c_str</span>(), <span class="number">1</span>, data.<span class="built_in">length</span>(), fp);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fclose</span>(fp);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IniSection *<span class="title">IniFile::getSection</span><span class="params">(<span class="type">const</span> string &amp;section <span class="comment">/*=&quot;&quot;*/</span>)</span> </span>&#123;</span><br><span class="line">  iterator it = sections_.<span class="built_in">find</span>(section);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (it != sections_.<span class="built_in">end</span>()) &#123;</span><br><span class="line">    <span class="keyword">return</span> it-&gt;second;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">IniFile::getStringValue</span><span class="params">(<span class="type">const</span> string &amp;section, <span class="type">const</span> string &amp;key,</span></span></span><br><span class="line"><span class="params"><span class="function">                               <span class="type">int</span> &amp;ret)</span> </span>&#123;</span><br><span class="line">  string value, comment;</span><br><span class="line"></span><br><span class="line">  ret = <span class="built_in">getValue</span>(section, key, value, comment);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">IniFile::getIntValue</span><span class="params">(<span class="type">const</span> string &amp;section, <span class="type">const</span> string &amp;key, <span class="type">int</span> &amp;ret)</span> </span>&#123;</span><br><span class="line">  string value, comment;</span><br><span class="line"></span><br><span class="line">  ret = <span class="built_in">getValue</span>(section, key, value, comment);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">atoi</span>(value.<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">IniFile::getDoubleValue</span><span class="params">(<span class="type">const</span> string &amp;section, <span class="type">const</span> string &amp;key,</span></span></span><br><span class="line"><span class="params"><span class="function">                               <span class="type">int</span> &amp;ret)</span> </span>&#123;</span><br><span class="line">  string value, comment;</span><br><span class="line"></span><br><span class="line">  ret = <span class="built_in">getValue</span>(section, key, value, comment);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">atof</span>(value.<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">IniFile::getValue</span><span class="params">(<span class="type">const</span> string &amp;section, <span class="type">const</span> string &amp;key, string &amp;value)</span> </span>&#123;</span><br><span class="line">  string comment;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">getValue</span>(section, key, value, comment);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">IniFile::getValue</span><span class="params">(<span class="type">const</span> string &amp;section, <span class="type">const</span> string &amp;key, string &amp;value,</span></span></span><br><span class="line"><span class="params"><span class="function">                      string &amp;comment)</span> </span>&#123;</span><br><span class="line">  IniSection *sect = <span class="built_in">getSection</span>(section);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (sect != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (IniSection::iterator it = sect-&gt;<span class="built_in">begin</span>(); it != sect-&gt;<span class="built_in">end</span>(); ++it) &#123;</span><br><span class="line">      <span class="keyword">if</span> (it-&gt;key == key) &#123;</span><br><span class="line">        value = it-&gt;value;</span><br><span class="line">        comment = it-&gt;comment;</span><br><span class="line">        <span class="keyword">return</span> RET_OK;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> RET_ERR;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">IniFile::getValues</span><span class="params">(<span class="type">const</span> string &amp;section, <span class="type">const</span> string &amp;key,</span></span></span><br><span class="line"><span class="params"><span class="function">                       vector&lt;string&gt; &amp;values)</span> </span>&#123;</span><br><span class="line">  vector&lt;string&gt; comments;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">getValues</span>(section, key, values, comments);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">IniFile::getValues</span><span class="params">(<span class="type">const</span> string &amp;section, <span class="type">const</span> string &amp;key,</span></span></span><br><span class="line"><span class="params"><span class="function">                       vector&lt;string&gt; &amp;values, vector&lt;string&gt; &amp;comments)</span> </span>&#123;</span><br><span class="line">  string value, comment;</span><br><span class="line"></span><br><span class="line">  values.<span class="built_in">clear</span>();</span><br><span class="line">  comments.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line">  IniSection *sect = <span class="built_in">getSection</span>(section);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (sect != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (IniSection::iterator it = sect-&gt;<span class="built_in">begin</span>(); it != sect-&gt;<span class="built_in">end</span>(); ++it) &#123;</span><br><span class="line">      <span class="keyword">if</span> (it-&gt;key == key) &#123;</span><br><span class="line">        value = it-&gt;value;</span><br><span class="line">        comment = it-&gt;comment;</span><br><span class="line"></span><br><span class="line">        values.<span class="built_in">push_back</span>(value);</span><br><span class="line">        comments.<span class="built_in">push_back</span>(comment);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (values.<span class="built_in">size</span>() ? RET_OK : RET_ERR);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">IniFile::hasSection</span><span class="params">(<span class="type">const</span> string &amp;section)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="built_in">getSection</span>(section) != <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">IniFile::hasKey</span><span class="params">(<span class="type">const</span> string &amp;section, <span class="type">const</span> string &amp;key)</span> </span>&#123;</span><br><span class="line">  IniSection *sect = <span class="built_in">getSection</span>(section);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (sect != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (IniSection::iterator it = sect-&gt;<span class="built_in">begin</span>(); it != sect-&gt;<span class="built_in">end</span>(); ++it) &#123;</span><br><span class="line">      <span class="keyword">if</span> (it-&gt;key == key) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">IniFile::getSectionComment</span><span class="params">(<span class="type">const</span> string &amp;section, string &amp;comment)</span> </span>&#123;</span><br><span class="line">  comment = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  IniSection *sect = <span class="built_in">getSection</span>(section);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (sect != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    comment = sect-&gt;comment;</span><br><span class="line">    <span class="keyword">return</span> RET_OK;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> RET_ERR;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">IniFile::setSectionComment</span><span class="params">(<span class="type">const</span> string &amp;section, <span class="type">const</span> string &amp;comment)</span> </span>&#123;</span><br><span class="line">  IniSection *sect = <span class="built_in">getSection</span>(section);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (sect != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    sect-&gt;comment = comment;</span><br><span class="line">    <span class="keyword">return</span> RET_OK;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> RET_ERR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">IniFile::setValue</span><span class="params">(<span class="type">const</span> string &amp;section, <span class="type">const</span> string &amp;key,</span></span></span><br><span class="line"><span class="params"><span class="function">                      <span class="type">const</span> string &amp;value, <span class="type">const</span> string &amp;comment <span class="comment">/*=&quot;&quot;*/</span>)</span> </span>&#123;</span><br><span class="line">  IniSection *sect = <span class="built_in">getSection</span>(section);</span><br><span class="line"></span><br><span class="line">  string comt = comment;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (comt != <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">    comt = flags_[<span class="number">0</span>] + comt;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (sect == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    sect = <span class="keyword">new</span> <span class="built_in">IniSection</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sect == <span class="literal">NULL</span>) &#123;</span><br><span class="line">      <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;no enough memory!\n&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sect-&gt;name = section;</span><br><span class="line">    sections_[section] = sect;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (IniSection::iterator it = sect-&gt;<span class="built_in">begin</span>(); it != sect-&gt;<span class="built_in">end</span>(); ++it) &#123;</span><br><span class="line">    <span class="keyword">if</span> (it-&gt;key == key) &#123;</span><br><span class="line">      it-&gt;value = value;</span><br><span class="line">      it-&gt;comment = comt;</span><br><span class="line">      <span class="keyword">return</span> RET_OK;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// not found key</span></span><br><span class="line">  IniItem item;</span><br><span class="line">  item.key = key;</span><br><span class="line">  item.value = value;</span><br><span class="line">  item.comment = comt;</span><br><span class="line"></span><br><span class="line">  sect-&gt;items.<span class="built_in">push_back</span>(item);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> RET_OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">IniFile::getCommentFlags</span><span class="params">(vector&lt;string&gt; &amp;flags)</span> </span>&#123; flags = flags_; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">IniFile::setCommentFlags</span><span class="params">(<span class="type">const</span> vector&lt;string&gt; &amp;flags)</span> </span>&#123; flags_ = flags; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">IniFile::deleteSection</span><span class="params">(<span class="type">const</span> string &amp;section)</span> </span>&#123;</span><br><span class="line">  IniSection *sect = <span class="built_in">getSection</span>(section);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (sect != <span class="literal">NULL</span>) &#123;</span><br><span class="line"></span><br><span class="line">    sections_.<span class="built_in">erase</span>(section);</span><br><span class="line">    <span class="keyword">delete</span> sect;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">IniFile::deleteKey</span><span class="params">(<span class="type">const</span> string &amp;section, <span class="type">const</span> string &amp;key)</span> </span>&#123;</span><br><span class="line">  IniSection *sect = <span class="built_in">getSection</span>(section);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (sect != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (IniSection::iterator it = sect-&gt;<span class="built_in">begin</span>(); it != sect-&gt;<span class="built_in">end</span>(); ++it) &#123;</span><br><span class="line">      <span class="keyword">if</span> (it-&gt;key == key) &#123;</span><br><span class="line">        sect-&gt;items.<span class="built_in">erase</span>(it);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">IniFile::release</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  fname_ = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (iterator i = sections_.<span class="built_in">begin</span>(); i != sections_.<span class="built_in">end</span>(); ++i) &#123;</span><br><span class="line">    <span class="keyword">delete</span> i-&gt;second;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  sections_.<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">IniFile::isComment</span><span class="params">(<span class="type">const</span> string &amp;str)</span> </span>&#123;</span><br><span class="line">  <span class="type">bool</span> ret = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; flags_.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">    <span class="type">size_t</span> k = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (str.<span class="built_in">length</span>() &lt; flags_[i].<span class="built_in">length</span>()) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; flags_[i].<span class="built_in">length</span>(); ++k) &#123;</span><br><span class="line">      <span class="keyword">if</span> (str[k] != flags_[i][k]) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (k == flags_[i].<span class="built_in">length</span>()) &#123;</span><br><span class="line">      ret = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// for debug</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">IniFile::print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;filename:[%s]\n&quot;</span>, fname_.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;flags_:[&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; flags_.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; %s &quot;</span>, flags_[i].<span class="built_in">c_str</span>());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;]\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (iterator it = sections_.<span class="built_in">begin</span>(); it != sections_.<span class="built_in">end</span>(); ++it) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;section:[%s]\n&quot;</span>, it-&gt;first.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;comment:[%s]\n&quot;</span>, it-&gt;second-&gt;comment.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (IniSection::iterator i = it-&gt;second-&gt;items.<span class="built_in">begin</span>();</span><br><span class="line">         i != it-&gt;second-&gt;items.<span class="built_in">end</span>(); ++i) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;    comment:%s\n&quot;</span>, i-&gt;comment.<span class="built_in">c_str</span>());</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;    parm   :%s=%s\n&quot;</span>, i-&gt;key.<span class="built_in">c_str</span>(), i-&gt;value.<span class="built_in">c_str</span>());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">IniFile::trimleft</span><span class="params">(string &amp;str, <span class="type">char</span> c <span class="comment">/*=&#x27; &#x27;*/</span>)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// trim head</span></span><br><span class="line">  <span class="type">int</span> len = str.<span class="built_in">length</span>();</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (str[i] == c &amp;&amp; str[i] != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">    i++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">    str = <span class="built_in">string</span>(str, i, len - i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">IniFile::trimright</span><span class="params">(string &amp;str, <span class="type">char</span> c <span class="comment">/*=&#x27; &#x27;*/</span>)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// trim tail</span></span><br><span class="line">  <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> len = str.<span class="built_in">length</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (str[i] != c) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  str = <span class="built_in">string</span>(str, <span class="number">0</span>, i + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">IniFile::trim</span><span class="params">(string &amp;str)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// trim head</span></span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> len = str.<span class="built_in">length</span>();</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">isspace</span>(str[i]) &amp;&amp; str[i] != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">    i++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">    str = <span class="built_in">string</span>(str, i, len - i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// trim tail</span></span><br><span class="line">  len = str.<span class="built_in">length</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">isspace</span>(str[i])) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  str = <span class="built_in">string</span>(str, <span class="number">0</span>, i + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="comment">// namespace inifile</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="程序运行结果"><a href="#程序运行结果" class="headerlink" title="程序运行结果"></a>程序运行结果</h1><p><img src="/images/20190711/iniTest.PNG" alt="iniTest"></p>
]]></content>
      <categories>
        <category>工科生的基本功</category>
        <category>快乐码农</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Win10下完美安装MathType的方法</title>
    <url>/archives/56794.html</url>
    <content><![CDATA[<p>请注意：因为Mathtype7.4的方法有时间限制，过了之后就不再完美，只好退而求其次用6.9的版本。</p>
<span id="more"></span>
<h1 id="MathType6-9安装方法："><a href="#MathType6-9安装方法：" class="headerlink" title="MathType6.9安装方法："></a>MathType6.9安装方法：</h1><p>下载地址：</p>
<p><a href="http://www.mathtype.cn/xiazai.html">MathType 6.9b 简体中文版官方下载</a></p>
<p>这个安装后无法使用输入注册码的方法进行激活，需要在试用期到期后删除注册表以延长试用期，方法如下：</p>
<p>1.按<code>Win+R</code>键，打开运行；</p>
<p>2.输入regedit，打开注册表；</p>
<p>3.依次找到 <code>HKEY_CURRENT_USER</code> -&gt; <code>Software</code> -&gt; <code>Install Options</code>，右侧显示<code>Options6.9</code>，将其删除。如下图所示。<br><img src="/images/20190621/DeleteMathTypeRegedit.PNG" alt="DeleteMathTypeRegedit"></p>
<p>4.重新打开MathType。</p>
<p>————————————————————————-分割线————————————————————————-</p>
<h1 id="MathType7-4主要参考以下内容："><a href="#MathType7-4主要参考以下内容：" class="headerlink" title="MathType7.4主要参考以下内容："></a>MathType7.4主要参考以下内容：</h1><p><strong>7.4的方法已经不再实用，注册码在2019-6-30到期了，而一旦到期就无法再次使用</strong></p>
<p><a href="http://www.itxiaozhong.com/1963.html">数学公式编辑器 MathType 7.4.2.480 for Windows</a>(重点看蓝色字部分)<br><img src="/images/20190621/InstallMathType.PNG" alt="InstallMathType"></p>
<p><a href="https://jingyan.baidu.com/article/dca1fa6f1a75aaf1a44052f1.html">win10系统怎么禁用某个程序联网，阻止软件联网</a></p>
<p>软件安装包已保存至网盘，相关链接和操作方法已在微信中收藏(标签为MathType7.4的安装方法)</p>
]]></content>
      <categories>
        <category>工科生的基本功</category>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Win10下安装Linux双系统的方法</title>
    <url>/archives/22360.html</url>
    <content><![CDATA[<blockquote>
<p>由于工作，往往不仅需要Windows系统，而且需要Linux系统，装虚拟机对内存是个很大的考验，因此选择装双系统。</p>
</blockquote>
<span id="more"></span>
<h1 id="系统安装的主要流程"><a href="#系统安装的主要流程" class="headerlink" title="系统安装的主要流程"></a>系统安装的主要流程</h1><p>笔者目前已win10为主要操作系统，Ubuntu为第二操作系统，且由于win10安装简便，因此本文介绍的是基于win10的双系统安装方法，主要流程为：</p>
<ol>
<li>安装win10；</li>
<li>安装Ubuntu16.04。</li>
</ol>
<h1 id="win10安装方法"><a href="#win10安装方法" class="headerlink" title="win10安装方法"></a>win10安装方法</h1><p>关于Windows的安装方法，已经非常熟悉了，这里只做个说明，详细的可参考最后一部分列出的网站。Win10安装的主要方法有两种：</p>
<p>1.U盘安装。使用U盘安装需要区分电脑的BIOS是UEFI类型还是Legacy类型，如果是Legacy类型（适用于古老的电脑，例如笔者2013年买的笔记本），需要用软碟通或者大白菜之类的做U盘启动的系统盘；如果是UEFI类型的，截止现在（2019年），能买到的新机器都是UEFI类型的，这种的不需要用软件来将U盘做成系统盘，只需将系统镜像文件（.iso）拷贝到U盘中并解压。然后在开机时，选择U盘boot，开始装机。</p>
<blockquote>
<p>注意：关于UEFI类型的，笔者没有实际装过win10，因为Ubuntu16.04是这么干的，所以猜测win10也可以。</p>
</blockquote>
<p>2.电脑硬盘直接安装。将系统镜像.iso文件拷贝到非安装分区并解压，然后开始装机。</p>
<h1 id="Ubuntu的安装方法"><a href="#Ubuntu的安装方法" class="headerlink" title="Ubuntu的安装方法"></a>Ubuntu的安装方法</h1><p>关于Ubuntu的安装方法其实和win10差不太多，这里只强调两点：</p>
<ol>
<li><p>对于新手，在分区的时候，不需要选择那么多分区，只需选择swap分区和/分区。swap分区选择主分区，大小为内存大小；/分区选逻辑分区，剩余大小全分配给它即可。</p>
</li>
<li><p>对于挂载位置的选择(整个页面最最最下面的下拉菜单)，直接默认选择在整个硬盘上即可，就是后面会标注你硬盘大小的那个选项。</p>
</li>
</ol>
<p>其他操作着重参考<br><a href="https://blog.csdn.net/romandion/article/details/79031519?utm_source=app">UEFI模式安装Win10和Linux双系统</a>。</p>
<h1 id="主要参考"><a href="#主要参考" class="headerlink" title="主要参考"></a>主要参考</h1><ol>
<li><p><a href="https://blog.csdn.net/romandion/article/details/79031519?utm_source=app">UEFI模式安装Win10和Linux双系统</a></p>
</li>
<li><p><a href="https://blog.csdn.net/qq_28919991/article/details/83989958?utm_source=app">笔记本实现Win10+Ubuntu双系统(超详细)</a></p>
</li>
<li><p><a href="https://www.jianshu.com/p/00ddf43a4f16">win10安装ubuntu16.04双系统</a></p>
</li>
<li><p><a href="https://blog.csdn.net/weixin_44585583/article/details/90704452">win10下Ubuntu 双系统安装</a></p>
</li>
<li><p><a href="https://www.jianshu.com/p/4be29762227f">window10和ubuntu16.04双系统装好后无法打开win10解决办法</a></p>
</li>
<li><p><a href="https://blog.csdn.net/u010472596/article/details/85100474">ubuntu16.04下无法打开win10的处理过程</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>工科生的基本功</category>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>Linux</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux环境下Emacs的配置方法</title>
    <url>/archives/20916.html</url>
    <content><![CDATA[<blockquote>
<p>为提升自己的开发速度，因此需要熟练掌握一种编辑器，Emacs就是备受推崇的一种优秀编辑器。本文主要针对对Emacs了解较少的初学者，所使用系统环境是Ubuntu16.04。<br>本文主要参考了<a href="https://github.com/linweiyang/emacs.starter">Emacs初学者配置文件</a>，但是该文最后所描述的rtags安装有些问题，这是由于其所需的clang版本和rtags版本不匹配造成的。</p>
</blockquote>
<span id="more"></span>
<h1 id="Emacs简介"><a href="#Emacs简介" class="headerlink" title="Emacs简介"></a>Emacs简介</h1><p>Emacs是一款优秀的编辑器。</p>
<h1 id="Emacs的安装"><a href="#Emacs的安装" class="headerlink" title="Emacs的安装"></a>Emacs的安装</h1><p>1.cmake的安装：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sudo apt install cmake          <span class="comment">//安装cmake是因为后面需要用它来编译</span></span><br></pre></td></tr></table></figure>
<p>2.对于Ubuntu LTS 14.04或以上，安装指令如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:kelleyk/emacs</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install emacs26		<span class="comment">//获取高版本的emacs</span></span><br></pre></td></tr></table></figure>
<p>3.Emacs初学者配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/linweiyang/emacs.starter   	</span><br><span class="line">cd emacs.starter</span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure>
<blockquote>
<p>至此，Emacs已经安装完毕。</p>
</blockquote>
<h1 id="个性化配置"><a href="#个性化配置" class="headerlink" title="个性化配置"></a>个性化配置</h1><blockquote>
<p>由于自己常用的是C++编程，因此进行以下适合程序员的一些配置。</p>
</blockquote>
<h2 id="一、安装Google-Docs的C-语法检查工具"><a href="#一、安装Google-Docs的C-语法检查工具" class="headerlink" title="一、安装Google Docs的C++语法检查工具"></a>一、安装Google Docs的C++语法检查工具</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">sudo apt-get install python-pip</span><br><span class="line">sudo pip install cpplint		</span><br></pre></td></tr></table></figure>
<h2 id="二、安装Zeal工具"><a href="#二、安装Zeal工具" class="headerlink" title="二、安装Zeal工具"></a>二、安装Zeal工具</h2><p>安装Zeal工具并下载语言函数手册库：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">sudo apt-get install zeal</span><br></pre></td></tr></table></figure></p>
<p>使用方法：快捷键为<code>Ctrl+c D</code></p>
<h2 id="三、rtags工具的安装"><a href="#三、rtags工具的安装" class="headerlink" title="三、rtags工具的安装"></a>三、rtags工具的安装</h2><p>rtags能使开发者在emacs中快速查找变量的声明和定义，是开发的利器！安装rtags要求clang的版本与其相匹配。截止笔者写稿之前，用LLVM/Clang的6.0版本可以与其相配。安装方法如下(首先新打开一个终端)：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install llvm-6.0-dev clang-6.0 libclang-6.0-dev openssl</span><br><span class="line">git clone --recursive https://github.com/Andersbakken/rtags.git</span><br><span class="line">cd rtags</span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">source ~/.bashrc </span><br><span class="line">cmake ..</span><br><span class="line">make -j2</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
<p>其中<code>make -j2</code>是采用双核编译。</p>
<p>这里，需要注意的是，如果以上过程无法安装rtags，应该是clang版本与rtags版本不匹配造成的，可用如下方法来查看：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">clang --version</span><br><span class="line">sudo apt-get remove clang* llvm*   <span class="comment">//移除旧版本</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install llvm<span class="number">-6.0</span>-dev clang<span class="number">-6.0</span> libclang<span class="number">-6.0</span>-dev openssl	<span class="comment">//安装新版本</span></span><br></pre></td></tr></table></figure>
<p>rtags的使用方法：快捷键为<code>Crtl+c r</code>，等待两三秒后，右侧将显示所有的快捷键，这里只给出前三个：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Ctrl+c r ,   <span class="comment">//当前变量参考</span></span><br><span class="line">Ctrl+c r .   <span class="comment">//当前变量定义</span></span><br><span class="line">Ctrl+c r /   <span class="comment">//当前变量所有参考</span></span><br></pre></td></tr></table></figure>
<h2 id="四、CapsLock与Ctrl键的交换"><a href="#四、CapsLock与Ctrl键的交换" class="headerlink" title="四、CapsLock与Ctrl键的交换"></a>四、CapsLock与Ctrl键的交换</h2><p>由于Emacs严重依赖于快捷键组合，或者说严重依赖于<code>Ctrl</code>键，因此为了方便操作，需要将<code>CapsLock</code>与<code>Ctrl</code>两个按键进行交换。方法如下：</p>
<p>1.新打开一个终端，输入</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">emacs .xmodmap		<span class="comment">//用emacs打开xmodmap文件，如没有，将创建</span></span><br></pre></td></tr></table></figure>
<p>2.在.xmodmap中输入</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">remove Lock = Caps_Lock</span><br><span class="line">remove Control = Control_L</span><br><span class="line">keysym Control_L = Caps_Lock</span><br><span class="line">keysym Caps_Lock = Control_L</span><br><span class="line">add Lock = Caps_Lock</span><br><span class="line">add Control = Control_L</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Emacs中粘贴的快捷键是<code>Ctrl+Y</code>。</p>
</blockquote>
<p>3.在终端中执行：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">xmodmap .xmodmap</span><br></pre></td></tr></table></figure>
<blockquote>
<p>至此，完成了Emacs环境的配置，但是对于Emacs的快捷键，还需要花很多时间去摸索和学习。</p>
</blockquote>
]]></content>
      <categories>
        <category>工科生的基本功</category>
        <category>快乐码农</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>C++中vector的用法</title>
    <url>/archives/20080.html</url>
    <content><![CDATA[<blockquote>
<p>由于项目需要，发现自己对C++中vector的用法不是很清楚，因此写一篇博文来介绍vector的基础用法。</p>
</blockquote>
<span id="more"></span>
<h1 id="vector简介"><a href="#vector简介" class="headerlink" title="vector简介"></a>vector简介</h1><p>vector是表现为可变长数组的序列容器。vector使用连续的存储位置来存储元素，也就是说，vector可以使用一个指针上的偏移量来访问其元素，就像数组一样。但与数组不同的是，它们的大小可以动态变化，其存储由容器自动处理。 因此，vector相比于数组，vector消耗更多的内存，以换取管理存储和动态增长的能力。 </p>
<p>与其它的动态序列容器(deque, lists, forward_lists)相比，vector可以非常高效的访问其元素，就像数组一样，并且可以相对高效的增加和删除元素从其末尾。对于在其它位置插入或删除元素的操作，它的性能要比其它的要差，而且其迭代器和引用的一致性相比lists和forward_lists要差。</p>
<h1 id="vector的基本操作"><a href="#vector的基本操作" class="headerlink" title="vector的基本操作"></a>vector的基本操作</h1><p>1.头文件的调用：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>2.创建一个名为vec的vector对象：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; vec;	<span class="comment">//以下的示例如无特殊声明，均以vec作为示例</span></span><br></pre></td></tr></table></figure>
<p>3.向量大小：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vec.<span class="built_in">size</span>();</span><br></pre></td></tr></table></figure>
<p>4.向量清空：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vec.<span class="built_in">clear</span>();		</span><br></pre></td></tr></table></figure>
<p>5.尾部插入数字：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vec.<span class="built_in">push_back</span>(a);</span><br></pre></td></tr></table></figure>
<p>6.使用下标访问元素：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cout &lt;&lt; vec[<span class="number">0</span>] &lt;&lt; endl;		<span class="comment">//索引号从0开始</span></span><br></pre></td></tr></table></figure>
<p>7.插入元素：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vec.<span class="built_in">insert</span>( vec.<span class="built_in">begin</span>() + i, a );		<span class="comment">//在第i个元素后面插入a</span></span><br></pre></td></tr></table></figure>
<p>8.删除单个元素：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vec.<span class="built_in">erase</span>(vec.<span class="built_in">begin</span>()+<span class="number">2</span>);		<span class="comment">//删除第3个元素</span></span><br></pre></td></tr></table></figure>
<p>9.删除区间元素：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vec.<span class="built_in">erase</span>(vec.<span class="built_in">begin</span>()+i,vec.<span class="built_in">end</span>()+j);		<span class="comment">//删除区间[i,j-1];区间从0开始</span></span><br></pre></td></tr></table></figure>
<p>10.使用迭代器访问元素：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;span style=<span class="string">&quot;font-size:18px;&quot;</span>&gt;vector&lt;<span class="type">int</span>&gt;::iterator it;</span><br><span class="line"><span class="keyword">for</span>(it=vec.<span class="built_in">begin</span>();it!=vec.<span class="built_in">end</span>();it++)</span><br><span class="line">    cout&lt;&lt;*it&lt;&lt;endl;&lt;/span&gt;</span><br></pre></td></tr></table></figure>
<h1 id="Eigen库的安装"><a href="#Eigen库的安装" class="headerlink" title="Eigen库的安装"></a>Eigen库的安装</h1><p>由于C++对矩阵的运算支持不是很好，而Eigen库则是一个简便的用于矩阵运算的库，因此需要安装它。在Ubuntu中安装该库的指令如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libeigen3-dev</span><br></pre></td></tr></table></figure>
<p>安装完成后，该库的路径为<code>/usr/include/eigen3</code>,使用时注意调用该路径。</p>
<h1 id="vector的元素为自定义类型"><a href="#vector的元素为自定义类型" class="headerlink" title="vector的元素为自定义类型"></a>vector的元素为自定义类型</h1><p>由于项目需要，需要自己定义一个类型作为vector的元素。该段代码的目的是保存两组六轴机器人速度于一个vector中，Ubuntu环境下的<code>main.cpp</code>代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Eigen/Core&gt;</span>					<span class="comment">// Eigen库</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Eigen/Dense&gt;</span>					<span class="comment">// 稠密矩阵的代数运算</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Eigen;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Vector6d Matrix<span class="string">&lt;double,6,1&gt;</span>		<span class="comment">// Eigen中所有向量和矩阵都是Eigen::Matrix，它是一个模板类，前三个参数为：数据类型，行，列</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Vector6d robotJointVel1;							<span class="comment">// 声明第1组六轴机器人关节速度</span></span><br><span class="line">	Vector6d robotJointVel2;							<span class="comment">// 声明第2组六轴机器人关节速度</span></span><br><span class="line">	vector&lt;Vector6d&gt; vel;								<span class="comment">// 声明一个vector用来存放两组速度</span></span><br><span class="line">	robotJointVel1 &lt;&lt; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.04</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>;	            <span class="comment">// 定义第一组速度</span></span><br><span class="line">	robotJointVel2 &lt;&lt; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>;  		        <span class="comment">// 定义第2组速度</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Size of vel: &quot;</span> &lt;&lt; vel.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Add the 1st data in the end of the vector...&quot;</span> &lt;&lt; endl;</span><br><span class="line">	vel.<span class="built_in">push_back</span>(robotJointVel1);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;robotJointVel1: &quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; vel[<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Size of vel: &quot;</span> &lt;&lt; vel.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Add the 2nd data in the end of the vector...&quot;</span> &lt;&lt; endl;</span><br><span class="line">	vel.<span class="built_in">push_back</span>(robotJointVel2);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;robotJointVel1: &quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; vel[<span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Size of vel: &quot;</span> &lt;&lt; vel.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>CMakeLists.txt</code>代码如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cmake_minimum_required</span>(VERSION <span class="number">3.1</span><span class="number">.0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">project</span>(VectorTest)</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>(SRC_LIST main.cpp $&#123;SRC_FILES&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">include_directories</span>(<span class="string">&quot;/usr/include/eigen3&quot;</span>)			# 调用eigen3库</span><br><span class="line"></span><br><span class="line"><span class="built_in">add_executable</span>(VectorTest main.cpp $&#123;SRC_LIST&#125;)</span><br></pre></td></tr></table></figure></p>
<p>程序运行结果如下：<br><img src="/images/20190609/VectorTest.png" alt="VectorTest"></p>
<blockquote>
<p>本文主要介绍vector的基础用法，关于Eigen库将在以后介绍，本文的参考如下：<br><a href="https://blog.csdn.net/msdnwolaile/article/details/52708144">C++ vector用法（详解！！函数，实现）</a><br><a href="https://blog.csdn.net/Snow_Me/article/details/77150998">vector详解</a></p>
</blockquote>
]]></content>
      <categories>
        <category>工科生的基本功</category>
        <category>快乐码农</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux编程环境的配置</title>
    <url>/archives/45747.html</url>
    <content><![CDATA[<blockquote>
<p>本文主要介绍在Linux下实现C++的开发环境搭建，此前应当已经装好Linux系统，笔者所用系统是Ubuntu 16.04。</p>
</blockquote>
<span id="more"></span>
<h1 id="开发流程简介"><a href="#开发流程简介" class="headerlink" title="开发流程简介"></a>开发流程简介</h1><p>在Linux环境下实现C++的开发，主要是在Terminal中通过命令行来实现。在这里以“Hello World”为例进行说明。(该代码可以从根目录下<code>code</code>文件中找到)。</p>
<p>1.建立文件夹，用来存放整个工程文件。例如在<code>Docuements</code>目录下新建文件夹<code>HelloWorld</code>；</p>
<p>2.在<code>HelloWorld</code>中新建文件<code>main.cpp</code>；</p>
<p>3.<code>main.cpp</code>中编写代码：</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;Hello World!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;i = &quot;</span> &lt;&lt; i &lt;&lt; std::endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4.在<code>HelloWorld</code>中新建文件<code>CMakeLists.txt</code>，并在其中编写以下内容：</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">cmake_minimum_required</span>(<span class="variable constant_">VERSION</span> <span class="number">3.1</span><span class="number">.0</span>)         #设置版本号</span><br><span class="line"><span class="title class_">Project</span>(<span class="title class_">Hello</span>)                                #设置工程名为 <span class="title class_">Hello</span></span><br><span class="line"><span class="title function_">set</span>(<span class="variable constant_">SRC_LIST</span> main.<span class="property">cpp</span> $&#123;<span class="variable constant_">SRC_FILES</span>&#125;)           #设定源文件集，将main.<span class="property">cpp</span>添加到工程</span><br><span class="line"><span class="title function_">add_executable</span>(<span class="title class_">Hello</span> main.<span class="property">cpp</span> $&#123;<span class="variable constant_">SRC_LIST</span>&#125;)    #添加可执行程序文件</span><br></pre></td></tr></table></figure>
<p>5.用Terminal执行下列语句，打开当前目录(<code>#</code>后为注释)：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cd <span class="title class_">Documents</span></span><br><span class="line">cd <span class="title class_">HelloWorld</span>  #打开当前目录，也可以在想要打开的目录下右击鼠标，选择<span class="string">`Open in Terminal`</span></span><br></pre></td></tr></table></figure>
<p>6.执行下列语句进行编译：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mkdir build  #创建编译文件夹</span><br><span class="line">cd build     #打开编译文件夹</span><br><span class="line">cmake ..     #寻找<span class="title class_">CMakeLists</span>，..表示返回上一目录</span><br><span class="line">make         #编译</span><br></pre></td></tr></table></figure>
<p>7.编译成功后，运行可执行程序文件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">./<span class="title class_">Hello</span></span><br></pre></td></tr></table></figure>
<p>8.在Terminal中查看显示结果。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Hello</span> <span class="title class_">World</span>!</span><br><span class="line">i = <span class="number">0</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>本文旨在介绍Ubuntu中C++的开发流程，其中CMakeLists.txt的编写决定了开发者能否完成大型工程项目的编程开发，在以后的博文中再逐渐给出介绍。</p>
</blockquote>
]]></content>
      <categories>
        <category>工科生的基本功</category>
        <category>快乐码农</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware的联网、外设、复制粘贴问题</title>
    <url>/archives/50695.html</url>
    <content><![CDATA[<blockquote>
<p>Edit this file in Safari for iPad. Unfortunately, it doesn’t support Chinese input.本文中的环境为Ubuntu16.04LTS + VMware10.</p>
</blockquote>
<span id="more"></span>
<h1 id="Connecting-Internet"><a href="#Connecting-Internet" class="headerlink" title="Connecting Internet"></a>Connecting Internet</h1><p>Click “virtual machine” tag —&gt; settings —&gt; Ethernet —&gt; Choose the first choice(Bridge…) in “Network connection”</p>
<p>click “Edit” tag —&gt; “Virtual Network adapter” —&gt; “VMnet0” —&gt; choose “Bridged(…)” and select your computer’s wireless card —&gt; OK</p>
<p>中文版：</p>
<p>1.在VMware的标签栏中，依次点击：虚拟机 —&gt; 设置 —&gt; 网络 —&gt; 桥接，如下图所示：</p>
<p><img src="/images/20190520/VMnet1.png" alt="VMnet1"></p>
<p>2.在VMware的标签栏中，依次点击：编辑 —&gt; 虚拟网络适配器 —&gt; VMnet0 —&gt; 桥接模式 —&gt; 桥接到笔记本电脑的网卡，如下图所示：</p>
<p><img src="/images/20190520/VMnet2.png" alt="VMnet2"></p>
<blockquote>
<p>参考链接：<a href="https://blog.csdn.net/demonson/article/details/79276621">VMware Workstation虚拟机不能联网的解决办法</a><br>参考链接：<a href="https://blog.csdn.net/zhyulo/article/details/78730009">VMware虚拟机不能联网的解决办法</a></p>
</blockquote>
<h1 id="Connecting-USB"><a href="#Connecting-USB" class="headerlink" title="Connecting USB"></a>Connecting USB</h1><p>In win10: right click “This PC” —&gt; Management —&gt; Service —&gt; Find “VMware USB…” —&gt; right click “Manual Operation” —&gt; “Launch”.</p>
<p>In VMware: click “Virtual Machine” tag —&gt; Mobile Device —&gt; choose your USB device.</p>
<p>中文版：</p>
<p>1.在win10桌面，依次点击：计算机 —&gt; 管理 —&gt; 服务 —&gt; VMware USB，右键点击启动，如下图所示：</p>
<p><img src="/images/20190520/VMUSB.png" alt="VMUSB"></p>
<p>2.在VMware的标签栏中，依次点击：虚拟机 —&gt; 可移动设备 —&gt; 选择自己的USB设备。</p>
<h1 id="复制粘贴问题"><a href="#复制粘贴问题" class="headerlink" title="复制粘贴问题"></a>复制粘贴问题</h1><p>在虚拟机中装好Ubuntu后，会出现无法将Win10中的文件或文字复制到Ubuntu中的情况，需要在Ubuntu中进行设置才可以。</p>
<p>1.打开虚拟机，运行系统后，在VMware中点击”虚拟机” —&gt; “安装VMware Tools”，往往会出现下图所示的错误：</p>
<p><img src="/images/20190520/VMerror.png" alt="VMerror"></p>
<p>上图所示的错误并不代表我们无法安装，只是需要一些操作步骤，如下所示；</p>
<p>2.点击：虚拟机 —&gt; 设置，将VMware安装目录中的linux.iso文件添加到DVD驱动器中，添加完毕后会在侧边栏出现DVD图标，如下图所示：</p>
<p><img src="/images/20190520/VMTools.png" alt="VMTools"></p>
<p>3.打开侧边栏会出现一个DVD的图标，打开，找到一个”xx.tar”的压缩包；</p>
<p><img src="/images/20190520/VMToolsPackage.png" alt="VMToolsPackage"></p>
<p>4.将该压缩包解压到期望目录下；</p>
<p>5.从期望目录中打开解压后的文件夹，并在解压后的文件夹中右键打开终端，运行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sudo ./vmware-install.<span class="property">pl</span></span><br></pre></td></tr></table></figure>
<p>6.在终端中一路回车，直至安装完成，重新启动虚拟机，即可。</p>
<p>PS:如果经过上述的操作还是没办法实现的话，可以尝试在Ubuntu的Terminal中输入以下命令：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sudo apt-get autoremove open-vm-tools</span><br><span class="line">sudo apt-get install open-vm-tools</span><br><span class="line">sudo apt-get install open-vm-tools-desktop</span><br></pre></td></tr></table></figure>
<p>执行完上述指令后，关机，再重新以管理员身份启动VMware，即可。</p>
]]></content>
      <categories>
        <category>工科生的基本功</category>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>VMware</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记本电脑选型</title>
    <url>/archives/36616.html</url>
    <content><![CDATA[<blockquote>
<p>笔记本电脑总是看个不停，又记不下来，还是有个文件来“收纳”吧。</p>
</blockquote>
<span id="more"></span>
<p>华为笔记本系列：（处理器没有后缀均表示低压版CPU）</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>型号</th>
<th>Matebook X Pro</th>
<th>Matebook X</th>
<th>Matebook 14</th>
<th>Matebook 13</th>
<th>Matebook D</th>
</tr>
</thead>
<tbody>
<tr>
<td>CPU</td>
<td>i5-8265 / i7-8 / i7-8</td>
<td>i5-7 / i7-7</td>
<td>i5-8/i5-8/i7-8</td>
<td>i5-8 / i7-8</td>
<td>i7</td>
</tr>
<tr>
<td>显卡</td>
<td>MX250,2G</td>
<td>HD620</td>
<td>UHD620 / 2GMX250 / 2GMX250</td>
<td>MX150,2G</td>
<td>MX150,2G</td>
</tr>
<tr>
<td>内存</td>
<td>8G / 8G / 16G</td>
<td>8G/8G</td>
<td>8G/8G/8G</td>
<td>8G/8G</td>
<td>16G</td>
</tr>
<tr>
<td>硬盘</td>
<td>512G / 512G / 1T</td>
<td>256G / 512G</td>
<td>512G / 512G / 512G</td>
<td>512G / 512</td>
<td>256G</td>
</tr>
<tr>
<td>屏幕</td>
<td>3k,13.9寸</td>
<td>2k,13寸</td>
<td>2k,14寸</td>
<td>2k,13寸</td>
<td>2k，15.6</td>
</tr>
<tr>
<td>重量</td>
<td>1.33kg</td>
<td>1.05kg</td>
<td>1.53kg</td>
<td>1.3kg</td>
<td>1.9kg</td>
</tr>
<tr>
<td>售价</td>
<td>8999 / 9999 / 13999</td>
<td>7188/8688</td>
<td>5699 / 5999 / 6999</td>
<td>5699 /6399</td>
<td>6488</td>
</tr>
</tbody>
</table>
</div>
<p>其他：（处理器没有后缀均表示低压版CPU）</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>型号</th>
<th>Dell燃7000</th>
<th>小新Air</th>
<th>雷蛇灵刃潜行版13</th>
<th>DELL XPS13</th>
<th>Surface PRO 6</th>
</tr>
</thead>
<tbody>
<tr>
<td>CPU</td>
<td>i7-8</td>
<td>i7-8</td>
<td>i7-8</td>
<td>i7-8</td>
<td>i7</td>
</tr>
<tr>
<td>显卡</td>
<td>UHD620</td>
<td>2G，MX150</td>
<td>UHD620</td>
<td>UHD620</td>
<td>UHD620</td>
</tr>
<tr>
<td>内存</td>
<td>16G</td>
<td>16G</td>
<td>16G</td>
<td>16G</td>
<td>16G</td>
</tr>
<tr>
<td>硬盘</td>
<td>512G / 1T</td>
<td>256G/512G</td>
<td>512G</td>
<td>512G</td>
<td>512G</td>
</tr>
<tr>
<td>屏幕</td>
<td>1080p,13.3寸</td>
<td>1080p,13.3寸</td>
<td>1080p,13.3寸</td>
<td>1080p,13.3寸</td>
<td>2k，12.3</td>
</tr>
<tr>
<td>重量</td>
<td>1.33kg</td>
<td>1.25kg</td>
<td>1.3kg</td>
<td>1.2kg</td>
<td>0.8kg(无键盘)</td>
</tr>
<tr>
<td>售价</td>
<td>7399 / 8799</td>
<td>5699/6599</td>
<td>9999</td>
<td>9998</td>
<td>13878(含键盘等外加1000左右)</td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>茶余裨谈</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>茶余裨谈</tag>
      </tags>
  </entry>
  <entry>
    <title>远程仓库与本地仓库的同步</title>
    <url>/archives/58743.html</url>
    <content><![CDATA[<blockquote>
<p>本文说明如何将远程仓库同步到本地，以及本地仓库添加文件后如何上传至远程仓库。</p>
</blockquote>
<span id="more"></span>
<p>根据前面几篇博文的介绍，一般来讲我们在远程(即浏览器端)操作GitHub上建立的仓库即可。<br>但是，在远程仓库中添加和删除文件很不方便。因此，需要通过一些指令来将远程仓库更新至<br>本地仓库(即电脑硬盘中存储的仓库)，添加文件后再将本地仓库上传至远程仓库。</p>
<h3 id="远程仓库的同步"><a href="#远程仓库的同步" class="headerlink" title="远程仓库的同步"></a>远程仓库的同步</h3><p>如果本地还没有该仓库，则需要从远程仓库clone到本地。Windows10系统用<code>windows+X</code>快捷键按出一个菜单栏并选择<code>Windows PowerShell(管理员)</code>，<br>打开首先将当前路径修改至期望存放该仓库的路径，然后使用<code>git clone</code>命令将其克隆至本地。具体命令如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> e:       <span class="comment">#打开E盘，准备在根目录下存放该仓库</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/ColaInLibrary/colainlibrary.github.com     <span class="comment">#将仓库的URL地址添加在命令后即可同步至本地</span></span><br><span class="line"><span class="built_in">cd</span> colainlibrary.github.com       <span class="comment">#打开同步后的本地仓库</span></span><br></pre></td></tr></table></figure>
<p>三条指令执行完后便从PowerShell中打开了本地仓库。如果在执行<code>git clone</code>时失败，那应该是<code>git</code>没有安装的原因，<br>那么需要下载<a href="https://gitforwindows.org/">Git for Windows</a>.安装后可以在文件浏览器中打开本地文件夹<code>colainlibrary.github.com</code>，<br>再点右键，选择<code>Git Bash Here</code>，则可以直接使用<code>git</code>命令，而不需要像 PowerShell一样先打开到本地文件路径。</p>
<p>如果是已经创建好的本地仓库，从命令行中打开本地仓库后，执行以下命令来将远程仓库同步至本地。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure>
<h3 id="Git中登录GitHub账号"><a href="#Git中登录GitHub账号" class="headerlink" title="Git中登录GitHub账号"></a>Git中登录GitHub账号</h3><p>为了实现本地仓库同步至远程仓库，往往需要在Git中登录自己的账号，相应的命令为：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git config --global user.email <span class="string">&quot;1901151471@qq.com&quot;</span>    <span class="comment">#登录邮箱</span></span><br><span class="line">git config --global user.name <span class="string">&quot;ColaInLibrary&quot;</span>         <span class="comment">#登录用户名</span></span><br></pre></td></tr></table></figure>
<h3 id="本地仓库同步至远程"><a href="#本地仓库同步至远程" class="headerlink" title="本地仓库同步至远程"></a>本地仓库同步至远程</h3><p>当在本地仓库中添加图片(或者其他文件)至路径<code>E:\colainlibrary.github.com\assests\images</code>后，需要将本地仓库使用如下指令更新至远程仓库。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git status    <span class="comment">#查看当前状态</span></span><br><span class="line">git add *     <span class="comment">#将所有文件添加至缓冲区，也可以使用 git add \assests\images\文件名.jpg添加单个文件</span></span><br><span class="line">git commit -m <span class="string">&quot;image update&quot;</span>     <span class="comment">#引号中是在说本次更新内容</span></span><br><span class="line">git push      <span class="comment">#将在缓冲区的文件push到远程仓库</span></span><br></pre></td></tr></table></figure>
<h3 id="远程仓库文件的删除"><a href="#远程仓库文件的删除" class="headerlink" title="远程仓库文件的删除"></a>远程仓库文件的删除</h3><p>在远程仓库中删除文件十分不便，因此可以先将远程仓库同步至本地仓库再将其删除。以删除远程仓库中的文件夹<code>target</code>为例，首先打开本地仓库的文件夹，然后执行下列命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git pull    <span class="comment">#远程仓库同步</span></span><br><span class="line">git <span class="built_in">rm</span> -r --cached target     <span class="comment">#删除target文件夹</span></span><br><span class="line">git commit -m <span class="string">&quot;删除target文件夹&quot;</span>     <span class="comment">#引号中是说明本次更新内容</span></span><br><span class="line">git push      <span class="comment">#将本次更新push到远程仓库</span></span><br></pre></td></tr></table></figure>
<p>值得一提的是，经过以上操作，远程仓库中的文件夹<code>target</code>被删除掉了，本地仓库中的不会被删掉。</p>
]]></content>
      <categories>
        <category>工科生的基本功</category>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Library</tag>
      </tags>
  </entry>
  <entry>
    <title>MATLAB函数———newrb</title>
    <url>/archives/48200.html</url>
    <content><![CDATA[<blockquote>
<p>MATLAB函数学习篇之newrb函数。</p>
</blockquote>
<span id="more"></span>
<h2 id="newrb函数介绍"><a href="#newrb函数介绍" class="headerlink" title="newrb函数介绍"></a>newrb函数介绍</h2><p><code>newrb</code>是MATLAB中用于建立径向基函数神经网络(radial basis function network，RBF network)的函数，函数的两种调用格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net = newrb</span><br><span class="line">[net,tr] = newrb(P,T,goal,spread,MN,DF)</span><br></pre></td></tr></table></figure>
<p>径向基网可用于近似函数。 newrb函数将神经元添加到径向基网络的隐藏层，直到它满足指定的均方误差目标。</p>
<p>第一种函数调用方式<code>net = newrb</code>用于创建一个新的网络，matlab给出各种参数，不实用。</p>
<p>常用的是第二种调用方式<code>[net,tr] = newrb(P,T,goal,spread,MN,DF)</code>，其中的参数含义如下：</p>
<ul>
<li>P — $R \times Q$维矩阵，Q维输入向量</li>
<li>T — $S \times Q$维矩阵，Q维目标类向量</li>
<li>goal — 均方误差目标(MSE),默认为0</li>
<li>spread — 径向基函数(RBF)速度，默认为1</li>
<li>MN — 最大神经元数，默认为Q</li>
<li>DF — 在显示之间添加的神经元数量，默认为25</li>
<li>返回值为径向基网络。</li>
</ul>
<p>速度(spread)越大，函数逼近越平滑。 速度太大意味着需要很多神经元才能适应快速变化的功能。<br>太小的速度意味着需要许多神经元来适应平滑的功能，并且网络可能不会很好地概括。<br>使用不同的速度调用newrb以找到给定问题的最佳值。</p>
<h2 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h2><p>MATLAB给出的<a href="https://ww2.mathworks.cn/help/deeplearning/examples/radial-basis-approximation.html?searchHighlight=newrb&amp;s_tid=doc_srchtitle">官方示例程序</a>或者在MATLAB命令窗口输入以下命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openExample(&#x27;nnet/demorb1&#x27;)</span><br></pre></td></tr></table></figure>
<p>另外从YouTube上搜<code>newrb</code>找到的一个例程如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">clear;</span><br><span class="line">clc;</span><br><span class="line">close all;</span><br><span class="line">x = linspace(0,4*pi,3000);</span><br><span class="line">y = (sin(x) + cos(x) + tanh(x)) + rand(1,3000);</span><br><span class="line">net = newrb(x,y,0.1,1,100,10);</span><br><span class="line">view(net);</span><br><span class="line">result = sim(net,x);</span><br><span class="line">scatter(x,y);</span><br><span class="line">hold on;</span><br><span class="line">plot(x,result,&#x27;LineWidth&#x27;,2,&#x27;MarkerSize&#x27;,10);</span><br><span class="line">R = regression(y,result)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工科生的基本功</category>
        <category>快乐码农</category>
      </categories>
      <tags>
        <tag>Library</tag>
        <tag>MATLAB</tag>
      </tags>
  </entry>
  <entry>
    <title>标题插入超链接</title>
    <url>/archives/37327.html</url>
    <content><![CDATA[<p>This is a link post. Clicking on the link should open <a href="http://www.google.com/">Google</a> in a new tab or window.</p>
]]></content>
      <categories>
        <category>工科生的基本功</category>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>主页显示部分内容</title>
    <url>/archives/5651.html</url>
    <content><![CDATA[<p>The following contents should be invisible in home/archive page.</p>
<span id="more"></span>
<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce eget urna vitae velit eleifend interdum at ac nisi. In nec ligula lacus. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Sed eu cursus erat, ut dapibus quam. Aliquam eleifend dolor vitae libero pharetra adipiscing. Etiam adipiscing dolor a quam tempor, eu convallis nulla varius. Aliquam sollicitudin risus a porta aliquam. Ut nec velit dolor. Proin eget leo lobortis, aliquam est sed, mollis mauris. Fusce vitae leo pretium massa accumsan condimentum. Fusce malesuada gravida lectus vel vulputate. Donec bibendum porta nibh ut aliquam.</p>
<p>Sed lorem felis, congue non fringilla eu, aliquam eu eros. Curabitur orci libero, mollis sed semper vitae, adipiscing in lectus. Aenean non egestas odio. Donec sollicitudin nisi quis lorem gravida, in pharetra mauris fringilla. Duis sit amet faucibus dolor, id aliquam neque. In egestas, odio gravida tempor dictum, mauris felis faucibus purus, sit amet commodo lacus diam vitae est. Ut ut quam eget massa semper sodales. Aenean non ipsum cursus, blandit lectus in, ornare odio. Curabitur ultrices porttitor vulputate.</p>
]]></content>
      <categories>
        <category>工科生的基本功</category>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>代码块的编写</title>
    <url>/archives/23603.html</url>
    <content><![CDATA[<p>This post is used for testing tag plugins. See <a href="http://zespia.tw/hexo/docs/tag-plugins.html">docs</a> for more info.<br><span id="more"></span></p>
<h2 id="Block-Quote"><a href="#Block-Quote" class="headerlink" title="Block Quote"></a>Block Quote</h2><h3 id="Normal-blockquote"><a href="#Normal-blockquote" class="headerlink" title="Normal blockquote"></a>Normal blockquote</h3><blockquote>
<p>Praesent diam elit, interdum ut pulvinar placerat, imperdiet at magna.</p>
</blockquote>
<h2 id="Code-Block"><a href="#Code-Block" class="headerlink" title="Code Block"></a>Code Block</h2><h3 id="Inline-code-block"><a href="#Inline-code-block" class="headerlink" title="Inline code block"></a>Inline code block</h3><p>This is a inline code block: <code>python</code>, <code>print &#39;helloworld&#39;</code>.</p>
<h3 id="Normal-code-block"><a href="#Normal-code-block" class="headerlink" title="Normal code block"></a>Normal code block</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alert(&#x27;Hello World!&#x27;);</span><br></pre></td></tr></table></figure>
<pre><code>print &quot;Hello world&quot;
</code></pre><h3 id="Highlight-code-block"><a href="#Highlight-code-block" class="headerlink" title="Highlight code block"></a>Highlight code block</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span> <span class="string">&quot;Hello world&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="Gist"><a href="#Gist" class="headerlink" title="Gist"></a>Gist</h3><script src="//gist.github.com/996818.js"></script>
]]></content>
      <categories>
        <category>工科生的基本功</category>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>个人网站的创建及NexT模板的使用</title>
    <url>/archives/7130.html</url>
    <content><![CDATA[<blockquote>
<p>这是由Cola &amp; Library打造的第一篇技术博客，旨在说明个人网站的建立过程及模板的使用方法。</p>
</blockquote>
<span id="more"></span>
<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>如果你能看到这篇博客，那么你最起码应该掌握：</p>
<ol>
<li>了解GitHub为何物？</li>
<li>使用GitHub建立个人网站的优势在哪？</li>
<li>有一个属于自己的GitHub账户。</li>
</ol>
<p>使用GitHub建立个人网站，主要有两种途经：一种是本地创建；另一种是直接在浏览器上进行操作。</p>
<p>第一种方法的麻烦之处在于，需要配置各种环境，包括ruby、jekyll或hexos、bundle等。这对于一无所知的小白，或者是不习惯使用命令行编程的新手来说无疑是一个很高的门槛。<br>虽然网上已经有各种各样的教程，但是由于大家所使用版本、操作系统的不同，出现的问题各不一样，对新手村的学徒来说这无疑会耗费大量的时间和精力，而且经过搜索亦不一定<br>能保证找到解决方案，会对初学者造成一种浓浓的挫败感。</p>
<p>相比而言，第二种方案对于新手则要简洁明了，不用考虑过多的环境配置，采用一个模板，直接在网站上进行修改，这个方案的门槛在于需要寻找一个自己喜欢的模板，并且学会如何修<br>改（当然这是在第一种方案中经过环境配置后也需要面对的困难）。</p>
<h3 id="从本地创建"><a href="#从本地创建" class="headerlink" title="从本地创建"></a>从本地创建</h3><p>这里给出Library同学在学习本地创建时，看到的比较有用的一些网站，具体的过程不再详述。</p>
<ul>
<li><a href="https://blog.csdn.net/u012168038/article/details/77715439">手把手教你在Github上建立自己的个人博客网站</a><br>（该网站简要介绍了简历个人网站所需要的内容，并给出了HelloGitHub示例）</li>
<li><a href="https://www.jianshu.com/p/88e3474cef72">在windows下安装jekyll</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html">搭建一个免费的，无限流量的Blog——github Pages和Jekyll入门</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/58229299">GitHub Pages 建立个人网站详细教程</a></li>
</ul>
<h3 id="从浏览器创建"><a href="#从浏览器创建" class="headerlink" title="从浏览器创建"></a>从浏览器创建</h3><p>上节中给出的示例均需在本地建立仓库，再上传，环境配置流程繁琐，操作过程不友好，好吧…其实就是Library同学最终有一步“bundle exec jekyll server”不知为何总是过不了，<br>因此偷懒放弃了。However，明明有简单的，为啥要避简就繁呢？</p>
<p><a href="https://www.tortorse.com/archives/978">低成本打造个人独立博客</a>清晰地介绍了从网页直接建立个人网站的方法，本网站亦是参照此方法建立的。本网站使用的模板为<br><a href="https://github.com/Simpleyyt/jekyll-theme-next">jekyll-theme-next</a>，模板的使用方法见<a href="http://theme-next.simpleyyt.com/getting-started.html">开始使用NexT</a>。</p>
<h2 id="模板的使用方法"><a href="#模板的使用方法" class="headerlink" title="模板的使用方法"></a>模板的使用方法</h2><p>按照上一节的步骤，相信已经在自己的仓库中建立好了NexT模板，接下来主要谈谈如何使用该模板，包括模板格式的修改、写博客时的一些格式问题。毕竟，满屏的英文看着还是有点头大<br>（口享！Cola现在已经去看复联4了！）</p>
<h3 id="文件的修改"><a href="#文件的修改" class="headerlink" title="文件的修改"></a>文件的修改</h3><p>使用GitHub建立的个人网站，一个很重要的配置文件是<code>_config.yml</code>，从浏览器的仓库名中打开该文件，点右上角的铅笔符号，即可进入编辑，将开始的title、author、description进行修改，即可得到属于自己的个人网站。对于博文的书写，只要打开<code>_posts</code>文件夹，点击<code>Create New File</code>，然后将新的文件命名为<code>xxxx-xx-xx-文件名.md</code>，即可对文件进行编辑，最后在页面最下方点击<code>Commit Changes</code>，即可完成博文发布。稍等片刻，就会看到自己的博文被更新在了网页上。</p>
<p>在<a href="http://theme-next.simpleyyt.com/theme-settings.html">NexT主题配置</a>中给出了如何添加标签、添加分类、设置字体等其他操作。对于标签、分类的添加，其实只需要在<code>xx.md</code><br>文件开始的两条<code>---</code>中直接修改即可，该分类或标签如果没有将自动新建。</p>
<h3 id="文章的格式"><a href="#文章的格式" class="headerlink" title="文章的格式"></a>文章的格式</h3><p>在前面的部分，已经给出了一级标题、二级标题、段落、超链接、数字/非数字表示小部分的格式示例。接下来介绍一些其他常用的格式。</p>
<h4 id="文字的格式"><a href="#文字的格式" class="headerlink" title="文字的格式"></a>文字的格式</h4><ul>
<li>文字超链接： <a href="">test link</a> </li>
<li>加粗加黑： <strong>Strong text</strong> </li>
<li>下划线：<u>Underline text</u> non elit nisl</li>
<li>文中横线： <del>Deleted text</del> tristique</li>
<li>字下加灰色背景框：<code>Sed erat diam</code></li>
<li>文字上标：我是<sup>上标</sup>。</li>
<li>文字下标：你是<sub>下标</sub>。</li>
<li>文字斜体：他是<cite>斜体</cite>。</li>
<li>专有名词：<acronym title="National Basketball Association">NBA</acronym></li>
<li>下划双虚线：<abbr title="Avenue">AVE</abbr></li>
<li>juzhong： <blockquote class="blockquote-center">blah blah blah</blockquote></li>
<li>特殊格式的文本：</li>
</ul>
<blockquote>
<p>另起一行的特殊格式。</p>
</blockquote>
<h4 id="换行定义"><a href="#换行定义" class="headerlink" title="换行定义"></a>换行定义</h4><dl><dt>定义1</dt><dd>换行定义.</dd></dl>

<h4 id="图的插入"><a href="#图的插入" class="headerlink" title="图的插入"></a>图的插入</h4><p><img src="/images/avatar.jpg" alt="avatar"></p>
<h4 id="表的插入"><a href="#表的插入" class="headerlink" title="表的插入"></a>表的插入</h4><div class="table-container">
<table>
<thead>
<tr>
<th>Table Header 1</th>
<th>Table Header 2</th>
<th>Table Header 3</th>
</tr>
</thead>
<tbody>
<tr>
<td>Division 1</td>
<td>Division 2</td>
<td>Division 3</td>
</tr>
<tr>
<td>Division 1</td>
<td>Division 2</td>
<td>Division 3</td>
</tr>
<tr>
<td>Division 1</td>
<td>Division 2</td>
<td>Division 3</td>
</tr>
</tbody>
</table>
</div>
<h4 id="程序语言的插入，以Clone-Jacman-theme为例"><a href="#程序语言的插入，以Clone-Jacman-theme为例" class="headerlink" title="程序语言的插入，以Clone Jacman theme为例:"></a>程序语言的插入，以Clone Jacman theme为例:</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/Simpleyyt/jekyll-theme-next.git</span><br><span class="line"><span class="built_in">cd</span> jekyll-theme-next</span><br></pre></td></tr></table></figure>
<h4 id="小表情emoji的插入，以及网站链接的插入"><a href="#小表情emoji的插入，以及网站链接的插入" class="headerlink" title="小表情emoji的插入，以及网站链接的插入"></a>小表情emoji的插入，以及网站链接的插入</h4><p>测试用小表情，如： :smile: .</p>
<p>更多小表情请见 :wink: : <a href="https://www.webpagefx.com/tools/emoji-cheat-sheet/">https://www.webpagefx.com/tools/emoji-cheat-sheet/</a>.</p>
<p>使用知乎的链接类型：</p>
<p><a href="https://bestzuo.cn" class="LinkCard">Sanarous的个人博客</a></p>
<p>:bowtie::smile::laughing::blush::smiley::relaxed::smirk:<br>:heart_eyes::kissing_heart::kissing_closed_eyes::flushed::relieved::satisfied::grin:</p>
<h4 id="公式的插入"><a href="#公式的插入" class="headerlink" title="公式的插入"></a>公式的插入</h4><p>从以下网站可以获得更多公式相关的内容：<br><a href="http://docs.mathjax.org/en/latest/">http://docs.mathjax.org/en/latest/</a></p>
<p>另起一行写公式</p>
<script type="math/tex; mode=display">a^2 + b^2 = c^2</script><p>如何实现的呢？用 <strong>double $</strong> 符号，如下</p>
<script type="math/tex; mode=display">a^2 + b^2 = c^2</script><p>行中公式$ sin(x^2) $可以使用<code>$$...$$</code> 得到。</p>
<p>下角标、非斜体文本的实现：</p>
<script type="math/tex; mode=display">\mathbf{X}\_{n,p} = \mathbf{A}\_{n,k} \mathbf{B}\_{k,p}</script><p>效果如下：</p>
<p>\[ \mathbf{X}_{n,p} = \mathbf{A}_{n,k} \mathbf{B}_{k,p} \]</p>
<p>公式的插入有点类似于Latex，可以考虑从MathType直接转化为Latex公式。</p>
<h4 id="高亮文本"><a href="#高亮文本" class="headerlink" title="高亮文本"></a>高亮文本</h4><ul>
<li>正常文本</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alert(&#x27;Hello World!&#x27;);</span><br></pre></td></tr></table></figure>
<ul>
<li>高亮后的文本</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">alert</span>( <span class="string">&#x27;Hello, world!&#x27;</span> );</span><br></pre></td></tr></table></figure>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span></span><br><span class="line">  puts <span class="string">&#x27;foo&#x27;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<ul>
<li>C++的高亮形式</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> arg1, <span class="type">int</span> arg2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  string str;</span><br><span class="line">  <span class="built_in">foo</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;Hello World&quot;</span> &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工科生的基本功</category>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Cola</tag>
        <tag>Library</tag>
      </tags>
  </entry>
</search>
